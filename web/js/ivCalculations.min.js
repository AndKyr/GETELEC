let inData=null;function main(){let e=io(),t,o,n,a,i,l;!function(){let e=document.getElementById("enterButton"),t=document.getElementById("helpIcon");try{t.addEventListener("click",addHelpDiv)}catch(o){console.log(o)}try{e.addEventListener("click",p)}catch(n){console.log(n)}}();let r=document.getElementById("myChart").getContext("2d"),s={radius:4,borderWidth:1,borderColor:"red",backgroundColor:"transparent"},d=Chart.controllers.line.prototype.getLabelAndValue;Chart.controllers.line.prototype.getLabelAndValue=function(e){if(-1===e){let t=this.getMeta(),o=t._pt,n=t.vScale,a=t.xScale;return{label:"",value:"x: "+Math.round(1e4*a.getValueForPixel(o.x))/1e4+", y: "+Math.round(1e4*n.getValueForPixel(o.y))/1e4}}return d.call(this,e)},Chart.Interaction.modes.interpolate=function(e,t,o){let n=t.x,a=[],i=e.getSortedVisibleDatasetMetas();for(let l=0;l<i.length;l++){let r=i[l],d=r.dataset.interpolate({x:n},"x");if(d){let c=new Chart.elements.PointElement({...d,options:{...s}});r._pt=c,a.push({element:c,index:-1,datasetIndex:r.index})}else r._pt=null}return a},Chart.register({id:"indicators",afterDraw(e){let t=e.getSortedVisibleDatasetMetas();for(let o=0;o<t.length;o++){let n=t[o];n._pt&&n._pt.draw(e.ctx)}},afterEvent(e,t){if("mouseout"===t.event.type){let o=e.getSortedVisibleDatasetMetas();for(let n=0;n<o.length;n++)o[n]._pt=null;t.changed=!0}}});let c,u=new Chart(r,{data:{datasets:[{label:"Input data points",fill:!1,lineTension:.1,borderColor:"rgb(145, 64, 2)",backgroundColor:"rgb(145, 64, 2)",type:"scatter",data:c,interpolate:!1,borderWidth:3},{label:"Fitted line",fill:!1,lineTension:0,borderColor:"rgb(0, 79, 32)",backgroundColor:"rgb(0, 79, 32)",data:[{x:.10207040421489234,y:5617.000000000002},{x:.10559087321846734,y:4214.878587327415},{x:.10911134222204238,y:3164.722642398102},{x:.1126318112256174,y:2377.5417614456496},{x:.11615228022919243,y:1787.0286368310246},{x:.11967274923276744,y:1343.742827965096},{x:.21120494332571796,y:.8305729972325626}],type:"scatter",showLine:!0,pointRadius:0,pointHoverRadius:0,interpolate:!0,borderWidth:5}]},options:{fill:!1,lineTension:.1,interaction:{intersect:!1,mode:"interpolate",axis:"x"},scales:{y:{title:{display:!0,text:"Current",font:{size:18}},type:"logarithmic",position:"bottom",ticks:{callback:function(e,t,o){return 1e6===e?"1 [MA]":1e5===e?"100 [kA]":1e4===e?"10 [kA]":1e3===e?"1 [kA]":100===e?"100 [A]":10===e?"10 [A]":1===e?"1 [A]":.1===e?"100 [mA]":.01===e?"10 [mA]":.001===e?"1 [mA]":null}}},x:{title:{text:"1 / Local Field, (V/nm)⁻\xb9]",display:!0,font:{size:18}},type:"linear",position:"bottom",ticks:{callback:function(e,t,o){return String(e).length>4&&(e=Math.round(100*e)/100),e}}}},plugins:{tooltip:{mode:"interpolate",intersect:!1,enabled:!0},title:{display:!0,text:"Fitted parameters: Radius: 50.000 nm, β: 0.017306 nm⁻\xb9, σAeff: 3.4500 nm\xb2",font:{size:24}},zoom:{zoom:{wheel:{enabled:!0},pinch:{enabled:!1},drag:{enabled:!0,modifierKey:"ctrl"},mode:"xy"},pan:{enabled:!0,mode:"xy"},limits:{x:{min:0,max:3},y:{min:-100,max:5e4}}},hover:{intercept:!1}}},tooltips:{mode:"interpolate",intersect:!0},plugins:[]});function p(){errorDivs.length>0&&(errorDivs.forEach(e=>{e.remove()}),errorDivs=[]),t=document.getElementById("voltage_in").value,o=document.getElementById("current_in").value,n=document.getElementById("work_function_in").value,a=document.getElementById("voltage_mult_in").value,i=document.getElementById("current_mult_in").value,l=document.getElementById("work_function_mult_in").value,""==t&&(t="2.413e+02, 2.511e+02, 2.622e+02, 2.706e+02, 2.803e+02, 2.915e+02, 2.999e+02, 3.096e+02, 3.208e+02, 3.305e+02, 3.403e+02, 3.515e+02, 3.612e+02, 3.710e+02, 3.808e+02, 3.891e+02, 4.003e+02, 4.100e+02, 4.184e+02, 4.338e+02, 4.491e+02, 4.644e+02, 4.826e+02, 4.993e+02"),""==o&&(o="8.719e-01, 1.582e+00, 2.967e+00, 5.038e+00, 8.555e+00, 1.406e+01, 2.309e+01, 3.670e+01, 5.643e+01, 8.678e+01, 1.249e+02, 1.797e+02, 2.502e+02, 3.371e+02, 4.540e+02, 6.116e+02, 7.459e+02, 9.720e+02, 1.267e+03, 1.764e+03, 2.376e+03, 3.096e+03, 4.310e+03, 5.617e+03"),""==n&&(n="4.5");let r=processDataInput(t),s=processDataInput(o),d=n;for(let c=0;c<r.length;c++)r[c]=r[c]*a;for(let u=0;u<s.length;u++)s[u]=s[u]*i;d*=l;let p=!0;r.length!=s.length?r.length>s.length?(addErrorDiv("Can not create graph as in voltage data there are more points than in current data"),p=!1):s.length>r.length&&(p=!1,addErrorDiv("Can not create graph as in current data there are more points than in voltage data")):(s.length<3||r.length<3)&&!0==p?(p=!1,addErrorDiv("One must enter at least 3 points for voltage and current data")):!0==p&&(r.forEach(e=>{(e<0||e>1e5)&&!0==p&&(p=!1,addErrorDiv("One of the voltage values is out of bounds 0 < x < 100'000 V"))}),s.forEach(e=>{(e<0||e>1e4)&&!0==p&&(p=!1,addErrorDiv("One of the current values is out of bounds 0 < x < 10'000 A"))}),(.5>parseFloat(d)||parseFloat(d)>10)&&!0==p&&(addErrorDiv("Work function value is out of bounds 0.5 < x < 10 eV"),p=!1),inData=[r,s,d],p&&(e.emit("calculateIv",inData),$("#loadingModal").modal("show")))}e.on("calculatedData",e=>{(function(e){let t=Math.round(1e3*e.Radius)/1e3,o=Math.round(1e5*e.beta)/1e5,n=Math.round(1e3*e.sigma_Aeff)/1e3,a=e.xplot_line,i=e.yplot_line,l=e.xplot_mrk,r=e.yplot_mrk;function s(e,t){let o=[];for(let n=0;n<e.length;n++)o.push({x:e[n],y:t[n]});return o}(function(){if(inVoltageMode){u.options.plugins.title.text="Fitted parameters: Radius: "+t+" nm, β: "+o+" nm⁻\xb9, σAeff: "+n+" nm\xb2";return}u.options.plugins.title.text="Fitted parameters: Radius: "+t+" nm, β: "+o+", σAeff: "+n+" nm\xb2"})(),function(){u.data.labels.pop(),u.data.datasets.forEach(e=>{e.data=null}),u.update();let e=u.data.datasets[1],t=s(a,i);t.forEach(t=>{e.data.push(t)}),u.update()}(),function(){let e=s(l,r),t=u.data.datasets[0];e.forEach(e=>{t.data.push(e)}),u.update()}()})(e),$("#loadingModal").modal("hide"),console.log(e)}),e.on("logServerSideError",e=>{$("#loadingModal").modal("hide"),alert("Got an error from server while computing data. Check console for more info."),console.log("Error server-side: "),console.log(e)})}let errorDivs=[],inVoltageMode=!0,helpButton,docDiv;function downloadData(){!function(e){var t=new Blob([JSON.stringify(inData)],{type:"application/json"});if(window.navigator.msSaveOrOpenBlob)window.navigator.msSaveOrOpenBlob("data","data.json");else{var o=document.createElement("a"),n=URL.createObjectURL(t);o.href=n,o.download=void 0,document.body.appendChild(o),o.click(),setTimeout(function(){document.body.removeChild(o),window.URL.revokeObjectURL(n)},0)}}()}function loadEventListeners(){let e=document.getElementById("voltage_mult_in"),t=["[V]","[kV]"],o=["[V/m]","[kV/m]"];document.getElementById("voltageSelectDiv").addEventListener("change",function(){1==voltageSelectDiv.value&&(e.options[0].text=t[0],e.options[1].text=t[1],inVoltageMode=!0),2==voltageSelectDiv.value&&(e.options[0].text=o[0],e.options[1].text=o[1],inVoltageMode=!1)}),document.getElementById("canvasButton").addEventListener("click",function(){downloadData()})}function addHelpDiv(){let e=document.getElementById("helpIcon"),t=`
    <section class="alert alert-success alert-dismissible d-flex align-items-center fade show animated bounceInLeft">
        <strong class="mx-2">How to use:</strong> Find general tips and info below!
        <button type="button" class="btn-close" data-bs-dismiss="alert" id="howToUseBtn"></button>
    </section>    
    
    `,o=`
    <section>
    <h2>What does this program do?</h2><br>
<p>
    This program is a web interface for GETELEC that can be used to predict the current created by an emitter.
</p><br>
    <h2>Controls</h2><br>
<p>
    Zoom in and out with <code>mouse wheel</code>, or hold <code>CTRL</code> and press <code>left click</code>
    to select the area to zoom into with a mouse. 
</p><br>
    <h2>Data input</h2><br>
<p>
    Start by selecting appropriate units. Program allows user to choose between <code>Voltage</code>
    and <code>Applied Field</code>, that could be measured in Volts or kiloVolts. The same logic applies
    to <code>Current</code> and <code>Work Function</code> fields. Please note that <code>Work Function</code>
    should be measured in electronvolts.
</p><br>
<p>
    The minimum amount of voltage-current input points for the calculations to work is 3. The upper and lower
    bounds for the values are the following:
    <ul>
    <li><code>Voltage</code>: 0 - 100 kV </li>
    <li><code>Applied Field</code>: 0 - 100 kV/m </li>
    <li><code>Current</code>: 0 - 10 kA </li>
    <li><code>Work Function</code>: 0.5 - 10 eV </li>
    
    </ul>
</p><br>
<p> The program supports different formats of input, but the recommended way is to use 
    <code>comma separated</code> values,
    as in the following example: </p>

    <ul><li>291.5, 299.9, 309.6, 320.8</li></ul>

<p> One could enter the values using the <code>standard view</code>: </p> 

    <ul><li>2.915e+02, 2.999e+02, 3.096e+02, 3.208e+02</li></ul>

    If program does not understand your input, a message will appear on the screen.
    </p><br>
    <h2>Data output</h2><br>
<p>
    Save the chart <code>.png</code> by <code>right click</code> with mouse and then press <code>save image as</code>.

    In order to save the raw computed data, press the <code>download button</code>.

    The saved file consists of following JSON content:
    <ul>
    <li><code>xplot_mrk</code>: List of x values for input data</li>
    <li><code>yplot_mrk</code>: List of y values for input data</li>
    <li><code>xplot_line</code>: List of x values for fitted line</li>
    <li><code>yplot_line</code>: List of y values for fitted line</li>
    <li><code>β</code>: Field enhancement factor coefficient</li>
    <li><code>Radius</code>: Local radius of the emitter tip [nm]</li>
    <li><code>sigma_Aeff</code>: Effective surface area of Emitter [nm\xb2]</li>
    <li><code>xAxisUnit</code>: Units of the x axis, default 1 / (Local Field [V/nm]</li>
    <li><code>yAxisUnit</code>: Units of the y axis, default Current [Amps]</li>
    </ul>
</p><br>
    <h2>Data processing</h2><br>
<p>
    Upon successful submitance of data, a graph should appear. <code>Hover</code> over with <code>mouse</code> to see point coordinates.
    Exact set of point data can be seen in <code>console</code> in developer tools (<code>F12</code>) .
    All the calculations are done on the server. This page simply displays generated values. For more info on
    how the back-end works, check out the <code>source code</code> and full <code>documentation</code>
    <a href="https://github.com/AndKyr/GETELEC">here</a>.
</p>




</section>
    `,n=document.getElementById("canvasButton"),a=document.createElement("section");(docDiv=document.createElement("section")).innerHTML=o,a.innerHTML=t;let i=a.children[0],l=docDiv;insertAfter(i,n),insertAfter(l,i),e.style.display="none",document.getElementById("howToUseBtn").addEventListener("click",addHelpIcon)}function addHelpIcon(){helpButton.style.display="block",docDiv.innerHTML=""}main(),loadEventListeners();const typeDict={0:"String",1:"Array",99:"Unknown"},separatorDict={0:".",1:",",2:" ",99:"Unknown"},multDict={0:"*",1:"e",99:"Unknown"},commaDict={0:",",1:".",99:"Unknown"};function processDataInput(e){let t="",o="",n=new Input(e);switch(0==n.type&&n.processString(),1==n.type&&n.processArray(),99==n.type&&n.processUnknownInput(),n.separator){case 0:t=".";break;case 1:t=",";break;case 2:t=" "}switch(n.comma){case 0:o=",";break;case 1:o="."}let a,i=[];if(a=0==n.type?n.data:beautifyResult(n.data.split(t)),","==o)for(let l=0;l<a.length;l++)a[l]=a[l].replace(o,".");return 99==a.separator?i.push(parseFloat(a)):(beautifyResult(a=a.split(separatorDict[n.separator])),a.forEach(e=>{i.push(parseFloat(e))})),i}class Input{constructor(e){this.data=e,this.type=getTypeOfInput(e),this.separator=getSeparator(e),this.mult=getMult(e),this.comma=getComma(e)}processString(){this.separator,this.comma}processArray(){this.data=this.data.slice(1,-1),this.processString()}processUnknownInput(){addErrorDiv("One of the input lines has a data of unknown type! Check console for more info"),console.log("Unknown data: "),console.log(this)}logProperties(){console.log(this)}}function getTypeOfInput(e){return"["==e[0]?1:isNaN(e[0])?"-"==e[0]?0:99:0}function getMult(e){return e.includes("*",1)?0:e.includes("e",1)?1:99}function getComma(e){if(1==getSeparator(e)){if(e.includes("."))return 1}else if(0==getSeparator(e)){if(e.includes(","))return 0}else if(2==getSeparator(e)){if(e.includes(","))return 0;if(e.includes("."))return 1}return 99}function getSeparator(e){let t=getMult(e);if(99!=t){if(0==t){t="*";let o=e.indexOf(t);for(let n=o;n>0;n--)if(isNaN(e[n])){if("."==e[n])return 0;if(","==e[n])return 1}}else if(1==t){t="e";let a=e.indexOf(t);for(let i=a;i<e.length;i++)if(isNaN(e[i])){if("."==e[i])return 0;if(","==e[i])return 1}}}else{if(99!=t)return 99;let l=e.indexOf(" ",2);return -1==l?1:"."==e[l-1]?0:","==e[l-1]?1:isNaN(e[l-1])?99:2}}function beautifyResult(e){for(let t=0;t<e.length;t++)endsWith(e[t]," ")&&(e[t]=e[t].slice(0,-1))," "==e[t][0]&&(e[t]=e[t].slice(1));return e}function endsWith(e,t){return -1!==e.indexOf(t,e.length-t.length)}function insertAfter(e,t){t.parentNode.insertBefore(e,t.nextSibling)}