var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function NilFunction() {
    return nil;
}
var nil = new Proxy(Object.assign(NilFunction, { "class": nil, "className": "Nil" }), {
    get(target, name) {
        if (name == Symbol.toPrimitive) {
            return function (hint) {
                if (hint == "number") {
                    return 0;
                }
                if (hint == "string") {
                    return "";
                }
                return false;
            };
        }
        if (name == "toString") {
            return function toString() {
                return "";
            };
        }
        return NilFunction();
    },
    set(target, name, value) {
        return NilFunction();
    }
});
function wrapInNil(object) {
    var result = FIRST_OR_NIL(object);
    if (object instanceof Object && !(object instanceof Function)) {
        result = new Proxy(object, {
            get(target, name) {
                if (name == "wrapped_nil_target") {
                    return target;
                }
                const value = Reflect.get(target, name);
                if (typeof value === "object") {
                    return wrapInNil(value);
                }
                if (IS_NOT_LIKE_NULL(value)) {
                    return value;
                }
                return nil;
            }
        });
    }
    return result;
}
const YES = true;
const NO = false;
function IS(object) {
    if (object && object !== nil) {
        return YES;
    }
    return NO;
    //return (object != nil && object);
}
function IS_NOT(object) {
    return !IS(object);
}
function IS_DEFINED(object) {
    if (object != undefined) {
        return YES;
    }
    return NO;
}
function IS_UNDEFINED(object) {
    return !IS_DEFINED(object);
}
function IS_NIL(object) {
    if (object === nil) {
        return YES;
    }
    return NO;
}
function IS_NOT_NIL(object) {
    return !IS_NIL(object);
}
function IS_LIKE_NULL(object) {
    return (IS_UNDEFINED(object) || IS_NIL(object) || object == null);
}
function IS_NOT_LIKE_NULL(object) {
    return !IS_LIKE_NULL(object);
}
function IS_AN_EMAIL_ADDRESS(email) {
    const re = /\S+@\S+\.\S+/;
    return re.test(email);
}
function FIRST_OR_NIL(...objects) {
    const result = objects.find(function (object, index, array) {
        return IS(object);
    });
    return result || nil;
}
function FIRST(...objects) {
    const result = objects.find(function (object, index, array) {
        return IS(object);
    });
    return result || IF(IS_DEFINED(objects.lastElement))(RETURNER(objects.lastElement))();
}
function MAKE_ID(randomPartLength = 15) {
    var result = "";
    const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    for (var i = 0; i < randomPartLength; i++) {
        result = result + characters.charAt(Math.floor(Math.random() * characters.length));
    }
    result = result + Date.now();
    return result;
}
function RETURNER(value) {
    return function (...objects) {
        return value;
    };
}
function IF(value) {
    var thenFunction = nil;
    var elseFunction = nil;
    const result = function (functionToCall) {
        thenFunction = functionToCall;
        return result.evaluateConditions;
    };
    result.evaluateConditions = function () {
        if (IS(value)) {
            return thenFunction();
        }
        return elseFunction();
    };
    result.evaluateConditions.ELSE_IF = function (otherValue) {
        const functionResult = IF(otherValue);
        elseFunction = functionResult.evaluateConditions;
        const functionResultEvaluateConditionsFunction = function () {
            return result.evaluateConditions();
        };
        functionResultEvaluateConditionsFunction.ELSE_IF = functionResult.evaluateConditions.ELSE_IF;
        functionResultEvaluateConditionsFunction.ELSE = functionResult.evaluateConditions.ELSE;
        functionResult.evaluateConditions = functionResultEvaluateConditionsFunction;
        return functionResult;
    };
    result.evaluateConditions.ELSE = function (functionToCall) {
        elseFunction = functionToCall;
        return result.evaluateConditions();
    };
    return result;
}
// @ts-ignore
if (!window.AutoLayout) {
    // @ts-ignore
    window.AutoLayout = nil;
}
class UIObject {
    constructor() {
        this._class = UIObject;
        this.superclass = nil.class;
    }
    get class() {
        return this.constructor;
    }
    get superclass() {
        return this.constructor.superclass;
    }
    set superclass(superclass) {
        this.constructor.superclass = superclass;
    }
    static wrapObject(object) {
        if (IS_NOT(object)) {
            return nil;
        }
        if (object instanceof UIObject) {
            return object;
        }
        const result = Object.assign(new UIObject(), object);
        return result;
    }
    isKindOfClass(classObject) {
        if (this.isMemberOfClass(classObject)) {
            return YES;
        }
        for (var superclassObject = this.superclass; IS(superclassObject); superclassObject = superclassObject.superclass) {
            if (superclassObject == classObject) {
                return YES;
            }
        }
        return NO;
    }
    isMemberOfClass(classObject) {
        return (this.class == classObject);
    }
    valueForKey(key) {
        return this[key];
    }
    valueForKeyPath(keyPath) {
        return UIObject.valueForKeyPath(keyPath, this);
    }
    static valueForKeyPath(keyPath, object) {
        if (IS_NOT(keyPath)) {
            return object;
        }
        const keys = keyPath.split(".");
        var currentObject = object;
        for (var i = 0; i < keys.length; i++) {
            const key = keys[i];
            if (key.substring(0, 2) == "[]") {
                // This next object will be an array and the rest of the keys need to be run for each of the elements
                currentObject = currentObject[key.substring(2)];
                // CurrentObject is now an array
                const remainingKeyPath = keys.slice(i + 1).join(".");
                const currentArray = currentObject;
                currentObject = currentArray.map(function (subObject, index, array) {
                    const result = UIObject.valueForKeyPath(remainingKeyPath, subObject);
                    return result;
                });
                break;
            }
            currentObject = currentObject[key];
            if (IS_NOT(currentObject)) {
                currentObject = nil;
            }
        }
        return currentObject;
    }
    setValueForKeyPath(keyPath, value, createPath = YES) {
        return UIObject.setValueForKeyPath(keyPath, value, this, createPath);
    }
    static setValueForKeyPath(keyPath, value, currentObject, createPath) {
        const keys = keyPath.split(".");
        var didSetValue = NO;
        keys.forEach(function (key, index, array) {
            if (index == array.length - 1 && IS_NOT_LIKE_NULL(currentObject)) {
                currentObject[key] = value;
                didSetValue = YES;
                return;
            }
            else if (IS_NOT(currentObject)) {
                return;
            }
            const currentObjectValue = currentObject[key];
            if (IS_LIKE_NULL(currentObjectValue) && createPath) {
                currentObject[key] = {};
            }
            currentObject = currentObject[key];
        });
        return didSetValue;
    }
    performFunctionWithSelf(functionToPerform) {
        return functionToPerform(this);
    }
    performFunctionWithDelay(delay, functionToCall) {
        new UITimer(delay, NO, functionToCall);
    }
}
///<reference path="UIObject.ts"/>
class UIColor extends UIObject {
    constructor(stringValue) {
        super();
        this.stringValue = stringValue;
        this._class = UIColor;
        this.superclass = UIObject;
    }
    toString() {
        return this.stringValue;
    }
    static get redColor() {
        return new UIColor("red");
    }
    static get blueColor() {
        return new UIColor("blue");
    }
    static get greenColor() {
        return new UIColor("green");
    }
    static get yellowColor() {
        return new UIColor("yellow");
    }
    static get blackColor() {
        return new UIColor("black");
    }
    static get brownColor() {
        return new UIColor("brown");
    }
    static get whiteColor() {
        return new UIColor("white");
    }
    static get greyColor() {
        return new UIColor("grey");
    }
    static get lightGreyColor() {
        return new UIColor("lightgrey");
    }
    static get transparentColor() {
        return new UIColor("transparent");
    }
    static get undefinedColor() {
        return new UIColor("");
    }
    static get nilColor() {
        return new UIColor("");
    }
    static nameToHex(name) {
        return {
            "aliceblue": "#f0f8ff",
            "antiquewhite": "#faebd7",
            "aqua": "#00ffff",
            "aquamarine": "#7fffd4",
            "azure": "#f0ffff",
            "beige": "#f5f5dc",
            "bisque": "#ffe4c4",
            "black": "#000000",
            "blanchedalmond": "#ffebcd",
            "blue": "#0000ff",
            "blueviolet": "#8a2be2",
            "brown": "#a52a2a",
            "burlywood": "#deb887",
            "cadetblue": "#5f9ea0",
            "chartreuse": "#7fff00",
            "chocolate": "#d2691e",
            "coral": "#ff7f50",
            "cornflowerblue": "#6495ed",
            "cornsilk": "#fff8dc",
            "crimson": "#dc143c",
            "cyan": "#00ffff",
            "darkblue": "#00008b",
            "darkcyan": "#008b8b",
            "darkgoldenrod": "#b8860b",
            "darkgray": "#a9a9a9",
            "darkgreen": "#006400",
            "darkkhaki": "#bdb76b",
            "darkmagenta": "#8b008b",
            "darkolivegreen": "#556b2f",
            "darkorange": "#ff8c00",
            "darkorchid": "#9932cc",
            "darkred": "#8b0000",
            "darksalmon": "#e9967a",
            "darkseagreen": "#8fbc8f",
            "darkslateblue": "#483d8b",
            "darkslategray": "#2f4f4f",
            "darkturquoise": "#00ced1",
            "darkviolet": "#9400d3",
            "deeppink": "#ff1493",
            "deepskyblue": "#00bfff",
            "dimgray": "#696969",
            "dodgerblue": "#1e90ff",
            "firebrick": "#b22222",
            "floralwhite": "#fffaf0",
            "forestgreen": "#228b22",
            "fuchsia": "#ff00ff",
            "gainsboro": "#dcdcdc",
            "ghostwhite": "#f8f8ff",
            "gold": "#ffd700",
            "goldenrod": "#daa520",
            "gray": "#808080",
            "green": "#008000",
            "greenyellow": "#adff2f",
            "honeydew": "#f0fff0",
            "hotpink": "#ff69b4",
            "indianred ": "#cd5c5c",
            "indigo": "#4b0082",
            "ivory": "#fffff0",
            "khaki": "#f0e68c",
            "lavender": "#e6e6fa",
            "lavenderblush": "#fff0f5",
            "lawngreen": "#7cfc00",
            "lemonchiffon": "#fffacd",
            "lightblue": "#add8e6",
            "lightcoral": "#f08080",
            "lightcyan": "#e0ffff",
            "lightgoldenrodyellow": "#fafad2",
            "lightgrey": "#d3d3d3",
            "lightgreen": "#90ee90",
            "lightpink": "#ffb6c1",
            "lightsalmon": "#ffa07a",
            "lightseagreen": "#20b2aa",
            "lightskyblue": "#87cefa",
            "lightslategray": "#778899",
            "lightsteelblue": "#b0c4de",
            "lightyellow": "#ffffe0",
            "lime": "#00ff00",
            "limegreen": "#32cd32",
            "linen": "#faf0e6",
            "magenta": "#ff00ff",
            "maroon": "#800000",
            "mediumaquamarine": "#66cdaa",
            "mediumblue": "#0000cd",
            "mediumorchid": "#ba55d3",
            "mediumpurple": "#9370d8",
            "mediumseagreen": "#3cb371",
            "mediumslateblue": "#7b68ee",
            "mediumspringgreen": "#00fa9a",
            "mediumturquoise": "#48d1cc",
            "mediumvioletred": "#c71585",
            "midnightblue": "#191970",
            "mintcream": "#f5fffa",
            "mistyrose": "#ffe4e1",
            "moccasin": "#ffe4b5",
            "navajowhite": "#ffdead",
            "navy": "#000080",
            "oldlace": "#fdf5e6",
            "olive": "#808000",
            "olivedrab": "#6b8e23",
            "orange": "#ffa500",
            "orangered": "#ff4500",
            "orchid": "#da70d6",
            "palegoldenrod": "#eee8aa",
            "palegreen": "#98fb98",
            "paleturquoise": "#afeeee",
            "palevioletred": "#d87093",
            "papayawhip": "#ffefd5",
            "peachpuff": "#ffdab9",
            "peru": "#cd853f",
            "pink": "#ffc0cb",
            "plum": "#dda0dd",
            "powderblue": "#b0e0e6",
            "purple": "#800080",
            "red": "#ff0000",
            "rosybrown": "#bc8f8f",
            "royalblue": "#4169e1",
            "saddlebrown": "#8b4513",
            "salmon": "#fa8072",
            "sandybrown": "#f4a460",
            "seagreen": "#2e8b57",
            "seashell": "#fff5ee",
            "sienna": "#a0522d",
            "silver": "#c0c0c0",
            "skyblue": "#87ceeb",
            "slateblue": "#6a5acd",
            "slategray": "#708090",
            "snow": "#fffafa",
            "springgreen": "#00ff7f",
            "steelblue": "#4682b4",
            "tan": "#d2b48c",
            "teal": "#008080",
            "thistle": "#d8bfd8",
            "tomato": "#ff6347",
            "turquoise": "#40e0d0",
            "violet": "#ee82ee",
            "wheat": "#f5deb3",
            "white": "#ffffff",
            "whitesmoke": "#f5f5f5",
            "yellow": "#ffff00",
            "yellowgreen": "#9acd32"
        }[name.toLowerCase()];
    }
    static hexToDescriptor(c) {
        if (c[0] === "#") {
            c = c.substr(1);
        }
        const r = parseInt(c.slice(0, 2), 16);
        const g = parseInt(c.slice(2, 4), 16);
        const b = parseInt(c.slice(4, 6), 16);
        const a = parseInt(c.slice(6, 8), 16);
        const result = { "red": r, "green": g, "blue": b, "alpha": a };
        return result;
        //return 'rgb(' + r + ',' + g + ',' + b + ')';
    }
    static rgbToDescriptor(colorString) {
        if (colorString.startsWith("rgba(")) {
            colorString = colorString.slice(5, colorString.length - 1);
        }
        if (colorString.startsWith("rgb(")) {
            colorString = colorString.slice(4, colorString.length - 1) + ", 0";
        }
        const components = colorString.split(",");
        const result = {
            "red": Number(components[0]),
            "green": Number(components[1]),
            "blue": Number(components[2]),
            "alpha": Number(components[3])
        };
        return result;
    }
    get colorDescriptor() {
        var descriptor;
        const colorHEXFromName = UIColor.nameToHex(this.stringValue);
        if (this.stringValue.startsWith("rgb")) {
            descriptor = UIColor.rgbToDescriptor(this.stringValue);
        }
        else if (colorHEXFromName) {
            descriptor = UIColor.hexToDescriptor(colorHEXFromName);
        }
        else {
            descriptor = UIColor.hexToDescriptor(this.stringValue);
        }
        return descriptor;
    }
    colorWithRed(red) {
        const descriptor = this.colorDescriptor;
        const result = new UIColor("rgba(" + red + "," + descriptor.green + "," + descriptor.blue + "," +
            descriptor.alpha + ")");
        return result;
    }
    colorWithGreen(green) {
        const descriptor = this.colorDescriptor;
        const result = new UIColor("rgba(" + descriptor.red + "," + green + "," + descriptor.blue + "," +
            descriptor.alpha + ")");
        return result;
    }
    colorWithBlue(blue) {
        const descriptor = this.colorDescriptor;
        const result = new UIColor("rgba(" + descriptor.red + "," + descriptor.green + "," + blue + "," +
            descriptor.alpha + ")");
        return result;
    }
    colorWithAlpha(alpha) {
        const descriptor = this.colorDescriptor;
        const result = new UIColor("rgba(" + descriptor.red + "," + descriptor.green + "," + descriptor.blue + "," +
            alpha + ")");
        return result;
    }
    static colorWithRGBA(red, green, blue, alpha = 1) {
        const result = new UIColor("rgba(" + red + "," + green + "," + blue + "," + alpha + ")");
        return result;
    }
    static colorWithDescriptor(descriptor) {
        const result = new UIColor("rgba(" + descriptor.red.toFixed(0) + "," + descriptor.green.toFixed(0) + "," +
            descriptor.blue.toFixed(0) + "," + this.defaultAlphaToOne(descriptor.alpha) + ")");
        return result;
    }
    static defaultAlphaToOne(value = 1) {
        if (value != value) {
            value = 1;
        }
        return value;
    }
    colorByMultiplyingRGB(multiplier) {
        const descriptor = this.colorDescriptor;
        descriptor.red = descriptor.red * multiplier;
        descriptor.green = descriptor.green * multiplier;
        descriptor.blue = descriptor.blue * multiplier;
        const result = UIColor.colorWithDescriptor(descriptor);
        return result;
    }
}
/// <reference path="./UIObject.ts" />
class UIPoint extends UIObject {
    constructor(x, y) {
        super();
        this.x = x;
        this.y = y;
        this._class = UIPoint;
        this.superclass = UIObject;
    }
    copy() {
        return new UIPoint(this.x, this.y);
    }
    isEqualTo(point) {
        const result = (this.x == point.x && this.y == point.y);
        return result;
    }
    scale(zoom) {
        const x = this.x;
        const y = this.y;
        this.x = x * zoom;
        this.y = y * zoom;
        return this;
    }
    add(v) {
        this.x = this.x + v.x;
        this.y = this.y + v.y;
        return this;
    }
    subtract(v) {
        this.x = this.x - v.x;
        this.y = this.y - v.y;
        return this;
    }
    to(b) {
        const a = this;
        const ab = b.copy().add(a.copy().scale(-1));
        return ab;
    }
    pointWithX(x) {
        const result = this.copy();
        result.x = x;
        return result;
    }
    pointWithY(y) {
        const result = this.copy();
        result.y = y;
        return result;
    }
    pointByAddingX(x) {
        return this.pointWithX(this.x + x);
    }
    pointByAddingY(y) {
        return this.pointWithY(this.y + y);
    }
    get length() {
        var result = this.x * this.x + this.y * this.y;
        result = Math.sqrt(result);
        return result;
    }
    didChange(b) {
        // Callback to be set by delegate
    }
}
/// <reference path="./UIPoint.ts" />
class UIRectangle extends UIObject {
    constructor(x = 0, y = 0, height = 0, width = 0) {
        super();
        this._class = UIRectangle;
        this.superclass = UIObject;
        this.min = new UIPoint(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
        this.max = new UIPoint(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);
        this.min.didChange = this.rectanglePointDidChange;
        this.max.didChange = this.rectanglePointDidChange;
        this._isBeingUpdated = NO;
        this.min = new UIPoint(x, y);
        this.max = new UIPoint(x + width, y + height);
        if (IS_NIL(height)) {
            this.max.y = height;
        }
        if (IS_NIL(width)) {
            this.max.x = width;
        }
    }
    copy() {
        const result = new UIRectangle(this.x, this.y, this.height, this.width);
        return result;
    }
    isEqualTo(rectangle) {
        const result = (IS(rectangle) && this.min.isEqualTo(rectangle.min) && this.max.isEqualTo(rectangle.max));
        return result;
    }
    static zero() {
        const result = new UIRectangle(0, 0, 0, 0);
        return result;
    }
    containsPoint(point) {
        return this.min.x <= point.x && this.min.y <= point.y &&
            point.x <= this.max.x && point.y <= this.max.y;
    }
    updateByAddingPoint(point) {
        if (!point) {
            point = new UIPoint(0, 0);
        }
        this.beginUpdates();
        const min = this.min.copy();
        if (min.x === nil) {
            min.x = this.max.x;
        }
        if (min.y === nil) {
            min.y = this.max.y;
        }
        const max = this.max.copy();
        if (max.x === nil) {
            max.x = this.min.x;
        }
        if (max.y === nil) {
            max.y = this.min.y;
        }
        this.min.x = Math.min(min.x, point.x);
        this.min.y = Math.min(min.y, point.y);
        this.max.x = Math.max(max.x, point.x);
        this.max.y = Math.max(max.y, point.y);
        this.finishUpdates();
    }
    get height() {
        if (this.max.y === nil) {
            return nil;
        }
        return this.max.y - this.min.y;
    }
    set height(height) {
        this.max.y = this.min.y + height;
    }
    get width() {
        if (this.max.x === nil) {
            return nil;
        }
        return this.max.x - this.min.x;
    }
    set width(width) {
        this.max.x = this.min.x + width;
    }
    get x() {
        return this.min.x;
    }
    set x(x) {
        this.beginUpdates();
        const width = this.width;
        this.min.x = x;
        this.max.x = this.min.x + width;
        this.finishUpdates();
    }
    get y() {
        return this.min.y;
    }
    set y(y) {
        this.beginUpdates();
        const height = this.height;
        this.min.y = y;
        this.max.y = this.min.y + height;
        this.finishUpdates();
    }
    get topLeft() {
        return this.min.copy();
    }
    get topRight() {
        return new UIPoint(this.max.x, this.y);
    }
    get bottomLeft() {
        return new UIPoint(this.x, this.max.y);
    }
    get bottomRight() {
        return this.max.copy();
    }
    get center() {
        const result = this.min.copy().add(this.min.to(this.max).scale(0.5));
        return result;
    }
    set center(center) {
        const offset = this.center.to(center);
        this.offsetByPoint(offset);
    }
    offsetByPoint(offset) {
        this.min.add(offset);
        this.max.add(offset);
        return this;
    }
    concatenateWithRectangle(rectangle) {
        this.updateByAddingPoint(rectangle.bottomRight);
        this.updateByAddingPoint(rectangle.topLeft);
        return this;
    }
    intersectionRectangleWithRectangle(rectangle) {
        const result = this.copy();
        result.beginUpdates();
        const min = result.min;
        if (min.x === nil) {
            min.x = rectangle.max.x - Math.min(result.width, rectangle.width);
        }
        if (min.y === nil) {
            min.y = rectangle.max.y - Math.min(result.height, rectangle.height);
        }
        const max = result.max;
        if (max.x === nil) {
            max.x = rectangle.min.x + Math.min(result.width, rectangle.width);
        }
        if (max.y === nil) {
            max.y = rectangle.min.y + Math.min(result.height, rectangle.height);
        }
        result.min.x = Math.max(result.min.x, rectangle.min.x);
        result.min.y = Math.max(result.min.y, rectangle.min.y);
        result.max.x = Math.min(result.max.x, rectangle.max.x);
        result.max.y = Math.min(result.max.y, rectangle.max.y);
        if (result.height < 0) {
            const averageY = (this.center.y + rectangle.center.y) * 0.5;
            result.min.y = averageY;
            result.max.y = averageY;
        }
        if (result.width < 0) {
            const averageX = (this.center.x + rectangle.center.x) * 0.5;
            result.min.x = averageX;
            result.max.x = averageX;
        }
        result.finishUpdates();
        return result;
    }
    get area() {
        const result = this.height * this.width;
        return result;
    }
    intersectsWithRectangle(rectangle) {
        return (this.intersectionRectangleWithRectangle(rectangle).area != 0);
    }
    // add some space around the rectangle
    rectangleWithInsets(left, right, bottom, top) {
        const result = this.copy();
        result.min.x = this.min.x + left;
        result.max.x = this.max.x - right;
        result.min.y = this.min.y + top;
        result.max.y = this.max.y - bottom;
        return result;
    }
    rectangleWithInset(inset) {
        const result = this.rectangleWithInsets(inset, inset, inset, inset);
        return result;
    }
    rectangleWithHeight(height, centeredOnPosition = nil) {
        if (isNaN(centeredOnPosition)) {
            centeredOnPosition = nil;
        }
        const result = this.copy();
        result.height = height;
        if (centeredOnPosition != nil) {
            const change = height - this.height;
            result.offsetByPoint(new UIPoint(0, change * centeredOnPosition).scale(-1));
        }
        return result;
    }
    rectangleWithWidth(width, centeredOnPosition = nil) {
        if (isNaN(centeredOnPosition)) {
            centeredOnPosition = nil;
        }
        const result = this.copy();
        result.width = width;
        if (centeredOnPosition != nil) {
            const change = width - this.width;
            result.offsetByPoint(new UIPoint(change * centeredOnPosition, 0).scale(-1));
        }
        return result;
    }
    rectangleWithHeightRelativeToWidth(heightRatio = 1, centeredOnPosition = nil) {
        const result = this.rectangleWithHeight(this.width * heightRatio, centeredOnPosition);
        return result;
    }
    rectangleWithWidthRelativeToHeight(widthRatio = 1, centeredOnPosition = nil) {
        const result = this.rectangleWithWidth(this.height * widthRatio, centeredOnPosition);
        return result;
    }
    rectangleWithX(x, centeredOnPosition = 0) {
        const result = this.copy();
        result.x = x - result.width * centeredOnPosition;
        return result;
    }
    rectangleWithY(y, centeredOnPosition = 0) {
        const result = this.copy();
        result.y = y - result.height * centeredOnPosition;
        return result;
    }
    rectangleByAddingX(x) {
        const result = this.copy();
        result.x = this.x + x;
        return result;
    }
    rectangleByAddingY(y) {
        const result = this.copy();
        result.y = this.y + y;
        return result;
    }
    rectanglesBySplittingWidth(weights, paddings = 0, absoluteWidths = nil) {
        if (IS_NIL(paddings)) {
            paddings = 1;
        }
        if (!(paddings instanceof Array)) {
            paddings = [paddings].arrayByRepeating(weights.length - 1);
        }
        paddings = paddings.arrayByTrimmingToLengthIfLonger(weights.length - 1);
        if (!(absoluteWidths instanceof Array) && IS_NOT_NIL(absoluteWidths)) {
            absoluteWidths = [absoluteWidths].arrayByRepeating(weights.length);
        }
        const result = [];
        const sumOfWeights = weights.reduce(function (a, b, index) {
            if (IS_NOT_NIL(absoluteWidths[index])) {
                b = 0;
            }
            return a + b;
        }, 0);
        const sumOfPaddings = paddings.summedValue;
        const sumOfAbsoluteWidths = absoluteWidths.summedValue;
        const totalRelativeWidth = this.width - sumOfPaddings - sumOfAbsoluteWidths;
        var previousCellMaxX = this.x;
        for (var i = 0; i < weights.length; i++) {
            var resultWidth;
            if (IS_NOT_NIL(absoluteWidths[i])) {
                resultWidth = absoluteWidths[i] || 0;
            }
            else {
                resultWidth = totalRelativeWidth * (weights[i] / sumOfWeights);
            }
            const rectangle = this.rectangleWithWidth(resultWidth);
            var padding = 0;
            if (paddings.length > i && paddings[i]) {
                padding = paddings[i];
            }
            rectangle.x = previousCellMaxX;
            previousCellMaxX = rectangle.max.x + padding;
            //rectangle = rectangle.rectangleWithInsets(0, padding, 0, 0);
            result.push(rectangle);
        }
        return result;
    }
    rectanglesBySplittingHeight(weights, paddings = 0, absoluteHeights = nil) {
        if (IS_NIL(paddings)) {
            paddings = 1;
        }
        if (!(paddings instanceof Array)) {
            paddings = [paddings].arrayByRepeating(weights.length - 1);
        }
        paddings = paddings.arrayByTrimmingToLengthIfLonger(weights.length - 1);
        if (!(absoluteHeights instanceof Array) && IS_NOT_NIL(absoluteHeights)) {
            absoluteHeights = [absoluteHeights].arrayByRepeating(weights.length);
        }
        const result = [];
        const sumOfWeights = weights.reduce(function (a, b, index) {
            if (IS_NOT_NIL(absoluteHeights[index])) {
                b = 0;
            }
            return a + b;
        }, 0);
        const sumOfPaddings = paddings.summedValue;
        const sumOfAbsoluteHeights = absoluteHeights.summedValue;
        const totalRelativeHeight = this.height - sumOfPaddings - sumOfAbsoluteHeights;
        var previousCellMaxY = this.y;
        for (var i = 0; i < weights.length; i++) {
            var resultHeight;
            if (IS_NOT_NIL(absoluteHeights[i])) {
                resultHeight = absoluteHeights[i] || 0;
            }
            else {
                resultHeight = totalRelativeHeight * (weights[i] / sumOfWeights);
            }
            const rectangle = this.rectangleWithHeight(resultHeight);
            var padding = 0;
            if (paddings.length > i && paddings[i]) {
                padding = paddings[i];
            }
            rectangle.y = previousCellMaxY;
            previousCellMaxY = rectangle.max.y + padding;
            //rectangle = rectangle.rectangleWithInsets(0, 0, padding, 0);
            result.push(rectangle);
        }
        return result;
    }
    rectanglesByEquallySplittingWidth(numberOfFrames, padding = 0) {
        const result = [];
        const totalPadding = padding * (numberOfFrames - 1);
        const resultWidth = (this.width - totalPadding) / numberOfFrames;
        for (var i = 0; i < numberOfFrames; i++) {
            const rectangle = this.rectangleWithWidth(resultWidth, i / (numberOfFrames - 1));
            result.push(rectangle);
        }
        return result;
    }
    rectanglesByEquallySplittingHeight(numberOfFrames, padding = 0) {
        const result = [];
        const totalPadding = padding * (numberOfFrames - 1);
        const resultHeight = (this.height - totalPadding) / numberOfFrames;
        for (var i = 0; i < numberOfFrames; i++) {
            const rectangle = this.rectangleWithHeight(resultHeight, i / (numberOfFrames - 1));
            result.push(rectangle);
        }
        return result;
    }
    distributeViewsAlongWidth(views, weights = 1, paddings, absoluteWidths) {
        if (!(weights instanceof Array)) {
            weights = [weights].arrayByRepeating(views.length);
        }
        const frames = this.rectanglesBySplittingWidth(weights, paddings, absoluteWidths);
        frames.forEach(function (frame, index, array) {
            views[index].frame = frame;
        });
        return this;
    }
    distributeViewsAlongHeight(views, weights = 1, paddings, absoluteHeights) {
        if (!(weights instanceof Array)) {
            weights = [weights].arrayByRepeating(views.length);
        }
        const frames = this.rectanglesBySplittingHeight(weights, paddings, absoluteHeights);
        frames.forEach(function (frame, index, array) {
            views[index].frame = frame;
        });
        return this;
    }
    distributeViewsEquallyAlongWidth(views, padding) {
        const frames = this.rectanglesByEquallySplittingWidth(views.length, padding);
        frames.forEach(function (frame, index, array) {
            views[index].frame = frame;
        });
        return this;
    }
    distributeViewsEquallyAlongHeight(views, padding) {
        const frames = this.rectanglesByEquallySplittingHeight(views.length, padding);
        frames.forEach(function (frame, index, array) {
            views[index].frame = frame;
        });
        return this;
    }
    rectangleForNextRow(padding = 0, height = this.height) {
        const result = this.rectangleWithY(this.max.y + padding);
        if (height != this.height) {
            result.height = height;
        }
        return result;
    }
    rectangleForNextColumn(padding = 0, width = this.width) {
        const result = this.rectangleWithX(this.max.x + padding);
        if (width != this.width) {
            result.width = width;
        }
        return result;
    }
    rectangleForPreviousRow(padding = 0) {
        const result = this.rectangleWithY(this.min.y - this.height - padding);
        return result;
    }
    rectangleForPreviousColumn(padding = 0) {
        const result = this.rectangleWithX(this.min.x - this.width - padding);
        return result;
    }
    // Bounding box
    static boundingBoxForPoints(points) {
        const result = new UIRectangle();
        for (var i = 0; i < points.length; i++) {
            result.updateByAddingPoint(points[i]);
        }
        return result;
    }
    beginUpdates() {
        this._isBeingUpdated = YES;
    }
    finishUpdates() {
        this._isBeingUpdated = NO;
        this.didChange();
    }
    didChange() {
        // Callback to be set by delegate
    }
    _rectanglePointDidChange() {
        if (!this._isBeingUpdated) {
            this.didChange();
        }
    }
}
///// <reference path="../autolayout/src/AutoLayout.js" />
/// <reference path="./UIObject.ts" />
/// <reference path="./UIColor.ts" />
/// <reference path="./UIRectangle.ts" />
class UIView extends UIObject {
    constructor(elementID = ("UIView" +
        UIView.nextIndex), viewHTMLElement = null, elementType = null, initViewData) {
        super();
        this._nativeSelectionEnabled = YES;
        this._enabled = YES;
        this._backgroundColor = UIColor.transparentColor;
        this._localizedTextObject = nil;
        this._controlEventTargets = {}; //{ "PointerDown": Function[]; "PointerMove": Function[]; "PointerLeave": Function[]; "PointerEnter": Function[]; "PointerUpInside": Function[]; "PointerUp": Function[]; "PointerHover": Function[]; };
        this._viewControllerLayoutFunction = nil;
        this._isHidden = NO;
        this.pausesPointerEvents = NO;
        this.stopsPointerEventPropagation = YES;
        this._pointerDragThreshold = 2;
        this.ignoresTouches = NO;
        this.ignoresMouse = NO;
        this.forceIntrinsicSizeZero = NO;
        this.controlEvent = UIView.controlEvent;
        this._class = UIView;
        this.superclass = UIObject;
        // Instance variables
        UIView._UIViewIndex = UIView.nextIndex;
        this._UIViewIndex = UIView._UIViewIndex;
        this._styleClasses = [];
        // Object.defineProperty(this, "styleClasses", { get: this.styleClasses, set: this.setStyleClasses });
        // Object.defineProperty(this, "styleClassName", { get: this.styleClassName });
        this._initViewHTMLElement(elementID, viewHTMLElement, elementType);
        this.subviews = [];
        this.superview = nil;
        // Object.defineProperty(this, "elementID", { get: this.elementID });
        // Object.defineProperty(this, "constraints", { get: this.constraints, set: this.setConstraints });
        this._constraints = [];
        this._updateLayoutFunction = nil;
        //Object.defineProperty(this, "backgroundColor", { get: this.backgroundColor, set: this.setBackgroundColor });
        //this.backgroundColor = "transparent";
        // Object.defineProperty(this, "alpha", { get: this.alpha, set: this.setAlpha });
        // Object.defineProperty(this, "frame", { get: this.frame, set: this.setFrame });
        // Object.defineProperty(this, "bounds", { get: this.bounds, set: this.setBounds });
        // Object.defineProperty(this, "userInteractionEnabled", { get: this.userInteractionEnabled, set: this.setUserInteractionEnabled });
        // this._controlEventTargets = {
        //     "PointerDown": [],
        //     "PointerMove": [],
        //     "PointerLeave": [],
        //     "PointerEnter": [],
        //     "PointerUpInside": [],
        //     "PointerUp": [],
        //     "PointerHover": []
        // }
        this._didLayoutSubviewsDelegateFunction = function () {
        };
        this._frameTransform = "";
        this.initView(this.viewHTMLElement.id, this.viewHTMLElement, initViewData);
        this._initViewCSSSelectorsIfNeeded();
        this._loadUIEvents();
        this.setNeedsLayout();
    }
    static get nextIndex() {
        return UIView._UIViewIndex + 1;
    }
    static get pageHeight() {
        const body = document.body;
        const html = document.documentElement;
        const height = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);
        return height;
    }
    static get pageWidth() {
        const body = document.body;
        const html = document.documentElement;
        const width = Math.max(body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth);
        return width;
    }
    initView(elementID, viewHTMLElement, initViewData) {
    }
    centerInContainer() {
        this.style.left = "50%";
        this.style.top = "50%";
        this.style.transform = "translateX(-50%) translateY(-50%)";
    }
    centerXInContainer() {
        this.style.left = "50%";
        this.style.transform = "translateX(-50%)";
    }
    centerYInContainer() {
        this.style.top = "50%";
        this.style.transform = "translateY(-50%)";
    }
    _initViewHTMLElement(elementID, viewHTMLElement, elementType = "div") {
        if (!IS(elementType)) {
            elementType = "div";
        }
        if (!IS(viewHTMLElement)) {
            this._viewHTMLElement = this.createElement(elementID, elementType);
            this.style.position = "absolute";
            this.style.margin = "0";
        }
        else {
            this._viewHTMLElement = viewHTMLElement;
        }
        if (IS(elementID)) {
            this.viewHTMLElement.id = elementID;
        }
        this.viewHTMLElement.obeyAutolayout = YES;
        this.viewHTMLElement.UIView = this;
        this.addStyleClass(this.styleClassName);
    }
    set nativeSelectionEnabled(selectable) {
        this._nativeSelectionEnabled = selectable;
        if (!selectable) {
            this.style.cssText = this.style.cssText +
                " -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;";
        }
        else {
            this.style.cssText = this.style.cssText +
                " -webkit-touch-callout: text; -webkit-user-select: text; -khtml-user-select: text; -moz-user-select: text; -ms-user-select: text; user-select: text;";
        }
    }
    get nativeSelectionEnabled() {
        return this._nativeSelectionEnabled;
    }
    get styleClassName() {
        const result = "UICore_UIView_" + this.class.name;
        return result;
    }
    _initViewCSSSelectorsIfNeeded() {
        if (!this.class._areViewCSSSelectorsInitialized) {
            this.initViewStyleSelectors();
            this.class._areViewCSSSelectorsInitialized = YES;
        }
    }
    initViewStyleSelectors() {
        // Override this in a subclass
    }
    initStyleSelector(selector, style) {
        const styleRules = UIView.getStyleRules(selector);
        if (!styleRules) {
            UIView.createStyleSelector(selector, style);
        }
    }
    createElement(elementID, elementType) {
        var result = document.getElementById(elementID);
        if (!result) {
            result = document.createElement(elementType);
        }
        return result;
    }
    get viewHTMLElement() {
        return this._viewHTMLElement;
    }
    get elementID() {
        return this.viewHTMLElement.id;
    }
    setInnerHTML(key, defaultString, parameters) {
        this._innerHTMLKey = key;
        this._defaultInnerHTML = defaultString;
        this._parameters = parameters;
        const languageName = UICore.languageService.currentLanguageKey;
        const result = UICore.languageService.stringForKey(key, languageName, defaultString, parameters);
        this.innerHTML = result;
    }
    _setInnerHTMLFromKeyIfPossible() {
        if (this._innerHTMLKey && this._defaultInnerHTML) {
            this.setInnerHTML(this._innerHTMLKey, this._defaultInnerHTML, this._parameters);
        }
    }
    _setInnerHTMLFromLocalizedTextObjectIfPossible() {
        if (IS(this._localizedTextObject)) {
            this.innerHTML = UICore.languageService.stringForCurrentLanguage(this._localizedTextObject);
        }
    }
    get localizedTextObject() {
        return this._localizedTextObject;
    }
    set localizedTextObject(localizedTextObject) {
        this._localizedTextObject = localizedTextObject;
        this._setInnerHTMLFromLocalizedTextObjectIfPossible();
    }
    get innerHTML() {
        return this.viewHTMLElement.innerHTML;
    }
    set innerHTML(innerHTML) {
        if (this.innerHTML != innerHTML) {
            this.viewHTMLElement.innerHTML = FIRST(innerHTML, "");
        }
    }
    set hoverText(hoverText) {
        this.viewHTMLElement.setAttribute("title", hoverText);
    }
    get hoverText() {
        return this.viewHTMLElement.getAttribute("title");
    }
    get scrollSize() {
        const result = new UIRectangle(0, 0, this.viewHTMLElement.scrollHeight, this.viewHTMLElement.scrollWidth);
        return result;
    }
    get dialogView() {
        if (!IS(this.superview)) {
            return nil;
        }
        if (!(this instanceof UIDialogView)) {
            return this.superview.dialogView;
        }
        return this;
    }
    get rootView() {
        if (IS(this.superview)) {
            return this.superview.rootView;
        }
        return this;
    }
    set enabled(enabled) {
        this._enabled = enabled;
        this.updateContentForCurrentEnabledState();
    }
    get enabled() {
        return this._enabled;
    }
    updateContentForCurrentEnabledState() {
        this.hidden = !this.enabled;
        this.userInteractionEnabled = this.enabled;
    }
    get tabIndex() {
        return Number(this.viewHTMLElement.getAttribute("tabindex"));
    }
    set tabIndex(index) {
        this.viewHTMLElement.setAttribute("tabindex", "" + index);
    }
    get styleClasses() {
        return this._styleClasses;
    }
    set styleClasses(styleClasses) {
        this._styleClasses = styleClasses;
    }
    hasStyleClass(styleClass) {
        // This is for performance reasons
        if (!IS(styleClass)) {
            return NO;
        }
        const index = this.styleClasses.indexOf(styleClass);
        if (index > -1) {
            return YES;
        }
        return NO;
    }
    addStyleClass(styleClass) {
        if (!IS(styleClass)) {
            return;
        }
        if (!this.hasStyleClass(styleClass)) {
            this._styleClasses.push(styleClass);
        }
    }
    removeStyleClass(styleClass) {
        // This is for performance reasons
        if (!IS(styleClass)) {
            return;
        }
        const index = this.styleClasses.indexOf(styleClass);
        if (index > -1) {
            this.styleClasses.splice(index, 1);
        }
    }
    static findViewWithElementID(elementID) {
        const viewHTMLElement = document.getElementById(elementID);
        if (IS_NOT(viewHTMLElement)) {
            return nil;
        }
        // @ts-ignore
        const result = viewHTMLElement.UIView;
        return result;
    }
    static createStyleSelector(selector, style) {
        return;
        // @ts-ignore
        if (!document.styleSheets) {
            return;
        }
        if (document.getElementsByTagName("head").length == 0) {
            return;
        }
        var styleSheet;
        var mediaType;
        if (document.styleSheets.length > 0) {
            for (var i = 0, l = document.styleSheets.length; i < l; i++) {
                if (document.styleSheets[i].disabled) {
                    continue;
                }
                const media = document.styleSheets[i].media;
                mediaType = typeof media;
                if (mediaType === "string") {
                    if (media === "" || (media.indexOf("screen") !== -1)) {
                        styleSheet = document.styleSheets[i];
                    }
                }
                else if (mediaType == "object") {
                    if (media.mediaText === "" || (media.mediaText.indexOf("screen") !== -1)) {
                        styleSheet = document.styleSheets[i];
                    }
                }
                if (typeof styleSheet !== "undefined") {
                    break;
                }
            }
        }
        if (typeof styleSheet === "undefined") {
            const styleSheetElement = document.createElement("style");
            styleSheetElement.type = "text/css";
            document.getElementsByTagName("head")[0].appendChild(styleSheetElement);
            for (i = 0; i < document.styleSheets.length; i++) {
                if (document.styleSheets[i].disabled) {
                    continue;
                }
                styleSheet = document.styleSheets[i];
            }
            mediaType = typeof styleSheet.media;
        }
        if (mediaType === "string") {
            for (var i = 0, l = styleSheet.rules.length; i < l; i++) {
                if (styleSheet.rules[i].selectorText && styleSheet.rules[i].selectorText.toLowerCase() ==
                    selector.toLowerCase()) {
                    styleSheet.rules[i].style.cssText = style;
                    return;
                }
            }
            styleSheet.addRule(selector, style);
        }
        else if (mediaType === "object") {
            var styleSheetLength = 0;
            try {
                styleSheetLength = (styleSheet.cssRules) ? styleSheet.cssRules.length : 0;
            }
            catch (error) {
            }
            for (var i = 0; i < styleSheetLength; i++) {
                if (styleSheet.cssRules[i].selectorText && styleSheet.cssRules[i].selectorText.toLowerCase() ==
                    selector.toLowerCase()) {
                    styleSheet.cssRules[i].style.cssText = style;
                    return;
                }
            }
            styleSheet.insertRule(selector + "{" + style + "}", styleSheetLength);
        }
    }
    static getStyleRules(selector) {
        var selector = selector.toLowerCase();
        for (var i = 0; i < document.styleSheets.length; i++) {
            const styleSheet = document.styleSheets[i];
            var styleRules;
            try {
                styleRules = styleSheet.cssRules ? styleSheet.cssRules : styleSheet.rules;
            }
            catch (error) {
            }
            return styleRules;
        }
    }
    get style() {
        return this.viewHTMLElement.style;
    }
    get computedStyle() {
        return getComputedStyle(this.viewHTMLElement);
    }
    get hidden() {
        return this._isHidden;
    }
    set hidden(v) {
        this._isHidden = v;
        if (this._isHidden) {
            this.style.visibility = "hidden";
        }
        else {
            this.style.visibility = "visible";
        }
    }
    static set pageScale(scale) {
        UIView._pageScale = scale;
        const zoom = scale;
        const width = 100 / zoom;
        const viewHTMLElement = UICore.main.rootViewController.view.viewHTMLElement;
        viewHTMLElement.style.transformOrigin = "left top";
        viewHTMLElement.style.transform = "scale(" + zoom + ")";
        viewHTMLElement.style.width = width + "%";
    }
    static get pageScale() {
        return UIView._pageScale;
    }
    calculateAndSetViewFrame() {
        // Use this method to calculate the frame for the view itself
        // This can be used when adding subviews to existing views like buttons
    }
    get frame() {
        // var result = new UIRectangle(1 * this.viewHTMLElement.offsetLeft, 1 * this.viewHTMLElement.offsetTop, 1 * this.viewHTMLElement.offsetHeight, 1 * this.viewHTMLElement.offsetWidth);
        // result.zIndex = 1 * this.style.zIndex;
        var result = this._frame;
        if (!result) {
            result = new UIRectangle(1 * this.viewHTMLElement.offsetLeft, 1 * this.viewHTMLElement.offsetTop, 1 *
                this.viewHTMLElement.offsetHeight, 1 * this.viewHTMLElement.offsetWidth);
            result.zIndex = 0;
        }
        return result.copy();
    }
    set frame(rectangle) {
        if (IS(rectangle)) {
            this.setFrame(rectangle);
        }
    }
    setFrame(rectangle, zIndex = 0, performUncheckedLayout = NO) {
        const frame = this._frame || new UIRectangle(nil, nil, nil, nil);
        if (zIndex != undefined) {
            rectangle.zIndex = zIndex;
        }
        this._frame = rectangle;
        // This is useless because frames are copied
        // frame.didChange = function () {
        //     // Do nothing
        // }
        // rectangle.didChange = function () {
        //     this.frame = rectangle;
        // }.bind(this);
        if (frame && frame.isEqualTo(rectangle) && !performUncheckedLayout) {
            return;
        }
        UIView._setAbsoluteSizeAndPosition(this.viewHTMLElement, rectangle.topLeft.x, rectangle.topLeft.y, rectangle.width, rectangle.height, rectangle.zIndex);
        if (frame.height != rectangle.height || frame.width != rectangle.width || performUncheckedLayout) {
            this.setNeedsLayout();
            this.boundsDidChange();
            //this.layoutSubviews();
        }
    }
    get bounds() {
        var result;
        // if (IS_NOT(this._frame) && this.style.height == "" && this.style.width  == "" && this.style.left == "" && this.style.right == "" && this.style.bottom == "" && this.style.top == "") {
        //     result = new UIRectangle(0, 0, 0, 0)
        // }
        // else
        if (IS_NOT(this._frame)) {
            result = new UIRectangle(0, 0, 1 * this.viewHTMLElement.offsetHeight, 1 * this.viewHTMLElement.offsetWidth);
        }
        else {
            result = this.frame.copy();
            result.x = 0;
            result.y = 0;
        }
        return result;
    }
    set bounds(rectangle) {
        const frame = this.frame;
        this.frame = new UIRectangle(frame.topLeft.x, frame.topLeft.y, rectangle.height, rectangle.width);
    }
    boundsDidChange() {
    }
    setPosition(left = nil, right = nil, bottom = nil, top = nil, height = nil, width = nil) {
        const previousBounds = this.bounds;
        this.setStyleProperty("left", left);
        this.setStyleProperty("right", right);
        this.setStyleProperty("bottom", bottom);
        this.setStyleProperty("top", top);
        this.setStyleProperty("height", height);
        this.setStyleProperty("width", width);
        const bounds = this.bounds;
        if (bounds.height != previousBounds.height || bounds.width != previousBounds.width) {
            this.setNeedsLayout();
            this.boundsDidChange();
        }
    }
    setSizes(height, width) {
        const previousBounds = this.bounds;
        this.setStyleProperty("height", height);
        this.setStyleProperty("width", width);
        const bounds = this.bounds;
        if (bounds.height != previousBounds.height || bounds.width != previousBounds.width) {
            this.setNeedsLayout();
            this.boundsDidChange();
        }
    }
    setMinSizes(height, width) {
        const previousBounds = this.bounds;
        this.setStyleProperty("minHeight", height);
        this.setStyleProperty("minWidth", width);
        const bounds = this.bounds;
        if (bounds.height != previousBounds.height || bounds.width != previousBounds.width) {
            this.setNeedsLayout();
            this.boundsDidChange();
        }
    }
    setMaxSizes(height, width) {
        const previousBounds = this.bounds;
        this.setStyleProperty("maxHeight", height);
        this.setStyleProperty("maxWidth", width);
        const bounds = this.bounds;
        if (bounds.height != previousBounds.height || bounds.width != previousBounds.width) {
            this.setNeedsLayout();
            this.boundsDidChange();
        }
    }
    setMargin(margin) {
        const previousBounds = this.bounds;
        this.setStyleProperty("margin", margin);
        const bounds = this.bounds;
        if (bounds.height != previousBounds.height || bounds.width != previousBounds.width) {
            this.setNeedsLayout();
            this.boundsDidChange();
        }
    }
    setMargins(left, right, bottom, top) {
        const previousBounds = this.bounds;
        this.setStyleProperty("marginLeft", left);
        this.setStyleProperty("marginRight", right);
        this.setStyleProperty("marginBottom", bottom);
        this.setStyleProperty("marginTop", top);
        const bounds = this.bounds;
        if (bounds.height != previousBounds.height || bounds.width != previousBounds.width) {
            this.setNeedsLayout();
            this.boundsDidChange();
        }
    }
    setPadding(padding) {
        const previousBounds = this.bounds;
        this.setStyleProperty("padding", padding);
        const bounds = this.bounds;
        if (bounds.height != previousBounds.height || bounds.width != previousBounds.width) {
            this.setNeedsLayout();
            this.boundsDidChange();
        }
    }
    setPaddings(left, right, bottom, top) {
        const previousBounds = this.bounds;
        this.setStyleProperty("paddingLeft", left);
        this.setStyleProperty("paddingRight", right);
        this.setStyleProperty("paddingBottom", bottom);
        this.setStyleProperty("paddingTop", top);
        const bounds = this.bounds;
        if (bounds.height != previousBounds.height || bounds.width != previousBounds.width) {
            this.setNeedsLayout();
            this.boundsDidChange();
        }
    }
    setBorder(radius = nil, width = 1, color = UIColor.blackColor, style = "solid") {
        this.setStyleProperty("borderStyle", style);
        this.setStyleProperty("borderRadius", radius);
        this.setStyleProperty("borderColor", color.stringValue);
        this.setStyleProperty("borderWidth", width);
    }
    setStyleProperty(propertyName, value) {
        try {
            if (IS_NIL(value)) {
                return;
            }
            if (IS_DEFINED(value) && value.isANumber) {
                value = "" + value.integerValue + "px";
            }
            this.style[propertyName] = value;
        }
        catch (exception) {
            console.log(exception);
        }
    }
    get userInteractionEnabled() {
        const result = (this.style.pointerEvents != "none");
        return result;
    }
    set userInteractionEnabled(userInteractionEnabled) {
        if (userInteractionEnabled) {
            this.style.pointerEvents = "";
        }
        else {
            this.style.pointerEvents = "none";
        }
    }
    get backgroundColor() {
        return this._backgroundColor;
    }
    set backgroundColor(backgroundColor) {
        this._backgroundColor = backgroundColor;
        this.style.backgroundColor = backgroundColor.stringValue;
    }
    get alpha() {
        return 1 * this.style.opacity;
    }
    set alpha(alpha) {
        this.style.opacity = "" + alpha;
    }
    static animateViewOrViewsWithDurationDelayAndFunction(viewOrViews, duration, delay, timingStyle = "cubic-bezier(0.25,0.1,0.25,1)", transformFunction, transitioncompletionFunction) {
        function callTransitioncompletionFunction() {
            (transitioncompletionFunction || nil)();
            viewOrViews.forEach(function (view, index, array) {
                view.animationDidFinish();
            });
        }
        if (IS_FIREFOX) {
            // Firefox does not fire the transition completion event properly
            new UIObject().performFunctionWithDelay(delay + duration, callTransitioncompletionFunction);
        }
        if (!(viewOrViews instanceof Array)) {
            viewOrViews = [viewOrViews];
        }
        const transitionStyles = [];
        const transitionDurations = [];
        const transitionDelays = [];
        const transitionTimings = [];
        for (var i = 0; i < viewOrViews.length; i++) {
            var view = viewOrViews[i];
            if (view.viewHTMLElement) {
                view = view.viewHTMLElement;
            }
            view.addEventListener("transitionend", transitionDidFinish, true);
            transitionStyles.push(view.style.transition);
            transitionDurations.push(view.style.transitionDuration);
            transitionDelays.push(view.style.transitionDelay);
            transitionTimings.push(view.style.transitionTimingFunction);
            view.style.transition = "all";
            view.style.transitionDuration = "" + duration + "s";
            view.style.transitionDelay = "" + delay + "s";
            view.style.transitionTimingFunction = timingStyle;
        }
        transformFunction();
        const transitionObject = {
            "finishImmediately": finishTransitionImmediately,
            "didFinish": transitionDidFinishManually,
            "views": viewOrViews,
            "registrationTime": Date.now()
        };
        function finishTransitionImmediately() {
            for (var i = 0; i < viewOrViews.length; i++) {
                var view = viewOrViews[i];
                if (view.viewHTMLElement) {
                    view = view.viewHTMLElement;
                }
                view.style.transition = "all";
                view.style.transitionDuration = "" + duration + "s";
                view.style.transitionDelay = "" + delay + "s";
                view.style.transition = transitionStyles[i];
                view.style.transitionDuration = transitionDurations[i];
                view.style.transitionDelay = transitionDelays[i];
                view.style.transitionTimingFunction = transitionTimings[i];
            }
        }
        function transitionDidFinish(event) {
            var view = event.srcElement;
            if (!view) {
                return;
            }
            if (view.viewHTMLElement) {
                view = view.viewHTMLElement;
            }
            view.style.transition = transitionStyles[i];
            view.style.transitionDuration = transitionDurations[i];
            view.style.transitionDelay = transitionDelays[i];
            view.style.transitionTimingFunction = transitionTimings[i];
            callTransitioncompletionFunction();
            view.removeEventListener("transitionend", transitionDidFinish, true);
        }
        function transitionDidFinishManually() {
            for (var i = 0; i < viewOrViews.length; i++) {
                var view = viewOrViews[i];
                if (view.viewHTMLElement) {
                    view = view.viewHTMLElement;
                }
                view.style.transition = transitionStyles[i];
                view.style.transitionDuration = transitionDurations[i];
                view.style.transitionDelay = transitionDelays[i];
                view.style.transitionTimingFunction = transitionTimings[i];
                view.removeEventListener("transitionend", transitionDidFinish, true);
            }
        }
        return transitionObject;
    }
    animationDidFinish() {
    }
    static _setAbsoluteSizeAndPosition(element, left, top, width, height, zIndex = 0) {
        // if (!UIView._transformAttribute) {
        //     UIView._transformAttribute = (('transform' in document.documentElement.style) ? 'transform' : undefined);
        //     UIView._transformAttribute = UIView._transformAttribute || (('-webkit-transform' in document.documentElement.style) ? '-webkit-transform' : 'undefined');
        //     UIView._transformAttribute = UIView._transformAttribute || (('-moz-transform' in document.documentElement.style) ? '-moz-transform' : 'undefined');
        //     UIView._transformAttribute = UIView._transformAttribute || (('-ms-transform' in document.documentElement.style) ? '-ms-transform' : 'undefined');
        //     UIView._transformAttribute = UIView._transformAttribute || (('-o-transform' in document.documentElement.style) ? '-o-transform' : 'undefined');
        // }
        if (!IS(element) || !element.obeyAutolayout && !element.getAttribute("obeyAutolayout")) {
            return;
        }
        if (element.id == "mainView") {
            var asd = 1;
        }
        if (IS(height)) {
            height = height.integerValue + "px";
        }
        if (IS(width)) {
            width = width.integerValue + "px";
        }
        var str = element.style.cssText;
        const frameTransform = UIView._transformAttribute + ": translate3d(" + (1 * left).integerValue + "px, " +
            (1 * top).integerValue + "px, " + zIndex.integerValue + "px)";
        if (element.UIView) {
            str = str + frameTransform + ";";
        }
        else {
            element.UIView._frameTransform = frameTransform;
        }
        if (height == nil) {
            str = str + " height: unset;";
        }
        else {
            str = str + " height:" + height + ";";
        }
        if (width == nil) {
            str = str + " width: unset;";
        }
        else {
            str = str + " width:" + width + ";";
        }
        if (element.id == "mainView") {
            var asd = 1;
        }
        element.style.cssText = element.style.cssText + str;
    }
    static performAutoLayout(parentElement, visualFormatArray, constraintsArray) {
        const view = new AutoLayout.View();
        if (IS(visualFormatArray) && IS(visualFormatArray.length)) {
            view.addConstraints(AutoLayout.VisualFormat.parse(visualFormatArray, { extended: true }));
        }
        if (IS(constraintsArray) && IS(constraintsArray.length)) {
            view.addConstraints(constraintsArray);
        }
        const elements = {};
        for (var key in view.subViews) {
            if (!view.subViews.hasOwnProperty(key)) {
                continue;
            }
            var element = nil;
            try {
                element = parentElement.querySelector("#" + key);
            }
            catch (error) {
                //console.log("Error occurred " + error);
            }
            if (element && !element.obeyAutolayout && !element.getAttribute("obeyAutolayout")) {
            }
            else if (element) {
                element.className += element.className ? " abs" : "abs";
                elements[key] = element;
            }
        }
        var parentUIView = nil;
        if (parentElement.UIView) {
            parentUIView = parentElement.UIView;
        }
        const updateLayout = function () {
            view.setSize(parentElement ? parentElement.clientWidth : window.innerWidth, parentElement ? parentElement.clientHeight : window.innerHeight);
            for (key in view.subViews) {
                if (!view.subViews.hasOwnProperty(key)) {
                    continue;
                }
                const subView = view.subViews[key];
                if (elements[key]) {
                    UIView._setAbsoluteSizeAndPosition(elements[key], subView.left, subView.top, subView.width, subView.height);
                }
            }
            parentUIView.didLayoutSubviews();
        };
        updateLayout();
        return updateLayout;
    }
    static runFunctionBeforeNextFrame(step) {
        if (IS_SAFARI) {
            // This creates a microtask
            Promise.resolve().then(step);
        }
        else {
            window.requestAnimationFrame(step);
        }
    }
    static scheduleLayoutViewsIfNeeded() {
        UIView.runFunctionBeforeNextFrame(UIView.layoutViewsIfNeeded);
    }
    static layoutViewsIfNeeded() {
        for (var i = 0; i < UIView._viewsToLayout.length; i++) {
            const view = UIView._viewsToLayout[i];
            view.layoutIfNeeded();
        }
        UIView._viewsToLayout = [];
    }
    setNeedsLayout() {
        if (this._shouldLayout) {
            return;
        }
        this._shouldLayout = YES;
        // Register view for layout before next frame
        UIView._viewsToLayout.push(this);
        if (UIView._viewsToLayout.length == 1) {
            UIView.scheduleLayoutViewsIfNeeded();
        }
    }
    get needsLayout() {
        return this._shouldLayout;
    }
    layoutIfNeeded() {
        if (!this._shouldLayout) {
            return;
        }
        this._shouldLayout = NO;
        try {
            this.layoutSubviews();
        }
        catch (exception) {
            console.log(exception);
        }
    }
    layoutSubviews() {
        this._shouldLayout = NO;
        // Autolayout
        //window.removeEventListener('resize', this._updateLayoutFunction);
        if (this.constraints.length) {
            this._updateLayoutFunction = UIView.performAutoLayout(this.viewHTMLElement, null, this.constraints);
        }
        //this._updateLayoutFunction = this.layoutSubviews.bind(this);
        //window.addEventListener('resize', this._updateLayoutFunction);
        this._viewControllerLayoutFunction();
        this.applyClassesAndStyles();
        for (var i = 0; i < this.subviews.length; i++) {
            const subview = this.subviews[i];
            subview.calculateAndSetViewFrame();
            //subview.layoutSubviews();
        }
        this.didLayoutSubviews();
    }
    applyClassesAndStyles() {
        //var classesString = "";
        for (var i = 0; i < this.styleClasses.length; i++) {
            const styleClass = this.styleClasses[i];
            if (styleClass) {
                this.viewHTMLElement.classList.add(styleClass);
            }
            //classesString = classesString + " " + styleClass;
        }
        //this.viewHTMLElement.className = classesString;
    }
    didLayoutSubviews() {
        this._didLayoutSubviewsDelegateFunction();
    }
    get constraints() {
        return this._constraints;
    }
    set constraints(constraints) {
        this._constraints = constraints;
    }
    addConstraint(constraint) {
        this.constraints.push(constraint);
    }
    addConstraintsWithVisualFormat(visualFormatArray) {
        this.constraints = this.constraints.concat(AutoLayout.VisualFormat.parse(visualFormatArray, { extended: true }));
    }
    static constraintWithView(view, attribute, relation, toView, toAttribute, multiplier, constant, priority) {
        var UIViewObject = nil;
        var viewID = null;
        if (view) {
            if (view.isKindOfClass && view.isKindOfClass(UIView)) {
                UIViewObject = view;
                view = view.viewHTMLElement;
            }
            viewID = view.id;
        }
        var toUIViewObject = nil;
        var toViewID = null;
        if (toView) {
            if (toView.isKindOfClass && view.isKindOfClass(UIView)) {
                toUIViewObject = toView;
                toView = toView.viewHTMLElement;
            }
            toViewID = toView.id;
        }
        const constraint = {
            view1: viewID,
            attr1: attribute,
            relation: relation,
            view2: toViewID,
            attr2: toAttribute,
            multiplier: multiplier,
            constant: constant,
            priority: priority
        };
        return constraint;
    }
    subviewWithID(viewID) {
        var resultHTMLElement = nil;
        try {
            resultHTMLElement = this.viewHTMLElement.querySelector("#" + viewID);
        }
        catch (error) {
        }
        if (resultHTMLElement && resultHTMLElement.UIView) {
            return resultHTMLElement.UIView;
        }
        return nil;
    }
    rectangleContainingSubviews() {
        const center = this.bounds.center;
        var result = new UIRectangle(center.x, center.y, 0, 0);
        for (var i = 0; i < this.subviews.length; i++) {
            const subview = this.subviews[i];
            var frame = subview.frame;
            const rectangleContainingSubviews = subview.rectangleContainingSubviews();
            frame = frame.concatenateWithRectangle(rectangleContainingSubviews);
            result = result.concatenateWithRectangle(frame);
        }
        return result;
    }
    hasSubview(view) {
        // This is for performance reasons
        if (!IS(view)) {
            return NO;
        }
        for (var i = 0; i < this.subviews.length; i++) {
            const subview = this.subviews[i];
            if (subview == view) {
                return YES;
            }
        }
        return NO;
    }
    get viewBelowThisView() {
        const result = (this.viewHTMLElement.previousElementSibling || {}).UIView;
        return result;
    }
    get viewAboveThisView() {
        const result = (this.viewHTMLElement.nextElementSibling || {}).UIView;
        return result;
    }
    addSubview(view, aboveView) {
        if (!this.hasSubview(view) && IS(view)) {
            view.willMoveToSuperview(this);
            if (IS(aboveView)) {
                this.viewHTMLElement.insertBefore(view.viewHTMLElement, aboveView.viewHTMLElement.nextSibling);
                this.subviews.insertElementAtIndex(this.subviews.indexOf(aboveView), view);
            }
            else {
                this.viewHTMLElement.appendChild(view.viewHTMLElement);
                this.subviews.push(view);
            }
            view.didMoveToSuperview(this);
            if (this.superview && this.isMemberOfViewTree) {
                view.broadcastEventInSubtree({
                    name: UIView.broadcastEventName.AddedToViewTree,
                    parameters: nil
                });
            }
            this.setNeedsLayout();
        }
    }
    addSubviews(views) {
        views.forEach(function (view, index, array) {
            this.addSubview(view);
        }, this);
    }
    moveToBottomOfSuperview() {
        if (IS(this.superview)) {
            const bottomView = this.superview.subviews.firstElement;
            if (bottomView == this) {
                return;
            }
            this.superview.subviews.removeElement(this);
            this.superview.subviews.insertElementAtIndex(0, this);
            this.superview.viewHTMLElement.insertBefore(this.viewHTMLElement, bottomView.viewHTMLElement);
        }
    }
    moveToTopOfSuperview() {
        if (IS(this.superview)) {
            const topView = this.superview.subviews.lastElement;
            if (topView == this) {
                return;
            }
            this.superview.subviews.removeElement(this);
            this.superview.subviews.push(this);
            this.superview.viewHTMLElement.appendChild(this.viewHTMLElement);
        }
    }
    removeFromSuperview() {
        if (IS(this.superview)) {
            this.forEachViewInSubtree(function (view) {
                view.blur();
            });
            const index = this.superview.subviews.indexOf(this);
            if (index > -1) {
                this.superview.subviews.splice(index, 1);
                this.superview.viewHTMLElement.removeChild(this.viewHTMLElement);
                this.superview = nil;
                this.broadcastEventInSubtree({
                    name: UIView.broadcastEventName.RemovedFromViewTree,
                    parameters: nil
                });
            }
        }
    }
    willAppear() {
    }
    willMoveToSuperview(superview) {
        this._setInnerHTMLFromKeyIfPossible();
        this._setInnerHTMLFromLocalizedTextObjectIfPossible();
    }
    didMoveToSuperview(superview) {
        this.superview = superview;
    }
    wasAddedToViewTree() {
    }
    wasRemovedFromViewTree() {
    }
    get isMemberOfViewTree() {
        var element = this.viewHTMLElement;
        for (var i = 0; element; i = i) {
            if (element.parentElement && element.parentElement == document.body) {
                return YES;
            }
            element = element.parentElement;
        }
        return NO;
    }
    get allSuperviews() {
        const result = [];
        var view = this;
        for (var i = 0; IS(view); i = i) {
            result.push(view);
            view = view.superview;
        }
        return result;
    }
    setNeedsLayoutOnAllSuperviews() {
        this.allSuperviews.reverse().forEach(function (view, index, array) {
            view.setNeedsLayout();
        });
    }
    setNeedsLayoutUpToRootView() {
        this.setNeedsLayoutOnAllSuperviews();
        this.setNeedsLayout();
    }
    focus() {
        this.viewHTMLElement.focus();
    }
    blur() {
        this.viewHTMLElement.blur();
    }
    _loadUIEvents() {
        //this.viewHTMLElement = nil;
        const isTouchEventClassDefined = NO || window.TouchEvent;
        const pauseEvent = (event, forced = NO) => {
            if (this.pausesPointerEvents || forced) {
                if (event.stopPropagation) {
                    event.stopPropagation();
                }
                if (event.preventDefault) {
                    event.preventDefault();
                }
                event.cancelBubble = true;
                event.returnValue = false;
                return false;
            }
            if (event.stopPropagation && this.stopsPointerEventPropagation) {
                event.stopPropagation();
            }
        };
        const onMouseDown = (event) => {
            if ((this.ignoresTouches && isTouchEventClassDefined && event instanceof TouchEvent) ||
                ((this.ignoresMouse || (IS(this._touchEventTime) && (Date.now() - this._touchEventTime) > 500)) &&
                    event instanceof MouseEvent)) {
                return;
            }
            this.sendControlEventForKey(UIView.controlEvent.PointerDown, event);
            this._isPointerInside = YES;
            this._isPointerValid = YES;
            this._initialPointerPosition = new UIPoint(event.clientX, event.clientY);
            if (isTouchEventClassDefined && event instanceof TouchEvent) {
                this._touchEventTime = Date.now();
                this._initialPointerPosition = new UIPoint(event.touches[0].clientX, event.touches[0].clientY);
                if (event.touches.length > 1) {
                    onTouchCancel(event);
                    return;
                }
            }
            else {
                this._touchEventTime = nil;
                pauseEvent(event);
            }
            this._hasPointerDragged = NO;
        };
        const onTouchStart = onMouseDown;
        const onmouseup = (event) => {
            if (!this._isPointerValid) {
                return;
            }
            if ((this.ignoresTouches && isTouchEventClassDefined && event instanceof TouchEvent) ||
                (this.ignoresMouse && event instanceof MouseEvent)) {
                return;
            }
            if (this._isPointerInside) {
                onPointerUpInside(event);
                if (!this._hasPointerDragged) {
                    this.sendControlEventForKey(UIView.controlEvent.PointerTap, event);
                }
            }
            // This has to be sent after the more specific event so that UIButton can ignore it when not highlighted
            this.sendControlEventForKey(UIView.controlEvent.PointerUp, event);
            pauseEvent(event);
        };
        const onTouchEnd = onmouseup;
        // function onMouseEnter(event) {
        //     this.sendControlEventForKey(UIView.controlEvent.PointerEnter, event);
        //     this._isPointerInside = YES;
        //     pauseEvent(event);
        // }
        const onmouseout = (event) => {
            if ((this.ignoresTouches && isTouchEventClassDefined && event instanceof TouchEvent) ||
                (this.ignoresMouse && event instanceof MouseEvent)) {
                return;
            }
            this.sendControlEventForKey(UIView.controlEvent.PointerLeave, event);
            this._isPointerInside = NO;
            pauseEvent(event);
        };
        const onTouchLeave = onmouseout;
        var onTouchCancel = function (event) {
            if (!this._isPointerValid) {
                return;
            }
            if ((this.ignoresTouches && isTouchEventClassDefined && event instanceof TouchEvent) ||
                (this.ignoresMouse && event instanceof MouseEvent)) {
                return;
            }
            this._isPointerValid = NO;
            this.sendControlEventForKey(UIView.controlEvent.PointerCancel, event);
        }.bind(this);
        const onmouseover = (event) => {
            if ((this.ignoresTouches && isTouchEventClassDefined && event instanceof TouchEvent) ||
                (this.ignoresMouse && event instanceof MouseEvent)) {
                return;
            }
            this.sendControlEventForKey(UIView.controlEvent.PointerHover, event);
            this._isPointerInside = YES;
            this._isPointerValid = YES;
            pauseEvent(event);
        };
        const onMouseMove = (event) => {
            if (!this._isPointerValid) {
                return;
            }
            if ((this.ignoresTouches && isTouchEventClassDefined && event instanceof TouchEvent) ||
                (this.ignoresMouse && event instanceof MouseEvent)) {
                return;
            }
            if (IS_NOT(this._initialPointerPosition)) {
                this._initialPointerPosition = new UIPoint(event.clientX, event.clientY);
            }
            if (new UIPoint(event.clientX, event.clientY).to(this._initialPointerPosition).length >
                this._pointerDragThreshold) {
                this._hasPointerDragged = YES;
            }
            this.sendControlEventForKey(UIView.controlEvent.PointerMove, event);
            pauseEvent(event);
        };
        const onTouchMove = function (event) {
            if (!this._isPointerValid) {
                return;
            }
            if ((this.ignoresTouches && isTouchEventClassDefined && event instanceof TouchEvent) ||
                (this.ignoresMouse && event instanceof MouseEvent)) {
                return;
            }
            if (event.touches.length > 1) {
                onTouchZoom(event);
                return;
            }
            const touch = event.touches[0];
            if (new UIPoint(touch.clientX, touch.clientY).to(this._initialPointerPosition).length >
                this._pointerDragThreshold) {
                this._hasPointerDragged = YES;
            }
            if (this._isPointerInside && this.viewHTMLElement !=
                document.elementFromPoint(touch.clientX, touch.clientY)) {
                this._isPointerInside = NO;
                this.sendControlEventForKey(UIView.controlEvent.PointerLeave, event);
            }
            this.sendControlEventForKey(UIView.controlEvent.PointerMove, event);
            //pauseEvent(event);
        };
        var onTouchZoom = function onTouchZoom(event) {
            this.sendControlEventForKey(UIView.controlEvent.MultipleTouches, event);
        }.bind(this);
        var onPointerUpInside = (event) => {
            pauseEvent(event);
            this.sendControlEventForKey(UIView.controlEvent.PointerUpInside, event);
        };
        function eventKeyIsEnter(event) {
            if (event.keyCode !== 13) {
                return NO;
            }
            return YES;
        }
        function eventKeyIsTab(event) {
            if (event.keyCode !== 9) {
                return NO;
            }
            return YES;
        }
        function eventKeyIsEsc(event) {
            var result = false;
            if ("key" in event) {
                result = (event.key == "Escape" || event.key == "Esc");
            }
            else {
                result = (event.keyCode == 27);
            }
            return result;
        }
        function eventKeyIsLeft(event) {
            if (event.keyCode != "37") {
                return NO;
            }
            return YES;
        }
        function eventKeyIsRight(event) {
            if (event.keyCode != "39") {
                return NO;
            }
            return YES;
        }
        function eventKeyIsDown(event) {
            if (event.keyCode != "40") {
                return NO;
            }
            return YES;
        }
        function eventKeyIsUp(event) {
            if (event.keyCode != "38") {
                return NO;
            }
            return YES;
        }
        const onKeyDown = function (event) {
            if (eventKeyIsEnter(event)) {
                this.sendControlEventForKey(UIView.controlEvent.EnterDown, event);
            }
            if (eventKeyIsEsc(event)) {
                this.sendControlEventForKey(UIView.controlEvent.EscDown, event);
            }
            if (eventKeyIsTab(event) && this._controlEventTargets.TabDown && this._controlEventTargets.TabDown.length) {
                this.sendControlEventForKey(UIView.controlEvent.TabDown, event);
                pauseEvent(event, YES);
            }
            if (eventKeyIsLeft(event)) {
                this.sendControlEventForKey(UIView.controlEvent.LeftArrowDown, event);
            }
            if (eventKeyIsRight(event)) {
                this.sendControlEventForKey(UIView.controlEvent.RightArrowDown, event);
            }
            if (eventKeyIsDown(event)) {
                this.sendControlEventForKey(UIView.controlEvent.DownArrowDown, event);
            }
            if (eventKeyIsUp(event)) {
                this.sendControlEventForKey(UIView.controlEvent.UpArrowDown, event);
            }
        }.bind(this);
        const onKeyUp = function (event) {
            if (eventKeyIsEnter(event)) {
                this.sendControlEventForKey(UIView.controlEvent.EnterUp, event);
            }
        }.bind(this);
        const onfocus = function (event) {
            this.sendControlEventForKey(UIView.controlEvent.Focus, event);
        }.bind(this);
        const onblur = function (event) {
            this.sendControlEventForKey(UIView.controlEvent.Blur, event);
        }.bind(this);
        // Mouse and touch start events
        this._viewHTMLElement.onmousedown = onMouseDown.bind(this);
        this._viewHTMLElement.ontouchstart = onTouchStart.bind(this);
        // this.viewHTMLElement.addEventListener("mousedown", onMouseDown.bind(this), false)
        // this.viewHTMLElement.addEventListener('touchstart', onTouchStart.bind(this), false)
        // //this.viewHTMLElement.addEventListener("mouseenter", onMouseEnter.bind(this), false);
        // Mouse and touch move events
        this._viewHTMLElement.onmousemove = onMouseMove.bind(this);
        this._viewHTMLElement.ontouchmove = onTouchMove.bind(this);
        // this.viewHTMLElement.addEventListener("mousemove", onMouseMove.bind(this), false)
        // this.viewHTMLElement.addEventListener('touchmove', onTouchMove.bind(this), false)
        //this.viewHTMLElement.addEventListener("mousewheel", onmousewheel.bind(this), false)
        this._viewHTMLElement.onmouseover = onmouseover.bind(this);
        // this.viewHTMLElement.addEventListener("mouseover", onmouseover.bind(this), false)
        // Mouse and touch end events
        this._viewHTMLElement.onmouseup = onmouseup.bind(this);
        this._viewHTMLElement.ontouchend = onTouchEnd.bind(this);
        this._viewHTMLElement.ontouchcancel = onTouchCancel.bind(this);
        // this.viewHTMLElement.addEventListener("mouseup", onmouseup.bind(this), false)
        // this.viewHTMLElement.addEventListener('touchend', onTouchEnd.bind(this), false)
        // this.viewHTMLElement.addEventListener('touchcancel', onTouchCancel.bind(this), false)
        this._viewHTMLElement.onmouseout = onmouseout.bind(this);
        // this.viewHTMLElement.addEventListener("mouseout", onmouseout.bind(this), false)
        this._viewHTMLElement.addEventListener("touchleave", onTouchLeave.bind(this), false);
        // this.viewHTMLElement.onkeydown = onkeydown
        // this.viewHTMLElement.onkeyup = onkeyup
        this._viewHTMLElement.addEventListener("keydown", onKeyDown, false);
        this._viewHTMLElement.addEventListener("keyup", onKeyUp, false);
        // Focus events
        this._viewHTMLElement.onfocus = onfocus;
        this._viewHTMLElement.onblur = onblur;
        // this.viewHTMLElement.addEventListener("focus", onfocus, true)
        // this.viewHTMLElement.addEventListener("blur", onblur, true)
    }
    get addControlEventTarget() {
        const eventKeys = [];
        const result = new Proxy(this.constructor.controlEvent, {
            get: (target, key, receiver) => {
                eventKeys.push(key);
                return result;
            },
            set: (target, key, value, receiver) => {
                eventKeys.push(key);
                this.addTargetForControlEvents(eventKeys, value);
                return true;
            }
        });
        return result;
    }
    addTargetForControlEvents(eventKeys, targetFunction) {
        eventKeys.forEach(function (key, index, array) {
            this.addTargetForControlEvent(key, targetFunction);
        }, this);
    }
    addTargetForControlEvent(eventKey, targetFunction) {
        var targets = this._controlEventTargets[eventKey];
        if (!targets) {
            // @ts-ignore
            targets = [];
            this._controlEventTargets[eventKey] = targets;
        }
        if (targets.indexOf(targetFunction) == -1) {
            targets.push(targetFunction);
        }
    }
    removeTargetForControlEvent(eventKey, targetFunction) {
        const targets = this._controlEventTargets[eventKey];
        if (!targets) {
            return;
        }
        const index = targets.indexOf(targetFunction);
        if (index != -1) {
            targets.splice(index, 1);
        }
    }
    removeTargetForControlEvents(eventKeys, targetFunction) {
        eventKeys.forEach(function (key, index, array) {
            this.removeTargetForControlEvent(key, targetFunction);
        }, this);
    }
    sendControlEventForKey(eventKey, nativeEvent) {
        var targets = this._controlEventTargets[eventKey];
        if (!targets) {
            return;
        }
        targets = targets.copy();
        for (var i = 0; i < targets.length; i++) {
            const target = targets[i];
            target(this, nativeEvent);
        }
    }
    broadcastEventInSubtree(event) {
        this.forEachViewInSubtree(function (view) {
            view.didReceiveBroadcastEvent(event);
            if (view._didReceiveBroadcastEventDelegateFunction) {
                view._didReceiveBroadcastEventDelegateFunction(event);
            }
        });
    }
    didReceiveBroadcastEvent(event) {
        if (event.name == UIView.broadcastEventName.PageDidScroll) {
            this._isPointerValid = NO;
        }
        if (event.name == UIView.broadcastEventName.AddedToViewTree) {
            this.wasAddedToViewTree();
        }
        if (event.name == UIView.broadcastEventName.RemovedFromViewTree) {
            this.wasRemovedFromViewTree();
        }
        if (event.name == UIView.broadcastEventName.LanguageChanged || event.name ==
            UIView.broadcastEventName.AddedToViewTree) {
            this._setInnerHTMLFromKeyIfPossible();
            this._setInnerHTMLFromLocalizedTextObjectIfPossible();
        }
    }
    forEachViewInSubtree(functionToCall) {
        functionToCall(this);
        this.subviews.forEach(function (subview, index, array) {
            subview.forEachViewInSubtree(functionToCall);
        });
    }
    rectangleInView(rectangle, view) {
        if (!view.isMemberOfViewTree || !this.isMemberOfViewTree) {
            return nil;
        }
        const viewClientRectangle = view.viewHTMLElement.getBoundingClientRect();
        const viewLocation = new UIPoint(viewClientRectangle.left, viewClientRectangle.top);
        const selfClientRectangle = this.viewHTMLElement.getBoundingClientRect();
        const selfLocation = new UIPoint(selfClientRectangle.left, selfClientRectangle.top);
        const offsetPoint = selfLocation.subtract(viewLocation);
        return rectangle.copy().offsetByPoint(offsetPoint);
    }
    rectangleFromView(rectangle, view) {
        return view.rectangleInView(rectangle, this);
    }
    intrinsicContentSizeWithConstraints(constrainingHeight = 0, constrainingWidth = 0) {
        // This works but is slow
        const result = new UIRectangle(0, 0, 0, 0);
        if (this.rootView.forceIntrinsicSizeZero) {
            return result;
        }
        var temporarilyInViewTree = NO;
        var nodeAboveThisView;
        if (!this.isMemberOfViewTree) {
            document.body.appendChild(this.viewHTMLElement);
            temporarilyInViewTree = YES;
            nodeAboveThisView = this.viewHTMLElement.nextSibling;
        }
        const height = this.style.height;
        const width = this.style.width;
        this.style.height = "" + constrainingHeight;
        this.style.width = "" + constrainingWidth;
        const left = this.style.left;
        const right = this.style.right;
        const bottom = this.style.bottom;
        const top = this.style.top;
        this.style.left = "";
        this.style.right = "";
        this.style.bottom = "";
        this.style.top = "";
        const resultHeight = this.viewHTMLElement.scrollHeight;
        const whiteSpace = this.style.whiteSpace;
        this.style.whiteSpace = "nowrap";
        const resultWidth = this.viewHTMLElement.scrollWidth;
        this.style.whiteSpace = whiteSpace;
        this.style.height = height;
        this.style.width = width;
        this.style.left = left;
        this.style.right = right;
        this.style.bottom = bottom;
        this.style.top = top;
        if (temporarilyInViewTree) {
            document.body.removeChild(this.viewHTMLElement);
            if (this.superview) {
                if (nodeAboveThisView) {
                    this.superview.viewHTMLElement.insertBefore(this.viewHTMLElement, nodeAboveThisView);
                }
                else {
                    this.superview.viewHTMLElement.appendChild(this.viewHTMLElement);
                }
            }
        }
        result.height = resultHeight;
        result.width = resultWidth;
        return result;
    }
    intrinsicContentWidth(constrainingHeight = 0) {
        const result = this.intrinsicContentSizeWithConstraints(constrainingHeight).width;
        return result;
    }
    intrinsicContentHeight(constrainingWidth = 0) {
        const result = this.intrinsicContentSizeWithConstraints(undefined, constrainingWidth).height;
        return result;
    }
    intrinsicContentSize() {
        return nil;
    }
}
UIView._UIViewIndex = -1;
UIView._viewsToLayout = [];
UIView._pageScale = 1;
UIView._transformAttribute = (("transform" in document.documentElement.style) ? "transform" : undefined) ||
    (("-webkit-transform" in document.documentElement.style) ? "-webkit-transform" : "undefined") ||
    (("-moz-transform" in document.documentElement.style) ? "-moz-transform" : "undefined") ||
    (("-ms-transform" in document.documentElement.style) ? "-ms-transform" : "undefined") ||
    (("-o-transform" in document.documentElement.style) ? "-o-transform" : "undefined");
UIView.constraintAttribute = {
    "left": AutoLayout.Attribute.LEFT,
    "right": AutoLayout.Attribute.RIGHT,
    "bottom": AutoLayout.Attribute.BOTTOM,
    "top": AutoLayout.Attribute.TOP,
    "centerX": AutoLayout.Attribute.CENTERX,
    "centerY": AutoLayout.Attribute.CENTERY,
    "height": AutoLayout.Attribute.HEIGHT,
    "width": AutoLayout.Attribute.WIDTH,
    "zIndex": AutoLayout.Attribute.ZINDEX,
    // Not sure what these are for
    "constant": AutoLayout.Attribute.NOTANATTRIBUTE,
    "variable": AutoLayout.Attribute.VARIABLE
};
UIView.constraintRelation = {
    "equal": AutoLayout.Relation.EQU,
    "lessThanOrEqual": AutoLayout.Relation.LEQ,
    "greaterThanOrEqual": AutoLayout.Relation.GEQ
};
UIView.controlEvent = {
    "PointerDown": "PointerDown",
    "PointerMove": "PointerMove",
    "PointerLeave": "PointerLeave",
    "PointerEnter": "PointerEnter",
    "PointerUpInside": "PointerUpInside",
    "PointerTap": "PointerTap",
    "PointerUp": "PointerUp",
    "MultipleTouches": "PointerZoom",
    "PointerCancel": "PointerCancel",
    "PointerHover": "PointerHover",
    "EnterDown": "EnterDown",
    "EnterUp": "EnterUp",
    "EscDown": "EscDown",
    "TabDown": "TabDown",
    "LeftArrowDown": "LeftArrowDown",
    "RightArrowDown": "RightArrowDown",
    "DownArrowDown": "DownArrowDown",
    "UpArrowDown": "UpArrowDown",
    "Focus": "Focus",
    "Blur": "Blur"
};
UIView.broadcastEventName = {
    "LanguageChanged": "LanguageChanged",
    "RemovedFromViewTree": "RemovedFromViewTree",
    "AddedToViewTree": "AddedToViewTree",
    "PageDidScroll": "PageDidScroll"
};
/// <reference path="./UICore/UIView.ts" />
class BottomBarView extends UIView {
    //label: UITextView;
    constructor(elementID) {
        super(elementID);
        this._class = BottomBarView;
        this.superclass = UIView;
    }
    initView(elementID, viewHTMLElement) {
        super.initView(elementID, viewHTMLElement);
        this.backgroundColor = UIColor.colorWithRGBA(50, 50, 50);
        this.setInnerHTML("bottomBarContent", "bottomBarContent");
        // this.label = new UITextView("BottomBarLabel");
        // this.label.setText("bottomBarLabelText","Bottom bar for contact information and such");
        // this.label.textColor = UIColor.whiteColor;
        // this.label.textAlignment = UITextView.textAlignment.center;
        // this.addSubview(this.label);
    }
    layoutSubviews() {
        super.layoutSubviews();
        //this.label.centerInContainer();
    }
}
if ("removeElementAtIndex" in Array.prototype == NO) {
    Array.prototype.removeElementAtIndex = function (index) {
        if (index >= 0 && index < this.length) {
            this.splice(index, 1);
        }
    };
}
if ("removeElement" in Array.prototype == NO) {
    Array.prototype.removeElement = function (element) {
        this.removeElementAtIndex(this.indexOf(element));
    };
}
if ("insertElementAtIndex" in Array.prototype == NO) {
    Array.prototype.insertElementAtIndex = function (index, element) {
        if (index >= 0 && index <= this.length) {
            this.splice(index, 0, element);
        }
    };
}
if ("replaceElementAtIndex" in Array.prototype == NO) {
    Array.prototype.replaceElementAtIndex = function (index, element) {
        this.removeElementAtIndex(index);
        this.insertElementAtIndex(index, element);
    };
}
if ("contains" in Array.prototype == NO) {
    Array.prototype.contains = function (element) {
        const result = (this.indexOf(element) != -1);
        return result;
    };
}
if ("containsAny" in Array.prototype == NO) {
    Array.prototype.containsAny = function (elements) {
        const result = this.anyMatch(function (element, index, array) {
            return elements.contains(element);
        });
        return result;
    };
}
Array.prototype.max = function () {
    return Math.max.apply(null, this);
};
Array.prototype.min = function () {
    return Math.min.apply(null, this);
};
if ("anyMatch" in Array.prototype == NO) {
    Array.prototype.anyMatch = function (functionToCall) {
        const result = (this.findIndex(functionToCall) > -1);
        return result;
    };
}
if ("noneMatch" in Array.prototype == NO) {
    Array.prototype.noneMatch = function (functionToCall) {
        const result = (this.findIndex(functionToCall) == -1);
        return result;
    };
}
if ("allMatch" in Array.prototype == NO) {
    Array.prototype.allMatch = function (functionToCall) {
        function reversedFunction(value, index, array) {
            return !functionToCall(value, index, array);
        }
        const result = (this.findIndex(reversedFunction) == -1);
        return result;
    };
}
if ("groupedBy" in Array.prototype == NO) {
    Array.prototype.groupedBy = function (funcProp) {
        return this.reduce(function (acc, val) {
            (acc[funcProp(val)] = acc[funcProp(val)] || []).push(val);
            return acc;
        }, {});
    };
}
if ("firstElement" in Array.prototype == NO) {
    Object.defineProperty(Array.prototype, "firstElement", {
        get: function firstElement() {
            const result = this[0];
            return result;
        },
        set: function (element) {
            if (this.length == 0) {
                this.push(element);
                return;
            }
            this[0] = element;
        }
    });
}
if ("lastElement" in Array.prototype == NO) {
    Object.defineProperty(Array.prototype, "lastElement", {
        get: function lastElement() {
            const result = this[this.length - 1];
            return result;
        },
        set: function (element) {
            if (this.length == 0) {
                this.push(element);
                return;
            }
            this[this.length - 1] = element;
        }
    });
}
if ("everyElement" in Array.prototype == NO) {
    Object.defineProperty(Array.prototype, "everyElement", {
        get: function everyElement() {
            var valueKeys = [];
            const targetFunction = (objects) => {
                return this.map((element, index, array) => {
                    var elementFunction = UIObject.valueForKeyPath(valueKeys.join("."), element).bind(element, objects);
                    return elementFunction();
                });
            };
            const result = new Proxy(targetFunction, {
                get: (target, key, receiver) => {
                    if (key == "UI_elementValues") {
                        return this.map((element, index, array) => UIObject.valueForKeyPath(valueKeys.join("."), element));
                    }
                    valueKeys.push(key);
                    return result;
                },
                set: (target, key, value, receiver) => {
                    valueKeys.push(key);
                    this.forEach((element, index, array) => {
                        UIObject.setValueForKeyPath(valueKeys.join("."), value, element, YES);
                    });
                    return true;
                }
            });
            return result;
        },
        set: function (element) {
            for (var i = 0; i < this.length; ++i) {
                this[i] = element;
            }
        }
    });
}
if ("copy" in Array.prototype == NO) {
    Array.prototype.copy = function () {
        const result = this.slice(0);
        return result;
    };
}
if ("arrayByRepeating" in Array.prototype == NO) {
    Array.prototype.arrayByRepeating = function (numberOfRepetitions) {
        const result = [];
        for (var i = 0; i < numberOfRepetitions; i++) {
            this.forEach(function (element, index, array) {
                result.push(element);
            });
        }
        return result;
    };
}
if ("arrayByTrimmingToLengthIfLonger" in Array.prototype == NO) {
    Array.prototype.arrayByTrimmingToLengthIfLonger = function (maxLength) {
        const result = [];
        for (var i = 0; i < maxLength && i < this.length; i++) {
            result.push(this[i]);
        }
        return result;
    };
}
if ("summedValue" in Array.prototype == NO) {
    Object.defineProperty(Array.prototype, "summedValue", {
        get: function summedValue() {
            const result = this.reduce(function (a, b) {
                return a + b;
            }, 0);
            return result;
        }
    });
}
// Warn if overriding existing method
if ("isEqualToArray" in Array.prototype == YES) {
    console.warn("Overriding existing Array.prototype.isEqualToArray. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code.");
}
// attach the .equals method to Array's prototype to call it on any array
Array.prototype.isEqualToArray = function (array, keyPath) {
    // if the other array is a falsy value, return
    if (!array) {
        return false;
    }
    // compare lengths - can save a lot of time 
    if (this.length != array.length) {
        return false;
    }
    var i = 0;
    const l = this.length;
    for (; i < l; i++) {
        // Check if we have nested arrays
        if (this[i] instanceof Array && array[i] instanceof Array && !keyPath) {
            // recurse into the nested arrays
            if (!this[i].isEqualToArray(array[i])) {
                return false;
            }
        }
        else if (keyPath && UIObject.valueForKeyPath(keyPath, this[i]) != UIObject.valueForKeyPath(keyPath, array[i])) {
            return false;
        }
        else if (this[i] != array[i]) {
            // Warning - two different object instances will never be equal: {x:20} != {x:20}
            return false;
        }
    }
    return true;
};
// Hide method from for-in loops
Object.defineProperty(Array.prototype, "isEqualToArray", { enumerable: false });
if ("forEach" in Object.prototype == NO) {
    Object.prototype.forEach = function (callbackFunction) {
        const keys = Object.keys(this);
        keys.forEach(function (key, index, array) {
            callbackFunction(this[key], key);
        }.bind(this));
    };
    // Hide method from for-in loops
    Object.defineProperty(Object.prototype, "forEach", { enumerable: false });
}
if ("allValues" in Object.prototype == NO) {
    Object.defineProperty(Object.prototype, "allValues", {
        get: function () {
            const values = [];
            this.forEach(function (value) {
                values.push(value);
            });
            return values;
        }
    });
}
if ("allKeys" in Object.prototype == NO) {
    Object.defineProperty(Object.prototype, "allKeys", {
        get: function () {
            const values = Object.keys(this);
            return values;
        }
    });
}
if ("objectByCopyingValuesRecursivelyFromObject" in Object.prototype == NO) {
    Object.prototype.objectByCopyingValuesRecursivelyFromObject = function (object) {
        function isAnObject(item) {
            return (item && typeof item === "object" && !Array.isArray(item));
        }
        function mergeRecursively(target, source) {
            const output = Object.assign({}, target);
            if (isAnObject(target) && isAnObject(source)) {
                Object.keys(source).forEach(function (key) {
                    if (isAnObject(source[key])) {
                        // if (!(key in target)) {
                        //     Object.assign(output, { [key]: source[key] });
                        // }
                        // else {
                        output[key] = mergeRecursively(target[key], source[key]);
                        //}
                    }
                    else {
                        Object.assign(output, { [key]: source[key] });
                    }
                });
            }
            return output;
        }
        const result = mergeRecursively(this, object);
        return result;
    };
    // Hide method from for-in loops
    Object.defineProperty(Object.prototype, "objectByCopyingValuesRecursivelyFromObject", { enumerable: false });
}
if ("copyValuesRecursivelyFromObject" in Object.prototype == NO) {
    Object.prototype.copyValuesRecursivelyFromObject = function (object) {
        function isAnObject(item) {
            return (item && typeof item === "object" && !Array.isArray(item));
        }
        function mergeRecursively(target, source) {
            const output = target;
            if (isAnObject(target) && isAnObject(source)) {
                Object.keys(source).forEach(function (key) {
                    if (isAnObject(source[key])) {
                        // if (!(key in target)) {
                        //     Object.assign(output, { [key]: source[key] });
                        // }
                        // else {
                        output[key] = mergeRecursively(target[key], source[key]);
                        //}
                    }
                    else {
                        Object.assign(output, { [key]: source[key] });
                    }
                });
            }
            return output;
        }
        const result = mergeRecursively(this, object);
        return result;
    };
    // Hide method from for-in loops
    Object.defineProperty(Object.prototype, "copyValuesRecursivelyFromObject", { enumerable: false });
}
if ("contains" in String.prototype == NO) {
    String.prototype.contains = function (string) {
        const result = (this.indexOf(string) != -1);
        return result;
    };
}
if ("capitalizedString" in String.prototype == NO) {
    Object.defineProperty(Object.prototype, "capitalizedString", {
        get: function () {
            const result = this.charAt(0).toUpperCase() + this.slice(1).toLowerCase();
            return result;
        }
    });
}
if ("numericalValue" in String.prototype == NO) {
    Object.defineProperty(String.prototype, "numericalValue", {
        get: function numericalValue() {
            const result = Number(this);
            return result;
        }
    });
}
if ("isAString" in String.prototype == NO) {
    String.prototype.isAString = YES;
}
if ("isANumber" in Number.prototype == NO) {
    Number.prototype.isANumber = YES;
}
if ("integerValue" in Number.prototype == NO) {
    Object.defineProperty(Number.prototype, "integerValue", {
        get: function () {
            const result = parseInt("" + (Math.round(this) + 0.5));
            return result;
        }
    });
}
class PrimitiveNumber {
    // @ts-ignore
    static [Symbol.hasInstance](x) {
        return;
    }
}
if ("integerValue" in Boolean.prototype == NO) {
    Object.defineProperty(Boolean.prototype, "integerValue", {
        get: function () {
            if (this == true) {
                return 1;
            }
            return 0;
        }
    });
}
if ("dateString" in Date.prototype == NO) {
    Object.defineProperty(Date.prototype, "dateString", {
        get: function dateString() {
            const result = ("0" + this.getDate()).slice(-2) + "-" + ("0" + (this.getMonth() + 1)).slice(-2) + "-" +
                this.getFullYear() + " " + ("0" + this.getHours()).slice(-2) + ":" +
                ("0" + this.getMinutes()).slice(-2);
            return result;
        }
    });
}
/// <reference path="../UICore/UIObject.ts" />
/// <reference path="../UICore/UICoreExtensions.ts" />
class CBSocketCallbackHolder extends UIObject {
    constructor(socketClient, previousCallbackHolder) {
        super();
        this.messageDescriptors = {};
        this.handlers = {};
        this.onetimeHandlers = {};
        this.keysForIdentifiers = {};
        this.isValid = YES;
        this._verifiedResponseHashesDictionary = {};
        this._socketClient = socketClient;
        if (IS(previousCallbackHolder)) {
            this.handlers = previousCallbackHolder.handlers;
            this._verifiedResponseHashesDictionary = previousCallbackHolder._verifiedResponseHashesDictionary;
        }
    }
    triggerDisconnectHandlers() {
        this.messageDescriptors.forEach(function (descriptor, key) {
            if (descriptor.mainResponseReceived) {
                descriptor.completionFunction(CBSocketClient.disconnectionMessage, nil);
            }
        });
    }
    registerHandler(key, handlerFunction) {
        if (!this.handlers[key]) {
            this.handlers[key] = [];
        }
        this.handlers[key].push(handlerFunction);
    }
    registerOnetimeHandler(key, handlerFunction) {
        if (!this.onetimeHandlers[key]) {
            this.onetimeHandlers[key] = [];
        }
        this.onetimeHandlers[key].push(handlerFunction);
    }
    get storedResponseHashesDictionary() {
        if (IS_NOT(this._storedResponseHashesDictionary)) {
            this._storedResponseHashesDictionary = JSON.parse(localStorage["CBSocketResponseHashesDictionary"] || "{}");
        }
        return this._storedResponseHashesDictionary;
    }
    storedResponseHashObjectForKey(requestKey, requestDataHash) {
        const localStorageKey = this.keyForRequestKeyAndRequestDataHash(requestKey, requestDataHash);
        const hashObject = this.storedResponseHashesDictionary[localStorageKey];
        const result = FIRST(hashObject, {});
        return result;
    }
    storedResponseForKey(requestKey, requestDataHash) {
        const localStorageKey = this.keyForRequestKeyAndRequestDataHash(requestKey, requestDataHash);
        const storedObject = JSON.parse(localStorage[localStorageKey] || "{}");
        return storedObject.responseMessageData;
    }
    keyForRequestKeyAndRequestDataHash(requestKey, requestDataHash) {
        const result = "_CBSCH_LS_key_" + requestKey + "_" + requestDataHash;
        return result;
    }
    storeResponse(requestKey, requestDataHash, responseMessage, responseDataHash) {
        if (!responseMessage.canBeStoredAsResponse ||
            (IS_NOT(responseMessage.messageData) && IS_NOT(responseMessage.messageDataHash))) {
            return;
        }
        const localStorageKey = this.keyForRequestKeyAndRequestDataHash(requestKey, requestDataHash);
        var validityDate;
        if (responseMessage.responseValidityDuration) {
            validityDate = Date.now() + responseMessage.responseValidityDuration;
        }
        const storedResponseHashesDictionary = this.storedResponseHashesDictionary;
        storedResponseHashesDictionary[localStorageKey] = {
            hash: responseDataHash,
            validityDate: validityDate
        };
        this.saveInLocalStorage(localStorageKey, {
            responseMessageData: responseMessage.messageData,
            responseHash: responseDataHash
        });
        this.saveStoredResponseHashesDictionary(storedResponseHashesDictionary);
    }
    saveStoredResponseHashesDictionary(storedResponseHashesDictionary) {
        this.saveInLocalStorage("CBSocketResponseHashesDictionary", storedResponseHashesDictionary);
    }
    saveInLocalStorage(key, object) {
        const stringToSave = JSON.stringify(object);
        if (stringToSave != localStorage[key]) {
            localStorage[key] = stringToSave;
        }
    }
    socketShouldSendMessage(key, message, completionPolicy, completionFunction) {
        var result = YES;
        var triggerStoredResponseImmediately = NO;
        // @ts-ignore
        const messageDataHash = objectHash(message.messageData || nil);
        const descriptorKey = "socketMessageDescriptor_" + key + messageDataHash;
        this.messageDescriptors[descriptorKey] = (this.messageDescriptors[descriptorKey] || []);
        const hashObject = this.storedResponseHashObjectForKey(key, messageDataHash);
        message.storedResponseHash = hashObject.hash;
        if (completionPolicy == CBSocketClient.completionPolicy.first) {
            const descriptorsForKey = (this.messageDescriptors[descriptorKey] || []);
            const matchingDescriptor = descriptorsForKey.find(function (descriptor, index, array) {
                return (descriptor.messageDataHash == messageDataHash);
            });
            if (matchingDescriptor) {
                result = NO;
            }
        }
        if (completionPolicy == CBSocketClient.completionPolicy.storedOrFirst) {
            const descriptorsForKey = (this.messageDescriptors[descriptorKey] || []);
            const matchingDescriptor = descriptorsForKey.find(function (descriptor, index, array) {
                return (descriptor.messageDataHash == messageDataHash);
            });
            const storedResponse = IS(message.storedResponseHash);
            if (matchingDescriptor ||
                (storedResponse && this._verifiedResponseHashesDictionary[message.storedResponseHash])) {
                result = NO;
                triggerStoredResponseImmediately = YES;
            }
        }
        if (completionPolicy == CBSocketClient.completionPolicy.firstOnly) {
            const descriptorsForKey = (this.messageDescriptors[descriptorKey] || []);
            const matchingDescriptor = descriptorsForKey.find(function (descriptor, index, array) {
                return (descriptor.messageDataHash == messageDataHash);
            });
            if (matchingDescriptor) {
                return NO;
            }
        }
        if (hashObject && hashObject.hash && hashObject.validityDate && message.storedResponseHash &&
            this._verifiedResponseHashesDictionary[message.storedResponseHash] && hashObject.validityDate >
            Date.now()) {
            result = NO;
            triggerStoredResponseImmediately = YES;
        }
        if (IS(completionFunction)) {
            this.messageDescriptors[descriptorKey].push({
                key: key,
                message: {
                    identifier: message.identifier,
                    inResponseToIdentifier: message.inResponseToIdentifier,
                    keepWaitingForResponses: message.keepWaitingForResponses
                },
                sentAtTime: Date.now(),
                //completionTriggered: NO,
                messageDataHash: messageDataHash,
                mainResponseReceived: NO,
                anyMainResponseReceived: NO,
                completionPolicy: completionPolicy,
                completionFunction: completionFunction
            });
            this.keysForIdentifiers[message.identifier] = descriptorKey;
        }
        if (triggerStoredResponseImmediately) {
            this.socketDidReceiveMessageForKey(CBSocketClient.responseMessageKey, {
                identifier: nil,
                messageData: nil,
                inResponseToIdentifier: message.identifier,
                useStoredResponse: YES
            }, nil);
        }
        return result;
    }
    static defaultMultipleMessagecompletionFunction(responseMessages, callcompletionFunctions) {
        callcompletionFunctions();
    }
    socketWillSendMultipleMessage(messageToSend, completionFunction = CBSocketCallbackHolder.defaultMultipleMessagecompletionFunction) {
        const key = CBSocketClient.multipleMessageKey;
        // @ts-ignore
        const messageDataHash = objectHash(messageToSend.messageData || nil);
        const descriptorKey = "socketMessageDescriptor_" + key + messageDataHash;
        this.messageDescriptors[descriptorKey] = (this.messageDescriptors[descriptorKey] || []);
        messageToSend.storedResponseHash = this.storedResponseHashObjectForKey(key, messageDataHash).hash;
        this.messageDescriptors[descriptorKey].push({
            key: key,
            message: {
                identifier: messageToSend.identifier,
                inResponseToIdentifier: messageToSend.inResponseToIdentifier,
                keepWaitingForResponses: messageToSend.keepWaitingForResponses
            },
            sentAtTime: Date.now(),
            //completionTriggered: NO,
            messageDataHash: messageDataHash,
            mainResponseReceived: NO,
            anyMainResponseReceived: NO,
            completionPolicy: CBSocketClient.completionPolicy.directOnly,
            completionFunction: function (responseMessage, respondWithMessage) {
                completionFunction(responseMessage.map(function (messageObject, index, array) {
                    return messageObject.message.messageData;
                }), function () {
                    //console.log("Received multiple message response with length of " + responseMessage.length + ".");
                    // Call all completion functions
                    responseMessage.forEach(function (messageObject, index, array) {
                        this._socketClient.didReceiveMessageForKey(messageObject.key, messageObject.message);
                    }.bind(this));
                }.bind(this));
            }.bind(this)
        });
        this.keysForIdentifiers[messageToSend.identifier] = descriptorKey;
    }
    socketDidReceiveMessageForKey(key, message, sendResponseFunction) {
        if (!this.isValid) {
            return;
        }
        // Call static handlers
        if (this.handlers[key]) {
            this.handlers[key].forEach(function (handler, index, array) {
                handler(message.messageData, sendResponseFunction);
            }.bind(this));
        }
        if (this.onetimeHandlers[key]) {
            this.onetimeHandlers[key].forEach(function (handler, index, array) {
                handler(message.messageData, sendResponseFunction);
            }.bind(this));
            delete this.onetimeHandlers[key];
        }
        // Temporary response handlers are evaluated here
        if (message.inResponseToIdentifier &&
            (CBSocketClient.responseMessageKey == key || CBSocketClient.multipleMessageKey == key)) {
            // Find descriptors for the key of the message that is being responded to
            const descriptorKey = this.keysForIdentifiers[message.inResponseToIdentifier];
            const descriptorsForKey = (this.messageDescriptors[descriptorKey] || []);
            // Find response data hash to check for differences
            const responseDataHash = message.messageDataHash;
            // Remove identifier from dictionary
            if (!message.keepWaitingForResponses) {
                delete this.keysForIdentifiers[message.inResponseToIdentifier];
                delete this.messageDescriptors[descriptorKey];
            }
            // Function to call completion function
            const callCompletionFunction = (descriptor, storedResponseCondition = NO) => {
                var messageData = message.messageData;
                if (message.useStoredResponse && storedResponseCondition) {
                    messageData = this.storedResponseForKey(descriptor.key, descriptor.messageDataHash);
                    const responseHash = this.storedResponseHashObjectForKey(descriptor.key, descriptor.messageDataHash).hash;
                    const localStorageKey = this.keyForRequestKeyAndRequestDataHash(descriptor.key, descriptor.messageDataHash);
                    if (message.responseValidityDuration && this.storedResponseHashesDictionary[localStorageKey]) {
                        this.storedResponseHashesDictionary[localStorageKey].validityDate = Date.now() +
                            message.responseValidityDuration;
                        this.saveStoredResponseHashesDictionary(this.storedResponseHashesDictionary);
                    }
                    this._verifiedResponseHashesDictionary[responseHash] = YES;
                    console.log("Using stored response.");
                }
                // Call completionFunction and set response data hash
                descriptor.completionFunction(messageData, sendResponseFunction);
                descriptor.responseDataHash = responseDataHash;
            };
            descriptorsForKey.copy().forEach(function (descriptor, index, array) {
                if ((descriptor.completionPolicy == CBSocketClient.completionPolicy.directOnly &&
                    descriptor.message.identifier == message.inResponseToIdentifier) || descriptor.completionPolicy ==
                    CBSocketClient.completionPolicy.first || descriptor.completionPolicy ==
                    CBSocketClient.completionPolicy.firstOnly || descriptor.completionPolicy ==
                    CBSocketClient.completionPolicy.storedOrFirst) {
                    // Calling completion function and removing descriptor
                    if (!message.keepWaitingForResponses) {
                        this.storeResponse(descriptor.key, descriptor.messageDataHash, message, responseDataHash);
                        descriptorsForKey.removeElement(descriptor);
                        sendResponseFunction.respondingToMainResponse = YES;
                    }
                    callCompletionFunction(descriptor, !message.keepWaitingForResponses);
                }
                else if (descriptor.completionPolicy == CBSocketClient.completionPolicy.all) {
                    // Calling completion function
                    callCompletionFunction(descriptor, !message.keepWaitingForResponses);
                    // Marking descriptor as having been responded to
                    if (!message.keepWaitingForResponses) {
                        if (message.inResponseToIdentifier == descriptor.message.identifier) {
                            sendResponseFunction.respondingToMainResponse = YES;
                            descriptor.mainResponseReceived = YES;
                            descriptorsForKey.removeElement(descriptor);
                        }
                        descriptor.anyMainResponseReceived = YES;
                    }
                }
                else if (descriptor.completionPolicy == CBSocketClient.completionPolicy.allDifferent) {
                    // Calling completionFunction if messageData is different from previous
                    if (descriptor.responseDataHash != responseDataHash) {
                        callCompletionFunction(descriptor, !message.keepWaitingForResponses);
                    }
                    // Marking descriptor as having been responded to
                    if (!message.keepWaitingForResponses) {
                        if (message.inResponseToIdentifier == descriptor.message.identifier) {
                            sendResponseFunction.respondingToMainResponse = YES;
                            descriptor.mainResponseReceived = YES;
                            descriptorsForKey.removeElement(descriptor);
                        }
                        descriptor.anyMainResponseReceived = YES;
                    }
                }
                else if (descriptor.completionPolicy == CBSocketClient.completionPolicy.last &&
                    descriptor.message.identifier == message.inResponseToIdentifier) {
                    if (!message.keepWaitingForResponses) {
                        // Marking descriptor as having been responded to
                        descriptor.mainResponseReceived = YES;
                        descriptor.anyMainResponseReceived = YES;
                        sendResponseFunction.respondingToMainResponse = YES;
                    }
                    else {
                        descriptor.completionFunction(message.messageData, sendResponseFunction);
                    }
                }
                else if (descriptor.completionPolicy == CBSocketClient.completionPolicy.firstAndLast ||
                    descriptor.completionPolicy == CBSocketClient.completionPolicy.firstAndLastIfDifferent) {
                    if (!message.keepWaitingForResponses) {
                        // Only calling completionFunction once as a first response call
                        if (!descriptor.anyMainResponseReceived) {
                            callCompletionFunction(descriptor, !message.keepWaitingForResponses);
                        }
                        // Marking descriptor as having been responded to
                        if (descriptor.message.identifier == message.inResponseToIdentifier) {
                            descriptor.mainResponseReceived = YES;
                            sendResponseFunction.respondingToMainResponse = YES;
                        }
                        descriptor.anyMainResponseReceived = YES;
                    }
                    else if (descriptor.message.identifier == message.inResponseToIdentifier &&
                        message.keepWaitingForResponses) {
                        descriptor.completionFunction(message.messageData, sendResponseFunction);
                    }
                }
            }.bind(this));
            // Last message completion policies
            const allResponsesReceived = descriptorsForKey.allMatch(function (descriptorObject, index, array) {
                return descriptorObject.mainResponseReceived;
            });
            descriptorsForKey.copy().forEach(function (descriptor, index, array) {
                if ((descriptor.completionPolicy == CBSocketClient.completionPolicy.last ||
                    descriptor.completionPolicy == CBSocketClient.completionPolicy.firstAndLast) &&
                    allResponsesReceived && !message.keepWaitingForResponses) {
                    // Calling completionFunction
                    callCompletionFunction(descriptor, !message.keepWaitingForResponses);
                    // Cleaning up
                    descriptorsForKey.removeElement(descriptor);
                }
                else if (descriptor.completionPolicy == CBSocketClient.completionPolicy.firstAndLastIfDifferent &&
                    allResponsesReceived && !message.keepWaitingForResponses) {
                    // Calling completionFunction if needed
                    if (descriptor.responseDataHash != responseDataHash) {
                        callCompletionFunction(descriptor, !message.keepWaitingForResponses);
                    }
                    // Cleaning up
                    descriptorsForKey.removeElement(descriptor);
                }
            }.bind(this));
        }
    }
}
/// <reference path="../socket.io-client.dev.d.ts" />
/// <reference path="../UICore/UIObject.ts" />
/// <reference path="../UICore/UICoreExtensions.ts" />
/// <reference path="../CBCore.ts" />
/// <reference path="./CBSocketCallbackHolder.ts" />
function IS_SOCKET_ERROR(object) {
    const result = (IS(object) && object._isCBSocketErrorMessage);
    return result;
}
function IS_NOT_SOCKET_ERROR(object) {
    return !IS_SOCKET_ERROR(object);
}
class CBSocketClient extends UIObject {
    constructor(core) {
        super();
        this._socket = io();
        this._isConnectionEstablished = NO;
        this._collectMessagesToSendLater = NO;
        this._messagesToBeSent = [];
        this._subscribedKeys = {};
        this._callbackHolder = new CBSocketCallbackHolder(this);
        this._class = CBSocketClient;
        this.superclass = UIObject;
        this._core = core;
        // @ts-ignore
        this.socket.on("connect", function (socket) {
            console.log("Socket.io connected to server. clientID = " + socket + ", socketID = " + socket);
            var instanceIdentifier = localStorage.getItem("InstanceIdentifier");
            if (IS_NOT(instanceIdentifier)) {
                instanceIdentifier = MAKE_ID();
                localStorage.setItem("InstanceIdentifier", instanceIdentifier);
            }
            const handshakeMessage = {
                accessToken: null,
                instanceIdentifier: instanceIdentifier
            };
            this.socket.emit("CBSocketHandshakeInitMessage", {
                identifier: MAKE_ID(),
                messageData: handshakeMessage
            });
        }.bind(this));
        this.socket.on("CBSocketHandshakeResponseMessage", function (message) {
            this._isConnectionEstablished = message.messageData.accepted;
            if (!message.messageData.accepted) {
                console.log("SocketIO connection failed.");
            }
            else {
                console.log("SocketIO connection handshake completed.");
                this._callbackHolder = new CBSocketCallbackHolder(this, this._callbackHolder);
                this.sendUnsentMessages();
            }
        }.bind(this));
        // @ts-ignore
        this.socket.on("disconnect", function (socket) {
            console.log("Socket.io disconnected from server. clientID = " + socket + ".");
            this._isConnectionEstablished = NO;
            this._callbackHolder.isValid = NO;
            this._callbackHolder.triggerDisconnectHandlers();
        }.bind(this));
        this.socket.on("CBPerformReconnect", function (message) {
            console.log("Performing socket reconnection.");
            core.reloadSocketConnection();
            if (message) {
                alert(message);
            }
        }.bind(this));
        this._socket.on(CBSocketClient.responseMessageKey, function (message) {
            this.didReceiveMessageForKey(CBSocketClient.responseMessageKey, message);
        }.bind(this));
        this._socket.on(CBSocketClient.multipleMessageKey, (message) => {
            console.log("Received " + message.messageData.length + " messages.");
            this.didReceiveMessageForKey(CBSocketClient.multipleMessageKey, message);
        });
    }
    get socket() {
        return this._socket;
    }
    cancelUnsentMessages(messagesToCancel) {
        this._messagesToBeSent = this._messagesToBeSent.filter(function (messageObject, index, array) {
            return !messagesToCancel.contains(messageObject);
        }.bind(this));
    }
    sendUnsentMessages(receiveResponsesTogether = NO, completion) {
        if (!this._isConnectionEstablished || this._collectMessagesToSendLater) {
            return;
        }
        const groupedMessages = [];
        const didSendFunctions = [];
        this._messagesToBeSent.copy().forEach(function (messageToBeSentObject, index, array) {
            if (this._isConnectionEstablished) {
                var message = messageToBeSentObject.message;
                if (IS_NOT(message)) {
                    message = "";
                }
                const identifier = MAKE_ID();
                const completion = messageToBeSentObject.completion;
                const messageObject = {
                    messageData: message,
                    identifier: identifier,
                    keepWaitingForResponses: messageToBeSentObject.keepWaitingForResponses,
                    inResponseToIdentifier: messageToBeSentObject.inResponseToMessage.identifier
                };
                const shouldSendMessage = this._callbackHolder.socketShouldSendMessage(messageToBeSentObject.key, messageObject, messageToBeSentObject.completionPolicy, completion);
                if (shouldSendMessage) {
                    groupedMessages.push({
                        key: messageToBeSentObject.key,
                        message: messageObject
                    });
                }
                didSendFunctions.push(messageToBeSentObject.didSendFunction);
            }
        }.bind(this));
        this._messagesToBeSent = [];
        if (IS_NOT(groupedMessages.length)) {
            return;
        }
        if (groupedMessages.length == 1) {
            console.log("sending 1 unsent message.");
        }
        else {
            console.log("Sending " + groupedMessages.length + " unsent messages.");
        }
        const messageObject = {
            messageData: groupedMessages,
            identifier: MAKE_ID(),
            shouldGroupResponses: receiveResponsesTogether
        };
        //if (receiveResponsesTogether) {
        this._callbackHolder.socketWillSendMultipleMessage(messageObject, completion);
        //}
        this.socket.emit(CBSocketClient.multipleMessageKey, messageObject);
        didSendFunctions.forEach(function (didSendFunction, index, array) {
            didSendFunction();
        });
    }
    sendUserBoundMessageForKeyWithPolicy(key, message, completionPolicy, completion) {
        this._sendMessageForKey(key, message, undefined, NO, completionPolicy, YES, nil, completion);
    }
    sendUserBoundMessageForKey(key, message, completion) {
        this._sendMessageForKey(key, message, undefined, NO, undefined, YES, nil, completion);
    }
    sendMessageForKeyWithPolicy(key, message, completionPolicy, completion) {
        this._sendMessageForKey(key, message, undefined, NO, completionPolicy, NO, nil, completion);
    }
    sendMessageForKey(key, message, completion) {
        this._sendMessageForKey(key, message, undefined, NO, undefined, NO, nil, completion);
    }
    resultForMessageForKey(key, message, completionPolicy, isUserBound = NO, intermediateResultMessageFunction = nil) {
        const result = new Promise((resolve, reject) => {
            this._sendMessageForKey(key, message, undefined, NO, completionPolicy, isUserBound, nil, (responseMessage, respondWithMessage) => {
                if (respondWithMessage.respondingToMainResponse) {
                    resolve({
                        responseMessage: responseMessage,
                        result: IF(IS_NOT_SOCKET_ERROR(responseMessage))(() => responseMessage)
                            .ELSE(RETURNER(undefined)),
                        errorResult: IF(IS_SOCKET_ERROR(responseMessage))(() => responseMessage)
                            .ELSE(RETURNER(undefined)),
                        respondWithMessage: respondWithMessage
                    });
                    return;
                }
                intermediateResultMessageFunction(responseMessage, respondWithMessage);
            });
        });
        return result;
    }
    _sendMessageForKey(key, message, inResponseToMessage = {}, keepMessageConnectionOpen = NO, completionPolicy = CBSocketClient.completionPolicy.directOnly, isUserBound = NO, didSendFunction = nil, completion = nil) {
        if (IS_NIL(message)) {
            message = "";
        }
        if (this._isConnectionEstablished && !this._collectMessagesToSendLater) {
            const identifier = MAKE_ID();
            const messageObject = {
                messageData: message,
                identifier: identifier,
                keepWaitingForResponses: keepMessageConnectionOpen,
                inResponseToIdentifier: inResponseToMessage.identifier
            };
            const shouldSendMessage = this._callbackHolder.socketShouldSendMessage(key, messageObject, completionPolicy, completion);
            if (shouldSendMessage) {
                this.socket.emit(key, messageObject);
            }
            didSendFunction();
        }
        else {
            this._messagesToBeSent.push({
                key: key,
                message: message,
                inResponseToMessage: inResponseToMessage,
                keepWaitingForResponses: keepMessageConnectionOpen,
                completionPolicy: completionPolicy,
                isBoundToUserWithID: null,
                didSendFunction: didSendFunction,
                completion: completion
            });
            return this._messagesToBeSent.lastElement;
        }
    }
    sendMessagesAsGroup(functionToCall) {
        const collectMessagesToSendLater = this._collectMessagesToSendLater;
        this._collectMessagesToSendLater = YES;
        functionToCall();
        this._collectMessagesToSendLater = collectMessagesToSendLater;
        this.sendUnsentMessages();
    }
    sendAndReceiveMessagesAsGroup(functionToCall, completion) {
        const collectMessagesToSendLater = this._collectMessagesToSendLater;
        this._collectMessagesToSendLater = YES;
        functionToCall();
        this._collectMessagesToSendLater = collectMessagesToSendLater;
        this.sendUnsentMessages(YES, completion);
    }
    didReceiveMessageForKey(key, message) {
        const sendResponseFunction = function (responseMessage, completion) {
            this._sendMessageForKey(CBSocketClient.responseMessageKey, responseMessage, message, NO, undefined, NO, nil, completion);
        }.bind(this);
        sendResponseFunction.sendIntermediateResponse = function (updateMessage, completion) {
            this._sendMessageForKey(CBSocketClient.responseMessageKey, updateMessage, message, YES, undefined, NO, nil, completion);
        }.bind(this);
        const sendUserBoundResponseFunction = function (responseMessage, completion) {
            this._sendMessageForKey(CBSocketClient.responseMessageKey, responseMessage, message, NO, undefined, YES, nil, completion);
        }.bind(this);
        sendUserBoundResponseFunction.sendIntermediateResponse = function (updateMessage, completion) {
            this._sendMessageForKey(CBSocketClient.responseMessageKey, updateMessage, message, YES, undefined, YES, nil, completion);
        }.bind(this);
        if (IS_SOCKET_ERROR(message.messageData)) {
            console.log("CBSocketClient did receive error message.");
            console.log(message.messageData);
        }
        this._callbackHolder.socketDidReceiveMessageForKey(key, message, sendResponseFunction);
    }
    addTargetForMessagesForKeys(keys, handlerFunction) {
        keys.forEach(function (key, index, array) {
            this.addTargetForMessagesForKey(key, handlerFunction);
        }.bind(this));
    }
    addTargetForMessagesForKey(key, handlerFunction) {
        this._callbackHolder.registerHandler(key, handlerFunction);
        if (IS_NOT(this._subscribedKeys[key])) {
            this._socket.on(key, function (message) {
                this.didReceiveMessageForKey(key, message);
            }.bind(this));
            this._subscribedKeys[key] = true;
        }
    }
    addTargetForOneMessageForKey(key, handlerFunction) {
        this._callbackHolder.registerOnetimeHandler(key, handlerFunction);
        if (IS_NOT(this._subscribedKeys[key])) {
            this._socket.on(key, function (message) {
                this.didReceiveMessageForKey(key, message);
            }.bind(this));
            this._subscribedKeys[key] = true;
        }
    }
}
CBSocketClient.responseMessageKey = "CBSocketResponseMessage";
CBSocketClient.multipleMessageKey = "CBSocketMultipleMessage";
CBSocketClient.disconnectionMessage = {
    _isCBSocketErrorMessage: YES,
    messageData: "Server disconnected"
};
CBSocketClient.completionPolicy = {
    "all": "all",
    "allDifferent": "allDifferent",
    "first": "first",
    "last": "last",
    "firstAndLast": "firstAndLast",
    "firstAndLastIfDifferent": "firstAndLastIfDifferent",
    "directOnly": "directOnly",
    "firstOnly": "firstOnly",
    "storedOrFirst": "storedOrFirst"
};
const SocketClient = new Proxy({ "name": "SocketClient" }, {
    get(target, key) {
        const result = (messageData, completionPolicy, isUserBound, intermediateResultFunction) => CBCore.sharedInstance.socketClient.resultForMessageForKey(key, messageData, completionPolicy, isUserBound, intermediateResultFunction);
        return result;
    }
});
/// <reference path="./Custom components/CBSocketClient.ts" />
class CBCore extends UIObject {
    constructor() {
        super();
        this._socketClient = new CBSocketClient(this);
        this._functionsToCallForEachSocketClient = [];
        this._class = CBCore;
        this.superclass = UIObject;
    }
    static get sharedInstance() {
        if (!CBCore._sharedInstance) {
            CBCore._sharedInstance = new CBCore();
        }
        return CBCore._sharedInstance;
    }
    broadcastMessageInRootViewTree(message) {
        UICore.main.rootViewController.view.broadcastEventInSubtree(message);
    }
    get socketClient() {
        return this._socketClient;
    }
    set languageKey(languageKey) {
        if (IS_NOT(languageKey)) {
            localStorage.removeItem("CBLanguageKey");
        }
        localStorage.setItem("CBLanguageKey", JSON.stringify(languageKey));
        this.didSetLanguageKey();
    }
    get languageKey() {
        const result = FIRST(localStorage.getItem("CBLanguageKey"), LanguageService.defaultLanguageKey).replace("\"", "").replace("\"", "");
        return result;
    }
    didSetLanguageKey() {
        UIRoute.currentRoute.routeWithComponent("settings", { "language": this.languageKey }, YES).applyByReplacingCurrentRouteInHistory();
    }
    readTextFileFromURL(fileURL) {
        var result = new Promise((resolve, reject) => {
            var rawFile = new XMLHttpRequest();
            rawFile.open("GET", fileURL, false);
            rawFile.onreadystatechange = function () {
                if (rawFile.readyState === 4) {
                    if (rawFile.status === 200 || rawFile.status == 0) {
                        var allText = rawFile.responseText;
                        resolve(allText);
                        return;
                    }
                    reject(rawFile.response);
                }
            };
            rawFile.send(null);
        });
        return result;
    }
    reloadSocketConnection() {
        // @ts-ignore
        this.socketClient.socket.disconnect();
        this._socketClient = new CBSocketClient(this);
        this._socketClient._messagesToBeSent = [];
        this._functionsToCallForEachSocketClient.forEach(function (functionToCall, index, array) {
            functionToCall();
        });
    }
    callFunctionForEachSocketClient(functionToCall) {
        this._functionsToCallForEachSocketClient.push(functionToCall);
        functionToCall();
    }
}
/// <reference path="./UIView.ts" />
/// <reference path="./UIObject.ts" />
class UIViewController extends UIObject {
    constructor(view) {
        super();
        this.view = view;
        this.loadIntrospectionVariables();
        this._UIViewController_constructorArguments = { "view": view };
        this._initInstanceVariables();
        this.loadSubviews();
        this.updateViewConstraints();
        this.updateViewStyles();
        this._layoutViewSubviews();
    }
    loadIntrospectionVariables() {
        this._class = UIViewController;
        this.superclass = UIObject;
    }
    _initInstanceVariables() {
        this.view = this._UIViewController_constructorArguments.view;
        this.view._viewControllerLayoutFunction = this.layoutViewsManually.bind(this);
        this.view._didLayoutSubviewsDelegateFunction = this.viewDidLayoutSubviews.bind(this);
        this.view._didReceiveBroadcastEventDelegateFunction = this.viewDidReceiveBroadcastEvent.bind(this);
        this.childViewControllers = [];
        this.parentViewController = nil;
    }
    handleRouteRecursively(route) {
        this.handleRoute(route);
        this.childViewControllers.forEach(function (controller, index, array) {
            if (!route.isHandled) {
                controller.handleRouteRecursively(route);
            }
        });
    }
    handleRoute(route) {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    loadSubviews() {
    }
    viewWillAppear() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    viewDidAppear() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    viewWillDisappear() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    viewDidDisappear() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    updateViewConstraints() {
    }
    updateViewStyles() {
    }
    layoutViewsManually() {
    }
    _layoutViewSubviews() {
        this.view.layoutSubviews();
        this.viewDidLayoutSubviews();
    }
    viewDidLayoutSubviews() {
        // this.childViewControllers.forEach(function (controller, index, controllers) {
        //     controller._layoutViewSubviews();
        // })
    }
    viewDidReceiveBroadcastEvent(event) {
    }
    hasChildViewController(viewController) {
        // This is for performance reasons
        if (!IS(viewController)) {
            return NO;
        }
        for (var i = 0; i < this.childViewControllers.length; i++) {
            const childViewController = this.childViewControllers[i];
            if (childViewController == viewController) {
                return YES;
            }
        }
        return NO;
    }
    addChildViewController(viewController) {
        if (!this.hasChildViewController(viewController)) {
            viewController.willMoveToParentViewController(this);
            this.childViewControllers.push(viewController);
            //this.view.addSubview(viewController.view);
            //viewController.didMoveToParentViewController(this);
        }
    }
    removeFromParentViewController() {
        const index = this.parentViewController.childViewControllers.indexOf(this);
        if (index > -1) {
            this.parentViewController.childViewControllers.splice(index, 1);
            //this.view.removeFromSuperview();
            this.parentViewController = nil;
        }
    }
    willMoveToParentViewController(parentViewController) {
    }
    didMoveToParentViewController(parentViewController) {
        this.parentViewController = parentViewController;
    }
    removeChildViewController(controller) {
        controller.viewWillDisappear();
        if (IS(controller.parentViewController)) {
            controller.removeFromParentViewController();
        }
        if (IS(controller.view)) {
            controller.view.removeFromSuperview();
        }
        controller.viewDidDisappear();
    }
    addChildViewControllerInContainer(controller, containerView) {
        controller.viewWillAppear();
        this.addChildViewController(controller);
        containerView.addSubview(controller.view);
        controller.didMoveToParentViewController(this);
        controller.viewDidAppear();
    }
    addChildViewControllerInDialogView(controller, dialogView) {
        controller.viewWillAppear();
        this.addChildViewController(controller);
        dialogView.view = controller.view;
        var originalDismissFunction = dialogView.dismiss.bind(dialogView);
        dialogView.dismiss = animated => {
            originalDismissFunction(animated);
            this.removeChildViewController(controller);
        };
        controller.didMoveToParentViewController(this);
        controller.viewDidAppear();
    }
}
///<reference path="UIView.ts"/>
class UIDialogView extends UIView {
    constructor(elementID, viewHTMLElement) {
        super(elementID, viewHTMLElement);
        this._view = nil;
        this.animationDuration = 0.25;
        this._zIndex = 100;
        this.isVisible = NO;
        this.dismissesOnTapOutside = YES;
        this.addTargetForControlEvent(UIView.controlEvent.PointerTap, function (sender, event) {
            this.didDetectTapOutside(sender, event);
        }.bind(this));
        this.backgroundColor = UIColor.colorWithRGBA(0, 10, 25).colorWithAlpha(0.75); //CBColor.primaryContentColor.colorWithAlpha(0.75)
        this.zIndex = this._zIndex;
    }
    didDetectTapOutside(sender, event) {
        if (event.target == this.viewHTMLElement && this.dismissesOnTapOutside) {
            this.dismiss(this._appearedAnimated);
        }
    }
    set zIndex(zIndex) {
        this._zIndex = zIndex;
        this.style.zIndex = "" + zIndex;
    }
    get zIndex() {
        return this._zIndex;
    }
    set view(view) {
        this._view.removeFromSuperview();
        this._view = view;
        this.addSubview(view);
    }
    get view() {
        return this._view;
    }
    willAppear(animated = NO) {
        if (animated) {
            this.style.opacity = "0";
        }
        this.style.height = "";
        this._frame = null;
    }
    animateAppearing() {
        this.style.opacity = "1";
    }
    animateDisappearing() {
        this.style.opacity = "0";
    }
    showInView(containerView, animated) {
        animated = (animated && !IS_FIREFOX);
        this._appearedAnimated = animated;
        this.willAppear(animated);
        containerView.addSubview(this);
        if (animated) {
            this.layoutSubviews();
            UIView.animateViewOrViewsWithDurationDelayAndFunction(this, this.animationDuration, 0, undefined, function () {
                this.animateAppearing();
            }.bind(this), nil);
        }
        else {
            this.setNeedsLayout();
        }
        this.isVisible = YES;
    }
    showInRootView(animated) {
        this.showInView(UICore.main.rootViewController.view, animated);
    }
    dismiss(animated) {
        animated = (animated && !IS_FIREFOX);
        if (animated == undefined) {
            animated = this._appearedAnimated;
        }
        if (animated) {
            UIView.animateViewOrViewsWithDurationDelayAndFunction(this, this.animationDuration, 0, undefined, function () {
                this.animateDisappearing();
            }.bind(this), function () {
                if (this.isVisible == NO) {
                    this.removeFromSuperview();
                }
            }.bind(this));
        }
        else {
            this.removeFromSuperview();
        }
        this.isVisible = NO;
    }
    didReceiveBroadcastEvent(event) {
        super.didReceiveBroadcastEvent(event);
        if (event.name == UICore.broadcastEventName.WindowDidResize) {
            this.setNeedsLayout();
        }
    }
    layoutSubviews() {
        if (!IS(this.view)) {
            return;
        }
        //this.frame = this.superview.bounds;
        this.setPosition(0, 0, 0, 0, 0, "100%");
        this.setPosition(0, 0, 0, 0, UIView.pageHeight, "100%");
        const bounds = this.bounds;
        const margin = 20;
        //this.view.centerInContainer();
        this.view.style.position = "relative";
        // this.view.style.maxHeight = "" + (bounds.height - margin * 2).integerValue + "px";
        // this.view.style.maxWidth = "" + (bounds.width - margin * 2).integerValue + "px";
        // var viewIntrinsicRectangle = this.view.intrinsicContentSize();
        // this.view.frame = new UIRectangle((bounds.width - viewIntrinsicRectangle.width)*0.5,  )
        super.layoutSubviews();
    }
}
/// <reference path="./UIView.ts" />
class UIBaseButton extends UIView {
    constructor(elementID, elementType, initViewData) {
        super(elementID, nil, elementType, initViewData);
        this._selected = NO;
        this._highlighted = NO;
        this._isToggleable = NO;
        this._class = UIButton;
        this.superclass = UIView;
        this.initViewStateControl();
    }
    initViewStateControl() {
        this.class.superclass = UIView;
        // Instance variables
        this._isPointerInside = NO;
        const setHovered = function () {
            this.hovered = YES;
        }.bind(this);
        this.addTargetForControlEvent(UIView.controlEvent.PointerHover, setHovered);
        const setNotHovered = function () {
            this.hovered = NO;
        }.bind(this);
        this.addTargetForControlEvents([
            UIView.controlEvent.PointerLeave, UIView.controlEvent.PointerCancel, UIView.controlEvent.MultipleTouches
        ], setNotHovered);
        var highlightingTime;
        const setHighlighted = function () {
            this.highlighted = YES;
            highlightingTime = Date.now();
        }.bind(this);
        this.addTargetForControlEvent(UIView.controlEvent.PointerDown, setHighlighted);
        this.addTargetForControlEvent(UIView.controlEvent.PointerEnter, setHighlighted);
        const setNotHighlighted = function () {
            this.highlighted = NO;
        }.bind(this);
        const setNotHighlightedWithMinimumDuration = function () {
            const minimumDurationInMilliseconds = 50;
            const elapsedTime = Date.now() - highlightingTime;
            if (minimumDurationInMilliseconds < elapsedTime) {
                this.highlighted = NO;
            }
            else {
                setTimeout(function () {
                    this.highlighted = NO;
                }.bind(this), minimumDurationInMilliseconds - elapsedTime);
            }
        }.bind(this);
        this.addTargetForControlEvents([
            UIView.controlEvent.PointerLeave, UIView.controlEvent.PointerCancel, UIView.controlEvent.MultipleTouches
        ], setNotHighlighted);
        this.addTargetForControlEvent(UIView.controlEvent.PointerUp, setNotHighlightedWithMinimumDuration);
        // Handle enter key press
        this.addTargetForControlEvent(UIView.controlEvent.EnterDown, function () {
            setHighlighted();
            setNotHighlightedWithMinimumDuration();
        });
        this.addTargetForControlEvent(UIView.controlEvent.Focus, function (sender, event) {
            this.focused = YES;
        }.bind(this));
        this.addTargetForControlEvent(UIView.controlEvent.Blur, function (sender, event) {
            this.focused = NO;
        }.bind(this));
        this.updateContentForCurrentState();
        this.pausesPointerEvents = YES;
        this.tabIndex = 1;
        this.style.cursor = "pointer";
        //this.style.outline = "none";
        this.nativeSelectionEnabled = NO;
        this.addTargetForControlEvents([
            UIView.controlEvent.EnterDown, UIView.controlEvent.PointerUpInside
        ], function (sender, event) {
            if (this.isToggleable) {
                this.toggleSelectedState();
            }
        }.bind(this));
    }
    set hovered(hovered) {
        this._hovered = hovered;
        this.updateContentForCurrentState();
    }
    get hovered() {
        return this._hovered;
    }
    set highlighted(highlighted) {
        this._highlighted = highlighted;
        this.updateContentForCurrentState();
    }
    get highlighted() {
        return this._highlighted;
    }
    set focused(focused) {
        this._focused = focused;
        if (focused) {
            this.focus();
        }
        else {
            this.blur();
        }
        this.updateContentForCurrentState();
    }
    get focused() {
        return this._focused;
    }
    set selected(selected) {
        this._selected = selected;
        this.updateContentForCurrentState();
    }
    get selected() {
        return this._selected;
    }
    updateContentForCurrentState() {
        var updateFunction = this.updateContentForNormalState;
        if (this.selected && this.highlighted) {
            updateFunction = this.updateContentForSelectedAndHighlightedState;
        }
        else if (this.selected) {
            updateFunction = this.updateContentForSelectedState;
        }
        else if (this.focused) {
            updateFunction = this.updateContentForFocusedState;
        }
        else if (this.highlighted) {
            updateFunction = this.updateContentForHighlightedState;
        }
        else if (this.hovered) {
            updateFunction = this.updateContentForHoveredState;
        }
        if (!IS(updateFunction)) {
            this.backgroundColor = UIColor.nilColor;
        }
        else {
            updateFunction.call(this);
        }
    }
    updateContentForNormalState() {
    }
    updateContentForHoveredState() {
        this.updateContentForNormalState();
    }
    updateContentForFocusedState() {
        this.updateContentForHoveredState();
    }
    updateContentForHighlightedState() {
    }
    updateContentForSelectedState() {
    }
    updateContentForSelectedAndHighlightedState() {
        this.updateContentForSelectedState();
    }
    set enabled(enabled) {
        super.enabled = enabled;
        this.updateContentForCurrentEnabledState();
    }
    get enabled() {
        return super.enabled;
    }
    updateContentForCurrentEnabledState() {
        if (this.enabled) {
            this.alpha = 1;
        }
        else {
            this.alpha = 0.5;
        }
        this.userInteractionEnabled = this.enabled;
    }
    addStyleClass(styleClassName) {
        super.addStyleClass(styleClassName);
        if (this.styleClassName != styleClassName) {
            this.updateContentForCurrentState.call(this);
        }
    }
    didReceiveBroadcastEvent(event) {
        super.didReceiveBroadcastEvent(event);
        if (event.name == UIView.broadcastEventName.PageDidScroll || event.name ==
            UIView.broadcastEventName.AddedToViewTree) {
            this.hovered = NO;
            this.highlighted = NO;
        }
    }
    toggleSelectedState() {
        this.selected = !this.selected;
    }
    set isToggleable(isToggleable) {
        this._isToggleable = isToggleable;
    }
    get isToggleable() {
        return this._isToggleable;
    }
    layoutSubviews() {
        super.layoutSubviews();
        const bounds = this.bounds;
    }
    sendControlEventForKey(eventKey, nativeEvent) {
        if (eventKey == UIView.controlEvent.PointerUpInside && !this.highlighted) {
            // Do not send the event in this case
            //super.sendControlEventForKey(eventKey, nativeEvent);
            const asd = 1;
        }
        else {
            super.sendControlEventForKey(eventKey, nativeEvent);
        }
    }
    static getEventCoordinatesInDocument(touchOrMouseEvent) {
        // http://www.quirksmode.org/js/events_properties.html
        var posx = 0;
        var posy = 0;
        var e = touchOrMouseEvent;
        if (!e) {
            e = window.event;
        }
        if (e.pageX || e.pageY) {
            posx = e.pageX;
            posy = e.pageY;
        }
        else if (e.clientX || e.clientY) {
            posx = e.clientX + document.body.scrollLeft
                + document.documentElement.scrollLeft;
            posy = e.clientY + document.body.scrollTop
                + document.documentElement.scrollTop;
        }
        // posx and posy contain the mouse position relative to the document
        const coordinates = { "x": posx, "y": posy };
        return coordinates;
    }
    static getElementPositionInDocument(el) {
        //https://www.kirupa.com/html5/getting_mouse_click_position.htm
        var xPosition = 0;
        var yPosition = 0;
        while (el) {
            if (el.tagName == "BODY") {
                // Coordinates in document are coordinates in body, therefore subtracting the scroll position of the body is not needed
                //      // deal with browser quirks with body/window/document and page scroll
                //      var xScrollPos = el.scrollLeft || document.documentElement.scrollLeft;
                //      var yScrollPos = el.scrollTop || document.documentElement.scrollTop;
                //
                //      xPosition += (el.offsetLeft - xScrollPos + el.clientLeft);
                //      yPosition += (el.offsetTop - yScrollPos + el.clientTop);
            }
            else {
                xPosition += (el.offsetLeft - el.scrollLeft + el.clientLeft);
                yPosition += (el.offsetTop - el.scrollTop + el.clientTop);
            }
            el = el.offsetParent;
        }
        return {
            x: xPosition,
            y: yPosition
        };
    }
    static convertCoordinatesFromDocumentToElement(x, y, element) {
        const elementPositionInDocument = this.getElementPositionInDocument(element);
        const coordinatesInElement = { "x": x - elementPositionInDocument.x, "y": y - elementPositionInDocument.y };
        return coordinatesInElement;
    }
    static getEventCoordinatesInElement(touchOrMouseEvent, element) {
        const coordinatesInDocument = this.getEventCoordinatesInDocument(touchOrMouseEvent);
        const coordinatesInElement = this.convertCoordinatesFromDocumentToElement(coordinatesInDocument.x, coordinatesInDocument.y, element);
        return coordinatesInElement;
    }
}
/// <reference path="./UIBaseButton.ts" />
class UILink extends UIBaseButton {
    constructor(elementID, initViewData = nil) {
        super(elementID, "a", initViewData);
        this._class = UILink;
        this.superclass = UIBaseButton;
        this.stopsPointerEventPropagation = NO;
        this.pausesPointerEvents = NO;
    }
    initView(elementID, viewHTMLElement, initViewData) {
        super.initView(elementID, viewHTMLElement, initViewData);
        this.class.superclass = UIBaseButton;
        // Instance variables
        //this.style.position = "relative"
        viewHTMLElement.onclick = this.blur.bind(this);
    }
    get colors() {
        return this._colors;
    }
    set colors(value) {
        this._colors = value;
    }
    get viewHTMLElement() {
        return super.viewHTMLElement;
    }
    set text(text) {
        this.viewHTMLElement.textContent = text;
    }
    get text() {
        return this.viewHTMLElement.textContent;
    }
    set target(target) {
        this.viewHTMLElement.setAttribute("href", target);
    }
    get target() {
        const result = this.viewHTMLElement.getAttribute("href");
        return result;
    }
    set targetRouteForCurrentState(targetRouteForCurrentState) {
        this._targetRouteForCurrentState = targetRouteForCurrentState;
        this.updateTarget();
    }
    get targetRouteForCurrentState() {
        return this._targetRouteForCurrentState;
    }
    _targetRouteForCurrentState() {
        const result = UIRoute.currentRoute.routeByRemovingComponentsOtherThanOnesNamed(["settings"]);
        return result;
    }
    didReceiveBroadcastEvent(event) {
        super.didReceiveBroadcastEvent(event);
        if (event.name == UICore.broadcastEventName.RouteDidChange) {
            this.updateTarget();
        }
    }
    wasAddedToViewTree() {
        super.wasAddedToViewTree();
        this.updateTarget();
    }
    updateTarget() {
        const route = this.targetRouteForCurrentState();
        if (route instanceof UIRoute) {
            this.target = route.linkRepresentation;
            return;
        }
        this.target = route;
    }
    layoutSubviews() {
        super.layoutSubviews();
        const bounds = this.bounds;
    }
}
/// <reference path="./UILink.ts" />
class UILinkButton extends UILink {
    //link = new UILink(this.elementID + "Link");
    constructor(elementID, elementType, titleType) {
        super(elementID, { "elementType": elementType, "titleType": titleType });
        this._class = UILinkButton;
        this.superclass = UILink;
        this.button.addTargetForControlEvents([
            UIButton.controlEvent.EnterDown, UIButton.controlEvent.PointerUpInside
        ], function (sender, event) {
            const asd = 1;
            window.location = this.target;
        }.bind(this));
        // this.link.hidden = YES;
        // this.addSubview(this.link);
    }
    initView(elementID, viewHTMLElement, initViewData) {
        super.initView(elementID, viewHTMLElement, initViewData);
        this.class.superclass = UILink;
        // Instance variables
        this.button = new UIButton(this.elementID + "Button", initViewData.elementType, initViewData.titleType);
        this.addSubview(this.button);
        this.style.position = "absolute";
    }
    get titleLabel() {
        return this.button.titleLabel;
    }
    get imageView() {
        return this.button.imageView;
    }
    set colors(colors) {
        this.button.colors = colors;
    }
    get colors() {
        return this.button.colors;
    }
    get viewHTMLElement() {
        return super.viewHTMLElement;
    }
    set target(target) {
        this.viewHTMLElement.setAttribute("href", target);
    }
    get target() {
        const result = this.viewHTMLElement.getAttribute("href");
        return result;
    }
    layoutSubviews() {
        super.layoutSubviews();
        const bounds = this.bounds;
        this.button.frame = bounds;
        this.button.layoutSubviews();
    }
}
/// <reference path="./UICore/UIViewController.ts" />
/// <reference path="./UICore/UIDialogView.ts" />
/// <reference path="./UICore/UILinkButton.ts" />
class RootViewController extends UIViewController {
    constructor(view) {
        // Calling super
        super(view);
        // Here are some suggested conventions that are used in UICore
        // Instance variables, it is good to initialize to nil or empty function, not leave as undefined to avoid
        // if blocks
        // this._firstView = nil;
        // this._secondView = nil;
        // this._testView = nil;
        // this._button = nil;
        // The nil object avoids unneccessary crashes by allowing you to call any function or access any variable on it, returning nil
        // Define properties with get and set functions so they can be accessed and set like variables
        // Name variables that should be private, like property variables, with a _ sign, this also holds for private functions
        // Avoid accessing variables and functions named with _ from outside as this creates strong coupling and hinders stability
        // Code for further setup if necessary
    }
    loadIntrospectionVariables() {
        super.loadIntrospectionVariables();
        this.superclass = UIViewController;
    }
    loadSubviews() {
        this.view.backgroundColor = UIColor.colorWithRGBA(225, 225, 225);
        document.body.style.backgroundColor = this.view.backgroundColor.stringValue;
        this.topBarView = new CellView("TopBarView").copyValuesRecursivelyFromObject({
            titleLabel: {
                text: "GETELEC - General Tool for Electron Emission Calculations",
                textAlignment: UITextView.textAlignment.center
            },
            colors: {
                background: { normal: new UIColor("#282c11") },
                titleLabel: { normal: UIColor.whiteColor }
            }
        });
        this.view.addSubview(this.topBarView);
        // Bottom bar
        this.bottomBarView = new BottomBarView("BottomBarView").copyValuesRecursivelyFromObject({
            style: { overflow: "hidden" }
        });
        this.view.addSubview(this.bottomBarView);
        this.backToMainButton = new CBFlatButton();
        this.backToMainButton.titleLabel.text = "&#8592;";
        this.backToMainButton.colors = {
            titleLabel: {
                normal: UIColor.whiteColor,
                highlighted: UIColor.whiteColor.colorWithAlpha(0.75),
                selected: UIColor.whiteColor.colorWithAlpha(0.5)
            },
            background: {
                normal: UIColor.transparentColor,
                highlighted: UIColor.transparentColor,
                selected: UIColor.transparentColor
            }
        };
        this.backToMainButton.calculateAndSetViewFrame = function () {
            this.setPosition(0, nil, 0, 0, nil, 50);
        };
        this.topBarView.addSubview(this.backToMainButton);
        this.backToMainButton.addControlEventTarget.EnterDown.PointerUpInside = (sender, event) => UIRoute.currentRoute.routeByRemovingComponentsOtherThanOnesNamed(["settings"]).apply();
    }
    handleRoute(route) {
        const _super = Object.create(null, {
            handleRoute: { get: () => super.handleRoute }
        });
        return __awaiter(this, void 0, void 0, function* () {
            _super.handleRoute.call(this, route);
            this.backToMainButton.hidden = NO;
            if (IS(route.componentWithName(GETELECViewController.routeComponentName))) {
                // Show article view
                if (!IS(this.useGETELECViewController)) {
                    this.useGETELECViewController = new GETELECViewController(new UIView("GETELECView"));
                }
                this.contentViewController = this.useGETELECViewController;
            }
            else if (IS(route.componentWithName(GETELECTableViewController.routeComponentName))) {
                // Show article view
                if (!IS(this.useGETELECViewController)) {
                    this.useGETELECTableViewController = new GETELECTableViewController(new UIView("GETELECTableView"));
                }
                this.contentViewController = this.useGETELECTableViewController;
            }
            else {
                // Main view controller
                if (!IS(this.mainViewController)) {
                    this.mainViewController = new UIViewController(new UIView("MainView"));
                    this.mainViewController.view.backgroundColor = UIColor.whiteColor;
                    this.mainViewController.view.viewHTMLElement.innerHTML = yield CBCore.sharedInstance.readTextFileFromURL("/frontpage.html");
                    //     LanguageService.stringForKey(
                    //     "frontPageHTML",
                    //     LanguageService.currentLanguageKey,
                    //     "This is the front page."
                    // )
                }
                this.contentViewController = this.mainViewController;
                this.backToMainButton.hidden = YES;
            }
        });
    }
    set contentViewController(controller) {
        if (this.contentViewController == controller) {
            return;
        }
        if (this.contentViewController) {
            this.removeChildViewController(this.contentViewController);
        }
        this._contentViewController = controller;
        this.addChildViewControllerInContainer(controller, this.view);
        this._layoutViewSubviews();
        this.view.setNeedsLayout();
    }
    get contentViewController() {
        return this._contentViewController || nil;
    }
    static get paddingLength() {
        return 20;
    }
    get paddingLength() {
        return this.class.paddingLength;
    }
    layoutViewsManually() {
        super.layoutViewsManually();
        // View bounds
        var bounds = this.view.bounds;
        this.topBarView.frame = bounds.rectangleWithHeight(50);
        this.contentViewController.view.frame = this.topBarView.frame.rectangleForNextRow(this.paddingLength, FIRST_OR_NIL(wrapInNil(this.contentViewController).intrinsicViewContentHeight([bounds.width, 1250].min()), wrapInNil(this.contentViewController).view.intrinsicContentHeight([bounds.width, 1250].min()))).rectangleWithWidth([bounds.width, 1250].min(), 0.5);
        this.contentViewController.view.style.boxShadow = "0 3px 6px 0 rgba(0, 0, 0, 0.1)";
        this.contentViewController.view.setMargins(0, 0, this.paddingLength, 0);
        //this.view.setPaddings(0, 0, this.paddingLength, 0);
        var bottomBarHeight = Math.max(100, this.bottomBarView.intrinsicContentHeight(this.contentViewController.view.frame.width));
        this.bottomBarView.frame = this.contentViewController.view.frame.rectangleWithY([
            this.contentViewController.view.frame.max.y + this.paddingLength * 2,
            UIView.pageHeight - bottomBarHeight
        ].max()).rectangleWithHeight(bottomBarHeight).rectangleWithWidth(this.view.bounds.width).rectangleWithX(0);
    }
}
// @ts-ignore
class UIRoute extends Array {
    constructor(hash) {
        super();
        this._isHandled = NO;
        this.completedComponents = [];
        if (!hash || !hash.startsWith) {
            return;
        }
        if (hash.startsWith("#")) {
            hash = hash.slice(1);
        }
        hash = decodeURIComponent(hash);
        const components = hash.split("]");
        components.forEach(function (component, index, array) {
            const componentName = component.split("[")[0];
            const parameters = {};
            if (!componentName) {
                return;
            }
            const parametersString = component.split("[")[1] || "";
            const parameterPairStrings = parametersString.split(",") || [];
            parameterPairStrings.forEach(function (pairString, index, array) {
                const keyAndValueArray = pairString.split(":");
                const key = decodeURIComponent(keyAndValueArray[0]);
                const value = decodeURIComponent(keyAndValueArray[1]);
                if (key) {
                    parameters[key] = value;
                }
            });
            this.push({
                name: componentName,
                parameters: parameters
            });
        }, this);
    }
    static get currentRoute() {
        return new UIRoute(window.location.hash);
    }
    apply() {
        window.location.hash = this.stringRepresentation;
    }
    applyByReplacingCurrentRouteInHistory() {
        window.location.replace(this.linkRepresentation);
    }
    copy() {
        var result = new UIRoute();
        result = Object.assign(result, this);
        return result;
    }
    childRoute() {
        var result = this.copy();
        result.completedComponents.forEach(function (component, index, completedComponents) {
            var indexInResult = result.indexOf(component);
            if (indexInResult > -1) {
                result.splice(indexInResult, 1);
            }
        });
        result.completedComponents = [];
        result.parentRoute = this;
        return result;
    }
    routeByRemovingComponentsOtherThanOnesNamed(componentNames) {
        const result = this.copy();
        const indexesToRemove = [];
        result.forEach(function (component, index, array) {
            if (!componentNames.contains(component.name)) {
                indexesToRemove.push(index);
            }
        });
        indexesToRemove.forEach(function (indexToRemove, index, array) {
            result.removeElementAtIndex(indexToRemove);
        });
        return result;
    }
    routeByRemovingComponentNamed(componentName) {
        const result = this.copy();
        const componentIndex = result.findIndex(function (component, index) {
            return (component.name == componentName);
        });
        if (componentIndex != -1) {
            result.splice(componentIndex, 1);
        }
        return result;
    }
    routeByRemovingParameterInComponent(componentName, parameterName, removeComponentIfEmpty = NO) {
        var result = this.copy();
        var parameters = result.componentWithName(componentName).parameters;
        if (IS_NOT(parameters)) {
            parameters = {};
        }
        delete parameters[parameterName];
        result = result.routeWithComponent(componentName, parameters);
        if (removeComponentIfEmpty && Object.keys(parameters).length == 0) {
            result = result.routeByRemovingComponentNamed(componentName);
        }
        return result;
    }
    routeBySettingParameterInComponent(componentName, parameterName, valueToSet) {
        var result = this.copy();
        if (IS_NIL(valueToSet) || IS_NIL(parameterName)) {
            return result;
        }
        var parameters = result.componentWithName(componentName).parameters;
        if (IS_NOT(parameters)) {
            parameters = {};
        }
        parameters[parameterName] = valueToSet;
        result = result.routeWithComponent(componentName, parameters);
        return result;
    }
    routeWithViewControllerComponent(viewController, parameters, extendParameters = NO) {
        return this.routeWithComponent(viewController.routeComponentName, parameters, extendParameters);
    }
    routeWithComponent(name, parameters, extendParameters = NO) {
        const result = this.copy();
        var component = result.componentWithName(name);
        if (IS_NOT(component)) {
            component = {
                name: name,
                parameters: {}
            };
            result.push(component);
        }
        if (IS_NOT(parameters)) {
            parameters = {};
        }
        if (extendParameters) {
            component.parameters = Object.assign(component.parameters, parameters);
        }
        else {
            component.parameters = parameters;
        }
        return result;
    }
    navigateBySettingComponent(name, parameters, extendParameters = NO) {
        this.routeWithComponent(name, parameters, extendParameters).apply();
    }
    componentWithViewController(viewController) {
        return this.componentWithName(viewController.routeComponentName);
    }
    componentWithName(name) {
        var result = nil;
        this.forEach(function (component, index, self) {
            if (component.name == name) {
                result = component;
            }
        });
        return result;
    }
    didcompleteComponent(component) {
        const self = this;
        const index = self.indexOf(component, 0);
        if (index > -1) {
            self.completedComponents.push(self.splice(index, 1)[0]);
            //self.completedComponents.push(component);
        }
    }
    set isHandled(isHandled) {
        this._isHandled = isHandled;
    }
    get isHandled() {
        return (this._isHandled || (this.length == 0 && this.completedComponents.length != 0));
    }
    get linkRepresentation() {
        return "#" + this.stringRepresentation;
    }
    get stringRepresentation() {
        var result = "";
        this.completedComponents.forEach(function (component, index, self) {
            result = result + component.name;
            const parameters = component.parameters;
            result = result + "[";
            Object.keys(parameters).forEach(function (key, index, keys) {
                if (index) {
                    result = result + ",";
                }
                result = result + encodeURIComponent(key) + ":" + encodeURIComponent(parameters[key]);
            });
            result = result + "]";
        });
        this.forEach(function (component, index, self) {
            result = result + component.name;
            const parameters = component.parameters;
            result = result + "[";
            Object.keys(parameters).forEach(function (key, index, keys) {
                if (index) {
                    result = result + ",";
                }
                result = result + encodeURIComponent(key) + ":" + encodeURIComponent(parameters[key]);
            });
            result = result + "]";
        });
        return result;
    }
}
/// <reference path="UIView.ts" />
/// <reference path="UIViewController.ts" />
/// <reference path="../RootViewController.ts" />
/// <reference path="UIRoute.ts" />
class UICore extends UIObject {
    constructor(rootDivElementID, rootViewControllerClass) {
        super();
        this.rootViewController = nil;
        this._class = UICore;
        this.superclass = UIObject;
        UICore.RootViewControllerClass = rootViewControllerClass;
        UICore.main = this;
        const rootViewElement = document.getElementById(rootDivElementID);
        const rootView = new UIView(rootDivElementID, rootViewElement);
        rootView.pausesPointerEvents = NO; //YES;
        if (UICore.RootViewControllerClass) {
            if (!(UICore.RootViewControllerClass.prototype instanceof UIViewController) ||
                UICore.RootViewControllerClass === UIViewController) {
                console.log("Error, UICore.RootViewControllerClass must be a or a subclass of UIViewController, falling back to UIViewController.");
                UICore.RootViewControllerClass = UIViewController;
            }
            this.rootViewController = new UICore.RootViewControllerClass(rootView);
        }
        else {
            this.rootViewController = new UIViewController(rootView);
        }
        this.rootViewController.viewWillAppear();
        this.rootViewController.viewDidAppear();
        this.rootViewController.view.addTargetForControlEvent(UIView.controlEvent.PointerUpInside, function (sender, event) {
            document.activeElement.blur();
        });
        const windowDidResize = function () {
            // Doing layout two times to prevent page scrollbars from confusing the layout
            this.rootViewController._layoutViewSubviews();
            UIView.layoutViewsIfNeeded();
            this.rootViewController._layoutViewSubviews();
            //UIView.layoutViewsIfNeeded()
            this.rootViewController.view.broadcastEventInSubtree({
                name: UICore.broadcastEventName.WindowDidResize,
                parameters: nil
            });
        };
        window.addEventListener("resize", windowDidResize.bind(this));
        const didScroll = function () {
            //code
            this.rootViewController.view.broadcastEventInSubtree({
                name: UIView.broadcastEventName.PageDidScroll,
                parameters: nil
            });
        }.bind(this);
        window.addEventListener("scroll", didScroll, false);
        const hashDidChange = function () {
            //code
            this.rootViewController.handleRouteRecursively(UIRoute.currentRoute);
            this.rootViewController.view.broadcastEventInSubtree({
                name: UICore.broadcastEventName.RouteDidChange,
                parameters: nil
            });
        }.bind(this);
        window.addEventListener("hashchange", hashDidChange.bind(this), false);
        hashDidChange();
    }
    static loadClass(className) {
        if (window[className]) {
            return;
        }
        document.writeln("<script type='text/javascript' src='dist/UICore/" + className + ".js'></script>");
    }
}
UICore.languageService = nil;
UICore.broadcastEventName = {
    "RouteDidChange": "RouteDidChange",
    "WindowDidResize": "WindowDidResize"
};
UICore.RootViewControllerClass = nil;
const IS_FIREFOX = navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
const IS_SAFARI = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
Array.prototype.indexOf || (Array.prototype.indexOf = function (d, e) {
    var a;
    if (null == this) {
        throw new TypeError("\"this\" is null or not defined");
    }
    const c = Object(this), b = c.length >>> 0;
    if (0 === b) {
        return -1;
    }
    a = +e || 0;
    Infinity === Math.abs(a) && (a = 0);
    if (a >= b) {
        return -1;
    }
    for (a = Math.max(0 <= a ? a : b - Math.abs(a), 0); a < b;) {
        if (a in c && c[a] === d) {
            return a;
        }
        a++;
    }
    return -1;
});
/// <reference path="UIView.ts" />
/// <reference path="UICore.ts" />
class UITextView extends UIView {
    constructor(elementID, textViewType = UITextView.type.paragraph, viewHTMLElement = null) {
        super(elementID, viewHTMLElement, textViewType);
        this._textColor = UITextView.defaultTextColor;
        this._isSingleLine = YES;
        this.textPrefix = "";
        this.textSuffix = "";
        this._notificationAmount = 0;
        this._minFontSize = nil;
        this._maxFontSize = nil;
        this._automaticFontSizeSelection = NO;
        this.changesOften = NO;
        this._class = UITextView;
        this.superclass = UIView;
        this.text = "";
        this.style.overflow = "hidden";
        this.style.textOverflow = "ellipsis";
        this.isSingleLine = YES;
        this.textColor = this.textColor;
        this.userInteractionEnabled = YES;
        if (textViewType == UITextView.type.textArea) {
            this.pausesPointerEvents = YES;
            this.addTargetForControlEvent(UIView.controlEvent.PointerUpInside, function (sender, event) {
                sender.focus();
            });
        }
    }
    static _determinePXAndPTRatios() {
        const o = document.createElement("div");
        o.style.width = "1000pt";
        document.body.appendChild(o);
        UITextView._ptToPx = o.clientWidth / 1000;
        document.body.removeChild(o);
        UITextView._pxToPt = 1 / UITextView._ptToPx;
    }
    get textAlignment() {
        const result = this.style.textAlign;
        return result;
    }
    set textAlignment(textAlignment) {
        this._textAlignment = textAlignment;
        this.style.textAlign = textAlignment;
    }
    get textColor() {
        const result = this._textColor;
        return result;
    }
    set textColor(color) {
        this._textColor = color || UITextView.defaultTextColor;
        this.style.color = this._textColor.stringValue;
    }
    get isSingleLine() {
        return this._isSingleLine;
    }
    set isSingleLine(isSingleLine) {
        this._isSingleLine = isSingleLine;
        if (isSingleLine) {
            this.style.whiteSpace = "pre";
            return;
        }
        this.style.whiteSpace = "pre-wrap";
    }
    get notificationAmount() {
        return this._notificationAmount;
    }
    set notificationAmount(notificationAmount) {
        if (this._notificationAmount == notificationAmount) {
            return;
        }
        this._notificationAmount = notificationAmount;
        this.text = this.text;
        this.setNeedsLayoutUpToRootView();
        this.notificationAmountDidChange(notificationAmount);
    }
    notificationAmountDidChange(notificationAmount) {
    }
    get text() {
        return (this._text || this.viewHTMLElement.innerHTML);
    }
    set text(text) {
        this._text = text;
        var notificationText = "";
        if (this.notificationAmount) {
            notificationText = "<span style=\"color: " + UITextView.notificationTextColor.stringValue + ";\">" +
                (" (" + this.notificationAmount + ")").bold() + "</span>";
        }
        if (this.viewHTMLElement.innerHTML != this.textPrefix + text + this.textSuffix + notificationText) {
            this.viewHTMLElement.innerHTML = this.textPrefix + FIRST(text, "") + this.textSuffix + notificationText;
        }
        this.setNeedsLayout();
    }
    set innerHTML(innerHTML) {
        this.text = innerHTML;
    }
    get innerHTML() {
        return this.viewHTMLElement.innerHTML;
    }
    setText(key, defaultString, parameters) {
        this.setInnerHTML(key, defaultString, parameters);
    }
    get fontSize() {
        const style = window.getComputedStyle(this.viewHTMLElement, null).fontSize;
        const result = (parseFloat(style) * UITextView._pxToPt);
        return result;
    }
    set fontSize(fontSize) {
        this.style.fontSize = "" + fontSize + "pt";
    }
    useAutomaticFontSize(minFontSize = nil, maxFontSize = nil) {
        this._automaticFontSizeSelection = YES;
        this._minFontSize = minFontSize;
        this._maxFontSize = maxFontSize;
        this.setNeedsLayout();
    }
    static automaticallyCalculatedFontSize(bounds, currentSize, currentFontSize, minFontSize, maxFontSize) {
        minFontSize = FIRST(minFontSize, 1);
        maxFontSize = FIRST(maxFontSize, 100000000000);
        const heightMultiplier = bounds.height / (currentSize.height + 1);
        const widthMultiplier = bounds.width / (currentSize.width + 1);
        var multiplier = heightMultiplier;
        if (heightMultiplier > widthMultiplier) {
            multiplier = widthMultiplier;
        }
        const maxFittingFontSize = currentFontSize * multiplier;
        if (maxFittingFontSize > maxFontSize) {
            return maxFontSize;
        }
        if (minFontSize > maxFittingFontSize) {
            return minFontSize;
        }
        return maxFittingFontSize;
    }
    didReceiveBroadcastEvent(event) {
        super.didReceiveBroadcastEvent(event);
    }
    willMoveToSuperview(superview) {
        super.willMoveToSuperview(superview);
    }
    layoutSubviews() {
        super.layoutSubviews();
        if (this._automaticFontSizeSelection) {
            this.fontSize = UITextView.automaticallyCalculatedFontSize(new UIRectangle(0, 0, 1 *
                this.viewHTMLElement.offsetHeight, 1 *
                this.viewHTMLElement.offsetWidth), this.intrinsicContentSize(), this.fontSize, this._minFontSize, this._maxFontSize);
        }
    }
    intrinsicContentHeight(constrainingWidth = 0) {
        if (this.changesOften) {
            return super.intrinsicContentHeight(constrainingWidth);
        }
        const keyPath = (this.viewHTMLElement.innerHTML + "_csf_" + this.computedStyle.font).replace(new RegExp("\\.", "g"), "_") + "." +
            ("" + constrainingWidth).replace(new RegExp("\\.", "g"), "_");
        var result = UITextView._intrinsicHeightCache.valueForKeyPath(keyPath);
        if (IS_LIKE_NULL(result)) {
            result = super.intrinsicContentHeight(constrainingWidth);
            UITextView._intrinsicHeightCache.setValueForKeyPath(keyPath, result);
        }
        return result;
    }
    intrinsicContentWidth(constrainingHeight = 0) {
        if (this.changesOften) {
            return super.intrinsicContentWidth(constrainingHeight);
        }
        const keyPath = (this.viewHTMLElement.innerHTML + "_csf_" + this.computedStyle.font).replace(new RegExp("\\.", "g"), "_") + "." +
            ("" + constrainingHeight).replace(new RegExp("\\.", "g"), "_");
        var result = UITextView._intrinsicWidthCache.valueForKeyPath(keyPath);
        if (IS_LIKE_NULL(result)) {
            result = super.intrinsicContentWidth(constrainingHeight);
            UITextView._intrinsicWidthCache.setValueForKeyPath(keyPath, result);
        }
        return result;
    }
    intrinsicContentSize() {
        // This works but is slow
        const result = this.intrinsicContentSizeWithConstraints(nil, nil);
        return result;
    }
}
UITextView.defaultTextColor = UIColor.blackColor;
UITextView.notificationTextColor = UIColor.redColor;
UITextView._intrinsicHeightCache = new UIObject();
UITextView._intrinsicWidthCache = new UIObject();
UITextView.type = {
    "paragraph": "p",
    "header1": "h1",
    "header2": "h2",
    "header3": "h3",
    "header4": "h4",
    "header5": "h5",
    "header6": "h6",
    "textArea": "textarea",
    "textField": "input",
    "span": "span",
    "label": "label"
};
UITextView.textAlignment = {
    "left": "left",
    "center": "center",
    "right": "right",
    "justify": "justify"
};
UITextView._determinePXAndPTRatios();
// /**
//  * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.
//  * 
//  * @param {String} text The text to be rendered.
//  * @param {String} font The css font descriptor that text is to be rendered with (e.g. "bold 14px verdana").
//  * 
//  * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393
//  */
// function getTextMetrics(text, font) {
//     // re-use canvas object for better performance
//     var canvas = getTextMetrics.canvas || (getTextMetrics.canvas = document.createElement("canvas"));
//     var context = canvas.getContext("2d");
//     context.font = font;
//     var metrics = context.measureText(text);
//     return metrics;
// }
/// <reference path="./UICore/UIViewController.ts" />
///<reference path="UICore/UITextView.ts"/>
class GETELECTableViewController extends UIViewController {
    constructor(view) {
        // Calling super
        super(view);
        // Code for further setup if necessary
    }
    loadIntrospectionVariables() {
        super.loadIntrospectionVariables();
        this.superclass = UIViewController;
    }
    loadSubviews() {
        this.view.backgroundColor = UIColor.whiteColor;
        this.titleLabel = new UITextView(this.view.elementID + "TitleLabel", UITextView.type.header3);
        this.titleLabel.textAlignment = UITextView.textAlignment.left;
        this.titleLabel.nativeSelectionEnabled = NO;
        this.titleLabel.isSingleLine = NO;
        this.view.addSubview(this.titleLabel);
        this.inputTextArea = new UITextArea(this.view.elementID + "InputTextArea");
        this.inputTextArea.placeholderText = "Input your data here.";
        this.inputTextArea.changesOften = YES;
        this.view.addSubview(this.inputTextArea);
        this.loadDataButton = new CBButton();
        this.loadDataButton.titleLabel.text = "Load data";
        this.view.addSubview(this.loadDataButton);
        this.loadDataButton.enabled = NO;
        this.resultsLabel = new UIView();
        this.resultsLabel.innerHTML = "Results";
        this.resultsLabel.hidden = YES;
        this.view.addSubview(this.resultsLabel);
        this.chartView = new UIView("ResultDataChart", nil, "canvas");
        this.chartView.hidden = YES;
        this.view.addSubview(this.chartView);
        this.inputTextArea.addControlEventTarget.TextChange = (sender, event) => {
            //console.log(sender);
            this.view.setNeedsLayoutUpToRootView();
            this.loadDataButton.enabled = IS(this.inputTextArea.text);
        };
        // @ts-ignore
        const ctx = this.chartView.viewHTMLElement.getContext("2d");
        // @ts-ignore
        this.chart = new Chart(ctx, {
            // The type of chart we want to create
            //type: "line",
            type: "scatter",
            // The data for our dataset
            data: {
                //labels: ['January', 'February', 'March', 'April', 'May', 'June'],
                datasets: [
                    {
                        label: "Result points",
                        fill: false,
                        lineTension: 0,
                        //backgroundColor: UIColor.transparentColor,
                        borderColor: "rgb(125, 115, 252)" //,
                        //data: [{ x: 0, y: 0 }, { x: 2, y: 10 }, { x: 5, y: 5 }, { x: 7, y: 2 }, { x: 8, y: 20 }, {
                        // x: 11, y: 45 }]
                    },
                    {
                        label: "Result line",
                        fill: false,
                        lineTension: 0,
                        backgroundColor: "rgb(255, 99, 132)",
                        borderColor: "rgb(255, 99, 132)" //,
                        //data: [{ x: 0, y: 0 }, { x: 2, y: 10 }, { x: 5, y: 5 }, { x: 7, y: 2 }, { x: 8, y: 20 }, {
                        // x: 11, y: 45 }]
                    }
                ]
            },
            // Configuration options go here
            options: {
                fill: false,
                lineTension: 0,
                scales: {
                    x: {
                        type: "linear",
                        position: "bottom"
                    },
                    y: {
                        type: "logarithmic",
                        position: "bottom"
                    },
                    yAxes: [{
                            type: 'logarithmic',
                            ticks: {
                                min: 1,
                                max: 1000000,
                                callback: function (value, index, values) {
                                    if (value === 1000000)
                                        return "1M";
                                    if (value === 100000)
                                        return "100K";
                                    if (value === 10000)
                                        return "10K";
                                    if (value === 1000)
                                        return "1K";
                                    if (value === 100)
                                        return "100";
                                    if (value === 10)
                                        return "10";
                                    if (value === 1)
                                        return "1";
                                    return null;
                                }
                            }
                        }]
                },
                tooltips: {
                    mode: "interpolate",
                    intersect: true
                },
                plugins: {
                    crosshair: {
                        line: {
                            color: "#F66",
                            width: 1 // crosshair line width
                        },
                        sync: {
                            enabled: true,
                            group: 1,
                            suppressTooltips: false // suppress tooltips when showing a synced tracer
                        },
                        zoom: {
                            enabled: NO,
                            zoomboxBackgroundColor: "rgba(66,133,244,0.2)",
                            zoomboxBorderColor: "#48F",
                            zoomButtonText: "Reset Zoom",
                            zoomButtonClass: "reset-zoom" // reset zoom button class
                        },
                        callbacks: {
                            beforeZoom: function (start, end) {
                                return true;
                            },
                            afterZoom: function (start, end) {
                            }
                        }
                    }
                }
                // responsive: false,
                // maintainAspectRatio: false,
                // showScale: true
            }
        });
        this.loadDataButton.addControlEventTarget.EnterDown.PointerUpInside = (sender, event) => __awaiter(this, void 0, void 0, function* () {
            //console.log(sender)
            try {
                CBDialogViewShower.showActionIndicatorDialog("Loading.");
                const stringSocketClientResult = yield SocketClient.PerformFitFun({
                    inputData: this.inputTextArea.text
                });
                if (IS(stringSocketClientResult.errorResult)) {
                    console.log(stringSocketClientResult.errorResult);
                    CBDialogViewShower.alert("Failed to analyze data. " + JSON.stringify(stringSocketClientResult.errorResult));
                    return;
                }
                const result = JSON.parse(stringSocketClientResult.result);
                //console.log(result)
                this.resultsLabel.innerHTML = FIRST(result.resultHTMLString, "")
                    + IF(IS_NOT(result.resultHTMLString))(RETURNER(`Radius: ${result.Radius} beta: ${result.beta} sigma_Aeff: ${result.sigma_Aeff}`))();
                const pointPoints = this.pointObjectsFromValues(result.xplot_mrk, result.yplot_mrk);
                const linePoints = this.pointObjectsFromValues(result.xplot_line, result.yplot_line);
                this.chart.data.datasets[0].data = pointPoints;
                this.chart.data.datasets[0].showLine = NO;
                this.chart.data.datasets[1].data = linePoints;
                this.chart.data.datasets[1].showLine = YES;
                this.chart.data.datasets[1].pointRadius = 0;
                this.chart.data.datasets[1].interpolate = YES;
                this.chart.options.scales.xAxes[0].scaleLabel.display = true;
                this.chart.options.scales.xAxes[0].scaleLabel.labelString = "" + FIRST(result.xAxisUnit, "");
                this.chart.options.scales.yAxes[0].scaleLabel.display = true;
                this.chart.options.scales.yAxes[0].scaleLabel.labelString = "" + FIRST(result.yAxisUnit, "");
                this.resultsLabel.hidden = NO;
                this.chartView.hidden = NO;
                this.chart.update();
                this.view.setNeedsLayoutUpToRootView();
            }
            catch (exception) {
                console.log(exception);
                CBDialogViewShower.alert("Failed to display results. " + JSON.stringify(exception));
            }
            CBDialogViewShower.hideActionIndicatorDialog();
        });
    }
    pointObjectsFromValues(xValues, yValues) {
        var resultPoints = [];
        for (var i = 0; i < xValues.length; i++) {
            var x = xValues[i];
            var y = yValues[i];
            resultPoints.push({ x: x, y: y });
        }
        return resultPoints;
    }
    handleRoute(route) {
        const _super = Object.create(null, {
            handleRoute: { get: () => super.handleRoute }
        });
        return __awaiter(this, void 0, void 0, function* () {
            _super.handleRoute.call(this, route);
            const inquiryComponent = route.componentWithViewController(GETELECTableViewController);
            this.titleLabel.text = "Enter your data and press the load button. TABLE VIEW";
            route.didcompleteComponent(inquiryComponent);
        });
    }
    layoutViewsManually() {
        super.layoutViewsManually();
        const padding = RootViewController.paddingLength;
        const labelHeight = padding * 1.25;
        // View bounds
        var bounds = this.view.bounds;
        this.view.setPaddings(0, 0, padding, 0);
        this.titleLabel.frame = bounds.rectangleWithInsets(padding, padding, 0, padding)
            .rectangleWithHeight(this.titleLabel.intrinsicContentHeight(bounds.width));
        this.inputTextArea.frame = this.titleLabel.frame.rectangleForNextRow(padding * 0.25, this.inputTextArea.intrinsicContentHeight(this.titleLabel.frame.width) + 5);
        this.loadDataButton.frame = this.inputTextArea.frame.rectangleForNextRow(padding, labelHeight * 2);
        this.loadDataButton.setMargins(0, 0, padding, 0);
        this.resultsLabel.frame = this.loadDataButton.frame.rectangleForNextRow(padding);
        this.chartView.frame = this.resultsLabel.frame.rectangleForNextRow(padding, this.loadDataButton.frame.width * 0.5);
        //.rectangleWithInsets(padding * 5 * 0, padding * 5, 0, 0)
        //.rectangleByAddingX(-padding)
        //this.chartView.setPadding(padding);
        this.chartView.setMaxSizes(this.chartView.frame.height, this.chartView.frame.width);
    }
    intrinsicViewContentHeight(constrainingWidth = 0) {
        const padding = RootViewController.paddingLength;
        const labelHeight = padding * 1.5;
        var result = padding + this.titleLabel.intrinsicContentHeight(constrainingWidth) + padding * 0.25 +
            labelHeight * 2 + padding * 0.5 + padding +
            this.inputTextArea.intrinsicContentHeight(constrainingWidth);
        if (IS_NOT(this.chartView.hidden)) {
            result = result + padding + (constrainingWidth - padding * 2) * 0.5 + padding + labelHeight * 2;
        }
        return result;
    }
}
GETELECTableViewController.routeComponentName = "fit_funasdasd";
GETELECTableViewController.ParameterIdentifierName = { "ID": "ID" };
// @ts-ignore
Chart.Interaction.modes["interpolate"] = function (chart, e, options) {
    // This function has a separate license
    // MIT License
    //
    // Copyright (c) 2018 Abel Heinsbroek
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal
    // in the Software without restriction, including without limitation the rights
    // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    // copies of the Software, and to permit persons to whom the Software is
    // furnished to do so, subject to the following conditions:
    //
    //     The above copyright notice and this permission notice shall be included in all
    // copies or substantial portions of the Software.
    //
    //     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    //     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    //     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    // SOFTWARE.
    var items = [];
    for (var datasetIndex = 0; datasetIndex < chart.data.datasets.length; datasetIndex++) {
        // check for interpolate setting
        if (!chart.data.datasets[datasetIndex].interpolate) {
            continue;
        }
        var meta = chart.getDatasetMeta(datasetIndex);
        // do not interpolate hidden charts
        if (meta.hidden) {
            continue;
        }
        var xScale = chart.scales[meta.xAxisID];
        var yScale = chart.scales[meta.yAxisID];
        var xValue = xScale.getValueForPixel(e.x);
        var data = chart.data.datasets[datasetIndex].data;
        var index = data.findIndex(function (o) {
            return o.x >= xValue;
        });
        if (index === -1) {
            continue;
        }
        // linear interpolate value
        var prev = data[index - 1];
        var next = data[index];
        if (prev && next) {
            var slope = (next.y - prev.y) / (next.x - prev.x);
            var interpolatedValue = prev.y + (xValue - prev.x) * slope;
        }
        if (chart.data.datasets[datasetIndex].steppedLine && prev) {
            interpolatedValue = prev.y;
        }
        if (isNaN(interpolatedValue)) {
            continue;
        }
        var yPosition = yScale.getPixelForValue(interpolatedValue);
        // do not interpolate values outside of the axis limits
        if (isNaN(yPosition)) {
            continue;
        }
        // create a 'fake' event point
        var fakePoint = {
            value: interpolatedValue,
            xValue: xValue,
            tooltipPosition: function () {
                return this._model;
            },
            hasValue: function () {
                return true;
            },
            _model: {
                x: e.x,
                y: yPosition
            },
            _datasetIndex: datasetIndex,
            _index: items.length,
            _xScale: {
                getLabelForIndex: function (indx) {
                    let xValue = items[indx].xValue;
                    xValue = xValue.toPrecision(5);
                    return xValue;
                }
            },
            _yScale: {
                getLabelForIndex: function (indx) {
                    let value = items[indx].value.toPrecision(5);
                    return value;
                }
            },
            _chart: chart
        };
        items.push(fakePoint);
    }
    // add other, not interpolated, items
    // @ts-ignore
    var xItems = Chart.Interaction.modes.x(chart, e, options);
    xItems.forEach((item, index, array) => {
        if (!chart.data.datasets[item._datasetIndex].interpolate) {
            items.push(item);
        }
    });
    return items;
};
/// <reference path="./UICore/UIViewController.ts" />
///<reference path="UICore/UITextView.ts"/>
class GETELECViewController extends UIViewController {
    constructor(view) {
        // Calling super
        super(view);
        // Code for further setup if necessary
    }
    loadIntrospectionVariables() {
        super.loadIntrospectionVariables();
        this.superclass = UIViewController;
    }
    loadSubviews() {
        this.view.backgroundColor = UIColor.whiteColor;
        this.titleLabel = new UITextView(this.view.elementID + "TitleLabel", UITextView.type.header3);
        this.titleLabel.textAlignment = UITextView.textAlignment.left;
        this.titleLabel.nativeSelectionEnabled = NO;
        this.titleLabel.isSingleLine = NO;
        this.view.addSubview(this.titleLabel);
        this.inputTextArea = new UITextArea(this.view.elementID + "InputTextArea");
        this.inputTextArea.placeholderText = "Input your data here.";
        this.inputTextArea.changesOften = YES;
        this.view.addSubview(this.inputTextArea);
        this.loadDataButton = new CBButton();
        this.loadDataButton.titleLabel.text = "Load data";
        this.view.addSubview(this.loadDataButton);
        this.loadDataButton.enabled = NO;
        this.resultsLabel = new UIView();
        this.resultsLabel.innerHTML = "Results";
        this.resultsLabel.hidden = YES;
        this.view.addSubview(this.resultsLabel);
        this.chartView = new UIView("ResultDataChart", nil, "canvas");
        this.chartView.hidden = YES;
        this.view.addSubview(this.chartView);
        this.inputTextArea.addControlEventTarget.TextChange = (sender, event) => {
            //console.log(sender);
            this.view.setNeedsLayoutUpToRootView();
            this.loadDataButton.enabled = IS(this.inputTextArea.text);
        };
        // @ts-ignore
        const ctx = this.chartView.viewHTMLElement.getContext("2d");
        // @ts-ignore
        this.chart = new Chart(ctx, {
            // The type of chart we want to create
            //type: "line",
            type: "scatter",
            // The data for our dataset
            data: {
                //labels: ['January', 'February', 'March', 'April', 'May', 'June'],
                datasets: [
                    {
                        label: "Result points",
                        fill: false,
                        lineTension: 0,
                        //backgroundColor: UIColor.transparentColor,
                        borderColor: "rgb(125, 115, 252)" //,
                        //data: [{ x: 0, y: 0 }, { x: 2, y: 10 }, { x: 5, y: 5 }, { x: 7, y: 2 }, { x: 8, y: 20 }, {
                        // x: 11, y: 45 }]
                    },
                    {
                        label: "Result line",
                        fill: false,
                        lineTension: 0,
                        backgroundColor: "rgb(255, 99, 132)",
                        borderColor: "rgb(255, 99, 132)" //,
                        //data: [{ x: 0, y: 0 }, { x: 2, y: 10 }, { x: 5, y: 5 }, { x: 7, y: 2 }, { x: 8, y: 20 }, {
                        // x: 11, y: 45 }]
                    }
                ]
            },
            // Configuration options go here
            options: {
                fill: false,
                lineTension: 0,
                scales: {
                    x: {
                        type: "linear",
                        position: "bottom"
                    },
                    y: {
                        type: "logarithmic",
                        position: "bottom"
                    },
                    yAxes: [
                        {
                            type: "logarithmic",
                            ticks: {
                                min: 0,
                                max: 1000000,
                                callback: function (value, index, values) {
                                    if (value === 1000000) {
                                        return "1M";
                                    }
                                    if (value === 100000) {
                                        return "100K";
                                    }
                                    if (value === 10000) {
                                        return "10K";
                                    }
                                    if (value === 1000) {
                                        return "1K";
                                    }
                                    if (value === 100) {
                                        return "100";
                                    }
                                    if (value === 10) {
                                        return "10";
                                    }
                                    if (value === 1) {
                                        return "1";
                                    }
                                    if (value === 0) {
                                        return "0";
                                    }
                                    return null;
                                }
                            }
                        }
                    ]
                },
                tooltips: {
                    mode: "interpolate",
                    intersect: true
                },
                plugins: {
                    crosshair: {
                        line: {
                            color: "#F66",
                            width: 1 // crosshair line width
                        },
                        sync: {
                            enabled: true,
                            group: 1,
                            suppressTooltips: false // suppress tooltips when showing a synced tracer
                        },
                        zoom: {
                            enabled: NO,
                            zoomboxBackgroundColor: "rgba(66,133,244,0.2)",
                            zoomboxBorderColor: "#48F",
                            zoomButtonText: "Reset Zoom",
                            zoomButtonClass: "reset-zoom" // reset zoom button class
                        },
                        callbacks: {
                            beforeZoom: function (start, end) {
                                return true;
                            },
                            afterZoom: function (start, end) {
                            }
                        }
                    }
                }
                // responsive: false,
                // maintainAspectRatio: false,
                // showScale: true
            }
        });
        this.loadDataButton.addControlEventTarget.EnterDown.PointerUpInside = (sender, event) => __awaiter(this, void 0, void 0, function* () {
            //console.log(sender)
            try {
                CBDialogViewShower.showActionIndicatorDialog("Loading.");
                const stringSocketClientResult = yield SocketClient.PerformFitFun({
                    inputData: this.inputTextArea.text
                });
                if (IS(stringSocketClientResult.errorResult)) {
                    console.log(stringSocketClientResult.errorResult);
                    CBDialogViewShower.alert("Failed to analyze data. " + JSON.stringify(stringSocketClientResult.errorResult));
                    CBDialogViewShower.hideActionIndicatorDialog();
                    return;
                }
                const result = JSON.parse(stringSocketClientResult.result);
                //console.log(result)
                this.resultsLabel.innerHTML = FIRST(result.resultHTMLString, "") +
                    IF(IS_NOT(result.resultHTMLString))(RETURNER(`Radius: ${result.Radius} beta: ${result.beta} sigma_Aeff: ${result.sigma_Aeff}`))
                        .ELSE(RETURNER(""));
                const pointPoints = this.pointObjectsFromValues(result.xplot_mrk, result.yplot_mrk);
                const linePoints = this.pointObjectsFromValues(result.xplot_line, result.yplot_line);
                this.chart.data.datasets[0].data = pointPoints;
                this.chart.data.datasets[0].showLine = NO;
                this.chart.data.datasets[1].data = linePoints;
                this.chart.data.datasets[1].showLine = YES;
                this.chart.data.datasets[1].pointRadius = 0;
                this.chart.data.datasets[1].interpolate = YES;
                this.chart.options.scales.xAxes[0].scaleLabel.display = true;
                this.chart.options.scales.xAxes[0].scaleLabel.labelString = "" + FIRST(result.xAxisUnit, "");
                this.chart.options.scales.yAxes[0].scaleLabel.display = true;
                this.chart.options.scales.yAxes[0].scaleLabel.labelString = "" + FIRST(result.yAxisUnit, "");
                this.resultsLabel.hidden = NO;
                this.chartView.hidden = NO;
                this.chart.update();
                this.view.setNeedsLayoutUpToRootView();
            }
            catch (exception) {
                console.log(exception);
                CBDialogViewShower.alert("Failed to display results. " + JSON.stringify(exception));
            }
            CBDialogViewShower.hideActionIndicatorDialog();
        });
    }
    pointObjectsFromValues(xValues, yValues) {
        var resultPoints = [];
        for (var i = 0; i < xValues.length; i++) {
            var x = xValues[i];
            var y = yValues[i];
            resultPoints.push({ x: x, y: y });
        }
        return resultPoints;
    }
    handleRoute(route) {
        const _super = Object.create(null, {
            handleRoute: { get: () => super.handleRoute }
        });
        return __awaiter(this, void 0, void 0, function* () {
            _super.handleRoute.call(this, route);
            const inquiryComponent = route.componentWithViewController(GETELECViewController);
            this.titleLabel.text = "Enter your data and press the load button.";
            route.didcompleteComponent(inquiryComponent);
        });
    }
    layoutViewsManually() {
        super.layoutViewsManually();
        const padding = RootViewController.paddingLength;
        const labelHeight = padding * 1.25;
        // View bounds
        var bounds = this.view.bounds;
        this.view.setPaddings(0, 0, padding, 0);
        this.titleLabel.frame = bounds.rectangleWithInsets(padding, padding, 0, padding)
            .rectangleWithHeight(this.titleLabel.intrinsicContentHeight(bounds.width - padding * 2));
        this.inputTextArea.frame = this.titleLabel.frame.rectangleForNextRow(padding * 0.25, this.inputTextArea.intrinsicContentHeight(this.titleLabel.frame.width) + 5);
        this.loadDataButton.frame = this.inputTextArea.frame.rectangleForNextRow(padding, labelHeight * 2);
        this.loadDataButton.setMargins(0, 0, padding, 0);
        this.resultsLabel.frame = this.loadDataButton.frame.rectangleForNextRow(padding);
        this.chartView.frame = this.resultsLabel.frame.rectangleForNextRow(padding, this.loadDataButton.frame.width * 0.5);
        //.rectangleWithInsets(padding * 5 * 0, padding * 5, 0, 0)
        //.rectangleByAddingX(-padding)
        //this.chartView.setPadding(padding);
        this.chartView.setMaxSizes(this.chartView.frame.height, this.chartView.frame.width);
    }
    intrinsicViewContentHeight(constrainingWidth = 0) {
        const padding = RootViewController.paddingLength;
        const labelHeight = padding * 1.5;
        var result = padding + this.titleLabel.intrinsicContentHeight(constrainingWidth) + padding * 0.25 +
            labelHeight * 2 + padding * 0.5 + padding +
            this.inputTextArea.intrinsicContentHeight(constrainingWidth);
        if (IS_NOT(this.chartView.hidden)) {
            result = result + padding + (constrainingWidth - padding * 2) * 0.5 + padding + labelHeight * 2;
        }
        return result;
    }
}
GETELECViewController.routeComponentName = "fit_fun";
GETELECViewController.ParameterIdentifierName = { "ID": "ID" };
// @ts-ignore
Chart.Interaction.modes["interpolate"] = function (chart, e, options) {
    // This function has a separate license
    // MIT License
    //
    // Copyright (c) 2018 Abel Heinsbroek
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal
    // in the Software without restriction, including without limitation the rights
    // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    // copies of the Software, and to permit persons to whom the Software is
    // furnished to do so, subject to the following conditions:
    //
    //     The above copyright notice and this permission notice shall be included in all
    // copies or substantial portions of the Software.
    //
    //     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    //     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    //     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    // SOFTWARE.
    var items = [];
    for (var datasetIndex = 0; datasetIndex < chart.data.datasets.length; datasetIndex++) {
        // check for interpolate setting
        if (!chart.data.datasets[datasetIndex].interpolate) {
            continue;
        }
        var meta = chart.getDatasetMeta(datasetIndex);
        // do not interpolate hidden charts
        if (meta.hidden) {
            continue;
        }
        var xScale = chart.scales[meta.xAxisID];
        var yScale = chart.scales[meta.yAxisID];
        var xValue = xScale.getValueForPixel(e.x);
        var data = chart.data.datasets[datasetIndex].data;
        var index = data.findIndex(function (o) {
            return o.x >= xValue;
        });
        if (index === -1) {
            continue;
        }
        // linear interpolate value
        var prev = data[index - 1];
        var next = data[index];
        if (prev && next) {
            var slope = (next.y - prev.y) / (next.x - prev.x);
            var interpolatedValue = prev.y + (xValue - prev.x) * slope;
        }
        if (chart.data.datasets[datasetIndex].steppedLine && prev) {
            interpolatedValue = prev.y;
        }
        if (isNaN(interpolatedValue)) {
            continue;
        }
        var yPosition = yScale.getPixelForValue(interpolatedValue);
        // do not interpolate values outside of the axis limits
        if (isNaN(yPosition)) {
            continue;
        }
        // create a 'fake' event point
        var fakePoint = {
            value: interpolatedValue,
            xValue: xValue,
            tooltipPosition: function () {
                return this._model;
            },
            hasValue: function () {
                return true;
            },
            _model: {
                x: e.x,
                y: yPosition
            },
            _datasetIndex: datasetIndex,
            _index: items.length,
            _xScale: {
                getLabelForIndex: function (indx) {
                    let xValue = items[indx].xValue;
                    xValue = xValue.toPrecision(5);
                    return xValue;
                }
            },
            _yScale: {
                getLabelForIndex: function (indx) {
                    let value = items[indx].value.toPrecision(5);
                    return value;
                }
            },
            _chart: chart
        };
        items.push(fakePoint);
    }
    // add other, not interpolated, items
    // @ts-ignore
    var xItems = Chart.Interaction.modes.x(chart, e, options);
    xItems.forEach((item, index, array) => {
        if (!chart.data.datasets[item._datasetIndex].interpolate) {
            items.push(item);
        }
    });
    return items;
};
/// <reference path="./UIBaseButton.ts" />
class UIButton extends UIBaseButton {
    constructor(elementID, elementType, titleType = UITextView.type.span) {
        super(elementID, elementType, { "titleType": titleType });
        this.usesAutomaticTitleFontSize = NO;
        this.minAutomaticFontSize = nil;
        this.maxAutomaticFontSize = 25;
        this._class = UIButton;
        this.superclass = UIBaseButton;
    }
    initView(elementID, viewHTMLElement, initViewData) {
        this.class.superclass = UIBaseButton;
        // Instance variables
        this.colors = {
            titleLabel: {
                normal: UIColor.whiteColor,
                highlighted: UIColor.whiteColor,
                selected: UIColor.whiteColor
            },
            background: {
                normal: UIColor.blueColor,
                highlighted: UIColor.greenColor,
                selected: UIColor.redColor
            }
        };
        this._imageView = new UIImageView(elementID + "ImageView");
        this._imageView.hidden = YES;
        this.addSubview(this.imageView);
        this.imageView.fillMode = UIImageView.fillMode.aspectFitIfLarger;
        if (IS_NOT_NIL(initViewData.titleType)) {
            this._titleLabel = new UITextView(elementID + "TitleLabel", initViewData.titleType);
            this.titleLabel.style.whiteSpace = "nowrap";
            this.addSubview(this.titleLabel);
            this.titleLabel.userInteractionEnabled = NO;
        }
        this.contentPadding = 10;
        this.imageView.userInteractionEnabled = NO;
        this.titleLabel.textAlignment = UITextView.textAlignment.center;
        this.titleLabel.nativeSelectionEnabled = NO;
    }
    get contentPadding() {
        return this._contentPadding.integerValue;
    }
    set contentPadding(contentPadding) {
        this._contentPadding = contentPadding;
        this.setNeedsLayout();
    }
    set hovered(hovered) {
        this._hovered = hovered;
        this.updateContentForCurrentState();
    }
    get hovered() {
        return this._hovered;
    }
    set highlighted(highlighted) {
        this._highlighted = highlighted;
        this.updateContentForCurrentState();
    }
    get highlighted() {
        return this._highlighted;
    }
    set focused(focused) {
        this._focused = focused;
        if (focused) {
            this.focus();
        }
        else {
            this.blur();
        }
        this.updateContentForCurrentState();
    }
    get focused() {
        return this._focused;
    }
    set selected(selected) {
        this._selected = selected;
        this.updateContentForCurrentState();
    }
    get selected() {
        return this._selected;
    }
    updateContentForCurrentState() {
        var updateFunction = this.updateContentForNormalState;
        if (this.selected && this.highlighted) {
            updateFunction = this.updateContentForSelectedAndHighlightedState;
        }
        else if (this.selected) {
            updateFunction = this.updateContentForSelectedState;
        }
        else if (this.focused) {
            updateFunction = this.updateContentForFocusedState;
        }
        else if (this.highlighted) {
            updateFunction = this.updateContentForHighlightedState;
        }
        else if (this.hovered) {
            updateFunction = this.updateContentForHoveredState;
        }
        if (!IS(updateFunction)) {
            this.titleLabel.textColor = UIColor.nilColor;
            this.backgroundColor = UIColor.nilColor;
        }
        else {
            updateFunction.call(this);
        }
        this.updateContentForCurrentEnabledState();
    }
    updateContentForNormalState() {
        this.backgroundColor = this.colors.background.normal;
        this.titleLabel.textColor = this.colors.titleLabel.normal;
    }
    updateContentForHoveredState() {
        this.updateContentForNormalState();
        if (this.colors.background.hovered) {
            this.backgroundColor = this.colors.background.hovered;
        }
        if (this.colors.titleLabel.hovered) {
            this.titleLabel.textColor = this.colors.titleLabel.hovered;
        }
    }
    updateContentForFocusedState() {
        this.updateContentForHoveredState();
        if (this.colors.background.focused) {
            this.backgroundColor = this.colors.background.focused;
        }
        if (this.colors.titleLabel.focused) {
            this.titleLabel.textColor = this.colors.titleLabel.focused;
        }
    }
    updateContentForHighlightedState() {
        this.backgroundColor = this.colors.background.highlighted;
        this.titleLabel.textColor = this.colors.titleLabel.highlighted;
    }
    updateContentForSelectedState() {
        this.backgroundColor = this.colors.background.selected;
        this.titleLabel.textColor = this.colors.titleLabel.selected;
    }
    updateContentForSelectedAndHighlightedState() {
        this.updateContentForSelectedState();
        if (this.colors.background.selectedAndHighlighted) {
            this.backgroundColor = this.colors.background.selectedAndHighlighted;
        }
        if (this.colors.titleLabel.selectedAndHighlighted) {
            this.titleLabel.textColor = this.colors.titleLabel.selectedAndHighlighted;
        }
    }
    set enabled(enabled) {
        super.enabled = enabled;
        this.updateContentForCurrentState();
    }
    get enabled() {
        return super.enabled;
    }
    updateContentForCurrentEnabledState() {
        if (this.enabled) {
            this.alpha = 1;
        }
        else {
            this.alpha = 0.5;
        }
        this.userInteractionEnabled = this.enabled;
    }
    addStyleClass(styleClassName) {
        super.addStyleClass(styleClassName);
        if (this.styleClassName != styleClassName) {
            this.updateContentForCurrentState.call(this);
        }
    }
    get titleLabel() {
        return this._titleLabel;
    }
    get imageView() {
        return this._imageView;
    }
    layoutSubviews() {
        super.layoutSubviews();
        var bounds = this.bounds;
        this.hoverText = this.titleLabel.text;
        // Image only if text is not present
        if (IS_NOT(this.imageView.hidden) && !IS(this.titleLabel.text)) {
            this.imageView.frame = bounds;
        }
        // Text only if image is not present
        if (IS(this.imageView.hidden) && IS(this.titleLabel.text)) {
            var titleElement = this.titleLabel.viewHTMLElement;
            this.titleLabel.style.left = this.contentPadding;
            this.titleLabel.style.right = this.contentPadding;
            // this.titleLabel.style.marginLeft = ""
            // this.titleLabel.style.right = this.contentPadding
            this.titleLabel.style.top = "50%";
            this.titleLabel.style.transform = "translateY(-50%)";
            this.titleLabel.frame = new UIRectangle(nil, nil, nil, nil);
            if (this.usesAutomaticTitleFontSize) {
                var hidden = this.titleLabel.hidden;
                this.titleLabel.hidden = YES;
                this.titleLabel.fontSize = 15;
                this.titleLabel.fontSize = UITextView.automaticallyCalculatedFontSize(new UIRectangle(0, 0, this.bounds.height, 1 *
                    this.titleLabel.viewHTMLElement.offsetWidth), this.titleLabel.intrinsicContentSize(), this.titleLabel.fontSize, this.minAutomaticFontSize, this.maxAutomaticFontSize);
                this.titleLabel.hidden = hidden;
            }
        }
        // Image and text both present
        if (IS_NOT(this.imageView.hidden) && IS(this.titleLabel.text)) {
            const imageShareOfWidth = 0.25;
            bounds = bounds.rectangleWithInset(this.contentPadding);
            const imageFrame = bounds.copy();
            imageFrame.width = bounds.height - this.contentPadding * 0.5;
            this.imageView.frame = imageFrame;
            var titleElement = this.titleLabel.viewHTMLElement;
            this.titleLabel.style.left = imageFrame.max.x + this.contentPadding;
            this.titleLabel.style.right = this.contentPadding;
            this.titleLabel.style.top = "50%";
            this.titleLabel.style.transform = "translateY(-50%)";
            if (this.usesAutomaticTitleFontSize) {
                var hidden = this.titleLabel.hidden;
                this.titleLabel.hidden = YES;
                this.titleLabel.fontSize = 15;
                this.titleLabel.fontSize = UITextView.automaticallyCalculatedFontSize(new UIRectangle(0, 0, this.bounds.height, 1 *
                    this.titleLabel.viewHTMLElement.offsetWidth), this.titleLabel.intrinsicContentSize(), this.titleLabel.fontSize, this.minAutomaticFontSize, this.maxAutomaticFontSize);
                this.titleLabel.hidden = hidden;
            }
        }
        this.applyClassesAndStyles();
    }
    initViewStyleSelectors() {
        this.initStyleSelector("." + this.styleClassName, "background-color: lightblue;");
        // var selectorWithoutImage = "." + this.styleClassName + " ." + this.imageView.styleClassName + " + ." + this.titleLabel.styleClassName;
        // this.initStyleSelector(
        //     selectorWithoutImage,
        //     "left: " + this.contentPadding + ";" +
        //     "right: " + this.contentPadding + ";" +
        //     "top: 50%;" +
        //     "transform: translateY(-50%);");
    }
}
/// <reference path="../UICore/UIButton.ts" />
class CBButton extends UIButton {
    constructor(elementID, elementType) {
        super(elementID, elementType);
        this._class = CBButton;
        this.superclass = UIButton;
    }
    initView(elementID, viewHTMLElement, initViewData) {
        super.initView(elementID, viewHTMLElement, initViewData);
        //this.style.borderRadius = "2px"
        this.style.outline = "none";
        this.colors.titleLabel.normal = UIColor.whiteColor;
        this.setBackgroundColorsWithNormalColor(UIColor.blueColor);
        this.colors.titleLabel.selected = UIColor.blueColor;
    }
    setBackgroundColorsWithNormalColor(normalBackgroundColor) {
        this.colors.background.normal = normalBackgroundColor;
        this.colors.background.hovered = UIColor.colorWithRGBA(40, 168, 183); // normalBackgroundColor.colorByMultiplyingRGB(0.85)
        this.colors.background.focused = normalBackgroundColor; // normalBackgroundColor.colorByMultiplyingRGB(0.5)
        this.colors.background.highlighted = UIColor.colorWithRGBA(48, 196, 212); // normalBackgroundColor.colorByMultiplyingRGB(0.7)
        this.colors.background.selected = UIColor.whiteColor;
        this.updateContentForCurrentState();
    }
    updateContentForNormalState() {
        super.updateContentForNormalState();
        this.setBorder(0, 0);
        //this.style.boxShadow = "0 2px 2px 0 rgba(0,0,0,0.24)"
    }
    updateContentForHoveredState() {
        super.updateContentForHoveredState();
        this.setBorder(0, 0);
        //this.titleLabel.textColor = UIColor.whiteColor.colorByMultiplyingRGB(0.85);
        //this.style.boxShadow = "0 2px 2px 0 rgba(0,0,0,0.18)"
    }
    updateContentForFocusedState() {
        super.updateContentForFocusedState();
        this.setBorder(0, 1, UIColor.blueColor);
        //this.titleLabel.textColor = UIColor.whiteColor.colorByMultiplyingRGB(0.85);
        //this.style.boxShadow = "0 2px 2px 0 rgba(0,0,0,0.18)"
    }
    updateContentForHighlightedState() {
        super.updateContentForHighlightedState();
        this.setBorder(0, 0);
        //this.titleLabel.textColor = UIColor.whiteColor.colorByMultiplyingRGB(0.7);
        //this.style.boxShadow = "0 2px 2px 0 rgba(0,0,0,0.12)"
    }
    updateContentForCurrentEnabledState() {
        super.updateContentForCurrentEnabledState();
        if (IS_NOT(this.enabled)) {
            this.titleLabel.textColor = new UIColor("#adadad");
            this.backgroundColor = new UIColor("#e5e5e5");
            this.alpha = 1;
        }
    }
}
///<reference path="../UICore/UIButton.ts"/>
class CBCheckbox extends UIView {
    constructor(elementID) {
        super(elementID, nil, "label");
        this._class = CBCheckbox;
        this.superclass = UIView;
    }
    initView(elementID, viewHTMLElement) {
        super.initView(elementID, viewHTMLElement);
        this.checkbox = new UIView(elementID + "Checkbox", nil, "input");
        this.checkbox.viewHTMLElement.setAttribute("type", "checkbox");
        this.addSubview(this.checkbox);
        this.titleLabel = new UITextView(elementID + "TitleLabel", UITextView.type.span);
        this.addSubview(this.titleLabel);
        this.checkbox.userInteractionEnabled = NO;
        this.titleLabel.userInteractionEnabled = NO;
        this.titleLabel.style.overflow = "visible";
        this.titleLabel.style.lineHeight = "1.5";
        this.style.cursor = "pointer";
        this.viewHTMLElement.onchange = (event) => {
            this.sendControlEventForKey(CBCheckbox.controlEvent.SelectionChange, event);
        };
    }
    get isStatic() {
        const result = this.checkbox.viewHTMLElement.classList.contains("staticCheckbox");
        return result;
    }
    set isStatic(isStatic) {
        if (isStatic) {
            this.checkbox.viewHTMLElement.classList.add("staticCheckbox");
        }
        else {
            this.checkbox.viewHTMLElement.classList.remove("staticCheckbox");
        }
    }
    get selected() {
        return this.checkbox.viewHTMLElement.checked;
    }
    set selected(selected) {
        this.checkbox.viewHTMLElement.checked = selected;
    }
    layoutSubviews() {
        super.layoutSubviews();
        const titleWidth = this.bounds.width - 35;
        this.titleLabel.setMaxSizes(nil, titleWidth);
        this.titleLabel.textPrefix = "<span style=\"position: absolute; overflow: hidden; left: 0; top: 0;text-overflow: ellipsis; white-space: pre; padding-left: 35px; width: " +
            titleWidth + "px;\">";
        this.titleLabel.textSuffix = "</span>";
        this.hoverText = this.titleLabel.text.replace(this.titleLabel.textPrefix, "").replace(this.titleLabel.textSuffix, "");
    }
}
CBCheckbox.controlEvent = Object.assign({}, UIView.controlEvent, {
    "SelectionChange": "SelectionChange"
});
/// <reference path="../UICore/UIColor.ts" />
class CBColor extends UIColor {
    constructor(stringValue) {
        super(stringValue);
        this._class = CBColor;
        this.superclass = UIColor;
    }
    static get primaryTintColor() {
        return new CBColor("rgba(52, 127, 230, 1)");
    }
    static get secondaryTintColor() {
        return new CBColor("rgba(0, 196, 212, 1)");
    }
    static get primaryContentColor() {
        return new CBColor("rgb(35, 35, 35)");
    }
    static get greenTintColor() {
        return new CBColor("rgba(51, 188, 125, 1)");
    }
    static get redTintColor() {
        return new CBColor("rgba(236, 88, 111, 1)");
    }
}
/// <reference path="./CBButton.ts" />
class CBFlatButton extends CBButton {
    constructor(elementID, elementType) {
        super(elementID, elementType);
        this._class = CBFlatButton;
        this.superclass = CBButton;
    }
    initView(elementID, viewHTMLElement, initViewData) {
        super.initView(elementID, viewHTMLElement, initViewData);
        this.colors = {
            titleLabel: {
                normal: UIColor.blueColor,
                highlighted: UIColor.blueColor,
                selected: UIColor.blueColor
            },
            background: {
                normal: UIColor.transparentColor,
                hovered: new UIColor("#F8F8F8"),
                highlighted: new UIColor("#ebebeb"),
                selected: new UIColor("#ebebeb")
            }
        };
    }
    set titleLabelColor(titleLabelColor) {
        this.colors.titleLabel.normal = titleLabelColor;
        this.colors.titleLabel.highlighted = titleLabelColor;
        this.colors.titleLabel.selected = titleLabelColor;
        this.updateContentForCurrentState();
    }
    get titleLabelColor() {
        const result = this.colors.titleLabel.normal;
        return result;
    }
    updateContentForNormalState() {
        UIButton.prototype.updateContentForNormalState.call(this);
        //this.style.boxShadow = "0 2px 2px 0 rgba(0,0,0,0.24)"
    }
    updateContentForHoveredState() {
        UIButton.prototype.updateContentForHoveredState.call(this);
        //this.titleLabel.textColor = UIColor.whiteColor.colorByMultiplyingRGB(0.85);
        //this.style.boxShadow = "0 2px 2px 0 rgba(0,0,0,0.18)";
    }
    updateContentForFocusedState() {
        UIButton.prototype.updateContentForFocusedState.call(this);
        //this.titleLabel.textColor = UIColor.whiteColor.colorByMultiplyingRGB(0.85);
        //this.style.boxShadow = "0 2px 2px 0 rgba(0,0,0,0.18)"
    }
    updateContentForHighlightedState() {
        UIButton.prototype.updateContentForHighlightedState.call(this);
        //this.titleLabel.textColor = UIColor.whiteColor.colorByMultiplyingRGB(0.7);
        //this.style.boxShadow = "0 2px 2px 0 rgba(0,0,0,0.12)"
    }
}
CBFlatButton.colors = {
    titleLabel: {
        normal: UIColor.blueColor,
        highlighted: UIColor.blueColor,
        selected: UIColor.blueColor
    },
    background: {
        normal: UIColor.transparentColor,
        hovered: new UIColor("#F8F8F8"),
        highlighted: new UIColor("#ebebeb"),
        selected: new UIColor("#ebebeb")
    }
};
/// <reference path="../UICore/UIView.ts" />
class RowView extends UIView {
    constructor(elementID, cells = [], cellWidths = []) {
        super(elementID);
        this.padding = 0;
        this._rowHeight = 50;
        this._class = RowView;
        this.superclass = UIView;
        this._cells = cells;
        this._cellWeights = cellWidths;
    }
    get cells() {
        return this._cells;
    }
    set cells(cells) {
        const previousCells = this.cells;
        // The cells are added to this._cells in this.addCell()
        previousCells.copy().forEach(function (cell, index, array) {
            if (!cells.contains(cell)) {
                cell.removeFromSuperview();
                this._cells.removeElement(cell);
            }
        }.bind(this));
        cells.copy().forEach(function (cell, index, array) {
            if (!IS(cell.superview)) {
                this.addCell(cell, 1, index);
            }
        }, this);
        this._previousLayoutBounds = nil;
        this.setNeedsLayout();
    }
    removeCellAtIndex(index) {
        const remainingCells = this.cells.copy();
        remainingCells.removeElementAtIndex(index);
        this.cellWeights.removeElementAtIndex(index);
        this.cells = remainingCells;
    }
    removeFirstCell() {
        this.removeCellAtIndex(0);
    }
    removeLastCell() {
        this.removeCellAtIndex(this.cells.length - 1);
    }
    addCell(cell, weight = 1, index = this.cells.length) {
        if (this.cells.contains(cell) && IS_NOT_NIL(cell)) {
            return;
        }
        this.cells.insertElementAtIndex(index, cell);
        this.cellWeights.insertElementAtIndex(index, weight);
        this.addSubview(cell);
        this.setNeedsLayout();
    }
    get cellWeights() {
        return this._cellWeights;
    }
    set cellWeights(widths) {
        this._cellWeights = widths;
        this._previousLayoutBounds = nil;
        this.setNeedsLayout();
    }
    get cellWidths() {
        return this._cellWidths;
    }
    set cellWidths(widths) {
        this._cellWidths = widths;
        this._previousLayoutBounds = nil;
        this.setNeedsLayout();
    }
    get rowHeight() {
        var result = IF(this._rowHeight)(() => this._rowHeight)
            .ELSE(() => this.cells.map((value, index, array) => value.intrinsicContentHeight(this.bounds.width)).max());
        return result; //this.bounds.height
    }
    layoutSubviews() {
        const bounds = this.bounds;
        if (bounds.isEqualTo(this._previousLayoutBounds)) {
            return;
        }
        super.layoutSubviews();
        this._previousLayoutBounds = bounds;
        bounds.distributeViewsAlongWidth(this._cells, this._cellWeights, this.padding, this._cellWidths);
        this.cells.forEach(function (cell, index, array) {
            cell.frame = cell.frame.rectangleWithHeight(this.rowHeight);
        }.bind(this));
    }
}
/// <reference path="./CBFlatButton.ts" />
/// <reference path="./RowView.ts" />
/// <reference path="../UICore/UICoreExtensions.ts" />
class CBDialogView extends UIView {
    constructor(elementID) {
        super(elementID);
        this.titleLabel = nil;
        this.titleRow = nil;
        this.placeholderLabel = nil;
        this._view = nil;
        this.questionLabel = nil;
        this.yesButton = nil;
        this.noButton = nil;
        this.cancelButton = nil;
        this.noButtonDismissesDialog = YES;
        this._class = CBDialogView;
        this.superclass = UIView;
        this.updateContent();
    }
    initView(elementID, viewHTMLElement) {
        super.initView(elementID, viewHTMLElement);
        // this.initPlaceholderLabelIfNeeded()
        // this.initTitleLabelIfNeeded()
        // this.initTitleRow()
        // this.titleRow.cellWeights = [1, 0.75, 1.2, 1]
        // var cells = this.titleRow.cells as CellView[];
        // var cellTitles = ["TIME:", "COMPANY:", "COMMENTS:", "PRICE:"]
        // cells.forEach(function (cell, index, array) {
        //     cell.titleLabel.text = cellTitles[index];
        //     cell.titleLabel.useSairaFont()
        // })
        // this.initQuestionLabelIfNeeded()
        // this.initYesNoButtonsIfNeeded()
        this.style.borderRadius = "5px";
    }
    set view(view) {
        this.view.removeFromSuperview();
        this._view = view;
        this.addSubview(view);
    }
    get view() {
        return this._view;
    }
    initCancelButtonIfNeeded() {
        if (IS_NOT(this.cancelButton)) {
            this.cancelButton = new CBFlatButton(this.elementID + "CancelButton");
            this.cancelButton.titleLabel.text = "OK";
            this.cancelButton.titleLabelColor = UIColor.greenColor;
            this.cancelButton.titleLabel.style.fontWeight = "600";
            this.addSubview(this.cancelButton);
            this.cancelButton.addTargetForControlEvents([
                UIButton.controlEvent.PointerUpInside, UIButton.controlEvent.EnterDown
            ], function (sender, event) {
                this.dialogView.dismiss();
            }.bind(this));
        }
    }
    initYesNoButtonsIfNeeded() {
        if (IS_NOT(this.yesButton)) {
            this.yesButton = new CBFlatButton(this.elementID + "YesButton");
            this.yesButton.titleLabel.setText("cBDDialogViewYES", "YES");
            this.yesButton.titleLabelColor = UIColor.greenColor;
            this.yesButton.titleLabel.style.fontWeight = "600";
            this.addSubview(this.yesButton);
            this.noButton = new CBFlatButton(this.elementID + "NoButton");
            this.noButton.titleLabel.setText("cBDDialogViewNO", "NO");
            this.noButton.titleLabelColor = UIColor.redColor;
            this.noButton.titleLabel.style.fontWeight = "600";
            this.addSubview(this.noButton);
            // this.yesButton.addTargetForControlEvents([UIButton.controlEvent.PointerUpInside, UIButton.controlEvent.EnterDown], function (this: CBDialogView, sender: UIButton, event: Event) {
            //     this.dialogView.dismiss()
            // }.bind(this))
            this.noButton.addTargetForControlEvents([
                UIButton.controlEvent.PointerUpInside, UIButton.controlEvent.EnterDown
            ], function (sender, event) {
                if (this.noButtonDismissesDialog) {
                    this.dialogView.dismiss();
                }
            }.bind(this));
        }
    }
    initQuestionLabelIfNeeded() {
        if (IS_NOT(this.questionLabel)) {
            this.questionLabel = new UITextView(this.elementID + "QuestionLabel", UITextView.type.header3);
            this.questionLabel.text = LanguageService.stringForKey("cBDDialogViewAreYouSure", LanguageService.currentLanguageKey, "Are you sure?");
            this.questionLabel.textAlignment = UITextView.textAlignment.center;
            this.addSubview(this.questionLabel);
        }
    }
    initTitleRow() {
        if (IS_NOT(this.titleRow)) {
            this.titleRow = new RowView(this.elementID + "TitleRow");
            this.addSubview(this.titleRow);
        }
    }
    initTitleLabelIfNeeded() {
        if (IS_NOT(this.titleLabel)) {
            this.titleLabel = new UITextView(this.elementID + "TitleLabel", UITextView.type.header4);
            this.titleLabel.text = "Accept offer";
            this.titleLabel.style.fontSize = "24";
            this.addSubview(this.titleLabel);
        }
    }
    initPlaceholderLabelIfNeeded() {
        if (IS_NOT(this.placeholderLabel)) {
            this.placeholderLabel = new UITextView(this.elementID + "PlaceholderLabel", UITextView.type.header4);
            this.placeholderLabel.text = "No offers have been made yet.";
            this.addSubview(this.placeholderLabel);
        }
    }
    updateContent() {
        function stringFromValue(value) {
            if (IS(value)) {
                return value;
            }
            return "-";
        }
        this.layoutSubviews();
    }
    layoutSubviews() {
        super.layoutSubviews();
        const padding = RootViewController.paddingLength;
        const labelHeight = padding * 0.75;
        const bounds = this.bounds.rectangleWithInsets(padding * 0.5, padding * 0.5, 0, 0);
        const topObject = { frame: bounds.rectangleWithHeight(0) };
        this.titleLabel.frame = bounds.rectangleWithHeight(this.titleLabel.intrinsicContentHeight(bounds.width)).rectangleWithY(bounds.y +
            padding * 0.5);
        this.titleLabel.style.marginLeft = "" + (padding * 0.5) + "px";
        this.titleRow.frame = FIRST_OR_NIL(this.titleLabel, topObject).frame.rectangleForNextRow(0, this.titleRow.intrinsicContentHeight(bounds.width));
        this.view.frame = FIRST_OR_NIL(this.titleRow, this.titleLabel, topObject).frame.rectangleForNextRow(padding, this.view.intrinsicContentHeight(bounds.width)).rectangleWithWidth(bounds.width).rectangleWithX(bounds.x);
        this.questionLabel.frame = FIRST_OR_NIL(this.view, this.titleRow, this.titleLabel, topObject).frame.rectangleForNextRow(padding, this.questionLabel.intrinsicContentHeight(bounds.width)).rectangleWithWidth(bounds.width).rectangleWithX(bounds.x);
        const buttons = [this.yesButton, this.noButton];
        const buttonsFrame = FIRST_OR_NIL(this.questionLabel, this.view, this.titleRow, this.titleLabel, topObject).frame.rectangleForNextRow(padding, labelHeight *
            2)
            .rectangleWithWidth([buttons.everyElement.titleLabel.intrinsicContentWidth().max(), 120].max() * 2 + padding * 3, 0.5);
        buttonsFrame.distributeViewsAlongWidth(buttons);
        this.cancelButton.frame = buttonsFrame.rectangleWithWidth(150, 0.5);
        this.placeholderLabel.frame = bounds.rectangleWithInsets(padding * 0.5, padding * 0.5, 0, 0);
        if (IS(this.view)) {
            this.placeholderLabel.hidden = YES;
            // this.titleLabel.hidden = NO
            // this.titleRow.hidden = NO
        }
        else {
            this.placeholderLabel.hidden = NO;
            // this.titleLabel.hidden = YES
            // this.titleRow.hidden = YES
        }
    }
    intrinsicContentHeight(constrainingWidth = 0) {
        const padding = RootViewController.paddingLength;
        const labelHeight = padding * 0.75;
        function addPaddingIfNeeded(value) {
            return IF(value)(function () {
                return value + padding;
            })();
        }
        var result = padding;
        result = result + addPaddingIfNeeded(this.titleLabel.intrinsicContentHeight(constrainingWidth));
        result = result + addPaddingIfNeeded(this.titleRow.intrinsicContentHeight(constrainingWidth));
        result = result + addPaddingIfNeeded(this.view.intrinsicContentHeight(constrainingWidth) + padding);
        result = result + addPaddingIfNeeded(this.questionLabel.intrinsicContentHeight(constrainingWidth));
        result = result + IF(FIRST_OR_NIL(this.yesButton, this.cancelButton))(RETURNER(labelHeight))();
        return result;
    }
}
/// <reference path="../UICore/UICore.ts" />
/// <reference path="../UICore/UIRoute.ts" />
class LanguageService {
    static useStoredLanguageValues(values = {}) {
        LanguageService.languages = JSON.parse(JSON.stringify(LanguageService.languageValues)).objectByCopyingValuesRecursivelyFromObject(values);
        LanguageService.broadcastLanguageChangeEvent();
    }
    static broadcastLanguageChangeEvent() {
        UICore.main.rootViewController.view.broadcastEventInSubtree({
            name: UIView.broadcastEventName.LanguageChanged,
            parameters: {}
        });
    }
    static get defaultLanguageKey() {
        return "en";
    }
    static get currentLanguageKey() {
        if (!LanguageService._currentLanguageKey) {
            LanguageService.updateCurrentLanguageKey();
        }
        return LanguageService._currentLanguageKey;
    }
    static updateCurrentLanguageKey(route = UIRoute.currentRoute) {
        var result = route.componentWithName("settings").parameters.language;
        if (IS_NOT(result)) {
            result = LanguageService.defaultLanguageKey;
        }
        LanguageService._currentLanguageKey = result;
    }
    get currentLanguageKey() {
        const result = LanguageService.currentLanguageKey;
        return result;
    }
    static stringForKey(key, languageKey, defaultString, parameters) {
        var result;
        if (IS(key) && LanguageService.languages[languageKey] &&
            IS_DEFINED(LanguageService.languages[languageKey][key])) {
            result = LanguageService.languages[languageKey][key];
        }
        else {
            result = defaultString;
        }
        if (IS(parameters)) {
            const parameterKeys = Object.keys(parameters);
            parameterKeys.forEach(function (key, index, array) {
                const keyString = "%" + key + "%";
                const parameter = parameters[key];
                var parameterString;
                if (parameter instanceof Object) {
                    parameterString = UICore.languageService.stringForCurrentLanguage(parameter);
                }
                else {
                    parameterString = parameter;
                }
                result = result.replace(new RegExp(keyString, "g"), parameterString);
            });
        }
        return result;
    }
    stringForKey(key, languageKey, defaultString, parameters) {
        return LanguageService.stringForKey(key, languageKey, defaultString, parameters);
    }
    static localizedTextObjectForKey(key, defaultString = key, parameters) {
        const result = {};
        LanguageService.languages.forEach(function (languageObject, languageKey) {
            result[languageKey] = LanguageService.stringForKey(key, languageKey, defaultString, parameters);
        });
        return result;
    }
    localizedTextObjectForKey(key, defaultString, parameters) {
        const result = LanguageService.localizedTextObjectForKey(key, defaultString, parameters);
        return result;
    }
    static localizedTextObjectForText(text) {
        if (IS_NOT(text)) {
            return nil;
        }
        const result = {
            [LanguageService.defaultLanguageKey]: text
        };
        return result;
    }
    localizedTextObjectForText(text) {
        const result = LanguageService.localizedTextObjectForText(text);
        return result;
    }
    static stringForCurrentLanguage(localizedTextObject) {
        if (!LanguageService || !localizedTextObject) {
            const asd = 1;
        }
        localizedTextObject = FIRST_OR_NIL(localizedTextObject);
        var result = localizedTextObject[LanguageService.currentLanguageKey];
        if (IS_NOT(result)) {
            result = localizedTextObject[LanguageService.defaultLanguageKey];
        }
        if (IS_NOT(result)) {
            result = localizedTextObject["en"];
        }
        if (IS_NOT(result)) {
            result = "";
        }
        return result;
    }
    stringForCurrentLanguage(localizedTextObject) {
        return LanguageService.stringForCurrentLanguage(localizedTextObject);
    }
}
LanguageService.languageValues = {
    "en": {
        "languageName": "English",
        "languageNameShort": "ENG",
        "topBarTitle": "Carrum",
        "frontPageHTML": "Asdasd",
        "bottomBarContent": "PUT BOTTOM BAR STUFF IN HERE"
    },
    "est": {
        "languageName": "Eesti keel",
        "languageNameShort": "EST",
        "topBarTitle": "Carrum"
    }
};
LanguageService.languages = JSON.parse(JSON.stringify(LanguageService.languageValues));
UICore.languageService = LanguageService;
/// <reference path="../UICore/UICoreExtensions.ts" />
/// <reference path="../UICore/UICore.ts" />
/// <reference path="../UICore/UIColor.ts" />
/// <reference path="./CBDialogView.ts" />
/// <reference path="../Custom components/LanguageService.ts" />
class CBDialogViewShower extends UIObject {
    constructor(elementID) {
        super();
        this._class = CBDialogViewShower;
        this.superclass = UIObject;
        this.dialogView = new UIDialogView();
        this.dialogView.view = new CBDialogView(elementID);
        this.dialogView.view.backgroundColor = UIColor.whiteColor;
        const dialogLayoutFunction = this.dialogView.layoutSubviews.bind(this.dialogView);
        this.dialogView.layoutSubviews = function () {
            dialogLayoutFunction();
            this.dialogView.view.frame = new UIRectangle(0, 0, window.innerHeight, window.innerWidth).rectangleWithHeight(this.dialogView.view.intrinsicContentHeight(this.getDialogWidth()), 0.5).rectangleWithWidth(this.getDialogWidth(), 0.5);
            this.dialogView.frame = UICore.main.rootViewController.view.bounds;
        }.bind(this);
        this.dialogView.view.yesButton.addTargetForControlEvents([
            UIButton.controlEvent.PointerUpInside, UIButton.controlEvent.EnterDown
        ], function (sender, event) {
            this.yesButtonWasPressed();
        }.bind(this));
        this.dialogView.view.noButton.addTargetForControlEvents([
            UIButton.controlEvent.PointerUpInside, UIButton.controlEvent.EnterDown
        ], function (sender, event) {
            this.noButtonWasPressed();
        }.bind(this));
    }
    getDialogWidth() {
        const padding = RootViewController.paddingLength;
        const labelHeight = padding * 0.75;
        var result = 250;
        const width = this.dialogView.view.titleLabel.intrinsicContentWidth() + padding * 2;
        result = Math.max(result, this.dialogView.view.view.intrinsicContentWidth(this.dialogView.view.view.viewHTMLElement.naturalHeight || 1000000000));
        result = Math.max(result, width);
        result = Math.min(result, 1000);
        const dialogMaxWidth = (this.dialogView.superview ||
            { "bounds": new UIRectangle(0, 0, 0, result) }).bounds.width;
        result = Math.min(result, dialogMaxWidth);
        return result;
    }
    yesButtonWasPressed() {
    }
    noButtonWasPressed() {
    }
    cancelButtonWasPressed() {
    }
    showQuestionDialogInRootView(titleTextObject, questionTextObject) {
        this.dialogView.view.initTitleLabelIfNeeded();
        this.dialogView.view.titleLabel.localizedTextObject = titleTextObject;
        this.dialogView.view.initQuestionLabelIfNeeded();
        if (IS(questionTextObject)) {
            this.dialogView.view.questionLabel.localizedTextObject = questionTextObject;
        }
        this.dialogView.view.initYesNoButtonsIfNeeded();
        this.dialogView.view.noButton.addTargetForControlEvents([
            UIButton.controlEvent.EnterDown, UIButton.controlEvent.PointerUpInside
        ], function (sender, event) {
            this.noButtonWasPressed();
        }.bind(this));
        this.dialogView.view.yesButton.addTargetForControlEvents([
            UIButton.controlEvent.EnterDown, UIButton.controlEvent.PointerUpInside
        ], function (sender, event) {
            this.yesButtonWasPressed();
        }.bind(this));
        this.dialogView.showInRootView(YES);
    }
    showMessageDialogInRootView(titleTextObject) {
        this.dialogView.view.initTitleLabelIfNeeded();
        this.dialogView.view.titleLabel.localizedTextObject = titleTextObject;
        this.dialogView.view.initCancelButtonIfNeeded();
        this.dialogView.view.cancelButton.addTargetForControlEvents([
            UIButton.controlEvent.EnterDown, UIButton.controlEvent.PointerUpInside
        ], function (sender, event) {
            this.cancelButtonWasPressed();
        }.bind(this));
        this.dialogView.showInRootView(YES);
        this.dialogView.view.cancelButton.focus();
    }
    showDialogInRootView(view) {
        this.dialogView.view.view = view;
        this.dialogView.view.initCancelButtonIfNeeded();
        this.dialogView.view.cancelButton.addTargetForControlEvents([
            UIButton.controlEvent.EnterDown, UIButton.controlEvent.PointerUpInside
        ], function (sender, event) {
            this.cancelButtonWasPressed();
        }.bind(this));
        this.dialogView.showInRootView(YES);
        this.dialogView.view.cancelButton.focus();
    }
    showImageDialogInRootView(imageURL, deleteImageCallback) {
        var loadingLabel = new UITextView();
        loadingLabel.text = "Loading image.";
        loadingLabel.textAlignment = UITextView.textAlignment.center;
        this.dialogView.view.view = loadingLabel;
        const imageView = new UIImageView();
        imageView.imageSource = imageURL;
        imageView.viewHTMLElement.onload = (event) => {
            this.dialogView.view.view = imageView;
            imageView.setNeedsLayoutUpToRootView();
        };
        imageView.fillMode = UIImageView.fillMode.aspectFitIfLarger;
        if (IS(deleteImageCallback)) {
            this.dialogView.view.initYesNoButtonsIfNeeded();
            this.dialogView.view.yesButton.titleLabel.text = "Close";
            this.dialogView.view.noButton.titleLabel.text = "Delete";
            this.dialogView.view.noButtonDismissesDialog = NO;
            this.dialogView.view.noButton.addTargetForControlEvents([
                UIButton.controlEvent.EnterDown, UIButton.controlEvent.PointerUpInside
            ], function (sender, event) {
                const dialogShower = CBDialogViewShower._dialogShowerWithDismissCallback(function () {
                    //this.dialogView.dismiss()
                }.bind(this));
                var textObject = LanguageService.localizedTextObjectForText("Delete this image.");
                dialogShower.showQuestionDialogInRootView(textObject);
                dialogShower.yesButtonWasPressed = function () {
                    deleteImageCallback();
                    dialogShower.dialogView.dismiss();
                };
            }.bind(this));
            this.dialogView.view.yesButton.addTargetForControlEvents([
                UIButton.controlEvent.EnterDown, UIButton.controlEvent.PointerUpInside
            ], function (sender, event) {
                this.dialogView.dismiss();
            }.bind(this));
        }
        else {
            this.dialogView.view.initCancelButtonIfNeeded();
            this.dialogView.view.cancelButton.titleLabel.text = "Close";
        }
        this.dialogView.showInRootView(YES);
        this.dialogView.view.cancelButton.focus();
    }
    showActionIndicatorDialogInRootView(message) {
        const actionIndicator = new UIActionIndicator();
        this.dialogView.zIndex = 150;
        this.dialogView.view.view = actionIndicator;
        actionIndicator.style.minHeight = "100px";
        this.dialogView.view.initQuestionLabelIfNeeded();
        this.dialogView.view.questionLabel.text = message;
        actionIndicator.start();
        this.dialogView.view.backgroundColor = CBColor.primaryContentColor.colorWithAlpha(0.5);
        this.dialogView.view.questionLabel.textColor = UIColor.whiteColor;
        this.dialogView.dismissesOnTapOutside = NO;
        CBDialogViewShower.currentActionIndicatorDialogViewShower = this;
        this.dialogView.showInRootView(NO);
        this.dialogView.view.cancelButton.focus();
    }
    static showNextDialog() {
        (CBDialogViewShower.nextShowDialogFunctions.firstElement || nil)();
        CBDialogViewShower.nextShowDialogFunctions.removeElementAtIndex(0);
    }
    static alert(text, dismissCallback = nil) {
        const dialogShower = CBDialogViewShower._dialogShowerWithDismissCallback(dismissCallback);
        const textObject = LanguageService.localizedTextObjectForText(text);
        const showDialogFunction = dialogShower.showMessageDialogInRootView.bind(dialogShower, textObject);
        CBDialogViewShower._showDialogWithFunction(showDialogFunction, dialogShower);
    }
    static localizedAlert(textObject, dismissCallback = nil) {
        const dialogShower = CBDialogViewShower._dialogShowerWithDismissCallback(dismissCallback);
        const showDialogFunction = dialogShower.showMessageDialogInRootView.bind(dialogShower, textObject);
        CBDialogViewShower._showDialogWithFunction(showDialogFunction, dialogShower);
    }
    static showQuestionDialog(questionText, dismissCallback = nil) {
        const dialogShower = CBDialogViewShower._dialogShowerWithDismissCallback(dismissCallback);
        const textObject = LanguageService.localizedTextObjectForText(questionText);
        const showDialogFunction = dialogShower.showQuestionDialogInRootView.bind(dialogShower, textObject);
        CBDialogViewShower._showDialogWithFunction(showDialogFunction, dialogShower);
        return dialogShower;
    }
    static showImageDialog(imageURL, deleteImageCallback = nil, dismissCallback = nil) {
        var dialogShower = CBDialogViewShower._dialogShowerWithDismissCallback(dismissCallback);
        var showDialogFunction = dialogShower.showImageDialogInRootView.bind(dialogShower, imageURL, deleteImageCallback);
        CBDialogViewShower._showDialogWithFunction(showDialogFunction, dialogShower);
        return dialogShower;
    }
    static showDialog(view, dismissCallback = nil) {
        const dialogShower = CBDialogViewShower._dialogShowerWithDismissCallback(dismissCallback);
        const showDialogFunction = dialogShower.showDialogInRootView.bind(dialogShower, view);
        CBDialogViewShower._showDialogWithFunction(showDialogFunction, dialogShower);
        return dialogShower;
    }
    static showActionIndicatorDialog(message, dismissCallback = nil) {
        if (IS(CBDialogViewShower.currentActionIndicatorDialogViewShower)) {
            CBDialogViewShower.currentActionIndicatorDialogViewShower.dialogView.view.questionLabel.text = message;
            CBDialogViewShower.currentActionIndicatorDialogViewShower.dialogView.view.setNeedsLayoutUpToRootView();
            return;
        }
        const dialogShower = CBDialogViewShower._dialogShowerWithDismissCallback(dismissCallback);
        dialogShower.showActionIndicatorDialogInRootView(message);
        return dialogShower;
    }
    static hideActionIndicatorDialog() {
        CBDialogViewShower.currentActionIndicatorDialogViewShower.dialogView.dismiss();
        CBDialogViewShower.currentActionIndicatorDialogViewShower = nil;
    }
    static _dialogShowerWithDismissCallback(dismissCallback) {
        const dialogShower = new CBDialogViewShower();
        const dismissFunction = dialogShower.dialogView.dismiss.bind(dialogShower.dialogView);
        dialogShower.dialogView.dismiss = function () {
            dismissFunction();
            dismissCallback();
            CBDialogViewShower.currentDialogViewShower = null;
            CBDialogViewShower.showNextDialog();
        };
        return dialogShower;
    }
    static _showDialogWithFunction(showDialogFunction, dialogShower) {
        if (IS(CBDialogViewShower.currentDialogViewShower)) {
            CBDialogViewShower.nextShowDialogFunctions.push(showDialogFunction);
        }
        else {
            CBDialogViewShower.currentDialogViewShower = dialogShower;
            showDialogFunction();
        }
    }
}
CBDialogViewShower.nextShowDialogFunctions = [];
CBDialogViewShower.currentActionIndicatorDialogViewShower = nil;
/// <reference path="../UICore/UILinkButton.ts" />
class CBLinkButton extends UILinkButton {
    constructor(elementID, elementType) {
        super(elementID, elementType);
        this._class = CBLinkButton;
        this.superclass = UILinkButton;
    }
    initView(elementID, viewHTMLElement, initViewData) {
        super.initView(elementID, viewHTMLElement, initViewData);
        this.button.removeFromSuperview();
        this.button = new CBButton(this.elementID + "Button", initViewData.elementType);
        this.addSubview(this.button);
    }
}
/// <reference path="../UICore/UIView.ts" />
class CellView extends UIButton {
    //titleLabel: UITextView;
    constructor(elementID, titleLabelType = UITextView.type.span) {
        super(elementID, undefined, titleLabelType);
        this._isAButton = NO;
        this.leftInset = 0;
        this.rightInset = 0;
        this._class = CellView;
        this.superclass = UIView;
        // this.titleLabel = new UITextView(this.elementID + "TitleLabel", titleLabelType);
        // this.addSubview(this.titleLabel);
        this.updateForCurrentIsAButtonState();
    }
    set isAButton(isAButton) {
        this._isAButton = isAButton;
        this.updateForCurrentIsAButtonState();
    }
    get isAButton() {
        return this._isAButton;
    }
    updateForCurrentIsAButtonState() {
        if (this._isAButton) {
            this.style.cursor = "pointer";
            this.titleLabel.userInteractionEnabled = NO;
            this.titleLabel.nativeSelectionEnabled = NO;
            this.titleLabel.textAlignment = UITextView.textAlignment.center;
            this.nativeSelectionEnabled = NO;
            this.style.outline = "";
            this.colors = {
                titleLabel: {
                    normal: UIColor.blueColor,
                    highlighted: UIColor.blueColor,
                    selected: UIColor.blueColor
                },
                background: {
                    normal: UIColor.transparentColor,
                    hovered: new UIColor("#F8F8F8"),
                    highlighted: new UIColor("#ebebeb"),
                    selected: new UIColor("#ebebeb")
                }
            };
        }
        else {
            this.style.cursor = "";
            this.titleLabel.userInteractionEnabled = YES;
            this.titleLabel.nativeSelectionEnabled = YES;
            this.titleLabel.textAlignment = UITextView.textAlignment.left;
            this.nativeSelectionEnabled = YES;
            this.style.outline = "none";
            this.colors = {
                titleLabel: {
                    normal: UIColor.blackColor,
                    highlighted: UIColor.blackColor,
                    selected: UIColor.blackColor
                },
                background: {
                    normal: UIColor.transparentColor,
                    highlighted: UIColor.transparentColor,
                    selected: UIColor.transparentColor
                }
            };
        }
        this.updateContentForCurrentState();
    }
    initRightImageViewIfNeeded() {
        if (this._rightImageView) {
            return;
        }
        this._rightImageView = new UIImageView(this.elementID + "RightImageView");
        this._rightImageView.userInteractionEnabled = NO;
    }
    set rightImageSource(imageSource) {
        if (IS(imageSource)) {
            this.initRightImageViewIfNeeded();
            this._rightImageView.imageSource = imageSource;
            this.addSubview(this._rightImageView);
        }
        else {
            this._rightImageView.removeFromSuperview();
        }
    }
    get rightImageSource() {
        var result = nil;
        if (this._rightImageView) {
            result = this._rightImageView.imageSource;
        }
        return result;
    }
    layoutSubviews() {
        super.layoutSubviews();
        const padding = RootViewController.paddingLength;
        const labelHeight = padding;
        const bounds = this.bounds;
        this.titleLabel.centerYInContainer();
        this.titleLabel.style.left = "" + (padding * 0.5 + this.leftInset).integerValue + "px";
        this.titleLabel.style.right = "" + (padding * 0.5 + this.rightInset).integerValue + "px";
        this.titleLabel.style.maxHeight = "100%";
        this.titleLabel.style.overflow = "hidden";
        //this.titleLabel.style.whiteSpace = "nowrap";
        if (this._rightImageView && this._rightImageView.superview == this) {
            // var imageHeight = bounds.height - padding;
            // this._rightImageView.frame = new UIRectangle(bounds.width - imageHeight - padding * 0.5, padding * 0.5, imageHeight, imageHeight);
            this._rightImageView.frame = bounds.rectangleWithInsets(this.leftInset, padding * 0.5 +
                this.rightInset, 0, 0).rectangleWithWidth(24, 1).rectangleWithHeight(24, 0.5);
            this.titleLabel.style.right = "" +
                (padding * 0.5 + this.rightInset + this._rightImageView.frame.width).integerValue + "px";
        }
    }
}
///<reference path="../UICore/UIView.ts"/>
class SearchTextField extends UIView {
    constructor(elementID) {
        super(elementID);
        this._class = SearchTextField;
        this.superclass = UIView;
    }
    initView(elementID, viewHTMLElement) {
        super.initView(elementID, viewHTMLElement);
        viewHTMLElement.classList.add("input", "input--search");
        viewHTMLElement.innerHTML = "\
            <button type=\"button\" class=\"input__button\">\
                <i class=\"material-icons\">search</i>\
            </button>\
            <input type=\"search\" class=\"input__field\" placeholder=\"Search\">";
        this._textField = new UIView(nil, this.textFieldElement);
        this._searchButton = new UIView(nil, this.searchButtonElement);
        this._searchButton.addTargetForControlEvents([
            UIView.controlEvent.EnterDown, UIView.controlEvent.PointerUpInside
        ], function (sender, event) {
            this.performSearch();
        }.bind(this));
        this._textField.addTargetForControlEvent(UIView.controlEvent.EnterDown, function (sender, event) {
            this.performSearch();
        }.bind(this));
        this._textField.viewHTMLElement.oninput = function (event) {
            this._textField.sendControlEventForKey(UITextField.controlEvent.TextChange, event);
        }.bind(this);
    }
    get searchButtonElement() {
        return this.viewHTMLElement.querySelector("button");
    }
    get textFieldElement() {
        return this.viewHTMLElement.querySelector("input");
    }
    set placeholderText(placeholderText) {
        this.textFieldElement.setAttribute("placeholder", placeholderText);
    }
    get placeholderText() {
        return this.textFieldElement.getAttribute("placeholder");
    }
    get text() {
        return this.textFieldElement.value;
    }
    set text(text) {
        this.textFieldElement.value = text;
    }
    focus() {
        this.textFieldElement.focus();
    }
    blur() {
        this.textFieldElement.blur();
    }
    performSearch() {
    }
    layoutSubviews() {
        super.layoutSubviews();
    }
}
///<reference path="UIObject.ts"/>
class UIKeyValueStringFilter extends UIObject {
    constructor(useSeparateWebWorker = NO) {
        super();
        this._isThreadClosed = NO;
        this._webWorker = UIKeyValueStringFilter._sharedWebWorker;
        this._class = UIKeyValueStringFilter;
        this.superclass = UIObject;
        if (useSeparateWebWorker) {
            this._webWorker = new Worker("compiledScripts/UIKeyValueStringFilterWebWorker.js");
        }
        UIKeyValueStringFilter._instanceNumber = UIKeyValueStringFilter._instanceNumber + 1;
        this._instanceNumber = UIKeyValueStringFilter._instanceNumber;
    }
    get instanceIdentifier() {
        return this._instanceNumber;
    }
    filterData(filteringString, data, excludedData, dataKeyPath, identifier, completion) {
        if (this._isThreadClosed) {
            return;
        }
        const startTime = Date.now();
        const instanceIdentifier = this.instanceIdentifier;
        this._webWorker.onmessage = function (message) {
            if (message.data.instanceIdentifier == instanceIdentifier) {
                console.log("Filtering took " + (Date.now() - startTime) + " ms.");
                completion(message.data.filteredData, message.data.filteredIndexes, message.data.identifier);
            }
        };
        try {
            this._webWorker.postMessage({
                "filteringString": filteringString,
                "data": data,
                "excludedData": excludedData,
                "dataKeyPath": dataKeyPath,
                "identifier": identifier,
                "instanceIdentifier": instanceIdentifier
            });
        }
        catch (exception) {
            completion([], [], identifier);
        }
    }
    closeThread() {
        this._isThreadClosed = YES;
        if (this._webWorker != UIKeyValueStringFilter._sharedWebWorker) {
            this._webWorker.terminate();
        }
    }
}
UIKeyValueStringFilter._sharedWebWorker = new Worker("compiledScripts/UIKeyValueStringFilterWebWorker.js");
UIKeyValueStringFilter._instanceNumber = -1;
/// <reference path="./UIView.ts" />
class UINativeScrollView extends UIView {
    constructor(elementID, viewHTMLElement) {
        super(elementID, viewHTMLElement);
        this.animationDuration = 0;
        this._class = UINativeScrollView;
        this.superclass = UIView;
        this.style.cssText = this.style.cssText + "-webkit-overflow-scrolling: touch;";
        this.style.overflow = "auto";
        // this.scrollsX = YES;
        // this.scrollsY = YES;
        this.viewHTMLElement.addEventListener("scroll", function (event) {
            this.didScrollToPosition(new UIPoint(this.viewHTMLElement.scrollLeft, this.viewHTMLElement.scrollTop));
            this.broadcastEventInSubtree({
                name: UIView.broadcastEventName.PageDidScroll,
                parameters: nil
            });
        }.bind(this));
    }
    didScrollToPosition(offsetPosition) {
    }
    get scrollsX() {
        const result = (this.style.overflowX == "scroll");
        return result;
    }
    set scrollsX(scrolls) {
        if (scrolls) {
            this.style.overflowX = "scroll";
        }
        else {
            this.style.overflowX = "hidden";
        }
    }
    get scrollsY() {
        const result = (this.style.overflowY == "scroll");
        return result;
    }
    set scrollsY(scrolls) {
        if (scrolls) {
            this.style.overflowY = "scroll";
        }
        else {
            this.style.overflowY = "hidden";
        }
    }
    get contentOffset() {
        const result = new UIPoint(this.viewHTMLElement.scrollLeft, this.viewHTMLElement.scrollTop);
        return result;
    }
    set contentOffset(offsetPoint) {
        if (this.animationDuration) {
            this.scrollXTo(this.viewHTMLElement, offsetPoint.x, this.animationDuration);
            this.scrollYTo(this.viewHTMLElement, offsetPoint.y, this.animationDuration);
            return;
        }
        this.viewHTMLElement.scrollLeft = offsetPoint.x;
        this.viewHTMLElement.scrollTop = offsetPoint.y;
    }
    scrollToBottom() {
        this.contentOffset = new UIPoint(this.contentOffset.x, this.scrollSize.height - this.frame.height);
    }
    scrollToTop() {
        this.contentOffset = new UIPoint(this.contentOffset.x, 0);
    }
    get isScrolledToBottom() {
        return this.contentOffset.isEqualTo(new UIPoint(this.contentOffset.x, this.scrollSize.height -
            this.frame.height));
    }
    get isScrolledToTop() {
        return this.contentOffset.isEqualTo(new UIPoint(this.contentOffset.x, 0));
    }
    scrollYTo(element, to, duration) {
        duration = duration * 1000;
        const start = element.scrollTop;
        const change = to - start;
        const increment = 10;
        const animateScroll = function (elapsedTime) {
            elapsedTime += increment;
            const position = this.easeInOut(elapsedTime, start, change, duration);
            element.scrollTop = position;
            if (elapsedTime < duration) {
                setTimeout(function () {
                    animateScroll(elapsedTime);
                }, increment);
            }
        }.bind(this);
        animateScroll(0);
    }
    scrollXTo(element, to, duration) {
        duration = duration * 1000;
        const start = element.scrollTop;
        const change = to - start;
        const increment = 10;
        const animateScroll = function (elapsedTime) {
            elapsedTime += increment;
            const position = this.easeInOut(elapsedTime, start, change, duration);
            element.scrollLeft = position;
            if (elapsedTime < duration) {
                setTimeout(function () {
                    animateScroll(elapsedTime);
                }, increment);
            }
        }.bind(this);
        animateScroll(0);
    }
    easeInOut(currentTime, start, change, duration) {
        currentTime /= duration / 2;
        if (currentTime < 1) {
            return change / 2 * currentTime * currentTime + start;
        }
        currentTime -= 1;
        return -change / 2 * (currentTime * (currentTime - 2) - 1) + start;
    }
}
/// <reference path="./UINativeScrollView.ts" />
class UITableView extends UINativeScrollView {
    constructor(elementID) {
        super(elementID);
        this.allRowsHaveEqualHeight = NO;
        this._visibleRows = [];
        this._firstLayoutVisibleRows = [];
        this._rowPositions = [];
        this._highestValidRowPositionIndex = 0;
        this._reusableViews = {};
        this._removedReusableViews = {};
        this._rowIDIndex = 0;
        this.reloadsOnLanguageChange = YES;
        this.sidePadding = 0;
        this._persistedData = [];
        this._needsDrawingOfVisibleRowsBeforeLayout = NO;
        this._isDrawVisibleRowsScheduled = NO;
        this.animationDuration = 0.25;
        this._class = UITableView;
        this.superclass = UINativeScrollView;
        this.scrollsX = NO;
    }
    initView(elementID, viewHTMLElement) {
        super.initView(elementID, viewHTMLElement);
        this._fullHeightView = new UIView();
        this._fullHeightView.hidden = YES;
        this._fullHeightView.userInteractionEnabled = NO;
        this.addSubview(this._fullHeightView);
    }
    loadData() {
        this._persistedData = [];
        this._calculatePositionsUntilIndex(this.numberOfRows() - 1);
        this._needsDrawingOfVisibleRowsBeforeLayout = YES;
        this.setNeedsLayout();
        // this.forEachViewInSubtree(function(view) {
        //     view.setNeedsLayout();
        // })
    }
    reloadData() {
        this._removeVisibleRows();
        this._removeAllReusableRows();
        this._rowPositions = [];
        this._highestValidRowPositionIndex = 0;
        this.loadData();
    }
    highlightChanges(previousData, newData) {
        previousData = previousData.map(function (dataPoint, index, array) {
            return JSON.stringify(dataPoint);
        });
        newData = newData.map(function (dataPoint, index, array) {
            return JSON.stringify(dataPoint);
        });
        const newIndexes = [];
        newData.forEach(function (value, index, array) {
            if (!previousData.contains(value)) {
                newIndexes.push(index);
            }
        });
        newIndexes.forEach(function (index) {
            if (this.isRowWithIndexVisible(index)) {
                this.highlightRowAsNew(this.viewForRowWithIndex(index));
            }
        }.bind(this));
    }
    highlightRowAsNew(row) {
    }
    invalidateSizeOfRowWithIndex(index, animateChange = NO) {
        if (this._rowPositions[index]) {
            this._rowPositions[index].isValid = NO;
        }
        this._highestValidRowPositionIndex = Math.min(this._highestValidRowPositionIndex, index - 1);
        // if (index == 0) {
        //     this._highestValidRowPositionIndex = 0;
        //     this._rowPositions = [];
        // }
        this._needsDrawingOfVisibleRowsBeforeLayout = YES;
        this._shouldAnimateNextLayout = animateChange;
    }
    _calculateAllPositions() {
        this._calculatePositionsUntilIndex(this.numberOfRows() - 1);
    }
    _calculatePositionsUntilIndex(maxIndex) {
        var validPositionObject = this._rowPositions[this._highestValidRowPositionIndex];
        if (!IS(validPositionObject)) {
            validPositionObject = {
                bottomY: 0,
                topY: 0,
                isValid: YES
            };
        }
        var previousBottomY = validPositionObject.bottomY;
        if (!this._rowPositions.length) {
            this._highestValidRowPositionIndex = -1;
        }
        for (var i = this._highestValidRowPositionIndex + 1; i <= maxIndex; i++) {
            var height;
            const rowPositionObject = this._rowPositions[i];
            if (IS((rowPositionObject || nil).isValid)) {
                height = rowPositionObject.bottomY - rowPositionObject.topY;
            }
            else {
                height = this.heightForRowWithIndex(i);
            }
            const positionObject = {
                bottomY: previousBottomY + height,
                topY: previousBottomY,
                isValid: YES
            };
            if (i < this._rowPositions.length) {
                this._rowPositions[i] = positionObject;
            }
            else {
                this._rowPositions.push(positionObject);
            }
            this._highestValidRowPositionIndex = i;
            previousBottomY = previousBottomY + height;
        }
    }
    indexesForVisibleRows(paddingRatio = 0.5) {
        const firstVisibleY = this.contentOffset.y - this.bounds.height * paddingRatio;
        const lastVisibleY = firstVisibleY + this.bounds.height * (1 + paddingRatio);
        const numberOfRows = this.numberOfRows();
        if (this.allRowsHaveEqualHeight) {
            const rowHeight = this.heightForRowWithIndex(0);
            var firstIndex = firstVisibleY / rowHeight;
            var lastIndex = lastVisibleY / rowHeight;
            firstIndex = Math.trunc(firstIndex);
            lastIndex = Math.trunc(lastIndex) + 1;
            firstIndex = Math.max(firstIndex, 0);
            lastIndex = Math.min(lastIndex, numberOfRows - 1);
            var result = [];
            for (var i = firstIndex; i < lastIndex + 1; i++) {
                result.push(i);
            }
            return result;
        }
        var accumulatedHeight = 0;
        var result = [];
        this._calculateAllPositions();
        const rowPositions = this._rowPositions;
        for (var i = 0; i < numberOfRows; i++) {
            const height = rowPositions[i].bottomY - rowPositions[i].topY; // this.heightForRowWithIndex(i)
            accumulatedHeight = accumulatedHeight + height;
            if (accumulatedHeight >= firstVisibleY) {
                result.push(i);
            }
            if (accumulatedHeight >= lastVisibleY) {
                break;
            }
        }
        return result;
    }
    _removeVisibleRows() {
        const visibleRows = [];
        this._visibleRows.forEach(function (row, index, array) {
            this._persistedData[row._UITableViewRowIndex] = this.persistenceDataItemForRowWithIndex(row._UITableViewRowIndex, row);
            row.removeFromSuperview();
            this._removedReusableViews[row._UITableViewReusabilityIdentifier].push(row);
        }, this);
        this._visibleRows = visibleRows;
    }
    _removeAllReusableRows() {
        this._reusableViews.forEach(function (rows) {
            rows.forEach(function (row, index, array) {
                this._persistedData[row._UITableViewRowIndex] = this.persistenceDataItemForRowWithIndex(row._UITableViewRowIndex, row);
                row.removeFromSuperview();
                this._markReusableViewAsUnused(row);
            }.bind(this));
        }.bind(this));
    }
    _markReusableViewAsUnused(row) {
        if (!this._removedReusableViews[row._UITableViewReusabilityIdentifier].contains(row)) {
            this._removedReusableViews[row._UITableViewReusabilityIdentifier].push(row);
        }
    }
    _drawVisibleRows() {
        if (!this.isMemberOfViewTree) {
            return;
        }
        const visibleIndexes = this.indexesForVisibleRows();
        const minIndex = visibleIndexes[0];
        const maxIndex = visibleIndexes[visibleIndexes.length - 1];
        const removedViews = [];
        const visibleRows = [];
        this._visibleRows.forEach(function (row, index, array) {
            if (row._UITableViewRowIndex < minIndex || row._UITableViewRowIndex > maxIndex) {
                //row.removeFromSuperview();
                this._persistedData[row._UITableViewRowIndex] = this.persistenceDataItemForRowWithIndex(row._UITableViewRowIndex, row);
                this._removedReusableViews[row._UITableViewReusabilityIdentifier].push(row);
                removedViews.push(row);
            }
            else {
                visibleRows.push(row);
            }
        }, this);
        this._visibleRows = visibleRows;
        visibleIndexes.forEach(function (rowIndex, index, array) {
            if (this.isRowWithIndexVisible(rowIndex)) {
                return;
            }
            const view = this.viewForRowWithIndex(rowIndex);
            //view._UITableViewRowIndex = rowIndex;
            this._firstLayoutVisibleRows.push(view);
            this._visibleRows.push(view);
            this.addSubview(view);
        }, this);
        for (var i = 0; i < removedViews.length; i++) {
            var view = removedViews[i];
            if (this._visibleRows.indexOf(view) == -1) {
                //this._persistedData[view._UITableViewRowIndex] = this.persistenceDataItemForRowWithIndex(view._UITableViewRowIndex, view);
                view.removeFromSuperview();
                //this._removedReusableViews[view._UITableViewReusabilityIdentifier].push(view);
            }
        }
        //this.setNeedsLayout();
    }
    visibleRowWithIndex(rowIndex) {
        for (var i = 0; i < this._visibleRows.length; i++) {
            const row = this._visibleRows[i];
            if (row._UITableViewRowIndex == rowIndex) {
                return row;
            }
        }
        return nil;
    }
    isRowWithIndexVisible(rowIndex) {
        return IS(this.visibleRowWithIndex(rowIndex));
    }
    reusableViewForIdentifier(identifier, rowIndex) {
        if (!this._removedReusableViews[identifier]) {
            this._removedReusableViews[identifier] = [];
        }
        if (this._removedReusableViews[identifier] && this._removedReusableViews[identifier].length) {
            const view = this._removedReusableViews[identifier].pop();
            view._UITableViewRowIndex = rowIndex;
            Object.assign(view, this._persistedData[rowIndex] || this.defaultRowPersistenceDataItem());
            return view;
        }
        if (!this._reusableViews[identifier]) {
            this._reusableViews[identifier] = [];
        }
        const newView = this.newReusableViewForIdentifier(identifier, this._rowIDIndex);
        this._rowIDIndex = this._rowIDIndex + 1;
        if (this._rowIDIndex > 40) {
            const asd = 1;
        }
        newView._UITableViewReusabilityIdentifier = identifier;
        newView._UITableViewRowIndex = rowIndex;
        Object.assign(newView, this._persistedData[rowIndex] || this.defaultRowPersistenceDataItem());
        this._reusableViews[identifier].push(newView);
        return newView;
    }
    // Functions that should be overridden to draw the correct content START
    newReusableViewForIdentifier(identifier, rowIDIndex) {
        const view = new UIButton(this.elementID + "Row" + rowIDIndex);
        view.stopsPointerEventPropagation = NO;
        view.pausesPointerEvents = NO;
        return view;
    }
    heightForRowWithIndex(index) {
        return 50;
    }
    numberOfRows() {
        return 10000;
    }
    defaultRowPersistenceDataItem() {
    }
    persistenceDataItemForRowWithIndex(rowIndex, row) {
    }
    viewForRowWithIndex(rowIndex) {
        const row = this.reusableViewForIdentifier("Row", rowIndex);
        row.titleLabel.text = "Row " + rowIndex;
        return row;
    }
    // Functions that should be overridden to draw the correct content END
    // Functions that trigger redrawing of the content
    didScrollToPosition(offsetPosition) {
        super.didScrollToPosition(offsetPosition);
        this.forEachViewInSubtree(function (view) {
            view._isPointerValid = NO;
        });
        if (!this._isDrawVisibleRowsScheduled) {
            this._isDrawVisibleRowsScheduled = YES;
            UIView.runFunctionBeforeNextFrame(function () {
                this._calculateAllPositions();
                this._drawVisibleRows();
                this.setNeedsLayout();
                this._isDrawVisibleRowsScheduled = NO;
            }.bind(this));
        }
    }
    wasAddedToViewTree() {
        this.loadData();
    }
    setFrame(rectangle, zIndex, performUncheckedLayout) {
        const frame = this.frame;
        super.setFrame(rectangle, zIndex, performUncheckedLayout);
        if (frame.isEqualTo(rectangle) && !performUncheckedLayout) {
            return;
        }
        this._needsDrawingOfVisibleRowsBeforeLayout = YES;
    }
    didReceiveBroadcastEvent(event) {
        super.didReceiveBroadcastEvent(event);
        if (event.name == UIView.broadcastEventName.LanguageChanged && this.reloadsOnLanguageChange) {
            this.reloadData();
        }
    }
    _layoutAllRows(positions = this._rowPositions) {
        const bounds = this.bounds;
        this._visibleRows.forEach(function (row, index, array) {
            const frame = bounds.copy();
            const positionObject = positions[row._UITableViewRowIndex];
            frame.min.y = positionObject.topY;
            frame.max.y = positionObject.bottomY;
            row.frame = frame;
            row.style.width = "" + (bounds.width - this.sidePadding * 2).integerValue + "px";
            row.style.left = "" + this.sidePadding.integerValue + "px";
        }, this);
        this._fullHeightView.frame = bounds.rectangleWithHeight((positions.lastElement ||
            nil).bottomY).rectangleWithWidth(bounds.width * 0.5);
        this._firstLayoutVisibleRows = [];
    }
    _animateLayoutAllRows() {
        UIView.animateViewOrViewsWithDurationDelayAndFunction(this._visibleRows, this.animationDuration, 0, undefined, function () {
            this._layoutAllRows();
        }.bind(this), function () {
            // this._calculateAllPositions()
            // this._layoutAllRows()
        }.bind(this));
    }
    layoutSubviews() {
        const previousPositions = JSON.parse(JSON.stringify(this._rowPositions));
        const previousVisibleRowsLength = this._visibleRows.length;
        if (this._needsDrawingOfVisibleRowsBeforeLayout) {
            //this._calculateAllPositions()
            this._drawVisibleRows();
            this._needsDrawingOfVisibleRowsBeforeLayout = NO;
        }
        super.layoutSubviews();
        if (!this.numberOfRows() || !this.isMemberOfViewTree) {
            return;
        }
        if (this._shouldAnimateNextLayout) {
            // Need to do layout with the previous positions
            this._layoutAllRows(previousPositions);
            if (previousVisibleRowsLength < this._visibleRows.length) {
                UIView.runFunctionBeforeNextFrame(function () {
                    this._animateLayoutAllRows();
                }.bind(this));
            }
            else {
                this._animateLayoutAllRows();
            }
            this._shouldAnimateNextLayout = NO;
        }
        else {
            // if (this._needsDrawingOfVisibleRowsBeforeLayout) {
            //     this._drawVisibleRows();
            //     this._needsDrawingOfVisibleRowsBeforeLayout = NO;
            // }
            this._calculateAllPositions();
            this._layoutAllRows();
        }
    }
    intrinsicContentHeight(constrainingWidth = 0) {
        var result = 10000000000000000000000000;
        if (this._rowPositions.length) {
            result = this._rowPositions[this._rowPositions.length - 1].bottomY;
        }
        return result;
    }
}
///<reference path="UIView.ts"/>
class UIImageView extends UIView {
    constructor(elementID, viewHTMLElement = null) {
        super(elementID, viewHTMLElement, "img");
        this._hiddenWhenEmpty = NO;
        this._class = UIImageView;
        this.superclass = UIView;
        //this.actionIndicator = new UIActionIndicator(elementID + "ActionIndicator");
    }
    get viewHTMLElement() {
        return super.viewHTMLElement;
    }
    static dataURL(url, callback) {
        const xhr = new XMLHttpRequest();
        xhr.open("get", url);
        xhr.responseType = "blob";
        xhr.onload = function () {
            const fr = new FileReader();
            fr.onload = function () {
                callback(this.result);
            };
            fr.readAsDataURL(xhr.response); // async call
        };
        xhr.send();
    }
    static dataURLWithMaxSize(URLString, maxSize, completion) {
        const imageView = new UIImageView();
        imageView.imageSource = URLString;
        imageView.viewHTMLElement.onload = function () {
            const originalSize = imageView.intrinsicContentSize();
            var multiplier = maxSize / Math.max(originalSize.height, originalSize.width);
            multiplier = Math.min(1, multiplier);
            const result = imageView.getDataURL((originalSize.height * multiplier).integerValue, (originalSize.width *
                multiplier).integerValue);
            completion(result);
        };
    }
    static dataURLWithSizes(URLString, height, width, completion) {
        const imageView = new UIImageView();
        imageView.imageSource = URLString;
        imageView.viewHTMLElement.onload = function () {
            const result = imageView.getDataURL(height, width);
            completion(result);
        };
    }
    getDataURL(height, width) {
        const img = this.viewHTMLElement;
        // Create an empty canvas element
        const canvas = document.createElement("canvas");
        canvas.width = width;
        canvas.height = height;
        // Copy the image contents to the canvas
        const ctx = canvas.getContext("2d");
        ctx.drawImage(img, 0, 0, width, height);
        // Get the data-URL formatted image
        // Firefox supports PNG and JPEG. You could check img.src to
        // guess the original format, but be aware the using "image/jpg"
        // will re-encode the image.
        const dataURL = canvas.toDataURL("image/png");
        return dataURL;
        //return dataURL.replace(/^data:image\/(png|jpg);base64,/, "");
    }
    get imageSource() {
        return this.viewHTMLElement.src;
    }
    set imageSource(sourceString) {
        if (IS_NOT(sourceString)) {
            sourceString = "";
        }
        this.viewHTMLElement.src = sourceString;
        if (this.hiddenWhenEmpty) {
            this.hidden = IS_NOT(this.imageSource);
        }
        if (!sourceString || !sourceString.length) {
            //this.actionIndicator.stop();
            this.hidden = YES;
            return;
        }
        else {
            this.hidden = NO;
        }
        // this.superview.addSubview(this.actionIndicator);
        // this.actionIndicator.frame = this.frame;
        // this.actionIndicator.start();
        // this.actionIndicator.backgroundColor = UIColor.redColor
        // @ts-ignore
        this.viewHTMLElement.onload = function (event) {
            this.superview.setNeedsLayout();
            //this.actionIndicator.removeFromSuperview();
        }.bind(this);
    }
    setImageSource(key, defaultString) {
        const languageName = UICore.languageService.currentLanguageKey;
        this.imageSource = UICore.languageService.stringForKey(key, languageName, defaultString, nil);
    }
    didReceiveBroadcastEvent(event) {
        super.didReceiveBroadcastEvent(event);
        if (event.name == UIView.broadcastEventName.LanguageChanged || event.name ==
            UIView.broadcastEventName.AddedToViewTree) {
            this._setImageSourceFromKeyIfPossible();
        }
    }
    willMoveToSuperview(superview) {
        super.willMoveToSuperview(superview);
        this._setImageSourceFromKeyIfPossible();
    }
    _setImageSourceFromKeyIfPossible() {
        if (this._sourceKey && this._defaultSource) {
            this.setImageSource(this._sourceKey, this._defaultSource);
        }
    }
    get fillMode() {
        return this._fillMode;
    }
    set fillMode(fillMode) {
        this._fillMode = fillMode;
        this.style.objectFit = fillMode;
    }
    get hiddenWhenEmpty() {
        return this._hiddenWhenEmpty;
    }
    set hiddenWhenEmpty(hiddenWhenEmpty) {
        this._hiddenWhenEmpty = hiddenWhenEmpty;
        if (hiddenWhenEmpty) {
            this.hidden = IS_NOT(this.imageSource);
        }
    }
    didMoveToSuperview(superview) {
        super.didMoveToSuperview(superview);
    }
    layoutSubviews() {
        super.layoutSubviews();
    }
    intrinsicContentSize() {
        const result = new UIRectangle(0, 0, this.viewHTMLElement.naturalHeight, this.viewHTMLElement.naturalWidth);
        return result;
    }
    intrinsicContentSizeWithConstraints(constrainingHeight = 0, constrainingWidth = 0) {
        const heightRatio = constrainingHeight / this.viewHTMLElement.naturalHeight;
        const widthRatio = constrainingWidth / this.viewHTMLElement.naturalWidth;
        const multiplier = Math.max(heightRatio, widthRatio);
        const result = new UIRectangle(0, 0, this.viewHTMLElement.naturalHeight *
            multiplier, this.viewHTMLElement.naturalWidth * multiplier);
        return result;
    }
}
UIImageView.fillMode = {
    "stretchToFill": "fill",
    "aspectFit": "contain",
    "aspectFill": "cover",
    "center": "none",
    "aspectFitIfLarger": "scale-down"
};
/// <reference path="UITextView.ts" />
// @ts-ignore
class UITextField extends UITextView {
    constructor(elementID, viewHTMLElement = null, type = UITextView.type.textField) {
        super(elementID, type, viewHTMLElement);
        this._class = UITextField;
        this.superclass = UITextView;
        this.viewHTMLElement.setAttribute("type", "text");
        this.backgroundColor = UIColor.whiteColor;
        this.addTargetForControlEvent(UIView.controlEvent.PointerUpInside, function (sender, event) {
            sender.focus();
        });
        this.viewHTMLElement.oninput = (event) => {
            this.sendControlEventForKey(UITextField.controlEvent.TextChange, event);
        };
        this.style.webkitUserSelect = "text";
        this.nativeSelectionEnabled = YES;
        this.pausesPointerEvents = NO;
    }
    get addControlEventTarget() {
        return super.addControlEventTarget;
    }
    get viewHTMLElement() {
        return this._viewHTMLElement;
    }
    set text(text) {
        this.viewHTMLElement.value = text;
    }
    get text() {
        return this.viewHTMLElement.value;
    }
    set placeholderText(text) {
        this.viewHTMLElement.placeholder = text;
    }
    get placeholderText() {
        return this.viewHTMLElement.placeholder;
    }
    setPlaceholderText(key, defaultString) {
        this._placeholderTextKey = key;
        this._defaultPlaceholderText = defaultString;
        const languageName = UICore.languageService.currentLanguageKey;
        this.placeholderText = UICore.languageService.stringForKey(key, languageName, defaultString, nil);
    }
    didReceiveBroadcastEvent(event) {
        super.didReceiveBroadcastEvent(event);
        if (event.name == UIView.broadcastEventName.LanguageChanged || event.name ==
            UIView.broadcastEventName.AddedToViewTree) {
            this._setPlaceholderFromKeyIfPossible();
        }
    }
    willMoveToSuperview(superview) {
        super.willMoveToSuperview(superview);
        this._setPlaceholderFromKeyIfPossible();
    }
    _setPlaceholderFromKeyIfPossible() {
        if (this._placeholderTextKey && this._defaultPlaceholderText) {
            this.setPlaceholderText(this._placeholderTextKey, this._defaultPlaceholderText);
        }
    }
    get isSecure() {
        const result = (this.viewHTMLElement.type == "password");
        return result;
    }
    set isSecure(secure) {
        var type = "text";
        if (secure) {
            type = "password";
        }
        this.viewHTMLElement.type = type;
    }
}
UITextField.controlEvent = Object.assign({}, UIView.controlEvent, {
    "TextChange": "TextChange"
});
///<reference path="../UICore/UIButton.ts"/>
class SearchableDropdownRow extends UIButton {
    constructor(elementID) {
        super(elementID);
        this.type = SearchableDropdownRow.type.selectableItem;
        this._class = SearchableDropdownRow;
        this.superclass = UIButton;
    }
    initView(elementID, viewHTMLElement, initViewData) {
        super.initView(elementID, viewHTMLElement, initViewData);
        this._checkbox = new CBCheckbox(elementID + "Checkbox");
        this._checkbox.userInteractionEnabled = NO;
        this.addSubview(this._checkbox);
        this.style.outline = "none";
    }
    set titleText(titleText) {
        this.titleLabel.text = titleText;
        this._checkbox.titleLabel.text = titleText;
    }
    get titleText() {
        return this.titleLabel.text;
    }
    set selected(selected) {
        super.selected = selected;
        this._checkbox.selected = selected;
    }
    get selected() {
        return super.selected;
    }
    set focused(focused) {
        this._focused = focused;
        this.updateContentForCurrentState();
    }
    get focused() {
        return this._focused;
    }
    updateContentForNormalState() {
        if (this.type == SearchableDropdownRow.type.sectionTitle) {
            this.backgroundColor = UIColor.transparentColor;
            this.titleLabel.textColor = CBColor.primaryContentColor.colorWithAlpha(0.5);
            this.style.borderTop = "1px solid rgba(0, 0, 0, 0.3)";
            this.titleLabel.style.marginLeft = "";
            this.textSuffix = "";
            if (this._checkbox) {
                this._checkbox.hidden = YES;
            }
            this.titleLabel.hidden = NO;
        }
        else if (this.type == SearchableDropdownRow.type.selectedItem) {
            this.backgroundColor = UIColor.transparentColor;
            this.titleLabel.textColor = CBColor.primaryTintColor;
            this.style.borderTop = "";
            //this.titleLabel.style.marginLeft = "20px"
            this.textSuffix = "";
            if (this._checkbox) {
                this._checkbox.hidden = NO;
                this._checkbox.titleLabel.textColor = CBColor.primaryContentColor;
            }
            this.titleLabel.hidden = YES;
        }
        else if (this.type == SearchableDropdownRow.type.customItem) {
            this.backgroundColor = UIColor.transparentColor;
            this.titleLabel.textColor = CBColor.primaryTintColor;
            this.style.borderTop = "1px solid rgba(0, 0, 0, 0.3)";
            this.titleLabel.style.marginLeft = "";
            this.textSuffix = LanguageService.stringForKey("searchableDropdownCustomItem", LanguageService.currentLanguageKey, "-Custom item");
            if (this._checkbox) {
                this._checkbox.hidden = YES;
            }
            this.titleLabel.hidden = NO;
        }
        else {
            this.backgroundColor = UIColor.transparentColor;
            this.titleLabel.textColor = CBColor.primaryTintColor;
            this.style.borderTop = "";
            this.titleLabel.style.marginLeft = "20px";
            this.textSuffix = "";
            if (this._checkbox) {
                this._checkbox.hidden = YES;
            }
            this.titleLabel.hidden = NO;
        }
        this.userInteractionEnabled = YES;
    }
    get textSuffix() {
        const result = this.titleLabel.textSuffix;
        return result;
    }
    set textSuffix(textSuffix) {
        this.titleLabel.textSuffix = textSuffix;
        this._checkbox.titleLabel.textSuffix = textSuffix;
    }
    updateContentForHoveredState() {
        this.backgroundColor = CBColor.primaryContentColor.colorWithAlpha(0.05);
    }
    updateContentForHighlightedState() {
        this.backgroundColor = CBColor.primaryContentColor.colorWithAlpha(0.08);
    }
    updateContentForFocusedState() {
        this.backgroundColor = CBColor.primaryContentColor.colorWithAlpha(0.08);
    }
    updateContentForSelectedState() {
        this.updateContentForNormalState();
        if (this.type == SearchableDropdownRow.type.selectableItem || this.type ==
            SearchableDropdownRow.type.customItem) {
            this._checkbox.hidden = NO;
            //this._checkbox.titleLabel.hidden = YES;
            this._checkbox.titleLabel.textColor = CBColor.primaryTintColor;
            this._titleLabel.hidden = YES;
        }
    }
    wasRemovedFromViewTree() {
        super.wasRemovedFromViewTree();
        this.highlighted = NO;
        this.hovered = NO;
    }
    layoutSubviews() {
        super.layoutSubviews();
        if (this._checkbox) {
            this._checkbox.style.top = "25%";
            this._checkbox.style.height = "30px";
            this._checkbox.style.left = "" + this.contentPadding + "px";
            this._checkbox.style.right = "" + this.contentPadding + "px";
        }
    }
}
SearchableDropdownRow.type = {
    "sectionTitle": "SectionTitle",
    "selectedItem": "SelectedItem",
    "selectableItem": "SelectableItem",
    "customItem": "CustomItem"
};
/// <reference path="../UICore/UIButton.ts" />
/// <reference path="../UICore/UIKeyValueStringFilter.ts" />
/// <reference path="../UICore/UITableView.ts" />
/// <reference path="../UICore/UIImageView.ts" />
/// <reference path="../UICore/UITextView.ts" />
/// <reference path="../UICore/UITextField.ts" />
/// <reference path="../UICore/UIDialogView.ts" />
/// <reference path="./SearchTextField.ts" />
/// <reference path="./CBCheckbox.ts" />
/// <reference path="./CBColor.ts" />
/// <reference path="./SearchableDropdownRow.ts" />
/// <reference path="../RootViewController.ts" />
/// <reference path="./LanguageService.ts" />
class SearchableDropdown extends UIButton {
    constructor(elementID) {
        super(elementID);
        this._data = [];
        this._filteredData = [];
        this._excludedData = [];
        this.tintColor = CBColor.primaryTintColor;
        this.selectedIndices = [];
        this._selectedData = [];
        this._drawingData = [];
        this._isDrawingDataValid = NO;
        this.isSingleSelection = NO;
        this.showsSelectedSectionInMultipleSelectionMode = NO;
        this.allowsCustomItem = NO;
        this.keepFocusedRowVisible = YES;
        this._class = SearchableDropdown;
        this.superclass = UIButton;
    }
    initView(elementID, viewHTMLElement, initViewData) {
        super.initView(elementID, viewHTMLElement, initViewData);
        //this.style.borderRadius = "2px";
        this._titleLabel.text = "Current value";
        this._titleLabel.textAlignment = UITextView.textAlignment.left;
        this.overflowLabel = new UITextView(elementID + "OverflowLabel");
        this.overflowLabel.textColor = CBColor.primaryContentColor;
        this.overflowLabel.textAlignment = UITextView.textAlignment.right;
        this.addSubview(this.overflowLabel);
        this._rightImageView = new UIImageView(this.elementID + "RightImageView");
        this._rightImageView.imageSource = "images/baseline-arrow_drop_down-24px.svg";
        this._rightImageView.userInteractionEnabled = NO;
        this.addSubview(this._rightImageView);
        this.setNeedsLayout();
        this._containerView = new UIView(elementID + "ContainerView");
        this._containerView.style.boxShadow = "0 9px 13px 0 rgba(0,0,0,0.26)";
        this._containerView.style.borderRadius = "2px";
        this._searchTextField = new SearchTextField(elementID + "SearchTextField");
        this._searchTextField.placeholderText = "Search";
        this._containerView.addSubview(this._searchTextField);
        this._searchTextField._textField.addTargetForControlEvent(UITextField.controlEvent.TextChange, function (sender, event) {
            this.updateFilteredData(this._searchTextField.text);
        }.bind(this));
        this._searchTextField._textField.addTargetForControlEvent(UIView.controlEvent.EscDown, function (sender, event) {
            if (IS(this._searchTextField.text)) {
                this._searchTextField.text = "";
                this.updateFilteredData("");
            }
            else {
                this._dialogView.dismiss(YES);
            }
        }.bind(this));
        this._searchTextField._textField.addTargetForControlEvent(UIView.controlEvent.DownArrowDown, function (sender, event) {
            if (this.focusedRowIndex < (this.drawingData.length - 1)) {
                this.focusedRowIndex = this.focusedRowIndex + 1;
            }
        }.bind(this));
        this._searchTextField._textField.addTargetForControlEvent(UIView.controlEvent.UpArrowDown, function (sender, event) {
            if (this.focusedRowIndex > 0) {
                this.focusedRowIndex = this.focusedRowIndex - 1;
            }
        }.bind(this));
        this._searchTextField._textField.addTargetForControlEvent(UIView.controlEvent.EnterDown, function (sender, event) {
            const isTouchDevice = "ontouchstart" in document.documentElement;
            if (isTouchDevice) {
                this._searchTextField.blur();
                return;
            }
            const datapoint = this.drawingData[this.focusedRowIndex];
            const alreadySelected = this.selectedDataContains(datapoint);
            if (alreadySelected) {
                this.selectedData.removeElement(datapoint);
            }
            else if (this.isSingleSelection) {
                this.selectedIndices = [this.focusedRowIndex];
                this.selectedData = [datapoint];
                // view.selected = YES;
                this.selectionDidChange(this.selectedData);
                this.updateContentForCurrentSelection();
                this._dialogView.dismiss();
            }
            else {
                this.selectedData.push(datapoint);
            }
        }.bind(this));
        this._tableView = new UITableView(elementID + "TableView");
        this._containerView.addSubview(this._tableView);
        this._tableView.backgroundColor = UIColor.whiteColor;
        this._dialogView = new UIDialogView(elementID + "DialogView");
        this._dialogView.view = this._containerView;
        this._dialogView.backgroundColor = UIColor.transparentColor;
        this.addTargetForControlEvents([
            UIView.controlEvent.PointerUpInside, UIView.controlEvent.EnterDown
        ], function (sender, event) {
            if (this._dialogView.isVisible) {
                this.closeDropdown();
            }
            else {
                this.openDropdown();
            }
        }.bind(this));
        this._dialogView.addTargetForControlEvent(UIView.controlEvent.PointerDown, function (sender, event) {
            if (sender.viewHTMLElement == event.target) {
                sender.dismiss();
            }
        });
        const dialogLayoutFunction = this._dialogView.layoutSubviews;
        this._dialogView.layoutSubviews = function () {
            //dialogLayoutFunction.call(this._dialogView);
            this._dialogView.frame = this.rootView.bounds; //this.superview.rectangleInView(this.superview.bounds, this.rootView);
            const padding = RootViewController.paddingLength;
            const labelHeight = padding;
            const searchTextFieldHeight = this.bounds.height;
            this._containerView.frame = this.superview.rectangleInView(this.frame, this.rootView)
                .rectangleWithHeight(this.expandedContainerViewHeight);
            this._searchTextField.frame = this._containerView.bounds.rectangleWithHeight(searchTextFieldHeight).rectangleWithInsets(0, 16, 0, 0);
            this._tableView.frame = this._containerView.bounds.rectangleWithInsets(0, 0, 0, searchTextFieldHeight);
            //this._tableView.style.maxHeight = "" + this._tableView.intrinsicContentHeight() + "px";
        }.bind(this);
        // var animateDialogAppearing = this._dialogView.animateAppearing;
        // this._dialogView.animateAppearing = function (this: SearchableDropdown) {
        //     animateDialogAppearing.call(this._dialogView);
        //     this.style.zIndex = "101";
        //     if (this.highlightLabel) {
        //         this.highlightLabel.textColor = UIColor.whiteColor;
        //         this.highlightLabel.style.zIndex = "101";
        //         this.highlightLabel.userInteractionEnabled = NO;
        //     }
        //     this._searchTextField.focus();
        // }.bind(this)
        // var animateDialogDisappearing = this._dialogView.animateDisappearing;
        // this._dialogView.animateDisappearing = function (this: SearchableDropdown) {
        //     animateDialogDisappearing.call(this._dialogView);
        //     this.style.zIndex = "0";
        //     if (this.highlightLabel) {
        //         this.highlightLabel.textColor = CBColor.primaryContentColor;
        //         this.highlightLabel.style.zIndex = "0";
        //         this.highlightLabel.userInteractionEnabled = YES;
        //     }
        //     this._searchTextField.blur();
        // }.bind(this)
        this._tableView.numberOfRows = function () {
            var result = this.drawingData.length;
            if (IS_NOT(this.isSingleSelection) && this.showsSelectedSectionInMultipleSelectionMode) {
                result = result + this.selectedData.length;
            }
            return result;
        }.bind(this);
        const newReusableViewForIdentifierFunction = this._tableView.newReusableViewForIdentifier.bind(this._tableView);
        this._tableView.newReusableViewForIdentifier = function (identifier, rowIndex) {
            //if (identifier == "SelectedItemRow") {
            const view = new SearchableDropdownRow(elementID + identifier + rowIndex);
            view.stopsPointerEventPropagation = NO;
            view.pausesPointerEvents = NO;
            return view;
            // }
            // return newReusableViewForIdentifierFunction(identifier, rowIndex);
        }.bind(this);
        const viewForSelectedItemRow = function (index) {
            const view = this._tableView.reusableViewForIdentifier("SelectedItemRow", index);
            view.titleLabel.text = LanguageService.stringForCurrentLanguage(this.selectedData[index].title);
            view.selected = YES;
            return view;
        }.bind(this);
        this._tableView.viewForRowWithIndex = function (index) {
            const view = this._tableView.reusableViewForIdentifier("SubjectView", index);
            view.style.borderBottomColor = "";
            view.style.borderBottomStyle = "";
            view.style.borderBottomWidth = "";
            const rowWasHovered = function (sender, event) {
                this.focusedRowIndex = index;
            }.bind(this);
            view.addTargetForControlEvent(UIButton.controlEvent.PointerHover, rowWasHovered);
            view.removeTargetForControlEvent(UIButton.controlEvent.PointerHover, view._SearchableDropdownRowWasHoveredFunction);
            view._SearchableDropdownRowWasHoveredFunction = rowWasHovered;
            view.focused = (this.focusedRowIndex == index);
            if (!this.isSingleSelection && this.showsSelectedSectionInMultipleSelectionMode) {
                if (index < this.selectedData.length) {
                    view.type = SearchableDropdownRow.type.selectedItem;
                    view.titleText = LanguageService.stringForCurrentLanguage(this.selectedData[index].title);
                    view.selected = YES;
                    view.updateContentForCurrentState();
                    if (index == this.selectedData.length - 1) {
                        view.style.borderBottomColor = UIColor.colorWithRGBA(100, 100, 100).stringValue;
                        view.style.borderBottomStyle = "solid";
                        view.style.borderBottomWidth = "1px";
                    }
                    var viewWasTapped = function (sender, event) {
                        this.selectedIndices.removeElementAtIndex(index);
                        const selectedItem = this.selectedData[index];
                        this.selectedData.removeElement(selectedItem);
                        view.selected = NO;
                        this.selectionDidChange(this.selectedData);
                        //this.performFunctionWithDelay(0.15, function (this: SearchableDropdown<T>) {
                        this.updateContentForCurrentSelection();
                        //}.bind(this))
                        // // Unselecting main body item if possible
                        // var visibleRows = this._tableView._visibleRows as SearchableDropdownRow[]
                        // var visibleIndices = this._tableView.indexesForVisibleRows()
                        // visibleRows.forEach(function (this: SearchableDropdown<T>, visibleRow: SearchableDropdownRow, visibleRowIndex: number, visibleRowsArray: SearchableDropdownRow[]) {
                        //     var rowDataIndex = visibleIndices[visibleRowIndex]
                        //     visibleRow.selected = this.selectedData.contains(this.drawingData[rowDataIndex])
                        // }.bind(this))
                        this._searchTextField.focus();
                        if (view.viewWasTappedFunction) {
                            view.removeTargetForControlEvents([
                                UIView.controlEvent.EnterDown, UIView.controlEvent.PointerTap
                            ], view.viewWasTappedFunction);
                        }
                    }.bind(this);
                    // Removing previous event target if possible
                    if (view.viewWasTappedFunction) {
                        view.removeTargetForControlEvents([
                            UIView.controlEvent.EnterDown, UIView.controlEvent.PointerTap
                        ], view.viewWasTappedFunction);
                    }
                    // Adding event target
                    view.addTargetForControlEvents([
                        UIView.controlEvent.EnterDown, UIView.controlEvent.PointerTap
                    ], viewWasTapped);
                    view.viewWasTappedFunction = viewWasTapped;
                    return view;
                }
                index = index - this.selectedData.length;
            }
            // Datapoint
            const datapoint = this.drawingData[index];
            if (IS_NOT(datapoint)) {
                return;
            }
            // Setting different style for section title rows
            if (datapoint.isADropdownDataSection) {
                view.type = SearchableDropdownRow.type.sectionTitle;
                view.userInteractionEnabled = NO;
            }
            else {
                view.type = SearchableDropdownRow.type.selectableItem;
                view.userInteractionEnabled = YES;
            }
            if (datapoint._id == (this._customItem || nil)._id) {
                view.type = SearchableDropdownRow.type.customItem;
            }
            view.updateContentForNormalState();
            view.updateContentForCurrentState();
            // Setting row title
            view.titleText = LanguageService.stringForCurrentLanguage(datapoint.title);
            view.titleLabel.textAlignment = UITextView.textAlignment.left;
            // Highlighting of row
            //view.highlighted = (this.highlightedRowIndex == index);
            // Selecting of rows
            view.selected = this.selectedRowIdentifiers.contains(datapoint._id); //this.selectedIndices.contains(index); //this.selectedDataContains(datapoint);
            var viewWasTapped = function (sender, event) {
                if (view.selected) {
                    this.selectedIndices.removeElement(index);
                    this.selectedData.removeElement(datapoint);
                }
                else {
                    if (this.isSingleSelection) {
                        this.selectedIndices = [index];
                        this.selectedData = [datapoint];
                        // view.selected = YES;
                        this.selectionDidChange(this.selectedData);
                        this.updateContentForCurrentSelection();
                        this._dialogView.dismiss();
                        return;
                    }
                    else {
                        this.selectedIndices.push(index);
                        this.selectedData.push(datapoint);
                    }
                }
                //view.selected = !view.selected;
                const selectedData = this.selectedData;
                if (!view.selected) {
                    view.selected = YES;
                    this.performFunctionWithDelay(0.25, function () {
                        this.selectionDidChange(selectedData);
                        this.updateContentForCurrentSelection();
                        if (this.showsSelectedSectionInMultipleSelectionMode) {
                            this._tableView.contentOffset = this._tableView.contentOffset.pointByAddingY(view.frame.height);
                        }
                    }.bind(this));
                }
                else {
                    view._checkbox.selected = NO;
                    this.selectionDidChange(selectedData);
                    this.performFunctionWithDelay(0.15, function () {
                        view.selected = NO;
                        this.updateContentForCurrentSelection();
                        if (this.showsSelectedSectionInMultipleSelectionMode) {
                            this._tableView.contentOffset = this._tableView.contentOffset.pointByAddingY(-view.frame.height);
                        }
                    }.bind(this));
                }
                this._searchTextField.focus();
            }.bind(this);
            // Removing previous event target if possible
            if (view.viewWasTappedFunction) {
                view.removeTargetForControlEvents([
                    UIView.controlEvent.EnterDown, UIView.controlEvent.PointerUpInside
                ], view.viewWasTappedFunction);
            }
            // Adding event target
            view.addTargetForControlEvents([
                UIView.controlEvent.EnterDown, UIView.controlEvent.PointerUpInside
            ], viewWasTapped);
            view.viewWasTappedFunction = viewWasTapped;
            return view;
        }.bind(this);
        this._keyValueStringFilter = new UIKeyValueStringFilter();
    }
    openDropdown() {
        this._dialogView.showInView(this.rootView, YES);
        this._searchTextField.focus();
    }
    closeDropdown() {
        this._dialogView.dismiss(YES);
    }
    boundsDidChange() {
        super.boundsDidChange();
        this.setNeedsLayout();
    }
    get focusedRowIndex() {
        return this._focusedRowIndex;
    }
    set focusedRowIndex(focusedRowIndex) {
        const previousFocusedRowIndex = this.focusedRowIndex;
        this._focusedRowIndex = focusedRowIndex;
        if (previousFocusedRowIndex != focusedRowIndex) {
            this._tableView.visibleRowWithIndex(previousFocusedRowIndex).focused = NO;
            const focusedRow = this._tableView.visibleRowWithIndex(this.focusedRowIndex);
            focusedRow.focused = YES;
            if (!this.keepFocusedRowVisible) {
                return;
            }
            var contentOffset = this._tableView.contentOffset;
            if (focusedRow.frame.y < contentOffset.y) {
                contentOffset.y = focusedRow.frame.y;
            }
            if (focusedRow.frame.max.y > (contentOffset.y + this._tableView.bounds.height)) {
                contentOffset = contentOffset.pointByAddingY(-(contentOffset.y + this._tableView.bounds.height -
                    focusedRow.frame.max.y));
            }
            const animationDuration = this._tableView.animationDuration;
            this._tableView.animationDuration = 0;
            this._tableView.contentOffset = contentOffset;
            this._tableView.animationDuration = animationDuration;
        }
    }
    set expandedContainerViewHeight(expandedContainerViewHeight) {
        this._expandedContainerViewHeight = expandedContainerViewHeight;
        this._dialogView.setNeedsLayout();
    }
    get expandedContainerViewHeight() {
        if (IS(this._expandedContainerViewHeight)) {
            return this._expandedContainerViewHeight;
        }
        const padding = RootViewController.paddingLength;
        const labelHeight = padding;
        const result = this.superview.bounds.height - this.frame.max.y - padding;
        return result;
    }
    selectedDataContains(datapoint) {
        for (var i = 0; i < this.selectedData.length; i++) {
            const value = this.selectedData[i];
            if (value._id == datapoint._id) {
                return YES;
            }
        }
        return NO;
    }
    updateContentForNormalState() {
        this.style.borderBottom = "1px solid rgba(0,0,0,0.12)";
        this.titleLabel.textColor = CBColor.primaryContentColor;
        this.backgroundColor = UIColor.transparentColor;
        this.style.borderBottomColor = CBColor.primaryContentColor.colorWithAlpha(0.12).stringValue;
    }
    updateContentForHighlightedState() {
        this.style.borderBottomWidth = "2px";
        this.style.borderBottomColor = this.tintColor.stringValue;
    }
    selectionDidChange(selectedRows) {
        // Update title to indicate the selection
        this.updateTitleWithSelection(selectedRows);
        this.sendControlEventForKey(SearchableDropdown.controlEvent.SelectionDidChange, nil);
    }
    updateContentForCurrentSelection() {
        // Update selected rows in the top of the table view
        this._tableView.reloadData();
        this.setNeedsLayout();
    }
    get placeholderText() {
        if (IS_UNDEFINED(this._placeholderText)) {
            this._placeholderText = "Not selected";
        }
        return this._placeholderText;
    }
    set placeholderText(placeholderText) {
        this._placeholderText = placeholderText;
        this.updateTitleWithSelection(this.selectedData);
    }
    setPlaceholderText(key, defaultString, parameters) {
        this.placeholderLocalizedTextObject = LanguageService.localizedTextObjectForKey(key, defaultString, parameters);
        //this.titleLabel.setText(key, defaultString, parameters);
    }
    get placeholderLocalizedTextObject() {
        if (IS_UNDEFINED(this._placeholderLocalizedTextObject)) {
            this._placeholderLocalizedTextObject = LanguageService.localizedTextObjectForText("Not selected");
        }
        return this._placeholderLocalizedTextObject;
    }
    set placeholderLocalizedTextObject(placeholderText) {
        this._placeholderLocalizedTextObject = placeholderText;
        this.updateTitleWithSelection(this.selectedData);
    }
    updateTitleWithSelection(selectedRows) {
        this.titleLabel.localizedTextObject = this.placeholderLocalizedTextObject;
        if (selectedRows && selectedRows.length) {
            const maxWidth = this.titleLabel.bounds.width;
            this.titleLabel.localizedTextObject = nil;
            this.titleLabel.text = "";
            var stopLooping = NO;
            selectedRows.forEach(function (selectedDatapoint, index, array) {
                if (stopLooping) {
                    return;
                }
                var selectedString = LanguageService.stringForCurrentLanguage(selectedDatapoint.title);
                if (index) {
                    selectedString = ", " + selectedString;
                }
                const previousText = this.titleLabel.text;
                this.titleLabel.text = this.titleLabel.text + selectedString;
                this.overflowLabel.text = "+" + (array.length - index - 1);
                if (index == array.length - 1) {
                    this.overflowLabel.text = "";
                }
                if (index && (this.bounds.width -
                    (this.overflowLabel.intrinsicContentWidth() + this.titleLabel.intrinsicContentWidth()) - 20) < 0) {
                    this.titleLabel.text = previousText;
                    this.overflowLabel.text = "+" + (array.length - index - 2 * 0);
                    stopLooping = YES;
                }
            }, this);
        }
    }
    updateFilteredData(filteringString) {
        this._filteredData = [];
        this.data.forEach(function (sectionOrRow, index, array) {
            if (LanguageService.stringForCurrentLanguage(sectionOrRow.title).toLowerCase().contains(filteringString.toLowerCase())) {
                this.filteredData.push(sectionOrRow);
            }
            else if (sectionOrRow.isADropdownDataSection) {
                this._keyValueStringFilter.filterData(filteringString, sectionOrRow.rowsData, this._excludedData, "title." + LanguageService.currentLanguageKey, sectionOrRow, function (filteredData, filteredIndexes, sectionFromThread) {
                    if (filteredData.length) {
                        this.filteredData.push({
                            _id: sectionFromThread._id,
                            title: sectionFromThread.title,
                            rowsData: filteredData,
                            isADropdownDataSection: sectionFromThread.isADropdownDataSection,
                            isADropdownDataRow: sectionFromThread.isADropdownDataRow,
                            attachedObject: sectionFromThread.attachedObject,
                            itemCode: sectionFromThread.itemCode,
                            dropdownCode: sectionFromThread.dropdownCode
                        });
                        if (this.allowsCustomItem && this._searchTextField.text && this._customItem) {
                            this.filteredData.removeElement(this._customItem);
                            this.filteredData.push(this._customItem);
                        }
                        this._isDrawingDataValid = NO;
                        this._tableView.reloadData();
                    }
                }.bind(this));
            }
        }.bind(this));
        if (this.allowsCustomItem && this._searchTextField.text) {
            this.filteredData.removeElement(this._customItem);
            this.initCustomItemWithTitle(this._searchTextField.text);
            this.filteredData.push(this._customItem);
        }
        if (this.filteredData.length) {
            this.focusedRowIndex = 0;
        }
        else {
            this.focusedRowIndex = null;
        }
        this._isDrawingDataValid = NO;
        this._tableView.reloadData();
    }
    initCustomItemWithTitle(title) {
        if (IS_NOT(title)) {
            this._customItem = undefined;
        }
        else {
            this._customItem = {
                _id: "" + MAKE_ID(),
                title: LanguageService.localizedTextObjectForText(title),
                rowsData: [],
                isADropdownDataSection: NO,
                isADropdownDataRow: YES,
                attachedObject: undefined,
                itemCode: "custom_item",
                dropdownCode: null
            };
        }
    }
    selectItemOrCustomItemWithTitle(title) {
        if (IS_NOT(title)) {
            this._customItem = undefined;
        }
        else {
            var item = this.drawingData.find(function (dataItem, index, array) {
                return (LanguageService.stringForCurrentLanguage(dataItem.title) == title);
            });
            if (this.allowsCustomItem && IS_NOT(item)) {
                this._searchTextField.text = title;
                this.updateFilteredData(title);
                item = this._customItem;
            }
            if (IS_NOT(this.isSingleSelection)) {
                if (IS_NOT(this.selectedDataContains(item))) {
                    const selectedItemCodes = this.selectedItemCodes.copy();
                    selectedItemCodes.push(item.itemCode);
                    this.selectedItemCodes = selectedItemCodes;
                }
                return;
            }
            this.selectedItemCodes = [item.itemCode];
        }
    }
    set data(data) {
        this._data = data;
        this.updateFilteredData(this._searchTextField.text);
    }
    get data() {
        return this._data;
    }
    set filteredData(data) {
        this._filteredData = data;
        this._isDrawingDataValid = NO;
    }
    get filteredData() {
        return this._filteredData;
    }
    get drawingData() {
        if (this._isDrawingDataValid) {
            return this._drawingData;
        }
        const result = [];
        this._filteredData.forEach(function (section) {
            result.push({
                _id: section._id,
                title: section.title,
                // @ts-ignore
                rowsData: null,
                isADropdownDataSection: section.isADropdownDataSection,
                isADropdownDataRow: NO,
                attachedObject: section.attachedObject,
                itemCode: section.itemCode,
                dropdownCode: section.dropdownCode
            });
            if (section.rowsData) {
                section.rowsData.forEach(function (row) {
                    result.push(row);
                }.bind(this));
            }
        }.bind(this));
        this._drawingData = result;
        this._isDrawingDataValid = YES;
        return result;
    }
    get selectedData() {
        return this._selectedData;
    }
    set selectedData(selectedData) {
        this._selectedData = selectedData;
    }
    clearSelection() {
        this.selectedData = [];
        this.selectedIndices = [];
        this.updateTitleWithSelection(this.selectedData);
        this.updateContentForCurrentSelection();
        this.selectionDidChange(this.selectedData);
    }
    get selectedItemCodes() {
        return this.selectedData.map(function (item) {
            return item.itemCode;
        });
    }
    set selectedItemCodes(selectedItemCodes) {
        const selectedData = [];
        const selectedIndices = [];
        this._drawingData.forEach(function (item, index, array) {
            if (selectedItemCodes.contains(item.itemCode)) {
                selectedData.push(item);
                selectedIndices.push(index);
            }
        });
        this.selectedData = selectedData;
        this.selectedIndices = selectedIndices;
        this.updateTitleWithSelection(this.selectedData);
        this.updateContentForCurrentSelection();
        this.selectionDidChange(this.selectedData);
    }
    get selectedRowIdentifiers() {
        const result = [];
        this.selectedData.forEach(function (selectedDatapoint) {
            result.push(selectedDatapoint._id);
        }.bind(this));
        return result;
    }
    wasAddedToViewTree() {
        super.wasAddedToViewTree();
        this.setNeedsLayout();
    }
    layoutSubviews() {
        super.layoutSubviews();
        const bounds = this.bounds;
        const padding = RootViewController.paddingLength;
        const labelHeight = padding;
        this.updateTitleWithSelection(this.selectedData);
        if (this._rightImageView) {
            // var imageHeight = bounds.height - padding;
            // this._rightImageView.frame = new UIRectangle(bounds.width - imageHeight - padding * 0.5, padding * 0.5, imageHeight, imageHeight);
            this._rightImageView.frame = bounds.rectangleWithInsets(0, padding *
                0.5, 0, 0).rectangleWithWidth(24, 1).rectangleWithHeight(24, 0.5);
        }
        if (this.overflowLabel) {
            //this.overflowLabel.frame = bounds.rectangleWithInsets(padding, padding, 0, 0).rectangleWithInsets(0, this._rightImageView.bounds.width || 0, 0, 0).rectangleWithWidth(36, 1);
            //this.titleLabel.style.maxWidth = "" + (bounds.width - (bounds.width - this.titleLabel.viewHTMLElement.offsetLeft - (this.overflowLabel.frame.x || 0)))
            this.overflowLabel.style.width = "36px";
            this.overflowLabel.style.right = "32px";
            this.overflowLabel.centerYInContainer();
            this.titleLabel.style.marginRight = "60px";
            //this.overflowLabel.centerYInContainer();
            //this.titleLabel.frame = this.titleLabel.frame.rectangleWithWidth(bounds.width - (bounds.width - this.titleLabel.frame.x - (this.overflowLabel.frame.x || 0)))
        }
    }
}
SearchableDropdown.controlEvent = Object.assign({}, UIView.controlEvent, {
    "SelectionDidChange": "SelectionDidChange"
});
///<reference path="UIView.ts"/>
class UIActionIndicator extends UIView {
    constructor(elementID) {
        super(elementID);
        this._size = 50;
        this._class = UIActionIndicator;
        this.superclass = UIView;
        this.indicatorView = new UIView(this.elementID + "IndicatorView");
        this.addSubview(this.indicatorView);
        this.indicatorView.viewHTMLElement.classList.add("LukeHaasLoader");
        this.hidden = YES;
    }
    set size(size) {
        this._size = size;
        this.setNeedsLayoutUpToRootView();
    }
    get size() {
        return this._size;
    }
    set hidden(hidden) {
        super.hidden = hidden;
        if (hidden) {
            this.indicatorView.removeFromSuperview();
        }
        else {
            this.addSubview(this.indicatorView);
        }
    }
    start() {
        this.hidden = NO;
    }
    stop() {
        this.hidden = YES;
    }
    layoutSubviews() {
        super.layoutSubviews();
        const bounds = this.bounds;
        //this.indicatorView.centerInContainer();
        this.indicatorView.style.height = "" + this._size.integerValue + "px";
        this.indicatorView.style.width = "" + this._size.integerValue + "px";
        const minSize = Math.min(this.bounds.height, this.bounds.width);
        this.indicatorView.style.maxHeight = "" + minSize.integerValue + "px";
        this.indicatorView.style.maxWidth = "" + minSize.integerValue + "px";
        const size = Math.min(this._size, minSize);
        this.indicatorView.style.left = "" + ((bounds.width - size) * 0.5 - 11).integerValue + "px";
        this.indicatorView.style.top = "" + ((bounds.height - size) * 0.5 - 11).integerValue + "px";
    }
}
///<reference path="UIView.ts"/>
class UIDateTimeInput extends UIView {
    constructor(elementID, type = UIDateTimeInput.type.DateTime) {
        super(elementID, nil, "input");
        this._class = UIDateTimeInput;
        this.superclass = UIView;
        this.viewHTMLElement.setAttribute("type", type);
        this.viewHTMLElement.onchange = (event) => {
            this.sendControlEventForKey(UIDateTimeInput.controlEvent.ValueChange, event);
        };
    }
    get addControlEventTarget() {
        return super.addControlEventTarget;
    }
    get date() {
        const result = new Date(this.viewHTMLElement.value);
        return result;
    }
}
UIDateTimeInput.controlEvent = Object.assign({}, UIView.controlEvent, {
    "ValueChange": "ValueChange"
});
UIDateTimeInput.type = {
    "Date": "date",
    "Time": "time",
    "DateTime": "datetime"
};
UIDateTimeInput.format = {
    "European": "DD-MM-YYYY",
    "ISOComputer": "YYYY-MM-DD",
    "American": "MM/DD/YYYY"
};
///<reference path="UIObject.ts"/>
class UIKeyValueStringSorter extends UIObject {
    constructor(useSeparateWebWorker = NO) {
        super();
        this._isThreadClosed = NO;
        this._webWorker = UIKeyValueStringSorter._sharedWebWorker;
        this._class = UIKeyValueStringSorter;
        this.superclass = UIObject;
        if (useSeparateWebWorker) {
            this._webWorker = new Worker("compiledScripts/UIKeyValueStringSorterWebWorker.js");
        }
        UIKeyValueStringSorter._instanceNumber = UIKeyValueStringSorter._instanceNumber + 1;
        this._instanceNumber = UIKeyValueStringSorter._instanceNumber;
    }
    get instanceIdentifier() {
        return this._instanceNumber;
    }
    sortData(data, sortingInstructions, identifier, completion) {
        if (this._isThreadClosed) {
            return;
        }
        const startTime = Date.now();
        const instanceIdentifier = this.instanceIdentifier;
        this._webWorker.onmessage = function (message) {
            if (message.data.instanceIdentifier == instanceIdentifier) {
                console.log("Sorting " + data.length + " items took " + (Date.now() - startTime) + " ms.");
                completion(message.data.sortedData, message.data.sortedIndexes, message.data.identifier);
            }
        };
        try {
            this._webWorker.postMessage({
                "data": data,
                "sortingInstructions": sortingInstructions,
                "identifier": identifier,
                "instanceIdentifier": instanceIdentifier
            });
        }
        catch (exception) {
            completion([], [], identifier);
        }
    }
    sortedData(data, sortingInstructions, identifier = MAKE_ID()) {
        const result = new Promise((resolve, reject) => {
            this.sortData(data, sortingInstructions, identifier, (sortedData, sortedIndexes, sortedIdentifier) => {
                if (sortedIdentifier == identifier) {
                    resolve({
                        sortedData: sortedData,
                        sortedIndexes: sortedIndexes,
                        identifier: sortedIdentifier
                    });
                }
            });
        });
        return result;
    }
    closeThread() {
        this._isThreadClosed = YES;
        if (this._webWorker != UIKeyValueStringSorter._sharedWebWorker) {
            this._webWorker.terminate();
        }
    }
}
UIKeyValueStringSorter._sharedWebWorker = new Worker("compiledScripts/UIKeyValueStringSorterWebWorker.js");
UIKeyValueStringSorter._instanceNumber = -1;
UIKeyValueStringSorter.dataType = {
    "string": "string"
};
UIKeyValueStringSorter.direction = {
    "descending": "descending",
    "ascending": "ascending"
};
///<reference path="UIObject.ts"/>
class UILayoutGrid extends UIObject {
    constructor(frame) {
        super();
        this._subframes = [];
        this._class = UILayoutGrid;
        this.superclass = UIObject;
        this._frame = frame;
    }
    splitXInto(numberOfFrames) {
        if (this._subframes.length == 0) {
            for (var i = 0; i < numberOfFrames; i++) {
                const asd = 1;
            }
        }
    }
}
/// <reference path="./UIView.ts" />
class UIScrollView extends UIView {
    constructor(elementID, viewHTMLElement) {
        super(elementID, viewHTMLElement);
        this._contentOffset = new UIPoint(0, 0);
        this._contentScale = 1;
        this._scrollEnabled = YES;
        this._class = UIScrollView;
        this.superclass = UIView;
        this.containerView = new UIView(elementID + "ContainerView");
        super.addSubview(this.containerView);
        this.style.overflow = "hidden";
        this.pausesPointerEvents = NO; //YES;
        this.addTargetForControlEvent(UIView.controlEvent.PointerDown, function () {
            this._pointerDown = YES;
        }.bind(this));
        this.addTargetForControlEvent(UIView.controlEvent.PointerUp, function () {
            this._pointerDown = NO;
            this._previousClientPoint = null;
            scrollStopped();
        }.bind(this));
        function scrollStopped() {
            // Handle paging if needed
        }
        this.addTargetForControlEvent(UIView.controlEvent.PointerMove, function (sender, event) {
            if (!(this._pointerDown && this._scrollEnabled && this._enabled)) {
                return;
            }
            const currentClientPoint = new UIPoint(nil, nil);
            if (window.MouseEvent && event instanceof MouseEvent) {
                currentClientPoint.x = event.clientX;
                currentClientPoint.y = event.clientY;
            }
            if (window.TouchEvent && event instanceof TouchEvent) {
                const touchEvent = event;
                if (touchEvent.touches.length != 1) {
                    this._pointerDown = NO;
                    this._previousClientPoint = null;
                    scrollStopped();
                    return;
                }
                currentClientPoint.x = touchEvent.touches[0].clientX;
                currentClientPoint.y = touchEvent.touches[0].clientY;
            }
            if (!this._previousClientPoint) {
                this._previousClientPoint = currentClientPoint;
                return;
            }
            const changePoint = currentClientPoint.copy().subtract(this._previousClientPoint);
            if (this.containerView.bounds.width <= this.bounds.width) {
                changePoint.x = 0;
            }
            if (0 < this.contentOffset.x + changePoint.x) {
                changePoint.x = -this.contentOffset.x;
            }
            if (this.contentOffset.x + changePoint.x < -this.bounds.width) {
                changePoint.x = -this.bounds.width - this.contentOffset.x;
            }
            if (this.containerView.bounds.height <= this.bounds.height) {
                changePoint.y = 0;
            }
            if (0 < this.contentOffset.y + changePoint.y) {
                changePoint.y = -this.contentOffset.y;
            }
            if (this.contentOffset.y + changePoint.y < -this.bounds.height) {
                changePoint.y = -this.bounds.height - this.contentOffset.y;
            }
            this.contentOffset = this.contentOffset.add(changePoint);
            this._previousClientPoint = currentClientPoint;
        }.bind(this));
    }
    invalidateIntrinsicContentFrame() {
        this._intrinsicContentFrame = nil;
    }
    get contentOffset() {
        return this._contentOffset;
    }
    set contentOffset(offset) {
        this._contentOffset = offset;
        this.setNeedsLayout();
    }
    layoutSubviews() {
        super.layoutSubviews();
        // var intrinsicContentFrame = this._intrinsicContentFrame;
        // if (!IS(intrinsicContentFrame)) {
        //     intrinsicContentFrame = this.containerView.intrinsicContentSizeWithConstraints();   
        // }
        // intrinsicContentFrame.offsetByPoint(this.contentOffset);
        // intrinsicContentFrame.height = this.containerView.viewHTMLElement.scrollHeight;
        // intrinsicContentFrame.width = this.containerView.viewHTMLElement.scrollWidth;
        // this.containerView.frame = intrinsicContentFrame;
        this.containerView.frame = this.containerView.bounds.offsetByPoint(this.contentOffset);
    }
    // get _subviews() {
    //     return super.subviews;
    // }
    // set _subviews(subviews: UIView[]) {
    //     super.subviews = subviews;
    // }
    // get subviews() {
    //     return this.containerView.subviews;
    // }
    // set subviews(subviews: UIView[]) {
    //     this.containerView.subviews = subviews;
    //     this.invalidateIntrinsicContentFrame();
    // }
    hasSubview(view) {
        return this.containerView.hasSubview(view);
    }
    addSubview(view) {
        this.containerView.addSubview(view);
        this.invalidateIntrinsicContentFrame();
    }
}
///<reference path="UIView.ts"/>
class UISlideScrollerView extends UIView {
    constructor(elementID, viewHTMLElement) {
        super(elementID, viewHTMLElement);
        this._targetIndex = 0;
        this._isAnimating = NO;
        this._isAnimationOngoing = NO;
        this._animationTimer = nil;
        this._slideViews = [];
        this.wrapAround = YES;
        this.animationDuration = 0.35;
        this.animationDelay = 2;
        this._currentPageIndex = 0;
        this._class = UIScrollView;
        this.superclass = UIView;
        this._scrollView = new UIScrollView(elementID + "ScrollView");
        this.addSubview(this._scrollView);
        this._scrollView._scrollEnabled = NO;
        this._scrollView.addTargetForControlEvent(UIView.controlEvent.PointerMove, function (sender, event) {
            if (event instanceof MouseEvent) {
                this._animationTimer.invalidate();
            }
        }.bind(this));
        this._scrollView.addTargetForControlEvent(UIView.controlEvent.PointerLeave, function () {
            if (this._isAnimating && event instanceof MouseEvent) {
                this.startAnimating();
            }
        }.bind(this));
        // Touch events
        this._scrollView.addTargetForControlEvent(UIView.controlEvent.PointerDown, function (sender, event) {
            if (event instanceof TouchEvent) {
                this._animationTimer.invalidate();
            }
        }.bind(this));
        this._scrollView.addTargetForControlEvents([
            UIView.controlEvent.PointerUp, UIView.controlEvent.PointerCancel
        ], function (sender, event) {
            if (event instanceof TouchEvent && this._isAnimating) {
                this.startAnimating();
            }
        }.bind(this));
        // Page indicator
        this.pageIndicatorsView = new UIView(elementID + "PageIndicatorsView");
        this.addSubview(this.pageIndicatorsView);
    }
    buttonForPageIndicatorWithIndex(index) {
        const result = new UIButton(this.viewHTMLElement.id + "PageIndicatorButton" + index);
        result.addTargetForControlEvents([
            UIView.controlEvent.PointerUpInside, UIView.controlEvent.EnterUp
        ], function (sender, event) {
            this.scrollToPageWithIndex(index, YES);
            if (this._isAnimating) {
                this.startAnimating();
            }
        }.bind(this));
        result.addTargetForControlEvent(UIView.controlEvent.PointerMove, function () {
            this._animationTimer.invalidate();
        }.bind(this));
        result.updateContentForNormalState = function () {
            result.backgroundColor = UIColor.blueColor;
            result.titleLabel.textColor = UIColor.whiteColor;
        };
        result.frame = new UIRectangle(nil, nil, 20, 50);
        // result.style.height = "20px";
        // result.style.width = "50px";
        result.style.display = "table-cell";
        result.style.position = "relative";
        // var resultContent = new UIView(result.viewHTMLElement.id + "Content");
        // resultContent.backgroundColor = UIColor.whiteColor;
        // resultContent.centerYInContainer();
        // resultContent.style.height = "10px";
        // resultContent.style.height = "100%";
        // resultContent.style.borderRadius = "5px";
        // result.addSubview(resultContent);
        return result;
    }
    addSlideView(view) {
        this.slideViews.push(view);
        this.updateSlideViews();
    }
    set slideViews(views) {
        this._slideViews = views;
        this.updateSlideViews();
    }
    get slideViews() {
        return this._slideViews;
    }
    get currentPageIndex() {
        const result = this._currentPageIndex;
        return result;
    }
    set currentPageIndex(index) {
        this._currentPageIndex = index;
        this._slideViews[index].willAppear();
        //this._scrollView.contentOffset.x = -this._slideViews[index].frame.min.x; //-this.bounds.width * index;
        //this._scrollView.contentOffset.x = Math.round(this._scrollView.contentOffset.x);
        this._scrollView.contentOffset = this._scrollView.contentOffset.pointWithX(-this._slideViews[index].frame.min.x);
        this.pageIndicatorsView.subviews.forEach(function (button, index, array) {
            button.selected = NO;
        });
        this.pageIndicatorsView.subviews[index].selected = YES;
    }
    scrollToPreviousPage(animated) {
        if (this.slideViews.length == 0) {
            return;
        }
        var targetIndex = this.currentPageIndex;
        if (this.wrapAround) {
            targetIndex = (this.currentPageIndex - 1) % (this.slideViews.length);
        }
        else if (this.currentPageIndex - 1 < this.slideViews.length) {
            targetIndex = this.currentPageIndex - 1;
        }
        else {
            return;
        }
        this.scrollToPageWithIndex(targetIndex, animated);
    }
    scrollToNextPage(animated) {
        if (this.slideViews.length == 0) {
            return;
        }
        var targetIndex = this.currentPageIndex;
        if (this.wrapAround) {
            targetIndex = (this.currentPageIndex + 1) % (this.slideViews.length);
        }
        else if (this.currentPageIndex + 1 < this.slideViews.length) {
            targetIndex = this.currentPageIndex + 1;
        }
        else {
            return;
        }
        this.scrollToPageWithIndex(targetIndex, animated);
    }
    scrollToPageWithIndex(targetIndex, animated = YES) {
        this._targetIndex = targetIndex;
        // this._slideViews[this.currentPageIndex]._shouldLayout = NO;
        // this._slideViews[this._targetIndex]._shouldLayout = YES;
        //this._slideViews[this._targetIndex].hidden = NO;
        this.willScrollToPageWithIndex(targetIndex);
        this._isAnimationOngoing = YES;
        //var previousView = this._slideViews[this.currentPageIndex];
        if (animated) {
            UIView.animateViewOrViewsWithDurationDelayAndFunction(this._scrollView.containerView, this.animationDuration, 0, undefined, function () {
                this.currentPageIndex = targetIndex;
            }.bind(this), function () {
                this.didScrollToPageWithIndex(targetIndex);
                this._isAnimationOngoing = NO;
                //previousView.hidden = YES;
            }.bind(this));
        }
        else {
            this.currentPageIndex = targetIndex;
            this.didScrollToPageWithIndex(targetIndex);
            //previousView.hidden = YES;
        }
    }
    willScrollToPageWithIndex(index) {
        const targetView = this.slideViews[index];
        if (IS(targetView) && targetView.willAppear && targetView.willAppear instanceof Function) {
            targetView.willAppear();
        }
    }
    didScrollToPageWithIndex(index) {
    }
    startAnimating() {
        this._isAnimating = YES;
        this._animationTimer.invalidate();
        this._animationTimer = new UITimer(this.animationDelay + this.animationDuration, YES, function () {
            this.scrollToNextPage(YES);
        }.bind(this));
    }
    stopAnimating() {
        this._isAnimating = NO;
        this._animationTimer.invalidate();
    }
    updateSlideViews() {
        this._scrollView.containerView.subviews.slice().forEach(function (subview, index, array) {
            subview.removeFromSuperview();
        });
        this.pageIndicatorsView.subviews.slice().forEach(function (subview, index, array) {
            subview.removeFromSuperview();
        });
        this._slideViews.forEach(function (view, index, array) {
            this._scrollView.addSubview(view);
            this.pageIndicatorsView.addSubview(this.buttonForPageIndicatorWithIndex(index));
        }.bind(this));
    }
    didReceiveBroadcastEvent(event) {
        super.didReceiveBroadcastEvent(event);
        if (event.name == UICore.broadcastEventName.WindowDidResize) {
            this.currentPageIndex = this.currentPageIndex;
        }
    }
    set frame(frame) {
        super.frame = frame;
        this.currentPageIndex = this.currentPageIndex;
    }
    get frame() {
        return super.frame;
    }
    layoutSubviews() {
        super.layoutSubviews();
        if (this.bounds.isEqualTo(this._previousLayoutBounds)) {
            return;
        }
        const bounds = this.bounds;
        this._previousLayoutBounds = bounds;
        this._scrollView.frame = bounds;
        this._scrollView.containerView.frame = bounds.rectangleWithWidth(bounds.width *
            this.slideViews.length).performFunctionWithSelf(function (self) {
            self.offsetByPoint(this._scrollView.contentOffset);
            return self;
        }.bind(this));
        this._slideViews.forEach(function (view, index, array) {
            view.frame = bounds.rectangleWithX((this.bounds.width + 1) * index);
        }.bind(this));
        this.layoutPageIndicators();
    }
    layoutPageIndicators() {
        this.pageIndicatorsView.centerXInContainer();
        this.pageIndicatorsView.style.bottom = "20px";
        this.pageIndicatorsView.style.height = "20px";
        this.pageIndicatorsView.style.display = "table-row";
    }
    removeFromSuperview() {
        super.removeFromSuperview();
        this.stopAnimating();
    }
}
///<reference path="UIObject.ts"/>
class UIStringFilter extends UIObject {
    constructor(useSeparateWebWorker = NO) {
        super();
        this._isThreadClosed = NO;
        this._webWorker = UIStringFilter._sharedWebWorker;
        this._class = UIStringFilter;
        this.superclass = UIObject;
        if (useSeparateWebWorker) {
            this._webWorker = new Worker("compiledScripts/UIStringFilterWebWorker.js");
        }
        UIStringFilter._instanceNumber = UIStringFilter._instanceNumber + 1;
        this._instanceNumber = UIStringFilter._instanceNumber;
    }
    get instanceIdentifier() {
        return this._instanceNumber;
    }
    filterData(filteringString, data, excludedData, identifier, completion) {
        if (this._isThreadClosed) {
            return;
        }
        //var startTime = Date.now();
        const instanceIdentifier = this.instanceIdentifier;
        this._webWorker.onmessage = function (message) {
            if (message.data.instanceIdentifier == instanceIdentifier) {
                //console.log("Filtering took " + (Date.now() - startTime) + " ms");
                completion(message.data.filteredData, message.data.filteredIndexes, message.data.identifier);
            }
        };
        this._webWorker.postMessage({
            "filteringString": filteringString,
            "data": data,
            "excludedData": excludedData,
            "identifier": identifier,
            "instanceIdentifier": instanceIdentifier
        });
    }
    filteredData(filteringString, data, excludedData = [], identifier = MAKE_ID()) {
        const result = new Promise((resolve, reject) => {
            this.filterData(filteringString, data, excludedData, identifier, (filteredData, filteredIndexes, filteredIdentifier) => {
                if (filteredIdentifier == identifier) {
                    resolve({
                        filteredData: filteredData,
                        filteredIndexes: filteredIndexes,
                        identifier: filteredIdentifier
                    });
                }
            });
        });
        return result;
    }
    closeThread() {
        this._isThreadClosed = YES;
        if (this._webWorker != UIStringFilter._sharedWebWorker) {
            this._webWorker.terminate();
        }
    }
}
UIStringFilter._sharedWebWorker = new Worker("compiledScripts/UIStringFilterWebWorker.js");
UIStringFilter._instanceNumber = -1;
/// <reference path="UITextField.ts" />
class UITextArea extends UITextField {
    constructor(elementID, viewHTMLElement = null) {
        super(elementID, viewHTMLElement, UITextView.type.textArea);
        this._class = UITextArea;
        this.superclass = UITextField;
        this.viewHTMLElement.removeAttribute("type");
        this.style.overflow = "auto";
        this.style.webkitUserSelect = "text";
        this.pausesPointerEvents = NO;
    }
    get addControlEventTarget() {
        return super.addControlEventTarget;
    }
    // @ts-ignore
    get viewHTMLElement() {
        // @ts-ignore
        return super.viewHTMLElement;
    }
}
///<reference path="UIObject.ts"/>
class UITimer extends UIObject {
    constructor(interval, repeats, target) {
        super();
        this.interval = interval;
        this.repeats = repeats;
        this.target = target;
        this.isValid = YES;
        this.superclass = UIObject;
        this.schedule();
    }
    schedule() {
        const callback = function () {
            if (this.repeats == NO) {
                this.invalidate();
            }
            this.target();
        }.bind(this);
        this._intervalID = window.setInterval(callback, this.interval * 1000);
    }
    reschedule() {
        this.invalidate();
        this.schedule();
    }
    fire() {
        if (this.repeats == NO) {
            this.invalidate();
        }
        else {
            this.reschedule();
        }
        this.target();
    }
    invalidate() {
        if (this.isValid) {
            clearInterval(this._intervalID);
            this.isValid = NO;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NjcmlwdHMvVUlDb3JlL1VJT2JqZWN0LnRzIiwiLi4vc2NyaXB0cy9VSUNvcmUvVUlDb2xvci50cyIsIi4uL3NjcmlwdHMvVUlDb3JlL1VJUG9pbnQudHMiLCIuLi9zY3JpcHRzL1VJQ29yZS9VSVJlY3RhbmdsZS50cyIsIi4uL3NjcmlwdHMvVUlDb3JlL1VJVmlldy50cyIsIi4uL3NjcmlwdHMvQm90dG9tQmFyVmlldy50cyIsIi4uL3NjcmlwdHMvVUlDb3JlL1VJQ29yZUV4dGVuc2lvbnMudHMiLCIuLi9zY3JpcHRzL0N1c3RvbSBjb21wb25lbnRzL0NCU29ja2V0Q2FsbGJhY2tIb2xkZXIudHMiLCIuLi9zY3JpcHRzL0N1c3RvbSBjb21wb25lbnRzL0NCU29ja2V0Q2xpZW50LnRzIiwiLi4vc2NyaXB0cy9DQkNvcmUudHMiLCIuLi9zY3JpcHRzL1VJQ29yZS9VSVZpZXdDb250cm9sbGVyLnRzIiwiLi4vc2NyaXB0cy9VSUNvcmUvVUlEaWFsb2dWaWV3LnRzIiwiLi4vc2NyaXB0cy9VSUNvcmUvVUlCYXNlQnV0dG9uLnRzIiwiLi4vc2NyaXB0cy9VSUNvcmUvVUlMaW5rLnRzIiwiLi4vc2NyaXB0cy9VSUNvcmUvVUlMaW5rQnV0dG9uLnRzIiwiLi4vc2NyaXB0cy9Sb290Vmlld0NvbnRyb2xsZXIudHMiLCIuLi9zY3JpcHRzL1VJQ29yZS9VSVJvdXRlLnRzIiwiLi4vc2NyaXB0cy9VSUNvcmUvVUlDb3JlLnRzIiwiLi4vc2NyaXB0cy9VSUNvcmUvVUlUZXh0Vmlldy50cyIsIi4uL3NjcmlwdHMvR0VURUxFQ1RhYmxlVmlld0NvbnRyb2xsZXIudHMiLCIuLi9zY3JpcHRzL0dFVEVMRUNWaWV3Q29udHJvbGxlci50cyIsIi4uL3NjcmlwdHMvVUlDb3JlL1VJQnV0dG9uLnRzIiwiLi4vc2NyaXB0cy9DdXN0b20gY29tcG9uZW50cy9DQkJ1dHRvbi50cyIsIi4uL3NjcmlwdHMvQ3VzdG9tIGNvbXBvbmVudHMvQ0JDaGVja2JveC50cyIsIi4uL3NjcmlwdHMvQ3VzdG9tIGNvbXBvbmVudHMvQ0JDb2xvci50cyIsIi4uL3NjcmlwdHMvQ3VzdG9tIGNvbXBvbmVudHMvQ0JGbGF0QnV0dG9uLnRzIiwiLi4vc2NyaXB0cy9DdXN0b20gY29tcG9uZW50cy9Sb3dWaWV3LnRzIiwiLi4vc2NyaXB0cy9DdXN0b20gY29tcG9uZW50cy9DQkRpYWxvZ1ZpZXcudHMiLCIuLi9zY3JpcHRzL0N1c3RvbSBjb21wb25lbnRzL0xhbmd1YWdlU2VydmljZS50cyIsIi4uL3NjcmlwdHMvQ3VzdG9tIGNvbXBvbmVudHMvQ0JEaWFsb2dWaWV3U2hvd2VyLnRzIiwiLi4vc2NyaXB0cy9DdXN0b20gY29tcG9uZW50cy9DQkxpbmtCdXR0b24udHMiLCIuLi9zY3JpcHRzL0N1c3RvbSBjb21wb25lbnRzL0NlbGxWaWV3LnRzIiwiLi4vc2NyaXB0cy9DdXN0b20gY29tcG9uZW50cy9TZWFyY2hUZXh0RmllbGQudHMiLCIuLi9zY3JpcHRzL1VJQ29yZS9VSUtleVZhbHVlU3RyaW5nRmlsdGVyLnRzIiwiLi4vc2NyaXB0cy9VSUNvcmUvVUlOYXRpdmVTY3JvbGxWaWV3LnRzIiwiLi4vc2NyaXB0cy9VSUNvcmUvVUlUYWJsZVZpZXcudHMiLCIuLi9zY3JpcHRzL1VJQ29yZS9VSUltYWdlVmlldy50cyIsIi4uL3NjcmlwdHMvVUlDb3JlL1VJVGV4dEZpZWxkLnRzIiwiLi4vc2NyaXB0cy9DdXN0b20gY29tcG9uZW50cy9TZWFyY2hhYmxlRHJvcGRvd25Sb3cudHMiLCIuLi9zY3JpcHRzL0N1c3RvbSBjb21wb25lbnRzL1NlYXJjaGFibGVEcm9wZG93bi50cyIsIi4uL3NjcmlwdHMvVUlDb3JlL1VJQWN0aW9uSW5kaWNhdG9yLnRzIiwiLi4vc2NyaXB0cy9VSUNvcmUvVUlEYXRlVGltZUlucHV0LnRzIiwiLi4vc2NyaXB0cy9VSUNvcmUvVUlLZXlWYWx1ZVN0cmluZ1NvcnRlci50cyIsIi4uL3NjcmlwdHMvVUlDb3JlL1VJTGF5b3V0R3JpZC50cyIsIi4uL3NjcmlwdHMvVUlDb3JlL1VJU2Nyb2xsVmlldy50cyIsIi4uL3NjcmlwdHMvVUlDb3JlL1VJU2xpZGVTY3JvbGxlclZpZXcudHMiLCIuLi9zY3JpcHRzL1VJQ29yZS9VSVN0cmluZ0ZpbHRlci50cyIsIi4uL3NjcmlwdHMvVUlDb3JlL1VJVGV4dEFyZWEudHMiLCIuLi9zY3JpcHRzL1VJQ29yZS9VSVRpbWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLFNBQVMsV0FBVztJQUNoQixPQUFPLEdBQUcsQ0FBQTtBQUNkLENBQUM7QUFFRCxJQUFJLEdBQUcsR0FBUSxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUU7SUFFdkYsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJO1FBRVosSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRTtZQUU1QixPQUFPLFVBQVUsSUFBSTtnQkFDakIsSUFBSSxJQUFJLElBQUksUUFBUSxFQUFFO29CQUNsQixPQUFPLENBQUMsQ0FBQTtpQkFDWDtnQkFDRCxJQUFJLElBQUksSUFBSSxRQUFRLEVBQUU7b0JBQ2xCLE9BQU8sRUFBRSxDQUFBO2lCQUNaO2dCQUNELE9BQU8sS0FBSyxDQUFBO1lBQ2hCLENBQUMsQ0FBQTtTQUVKO1FBRUQsSUFBSSxJQUFJLElBQUksVUFBVSxFQUFFO1lBRXBCLE9BQU8sU0FBUyxRQUFRO2dCQUNwQixPQUFPLEVBQUUsQ0FBQTtZQUNiLENBQUMsQ0FBQTtTQUVKO1FBRUQsT0FBTyxXQUFXLEVBQUUsQ0FBQTtJQUN4QixDQUFDO0lBRUQsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsS0FBSztRQUNuQixPQUFPLFdBQVcsRUFBRSxDQUFBO0lBQ3hCLENBQUM7Q0FFSixDQUFDLENBQUE7QUFHRixTQUFTLFNBQVMsQ0FBSSxNQUFVO0lBRzVCLElBQUks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LENBQUMsS0FBSyxFQUFFO1lBQ1IsS0FBSyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtTQUM1QjtRQUVELElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQTtRQUVuQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFBO1FBQzNCLElBQUksR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7WUFDZixHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO1NBQ3JCO1FBQ0QsSUFBSSxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtZQUNmLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7U0FDckI7UUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFBO1FBQzNCLElBQUksR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7WUFDZixHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO1NBQ3JCO1FBQ0QsSUFBSSxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtZQUNmLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7U0FDckI7UUFFRCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3JDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDckMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFF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RTtRQUNELElBQUksR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7WUFDZixHQUFHLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUE7U0FDdEU7UUFFRCxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFBO1FBQ3RCLElBQUksR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7WUFDZixHQUFHLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUE7U0FDcEU7UUFDRCxJQUFJLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO1lBQ2YsR0FBRyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1NBQ3RFO1FBRUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3RELE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN0RCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENB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UUFFTixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFFZCxhQUFhLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1lBRS9CLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFBO1NBRXBCO0lBSUwsQ0FBQztDQU1KIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gTmlsRnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5pbFxufVxuXG52YXIgbmlsOiBhbnkgPSBuZXcgUHJveHkoT2JqZWN0LmFzc2lnbihOaWxGdW5jdGlvbiwgeyBcImNsYXNzXCI6IG5pbCwgXCJjbGFzc05hbWVcIjogXCJOaWxcIiB9KSwge1xuICAgIFxuICAgIGdldCh0YXJnZXQsIG5hbWUpIHtcbiAgICAgICAgXG4gICAgICAgIGlmIChuYW1lID09IFN5bWJvbC50b1ByaW1pdGl2ZSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGhpbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaGludCA9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChoaW50ID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKG5hbWUgPT0gXCJ0b1N0cmluZ1wiKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBOaWxGdW5jdGlvbigpXG4gICAgfSxcbiAgICBcbiAgICBzZXQodGFyZ2V0LCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gTmlsRnVuY3Rpb24oKVxuICAgIH1cbiAgICBcbn0pXG5cblxuZnVuY3Rpb24gd3JhcEluTmlsPFQ+KG9iamVjdD86IFQpOiBUIHtcbiAgICBcbiAgICBcbiAgICB2YXIgcmVzdWx0ID0gRklSU1RfT1JfTklMKG9iamVjdClcbiAgICBcbiAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgT2JqZWN0ICYmICEob2JqZWN0IGluc3RhbmNlb2YgRnVuY3Rpb24pKSB7XG4gICAgICAgIFxuICAgICAgICByZXN1bHQgPSBuZXcgUHJveHkob2JqZWN0IGFzIE9iamVjdCAmIFQsIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZ2V0KHRhcmdldCwgbmFtZSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChuYW1lID09IFwid3JhcHBlZF9uaWxfdGFyZ2V0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gUmVmbGVjdC5nZXQodGFyZ2V0LCBuYW1lKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB3cmFwSW5OaWwodmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoSVNfTk9UX0xJS0VfTlVMTCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5pbFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gcmVzdWx0XG4gICAgXG59XG5cblxuY29uc3QgWUVTID0gdHJ1ZVxuY29uc3QgTk8gPSBmYWxzZVxuXG5mdW5jdGlvbiBJUyhvYmplY3QpIHtcbiAgICBcbiAgICBpZiAob2JqZWN0ICYmIG9iamVjdCAhPT0gbmlsKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gWUVTXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gTk9cbiAgICBcbiAgICAvL3JldHVybiAob2JqZWN0ICE9IG5pbCAmJiBvYmplY3QpO1xuICAgIFxufVxuXG5mdW5jdGlvbiBJU19OT1Qob2JqZWN0KSB7XG4gICAgXG4gICAgcmV0dXJuICFJUyhvYmplY3QpXG4gICAgXG59XG5cbmZ1bmN0aW9uIElTX0RFRklORUQob2JqZWN0KSB7XG4gICAgXG4gICAgaWYgKG9iamVjdCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBZRVNcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHJldHVybiBOT1xuICAgIFxufVxuXG5mdW5jdGlvbiBJU19VTkRFRklORUQob2JqZWN0KSB7XG4gICAgXG4gICAgcmV0dXJuICFJU19ERUZJTkVEKG9iamVjdClcbiAgICBcbn1cblxuZnVuY3Rpb24gSVNfTklMKG9iamVjdCkge1xuICAgIFxuICAgIGlmIChvYmplY3QgPT09IG5pbCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIFlFU1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIE5PXG4gICAgXG59XG5cbmZ1bmN0aW9uIElTX05PVF9OSUwob2JqZWN0KSB7XG4gICAgXG4gICAgcmV0dXJuICFJU19OSUwob2JqZWN0KVxuICAgIFxufVxuXG5cbmZ1bmN0aW9uIElTX0xJS0VfTlVMTChvYmplY3QpIHtcbiAgICBcbiAgICByZXR1cm4gKElTX1VOREVGSU5FRChvYmplY3QpIHx8IElTX05JTChvYmplY3QpIHx8IG9iamVjdCA9PSBudWxsKVxuICAgIFxufVxuXG5mdW5jdGlvbiBJU19OT1RfTElLRV9OVUxMKG9iamVjdCkge1xuICAgIFxuICAgIHJldHVybiAhSVNfTElLRV9OVUxMKG9iamVjdClcbiAgICBcbn1cblxuXG5mdW5jdGlvbiBJU19BTl9FTUFJTF9BRERSRVNTKGVtYWlsOiBzdHJpbmcpIHtcbiAgICBjb25zdCByZSA9IC9cXFMrQFxcUytcXC5cXFMrL1xuICAgIHJldHVybiByZS50ZXN0KGVtYWlsKVxufVxuXG5cbmZ1bmN0aW9uIEZJUlNUX09SX05JTDxUPiguLi5vYmplY3RzOiBUW10pOiBUIHtcbiAgICBcbiAgICBjb25zdCByZXN1bHQgPSBvYmplY3RzLmZpbmQoZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gSVMob2JqZWN0KVxuICAgICAgICBcbiAgICB9KVxuICAgIFxuICAgIHJldHVybiByZXN1bHQgfHwgbmlsXG4gICAgXG59XG5cbmZ1bmN0aW9uIEZJUlNUPFQ+KC4uLm9iamVjdHM6IFRbXSk6IFQge1xuICAgIFxuICAgIGNvbnN0IHJlc3VsdCA9IG9iamVjdHMuZmluZChmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBJUyhvYmplY3QpXG4gICAgICAgIFxuICAgIH0pXG4gICAgXG4gICAgcmV0dXJuIHJlc3VsdCB8fCBJRihJU19ERUZJTkVEKG9iamVjdHMubGFzdEVsZW1lbnQpKShSRVRVUk5FUihvYmplY3RzLmxhc3RFbGVtZW50KSkoKVxuICAgIFxufVxuXG5cbmZ1bmN0aW9uIE1BS0VfSUQocmFuZG9tUGFydExlbmd0aCA9IDE1KSB7XG4gICAgXG4gICAgdmFyIHJlc3VsdCA9IFwiXCJcbiAgICBjb25zdCBjaGFyYWN0ZXJzID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OVwiXG4gICAgXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYW5kb21QYXJ0TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgXG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCArIGNoYXJhY3RlcnMuY2hhckF0KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNoYXJhY3RlcnMubGVuZ3RoKSlcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHJlc3VsdCA9IHJlc3VsdCArIERhdGUubm93KClcbiAgICBcbiAgICByZXR1cm4gcmVzdWx0XG4gICAgXG59XG5cblxuZnVuY3Rpb24gUkVUVVJORVI8VD4odmFsdWU6IFQpIHtcbiAgICBcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLm9iamVjdHM6IGFueVtdKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgXG4gICAgfVxuICAgIFxufVxuXG5cblxuXG5cbnR5cGUgVUlJRkJsb2NrUmVjZWl2ZXI8VD4gPSAoZnVuY3Rpb25Ub0NhbGw6ICgpID0+IGFueSkgPT4gVUlJRkV2YWx1YXRvcjxUPjtcblxudHlwZSBVSUlGRXZhbHVhdG9yQmFzZTxUPiA9ICgpID0+IFQ7XG5cblxuaW50ZXJmYWNlIFVJSUZFdmFsdWF0b3I8VD4gZXh0ZW5kcyBVSUlGRXZhbHVhdG9yQmFzZTxUPiB7XG4gICAgXG4gICAgRUxTRV9JRjogKG90aGVyVmFsdWU6IGFueSkgPT4gVUlJRkJsb2NrUmVjZWl2ZXI8VD47XG4gICAgRUxTRTogKGZ1bmN0aW9uVG9DYWxsOiAoKSA9PiBhbnkpID0+IFQ7XG4gICAgXG59XG5cblxuZnVuY3Rpb24gSUY8VCA9IGFueT4odmFsdWU6IGFueSk6IFVJSUZCbG9ja1JlY2VpdmVyPFQ+IHtcbiAgICBcbiAgICB2YXIgdGhlbkZ1bmN0aW9uID0gbmlsXG4gICAgdmFyIGVsc2VGdW5jdGlvbiA9IG5pbFxuICAgIFxuICAgIGNvbnN0IHJlc3VsdDogYW55ID0gZnVuY3Rpb24gKGZ1bmN0aW9uVG9DYWxsOiAoKSA9PiBUKSB7XG4gICAgICAgIHRoZW5GdW5jdGlvbiA9IGZ1bmN0aW9uVG9DYWxsXG4gICAgICAgIHJldHVybiByZXN1bHQuZXZhbHVhdGVDb25kaXRpb25zXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHJlc3VsdC5ldmFsdWF0ZUNvbmRpdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChJUyh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGVuRnVuY3Rpb24oKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbHNlRnVuY3Rpb24oKVxuICAgIH1cbiAgICBcbiAgICBcbiAgICByZXN1bHQuZXZhbHVhdGVDb25kaXRpb25zLkVMU0VfSUYgPSBmdW5jdGlvbiAob3RoZXJWYWx1ZTogYW55KSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBmdW5jdGlvblJlc3VsdCA9IElGKG90aGVyVmFsdWUpIGFzIChVSUlGQmxvY2tSZWNlaXZlcjxUPiAmIHsgZXZhbHVhdGVDb25kaXRpb25zOiBVSUlGRXZhbHVhdG9yPFQ+IH0pXG4gICAgICAgIGVsc2VGdW5jdGlvbiA9IGZ1bmN0aW9uUmVzdWx0LmV2YWx1YXRlQ29uZGl0aW9uc1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZnVuY3Rpb25SZXN1bHRFdmFsdWF0ZUNvbmRpdGlvbnNGdW5jdGlvbjogYW55ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5ldmFsdWF0ZUNvbmRpdGlvbnMoKVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uUmVzdWx0RXZhbHVhdGVDb25kaXRpb25zRnVuY3Rpb24uRUxTRV9JRiA9IGZ1bmN0aW9uUmVzdWx0LmV2YWx1YXRlQ29uZGl0aW9ucy5FTFNFX0lGXG4gICAgICAgIGZ1bmN0aW9uUmVzdWx0RXZhbHVhdGVDb25kaXRpb25zRnVuY3Rpb24uRUxTRSA9IGZ1bmN0aW9uUmVzdWx0LmV2YWx1YXRlQ29uZGl0aW9ucy5FTFNFXG4gICAgICAgIFxuICAgICAgICBmdW5jdGlvblJlc3VsdC5ldmFsdWF0ZUNvbmRpdGlvbnMgPSBmdW5jdGlvblJlc3VsdEV2YWx1YXRlQ29uZGl0aW9uc0Z1bmN0aW9uXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZnVuY3Rpb25SZXN1bHRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHJlc3VsdC5ldmFsdWF0ZUNvbmRpdGlvbnMuRUxTRSA9IGZ1bmN0aW9uIChmdW5jdGlvblRvQ2FsbDogKCkgPT4gVCkge1xuICAgICAgICBlbHNlRnVuY3Rpb24gPSBmdW5jdGlvblRvQ2FsbFxuICAgICAgICByZXR1cm4gcmVzdWx0LmV2YWx1YXRlQ29uZGl0aW9ucygpXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHJldHVybiByZXN1bHRcbn1cblxuXG5cbi8vIEB0cy1pZ25vcmVcbmlmICghd2luZG93LkF1dG9MYXlvdXQpIHtcbiAgICBcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgd2luZG93LkF1dG9MYXlvdXQgPSBuaWxcbiAgICBcbn1cblxuXG5jbGFzcyBVSU9iamVjdCB7XG4gICAgXG4gICAgX2NsYXNzOiBhbnlcbiAgICBcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2NsYXNzID0gVUlPYmplY3RcbiAgICAgICAgdGhpcy5zdXBlcmNsYXNzID0gbmlsLmNsYXNzXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgcHVibGljIGdldCBjbGFzcygpOiBhbnkge1xuICAgICAgICByZXR1cm4gKHRoaXMuY29uc3RydWN0b3IgYXMgYW55KVxuICAgIH1cbiAgICBcbiAgICBcbiAgICBwdWJsaWMgZ2V0IHN1cGVyY2xhc3MoKTogYW55IHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiAodGhpcy5jb25zdHJ1Y3RvciBhcyBhbnkpLnN1cGVyY2xhc3NcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBzZXQgc3VwZXJjbGFzcyhzdXBlcmNsYXNzOiBhbnkpIHtcbiAgICAgICAgKHRoaXMuY29uc3RydWN0b3IgYXMgYW55KS5zdXBlcmNsYXNzID0gc3VwZXJjbGFzc1xuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBwdWJsaWMgc3RhdGljIHdyYXBPYmplY3Q8VD4ob2JqZWN0OiBUKTogVUlPYmplY3QgJiBUIHtcbiAgICAgICAgXG4gICAgICAgIGlmIChJU19OT1Qob2JqZWN0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG5pbFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgVUlPYmplY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3RcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gT2JqZWN0LmFzc2lnbihuZXcgVUlPYmplY3QoKSwgb2JqZWN0KVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgaXNLaW5kT2ZDbGFzcyhjbGFzc09iamVjdCkge1xuICAgICAgICBpZiAodGhpcy5pc01lbWJlck9mQ2xhc3MoY2xhc3NPYmplY3QpKSB7XG4gICAgICAgICAgICByZXR1cm4gWUVTXG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgc3VwZXJjbGFzc09iamVjdCA9IHRoaXMuc3VwZXJjbGFzczsgSVMoc3VwZXJjbGFzc09iamVjdCk7IHN1cGVyY2xhc3NPYmplY3QgPSBzdXBlcmNsYXNzT2JqZWN0LnN1cGVyY2xhc3MpIHtcbiAgICAgICAgICAgIGlmIChzdXBlcmNsYXNzT2JqZWN0ID09IGNsYXNzT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFlFU1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBOT1xuICAgIH1cbiAgICBcbiAgICBcbiAgICBpc01lbWJlck9mQ2xhc3MoY2xhc3NPYmplY3Q6IGFueSkge1xuICAgICAgICByZXR1cm4gKHRoaXMuY2xhc3MgPT0gY2xhc3NPYmplY3QpXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIHZhbHVlRm9yS2V5KGtleTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzW2tleV1cbiAgICB9XG4gICAgXG4gICAgdmFsdWVGb3JLZXlQYXRoKGtleVBhdGg6IHN0cmluZyk6IGFueSB7XG4gICAgICAgIHJldHVybiBVSU9iamVjdC52YWx1ZUZvcktleVBhdGgoa2V5UGF0aCwgdGhpcylcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIHZhbHVlRm9yS2V5UGF0aChrZXlQYXRoOiBzdHJpbmcsIG9iamVjdDogYW55KTogYW55IHtcbiAgICBcbiAgICAgICAgaWYgKElTX05PVChrZXlQYXRoKSkge1xuICAgIFxuICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3Qga2V5cyA9IGtleVBhdGguc3BsaXQoXCIuXCIpXG4gICAgICAgIHZhciBjdXJyZW50T2JqZWN0ID0gb2JqZWN0XG4gICAgICAgIFxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoa2V5LnN1YnN0cmluZygwLCAyKSA9PSBcIltdXCIpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBUaGlzIG5leHQgb2JqZWN0IHdpbGwgYmUgYW4gYXJyYXkgYW5kIHRoZSByZXN0IG9mIHRoZSBrZXlzIG5lZWQgdG8gYmUgcnVuIGZvciBlYWNoIG9mIHRoZSBlbGVtZW50c1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGN1cnJlbnRPYmplY3QgPSBjdXJyZW50T2JqZWN0W2tleS5zdWJzdHJpbmcoMildXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQ3VycmVudE9iamVjdCBpcyBub3cgYW4gYXJyYXlcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zdCByZW1haW5pbmdLZXlQYXRoID0ga2V5cy5zbGljZShpICsgMSkuam9pbihcIi5cIilcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50QXJyYXkgPSBjdXJyZW50T2JqZWN0IGFzIHVua25vd24gYXMgYW55W11cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjdXJyZW50T2JqZWN0ID0gY3VycmVudEFycmF5Lm1hcChmdW5jdGlvbiAoc3ViT2JqZWN0LCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IFVJT2JqZWN0LnZhbHVlRm9yS2V5UGF0aChyZW1haW5pbmdLZXlQYXRoLCBzdWJPYmplY3QpXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY3VycmVudE9iamVjdCA9IGN1cnJlbnRPYmplY3Rba2V5XVxuICAgICAgICAgICAgaWYgKElTX05PVChjdXJyZW50T2JqZWN0KSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRPYmplY3QgPSBuaWxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gY3VycmVudE9iamVjdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc2V0VmFsdWVGb3JLZXlQYXRoKGtleVBhdGg6IHN0cmluZywgdmFsdWU6IGFueSwgY3JlYXRlUGF0aCA9IFlFUykge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIFVJT2JqZWN0LnNldFZhbHVlRm9yS2V5UGF0aChrZXlQYXRoLCB2YWx1ZSwgdGhpcywgY3JlYXRlUGF0aClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHN0YXRpYyBzZXRWYWx1ZUZvcktleVBhdGgoa2V5UGF0aDogc3RyaW5nLCB2YWx1ZTogYW55LCBjdXJyZW50T2JqZWN0OiBhbnksIGNyZWF0ZVBhdGgpIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGtleXMgPSBrZXlQYXRoLnNwbGl0KFwiLlwiKVxuICAgICAgICB2YXIgZGlkU2V0VmFsdWUgPSBOT1xuICAgICAgICBcbiAgICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXksIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgaWYgKGluZGV4ID09IGFycmF5Lmxlbmd0aCAtIDEgJiYgSVNfTk9UX0xJS0VfTlVMTChjdXJyZW50T2JqZWN0KSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRPYmplY3Rba2V5XSA9IHZhbHVlXG4gICAgICAgICAgICAgICAgZGlkU2V0VmFsdWUgPSBZRVNcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKElTX05PVChjdXJyZW50T2JqZWN0KSkge1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50T2JqZWN0VmFsdWUgPSBjdXJyZW50T2JqZWN0W2tleV1cbiAgICAgICAgICAgIGlmIChJU19MSUtFX05VTEwoY3VycmVudE9iamVjdFZhbHVlKSAmJiBjcmVhdGVQYXRoKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudE9iamVjdFtrZXldID0ge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnRPYmplY3QgPSBjdXJyZW50T2JqZWN0W2tleV1cbiAgICAgICAgfSlcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBkaWRTZXRWYWx1ZVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgcGVyZm9ybUZ1bmN0aW9uV2l0aFNlbGYoZnVuY3Rpb25Ub1BlcmZvcm06IChzZWxmOiB0aGlzKSA9PiBhbnkpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBmdW5jdGlvblRvUGVyZm9ybSh0aGlzKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgcGVyZm9ybUZ1bmN0aW9uV2l0aERlbGF5KGRlbGF5OiBudW1iZXIsIGZ1bmN0aW9uVG9DYWxsOiBGdW5jdGlvbikge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBuZXcgVUlUaW1lcihkZWxheSwgTk8sIGZ1bmN0aW9uVG9DYWxsKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbn1cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiIsIi8vLzxyZWZlcmVuY2UgcGF0aD1cIlVJT2JqZWN0LnRzXCIvPlxuXG5cblxuXG5cbmludGVyZmFjZSBVSUNvbG9yRGVzY3JpcHRvciB7XG4gICAgXG4gICAgcmVkOiBudW1iZXI7XG4gICAgZ3JlZW46IG51bWJlcjtcbiAgICBibHVlOiBudW1iZXI7XG4gICAgYWxwaGE/OiBudW1iZXI7XG4gICAgXG59XG5cblxuXG5cblxuY2xhc3MgVUlDb2xvciBleHRlbmRzIFVJT2JqZWN0IHtcbiAgICBcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgc3RyaW5nVmFsdWU6IHN0cmluZykge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIoKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fY2xhc3MgPSBVSUNvbG9yXG4gICAgICAgIHRoaXMuc3VwZXJjbGFzcyA9IFVJT2JqZWN0XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHJpbmdWYWx1ZVxuICAgIH1cbiAgICBcbiAgICBzdGF0aWMgZ2V0IHJlZENvbG9yKCkge1xuICAgICAgICByZXR1cm4gbmV3IFVJQ29sb3IoXCJyZWRcIilcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIGdldCBibHVlQ29sb3IoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVUlDb2xvcihcImJsdWVcIilcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIGdldCBncmVlbkNvbG9yKCkge1xuICAgICAgICByZXR1cm4gbmV3IFVJQ29sb3IoXCJncmVlblwiKVxuICAgIH1cbiAgICBcbiAgICBzdGF0aWMgZ2V0IHllbGxvd0NvbG9yKCkge1xuICAgICAgICByZXR1cm4gbmV3IFVJQ29sb3IoXCJ5ZWxsb3dcIilcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIGdldCBibGFja0NvbG9yKCkge1xuICAgICAgICByZXR1cm4gbmV3IFVJQ29sb3IoXCJibGFja1wiKVxuICAgIH1cbiAgICBcbiAgICBzdGF0aWMgZ2V0IGJyb3duQ29sb3IoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVUlDb2xvcihcImJyb3duXCIpXG4gICAgfVxuICAgIFxuICAgIHN0YXRpYyBnZXQgd2hpdGVDb2xvcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVSUNvbG9yKFwid2hpdGVcIilcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIGdldCBncmV5Q29sb3IoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVUlDb2xvcihcImdyZXlcIilcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIGdldCBsaWdodEdyZXlDb2xvcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVSUNvbG9yKFwibGlnaHRncmV5XCIpXG4gICAgfVxuICAgIFxuICAgIHN0YXRpYyBnZXQgdHJhbnNwYXJlbnRDb2xvcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVSUNvbG9yKFwidHJhbnNwYXJlbnRcIilcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIGdldCB1bmRlZmluZWRDb2xvcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVSUNvbG9yKFwiXCIpXG4gICAgfVxuICAgIFxuICAgIHN0YXRpYyBnZXQgbmlsQ29sb3IoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVUlDb2xvcihcIlwiKVxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBzdGF0aWMgbmFtZVRvSGV4KG5hbWU6IHN0cmluZykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgXCJhbGljZWJsdWVcIjogXCIjZjBmOGZmXCIsXG4gICAgICAgICAgICBcImFudGlxdWV3aGl0ZVwiOiBcIiNmYWViZDdcIixcbiAgICAgICAgICAgIFwiYXF1YVwiOiBcIiMwMGZmZmZcIixcbiAgICAgICAgICAgIFwiYXF1YW1hcmluZVwiOiBcIiM3ZmZmZDRcIixcbiAgICAgICAgICAgIFwiYXp1cmVcIjogXCIjZjBmZmZmXCIsXG4gICAgICAgICAgICBcImJlaWdlXCI6IFwiI2Y1ZjVkY1wiLFxuICAgICAgICAgICAgXCJiaXNxdWVcIjogXCIjZmZlNGM0XCIsXG4gICAgICAgICAgICBcImJsYWNrXCI6IFwiIzAwMDAwMFwiLFxuICAgICAgICAgICAgXCJibGFuY2hlZGFsbW9uZFwiOiBcIiNmZmViY2RcIixcbiAgICAgICAgICAgIFwiYmx1ZVwiOiBcIiMwMDAwZmZcIixcbiAgICAgICAgICAgIFwiYmx1ZXZpb2xldFwiOiBcIiM4YTJiZTJcIixcbiAgICAgICAgICAgIFwiYnJvd25cIjogXCIjYTUyYTJhXCIsXG4gICAgICAgICAgICBcImJ1cmx5d29vZFwiOiBcIiNkZWI4ODdcIixcbiAgICAgICAgICAgIFwiY2FkZXRibHVlXCI6IFwiIzVmOWVhMFwiLFxuICAgICAgICAgICAgXCJjaGFydHJldXNlXCI6IFwiIzdmZmYwMFwiLFxuICAgICAgICAgICAgXCJjaG9jb2xhdGVcIjogXCIjZDI2OTFlXCIsXG4gICAgICAgICAgICBcImNvcmFsXCI6IFwiI2ZmN2Y1MFwiLFxuICAgICAgICAgICAgXCJjb3JuZmxvd2VyYmx1ZVwiOiBcIiM2NDk1ZWRcIixcbiAgICAgICAgICAgIFwiY29ybnNpbGtcIjogXCIjZmZmOGRjXCIsXG4gICAgICAgICAgICBcImNyaW1zb25cIjogXCIjZGMxNDNjXCIsXG4gICAgICAgICAgICBcImN5YW5cIjogXCIjMDBmZmZmXCIsXG4gICAgICAgICAgICBcImRhcmtibHVlXCI6IFwiIzAwMDA4YlwiLFxuICAgICAgICAgICAgXCJkYXJrY3lhblwiOiBcIiMwMDhiOGJcIixcbiAgICAgICAgICAgIFwiZGFya2dvbGRlbnJvZFwiOiBcIiNiODg2MGJcIixcbiAgICAgICAgICAgIFwiZGFya2dyYXlcIjogXCIjYTlhOWE5XCIsXG4gICAgICAgICAgICBcImRhcmtncmVlblwiOiBcIiMwMDY0MDBcIixcbiAgICAgICAgICAgIFwiZGFya2toYWtpXCI6IFwiI2JkYjc2YlwiLFxuICAgICAgICAgICAgXCJkYXJrbWFnZW50YVwiOiBcIiM4YjAwOGJcIixcbiAgICAgICAgICAgIFwiZGFya29saXZlZ3JlZW5cIjogXCIjNTU2YjJmXCIsXG4gICAgICAgICAgICBcImRhcmtvcmFuZ2VcIjogXCIjZmY4YzAwXCIsXG4gICAgICAgICAgICBcImRhcmtvcmNoaWRcIjogXCIjOTkzMmNjXCIsXG4gICAgICAgICAgICBcImRhcmtyZWRcIjogXCIjOGIwMDAwXCIsXG4gICAgICAgICAgICBcImRhcmtzYWxtb25cIjogXCIjZTk5NjdhXCIsXG4gICAgICAgICAgICBcImRhcmtzZWFncmVlblwiOiBcIiM4ZmJjOGZcIixcbiAgICAgICAgICAgIFwiZGFya3NsYXRlYmx1ZVwiOiBcIiM0ODNkOGJcIixcbiAgICAgICAgICAgIFwiZGFya3NsYXRlZ3JheVwiOiBcIiMyZjRmNGZcIixcbiAgICAgICAgICAgIFwiZGFya3R1cnF1b2lzZVwiOiBcIiMwMGNlZDFcIixcbiAgICAgICAgICAgIFwiZGFya3Zpb2xldFwiOiBcIiM5NDAwZDNcIixcbiAgICAgICAgICAgIFwiZGVlcHBpbmtcIjogXCIjZmYxNDkzXCIsXG4gICAgICAgICAgICBcImRlZXBza3libHVlXCI6IFwiIzAwYmZmZlwiLFxuICAgICAgICAgICAgXCJkaW1ncmF5XCI6IFwiIzY5Njk2OVwiLFxuICAgICAgICAgICAgXCJkb2RnZXJibHVlXCI6IFwiIzFlOTBmZlwiLFxuICAgICAgICAgICAgXCJmaXJlYnJpY2tcIjogXCIjYjIyMjIyXCIsXG4gICAgICAgICAgICBcImZsb3JhbHdoaXRlXCI6IFwiI2ZmZmFmMFwiLFxuICAgICAgICAgICAgXCJmb3Jlc3RncmVlblwiOiBcIiMyMjhiMjJcIixcbiAgICAgICAgICAgIFwiZnVjaHNpYVwiOiBcIiNmZjAwZmZcIixcbiAgICAgICAgICAgIFwiZ2FpbnNib3JvXCI6IFwiI2RjZGNkY1wiLFxuICAgICAgICAgICAgXCJnaG9zdHdoaXRlXCI6IFwiI2Y4ZjhmZlwiLFxuICAgICAgICAgICAgXCJnb2xkXCI6IFwiI2ZmZDcwMFwiLFxuICAgICAgICAgICAgXCJnb2xkZW5yb2RcIjogXCIjZGFhNTIwXCIsXG4gICAgICAgICAgICBcImdyYXlcIjogXCIjODA4MDgwXCIsXG4gICAgICAgICAgICBcImdyZWVuXCI6IFwiIzAwODAwMFwiLFxuICAgICAgICAgICAgXCJncmVlbnllbGxvd1wiOiBcIiNhZGZmMmZcIixcbiAgICAgICAgICAgIFwiaG9uZXlkZXdcIjogXCIjZjBmZmYwXCIsXG4gICAgICAgICAgICBcImhvdHBpbmtcIjogXCIjZmY2OWI0XCIsXG4gICAgICAgICAgICBcImluZGlhbnJlZCBcIjogXCIjY2Q1YzVjXCIsXG4gICAgICAgICAgICBcImluZGlnb1wiOiBcIiM0YjAwODJcIixcbiAgICAgICAgICAgIFwiaXZvcnlcIjogXCIjZmZmZmYwXCIsXG4gICAgICAgICAgICBcImtoYWtpXCI6IFwiI2YwZTY4Y1wiLFxuICAgICAgICAgICAgXCJsYXZlbmRlclwiOiBcIiNlNmU2ZmFcIixcbiAgICAgICAgICAgIFwibGF2ZW5kZXJibHVzaFwiOiBcIiNmZmYwZjVcIixcbiAgICAgICAgICAgIFwibGF3bmdyZWVuXCI6IFwiIzdjZmMwMFwiLFxuICAgICAgICAgICAgXCJsZW1vbmNoaWZmb25cIjogXCIjZmZmYWNkXCIsXG4gICAgICAgICAgICBcImxpZ2h0Ymx1ZVwiOiBcIiNhZGQ4ZTZcIixcbiAgICAgICAgICAgIFwibGlnaHRjb3JhbFwiOiBcIiNmMDgwODBcIixcbiAgICAgICAgICAgIFwibGlnaHRjeWFuXCI6IFwiI2UwZmZmZlwiLFxuICAgICAgICAgICAgXCJsaWdodGdvbGRlbnJvZHllbGxvd1wiOiBcIiNmYWZhZDJcIixcbiAgICAgICAgICAgIFwibGlnaHRncmV5XCI6IFwiI2QzZDNkM1wiLFxuICAgICAgICAgICAgXCJsaWdodGdyZWVuXCI6IFwiIzkwZWU5MFwiLFxuICAgICAgICAgICAgXCJsaWdodHBpbmtcIjogXCIjZmZiNmMxXCIsXG4gICAgICAgICAgICBcImxpZ2h0c2FsbW9uXCI6IFwiI2ZmYTA3YVwiLFxuICAgICAgICAgICAgXCJsaWdodHNlYWdyZWVuXCI6IFwiIzIwYjJhYVwiLFxuICAgICAgICAgICAgXCJsaWdodHNreWJsdWVcIjogXCIjODdjZWZhXCIsXG4gICAgICAgICAgICBcImxpZ2h0c2xhdGVncmF5XCI6IFwiIzc3ODg5OVwiLFxuICAgICAgICAgICAgXCJsaWdodHN0ZWVsYmx1ZVwiOiBcIiNiMGM0ZGVcIixcbiAgICAgICAgICAgIFwibGlnaHR5ZWxsb3dcIjogXCIjZmZmZmUwXCIsXG4gICAgICAgICAgICBcImxpbWVcIjogXCIjMDBmZjAwXCIsXG4gICAgICAgICAgICBcImxpbWVncmVlblwiOiBcIiMzMmNkMzJcIixcbiAgICAgICAgICAgIFwibGluZW5cIjogXCIjZmFmMGU2XCIsXG4gICAgICAgICAgICBcIm1hZ2VudGFcIjogXCIjZmYwMGZmXCIsXG4gICAgICAgICAgICBcIm1hcm9vblwiOiBcIiM4MDAwMDBcIixcbiAgICAgICAgICAgIFwibWVkaXVtYXF1YW1hcmluZVwiOiBcIiM2NmNkYWFcIixcbiAgICAgICAgICAgIFwibWVkaXVtYmx1ZVwiOiBcIiMwMDAwY2RcIixcbiAgICAgICAgICAgIFwibWVkaXVtb3JjaGlkXCI6IFwiI2JhNTVkM1wiLFxuICAgICAgICAgICAgXCJtZWRpdW1wdXJwbGVcIjogXCIjOTM3MGQ4XCIsXG4gICAgICAgICAgICBcIm1lZGl1bXNlYWdyZWVuXCI6IFwiIzNjYjM3MVwiLFxuICAgICAgICAgICAgXCJtZWRpdW1zbGF0ZWJsdWVcIjogXCIjN2I2OGVlXCIsXG4gICAgICAgICAgICBcIm1lZGl1bXNwcmluZ2dyZWVuXCI6IFwiIzAwZmE5YVwiLFxuICAgICAgICAgICAgXCJtZWRpdW10dXJxdW9pc2VcIjogXCIjNDhkMWNjXCIsXG4gICAgICAgICAgICBcIm1lZGl1bXZpb2xldHJlZFwiOiBcIiNjNzE1ODVcIixcbiAgICAgICAgICAgIFwibWlkbmlnaHRibHVlXCI6IFwiIzE5MTk3MFwiLFxuICAgICAgICAgICAgXCJtaW50Y3JlYW1cIjogXCIjZjVmZmZhXCIsXG4gICAgICAgICAgICBcIm1pc3R5cm9zZVwiOiBcIiNmZmU0ZTFcIixcbiAgICAgICAgICAgIFwibW9jY2FzaW5cIjogXCIjZmZlNGI1XCIsXG4gICAgICAgICAgICBcIm5hdmFqb3doaXRlXCI6IFwiI2ZmZGVhZFwiLFxuICAgICAgICAgICAgXCJuYXZ5XCI6IFwiIzAwMDA4MFwiLFxuICAgICAgICAgICAgXCJvbGRsYWNlXCI6IFwiI2ZkZjVlNlwiLFxuICAgICAgICAgICAgXCJvbGl2ZVwiOiBcIiM4MDgwMDBcIixcbiAgICAgICAgICAgIFwib2xpdmVkcmFiXCI6IFwiIzZiOGUyM1wiLFxuICAgICAgICAgICAgXCJvcmFuZ2VcIjogXCIjZmZhNTAwXCIsXG4gICAgICAgICAgICBcIm9yYW5nZXJlZFwiOiBcIiNmZjQ1MDBcIixcbiAgICAgICAgICAgIFwib3JjaGlkXCI6IFwiI2RhNzBkNlwiLFxuICAgICAgICAgICAgXCJwYWxlZ29sZGVucm9kXCI6IFwiI2VlZThhYVwiLFxuICAgICAgICAgICAgXCJwYWxlZ3JlZW5cIjogXCIjOThmYjk4XCIsXG4gICAgICAgICAgICBcInBhbGV0dXJxdW9pc2VcIjogXCIjYWZlZWVlXCIsXG4gICAgICAgICAgICBcInBhbGV2aW9sZXRyZWRcIjogXCIjZDg3MDkzXCIsXG4gICAgICAgICAgICBcInBhcGF5YXdoaXBcIjogXCIjZmZlZmQ1XCIsXG4gICAgICAgICAgICBcInBlYWNocHVmZlwiOiBcIiNmZmRhYjlcIixcbiAgICAgICAgICAgIFwicGVydVwiOiBcIiNjZDg1M2ZcIixcbiAgICAgICAgICAgIFwicGlua1wiOiBcIiNmZmMwY2JcIixcbiAgICAgICAgICAgIFwicGx1bVwiOiBcIiNkZGEwZGRcIixcbiAgICAgICAgICAgIFwicG93ZGVyYmx1ZVwiOiBcIiNiMGUwZTZcIixcbiAgICAgICAgICAgIFwicHVycGxlXCI6IFwiIzgwMDA4MFwiLFxuICAgICAgICAgICAgXCJyZWRcIjogXCIjZmYwMDAwXCIsXG4gICAgICAgICAgICBcInJvc3licm93blwiOiBcIiNiYzhmOGZcIixcbiAgICAgICAgICAgIFwicm95YWxibHVlXCI6IFwiIzQxNjllMVwiLFxuICAgICAgICAgICAgXCJzYWRkbGVicm93blwiOiBcIiM4YjQ1MTNcIixcbiAgICAgICAgICAgIFwic2FsbW9uXCI6IFwiI2ZhODA3MlwiLFxuICAgICAgICAgICAgXCJzYW5keWJyb3duXCI6IFwiI2Y0YTQ2MFwiLFxuICAgICAgICAgICAgXCJzZWFncmVlblwiOiBcIiMyZThiNTdcIixcbiAgICAgICAgICAgIFwic2Vhc2hlbGxcIjogXCIjZmZmNWVlXCIsXG4gICAgICAgICAgICBcInNpZW5uYVwiOiBcIiNhMDUyMmRcIixcbiAgICAgICAgICAgIFwic2lsdmVyXCI6IFwiI2MwYzBjMFwiLFxuICAgICAgICAgICAgXCJza3libHVlXCI6IFwiIzg3Y2VlYlwiLFxuICAgICAgICAgICAgXCJzbGF0ZWJsdWVcIjogXCIjNmE1YWNkXCIsXG4gICAgICAgICAgICBcInNsYXRlZ3JheVwiOiBcIiM3MDgwOTBcIixcbiAgICAgICAgICAgIFwic25vd1wiOiBcIiNmZmZhZmFcIixcbiAgICAgICAgICAgIFwic3ByaW5nZ3JlZW5cIjogXCIjMDBmZjdmXCIsXG4gICAgICAgICAgICBcInN0ZWVsYmx1ZVwiOiBcIiM0NjgyYjRcIixcbiAgICAgICAgICAgIFwidGFuXCI6IFwiI2QyYjQ4Y1wiLFxuICAgICAgICAgICAgXCJ0ZWFsXCI6IFwiIzAwODA4MFwiLFxuICAgICAgICAgICAgXCJ0aGlzdGxlXCI6IFwiI2Q4YmZkOFwiLFxuICAgICAgICAgICAgXCJ0b21hdG9cIjogXCIjZmY2MzQ3XCIsXG4gICAgICAgICAgICBcInR1cnF1b2lzZVwiOiBcIiM0MGUwZDBcIixcbiAgICAgICAgICAgIFwidmlvbGV0XCI6IFwiI2VlODJlZVwiLFxuICAgICAgICAgICAgXCJ3aGVhdFwiOiBcIiNmNWRlYjNcIixcbiAgICAgICAgICAgIFwid2hpdGVcIjogXCIjZmZmZmZmXCIsXG4gICAgICAgICAgICBcIndoaXRlc21va2VcIjogXCIjZjVmNWY1XCIsXG4gICAgICAgICAgICBcInllbGxvd1wiOiBcIiNmZmZmMDBcIixcbiAgICAgICAgICAgIFwieWVsbG93Z3JlZW5cIjogXCIjOWFjZDMyXCJcbiAgICAgICAgfVtuYW1lLnRvTG93ZXJDYXNlKCldXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIHN0YXRpYyBoZXhUb0Rlc2NyaXB0b3IoYzogc3RyaW5nKTogVUlDb2xvckRlc2NyaXB0b3Ige1xuICAgICAgICBpZiAoY1swXSA9PT0gXCIjXCIpIHtcbiAgICAgICAgICAgIGMgPSBjLnN1YnN0cigxKVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHIgPSBwYXJzZUludChjLnNsaWNlKDAsIDIpLCAxNilcbiAgICAgICAgY29uc3QgZyA9IHBhcnNlSW50KGMuc2xpY2UoMiwgNCksIDE2KVxuICAgICAgICBjb25zdCBiID0gcGFyc2VJbnQoYy5zbGljZSg0LCA2KSwgMTYpXG4gICAgICAgIGNvbnN0IGEgPSBwYXJzZUludChjLnNsaWNlKDYsIDgpLCAxNilcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHsgXCJyZWRcIjogciwgXCJncmVlblwiOiBnLCBcImJsdWVcIjogYiwgXCJhbHBoYVwiOiBhIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgICAgIC8vcmV0dXJuICdyZ2IoJyArIHIgKyAnLCcgKyBnICsgJywnICsgYiArICcpJztcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHN0YXRpYyByZ2JUb0Rlc2NyaXB0b3IoY29sb3JTdHJpbmc6IHN0cmluZykge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGlmIChjb2xvclN0cmluZy5zdGFydHNXaXRoKFwicmdiYShcIikpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29sb3JTdHJpbmcgPSBjb2xvclN0cmluZy5zbGljZSg1LCBjb2xvclN0cmluZy5sZW5ndGggLSAxKVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChjb2xvclN0cmluZy5zdGFydHNXaXRoKFwicmdiKFwiKSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb2xvclN0cmluZyA9IGNvbG9yU3RyaW5nLnNsaWNlKDQsIGNvbG9yU3RyaW5nLmxlbmd0aCAtIDEpICsgXCIsIDBcIlxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBjb25zdCBjb21wb25lbnRzID0gY29sb3JTdHJpbmcuc3BsaXQoXCIsXCIpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgICAgIFwicmVkXCI6IE51bWJlcihjb21wb25lbnRzWzBdKSxcbiAgICAgICAgICAgIFwiZ3JlZW5cIjogTnVtYmVyKGNvbXBvbmVudHNbMV0pLFxuICAgICAgICAgICAgXCJibHVlXCI6IE51bWJlcihjb21wb25lbnRzWzJdKSxcbiAgICAgICAgICAgIFwiYWxwaGFcIjogTnVtYmVyKGNvbXBvbmVudHNbM10pXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgZ2V0IGNvbG9yRGVzY3JpcHRvcigpOiBVSUNvbG9yRGVzY3JpcHRvciB7XG4gICAgICAgIFxuICAgICAgICB2YXIgZGVzY3JpcHRvclxuICAgICAgICBcbiAgICAgICAgY29uc3QgY29sb3JIRVhGcm9tTmFtZSA9IFVJQ29sb3IubmFtZVRvSGV4KHRoaXMuc3RyaW5nVmFsdWUpXG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5zdHJpbmdWYWx1ZS5zdGFydHNXaXRoKFwicmdiXCIpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGRlc2NyaXB0b3IgPSBVSUNvbG9yLnJnYlRvRGVzY3JpcHRvcih0aGlzLnN0cmluZ1ZhbHVlKVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29sb3JIRVhGcm9tTmFtZSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBkZXNjcmlwdG9yID0gVUlDb2xvci5oZXhUb0Rlc2NyaXB0b3IoY29sb3JIRVhGcm9tTmFtZSlcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBkZXNjcmlwdG9yID0gVUlDb2xvci5oZXhUb0Rlc2NyaXB0b3IodGhpcy5zdHJpbmdWYWx1ZSlcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZGVzY3JpcHRvclxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgY29sb3JXaXRoUmVkKHJlZDogbnVtYmVyKSB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IHRoaXMuY29sb3JEZXNjcmlwdG9yXG4gICAgICAgIFxuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgVUlDb2xvcihcInJnYmEoXCIgKyByZWQgKyBcIixcIiArIGRlc2NyaXB0b3IuZ3JlZW4gKyBcIixcIiArIGRlc2NyaXB0b3IuYmx1ZSArIFwiLFwiICtcbiAgICAgICAgICAgIGRlc2NyaXB0b3IuYWxwaGEgKyBcIilcIilcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGNvbG9yV2l0aEdyZWVuKGdyZWVuOiBudW1iZXIpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0gdGhpcy5jb2xvckRlc2NyaXB0b3JcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVSUNvbG9yKFwicmdiYShcIiArIGRlc2NyaXB0b3IucmVkICsgXCIsXCIgKyBncmVlbiArIFwiLFwiICsgZGVzY3JpcHRvci5ibHVlICsgXCIsXCIgK1xuICAgICAgICAgICAgZGVzY3JpcHRvci5hbHBoYSArIFwiKVwiKVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgY29sb3JXaXRoQmx1ZShibHVlOiBudW1iZXIpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0gdGhpcy5jb2xvckRlc2NyaXB0b3JcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVSUNvbG9yKFwicmdiYShcIiArIGRlc2NyaXB0b3IucmVkICsgXCIsXCIgKyBkZXNjcmlwdG9yLmdyZWVuICsgXCIsXCIgKyBibHVlICsgXCIsXCIgK1xuICAgICAgICAgICAgZGVzY3JpcHRvci5hbHBoYSArIFwiKVwiKVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgY29sb3JXaXRoQWxwaGEoYWxwaGE6IG51bWJlcikge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSB0aGlzLmNvbG9yRGVzY3JpcHRvclxuICAgICAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFVJQ29sb3IoXCJyZ2JhKFwiICsgZGVzY3JpcHRvci5yZWQgKyBcIixcIiArIGRlc2NyaXB0b3IuZ3JlZW4gKyBcIixcIiArIGRlc2NyaXB0b3IuYmx1ZSArIFwiLFwiICtcbiAgICAgICAgICAgIGFscGhhICsgXCIpXCIpXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBzdGF0aWMgY29sb3JXaXRoUkdCQShyZWQ6IG51bWJlciwgZ3JlZW46IG51bWJlciwgYmx1ZTogbnVtYmVyLCBhbHBoYTogbnVtYmVyID0gMSkge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVSUNvbG9yKFwicmdiYShcIiArIHJlZCArIFwiLFwiICsgZ3JlZW4gKyBcIixcIiArIGJsdWUgKyBcIixcIiArIGFscGhhICsgXCIpXCIpXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIGNvbG9yV2l0aERlc2NyaXB0b3IoZGVzY3JpcHRvcjogVUlDb2xvckRlc2NyaXB0b3IpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgVUlDb2xvcihcInJnYmEoXCIgKyBkZXNjcmlwdG9yLnJlZC50b0ZpeGVkKDApICsgXCIsXCIgKyBkZXNjcmlwdG9yLmdyZWVuLnRvRml4ZWQoMCkgKyBcIixcIiArXG4gICAgICAgICAgICBkZXNjcmlwdG9yLmJsdWUudG9GaXhlZCgwKSArIFwiLFwiICsgdGhpcy5kZWZhdWx0QWxwaGFUb09uZShkZXNjcmlwdG9yLmFscGhhKSArIFwiKVwiKVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgcHJpdmF0ZSBzdGF0aWMgZGVmYXVsdEFscGhhVG9PbmUodmFsdWUgPSAxKSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkge1xuICAgICAgICAgICAgdmFsdWUgPSAxXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIGNvbG9yQnlNdWx0aXBseWluZ1JHQihtdWx0aXBsaWVyOiBudW1iZXIpIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSB0aGlzLmNvbG9yRGVzY3JpcHRvclxuICAgICAgICBcbiAgICAgICAgZGVzY3JpcHRvci5yZWQgPSBkZXNjcmlwdG9yLnJlZCAqIG11bHRpcGxpZXJcbiAgICAgICAgZGVzY3JpcHRvci5ncmVlbiA9IGRlc2NyaXB0b3IuZ3JlZW4gKiBtdWx0aXBsaWVyXG4gICAgICAgIGRlc2NyaXB0b3IuYmx1ZSA9IGRlc2NyaXB0b3IuYmx1ZSAqIG11bHRpcGxpZXJcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFVJQ29sb3IuY29sb3JXaXRoRGVzY3JpcHRvcihkZXNjcmlwdG9yKVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG59XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vVUlPYmplY3QudHNcIiAvPlxuXG5cblxuXG5jbGFzcyBVSVBvaW50IGV4dGVuZHMgVUlPYmplY3Qge1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB4OiBudW1iZXIsIHB1YmxpYyB5OiBudW1iZXIpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2NsYXNzID0gVUlQb2ludFxuICAgICAgICB0aGlzLnN1cGVyY2xhc3MgPSBVSU9iamVjdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgY29weSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVSVBvaW50KHRoaXMueCwgdGhpcy55KVxuICAgIH1cbiAgICBcbiAgICBcbiAgICBpc0VxdWFsVG8ocG9pbnQ6IFVJUG9pbnQpIHtcbiAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gKHRoaXMueCA9PSBwb2ludC54ICYmIHRoaXMueSA9PSBwb2ludC55KVxuICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBzY2FsZSh6b29tOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgeCA9IHRoaXMueFxuICAgICAgICBjb25zdCB5ID0gdGhpcy55XG4gICAgICAgIHRoaXMueCA9IHggKiB6b29tXG4gICAgICAgIHRoaXMueSA9IHkgKiB6b29tXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIGFkZCh2OiBVSVBvaW50KSB7XG4gICAgICAgIHRoaXMueCA9IHRoaXMueCArIHYueFxuICAgICAgICB0aGlzLnkgPSB0aGlzLnkgKyB2LnlcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgXG4gICAgc3VidHJhY3QodjogVUlQb2ludCkge1xuICAgICAgICB0aGlzLnggPSB0aGlzLnggLSB2LnhcbiAgICAgICAgdGhpcy55ID0gdGhpcy55IC0gdi55XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICAgIFxuICAgIHRvKGI6IFVJUG9pbnQpIHtcbiAgICAgICAgY29uc3QgYSA9IHRoaXNcbiAgICAgICAgY29uc3QgYWIgPSBiLmNvcHkoKS5hZGQoYS5jb3B5KCkuc2NhbGUoLTEpKVxuICAgICAgICByZXR1cm4gYWJcbiAgICB9XG4gICAgXG4gICAgcG9pbnRXaXRoWCh4OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5jb3B5KClcbiAgICAgICAgcmVzdWx0LnggPSB4XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gICAgXG4gICAgcG9pbnRXaXRoWSh5OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5jb3B5KClcbiAgICAgICAgcmVzdWx0LnkgPSB5XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gICAgXG4gICAgcG9pbnRCeUFkZGluZ1goeDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvaW50V2l0aFgodGhpcy54ICsgeClcbiAgICB9XG4gICAgXG4gICAgcG9pbnRCeUFkZGluZ1koeTogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvaW50V2l0aFkodGhpcy55ICsgeSlcbiAgICB9XG4gICAgXG4gICAgXG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueVxuICAgICAgICByZXN1bHQgPSBNYXRoLnNxcnQocmVzdWx0KVxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxuICAgIFxuICAgIFxuICAgIGRpZENoYW5nZShiKSB7XG4gICAgICAgIFxuICAgICAgICAvLyBDYWxsYmFjayB0byBiZSBzZXQgYnkgZGVsZWdhdGVcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxufVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9VSVBvaW50LnRzXCIgLz5cblxuXG5cblxuXG5jbGFzcyBVSVJlY3RhbmdsZSBleHRlbmRzIFVJT2JqZWN0IHtcbiAgICBfaXNCZWluZ1VwZGF0ZWQ6IGJvb2xlYW5cbiAgICByZWN0YW5nbGVQb2ludERpZENoYW5nZTogKGI6IGFueSkgPT4gdm9pZFxuICAgIG1heDogVUlQb2ludFxuICAgIG1pbjogVUlQb2ludFxuICAgIFxuICAgIFxuICAgIGNvbnN0cnVjdG9yKHg6IG51bWJlciA9IDAsIHk6IG51bWJlciA9IDAsIGhlaWdodDogbnVtYmVyID0gMCwgd2lkdGg6IG51bWJlciA9IDApIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2NsYXNzID0gVUlSZWN0YW5nbGVcbiAgICAgICAgdGhpcy5zdXBlcmNsYXNzID0gVUlPYmplY3RcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLm1pbiA9IG5ldyBVSVBvaW50KE51bWJlci5QT1NJVElWRV9JTkZJTklUWSwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKVxuICAgICAgICB0aGlzLm1heCA9IG5ldyBVSVBvaW50KE51bWJlci5ORUdBVElWRV9JTkZJTklUWSwgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5taW4uZGlkQ2hhbmdlID0gdGhpcy5yZWN0YW5nbGVQb2ludERpZENoYW5nZVxuICAgICAgICB0aGlzLm1heC5kaWRDaGFuZ2UgPSB0aGlzLnJlY3RhbmdsZVBvaW50RGlkQ2hhbmdlXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9pc0JlaW5nVXBkYXRlZCA9IE5PXG4gICAgICAgIFxuICAgICAgICB0aGlzLm1pbiA9IG5ldyBVSVBvaW50KHgsIHkpXG4gICAgICAgIHRoaXMubWF4ID0gbmV3IFVJUG9pbnQoeCArIHdpZHRoLCB5ICsgaGVpZ2h0KVxuICAgICAgICBcbiAgICAgICAgaWYgKElTX05JTChoZWlnaHQpKSB7XG4gICAgICAgICAgICB0aGlzLm1heC55ID0gaGVpZ2h0XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChJU19OSUwod2lkdGgpKSB7XG4gICAgICAgICAgICB0aGlzLm1heC54ID0gd2lkdGhcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGNvcHkoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVSVJlY3RhbmdsZSh0aGlzLngsIHRoaXMueSwgdGhpcy5oZWlnaHQsIHRoaXMud2lkdGgpXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gICAgXG4gICAgaXNFcXVhbFRvKHJlY3RhbmdsZTogVUlSZWN0YW5nbGUpIHtcbiAgICBcbiAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gKElTKHJlY3RhbmdsZSkgJiYgdGhpcy5taW4uaXNFcXVhbFRvKHJlY3RhbmdsZS5taW4pICYmIHRoaXMubWF4LmlzRXF1YWxUbyhyZWN0YW5nbGUubWF4KSlcbiAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIHplcm8oKSB7XG4gICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVSVJlY3RhbmdsZSgwLCAwLCAwLCAwKVxuICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBjb250YWluc1BvaW50KHBvaW50OiBVSVBvaW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbi54IDw9IHBvaW50LnggJiYgdGhpcy5taW4ueSA8PSBwb2ludC55ICYmXG4gICAgICAgICAgICBwb2ludC54IDw9IHRoaXMubWF4LnggJiYgcG9pbnQueSA8PSB0aGlzLm1heC55XG4gICAgfVxuICAgIFxuICAgIHVwZGF0ZUJ5QWRkaW5nUG9pbnQocG9pbnQ6IFVJUG9pbnQpIHtcbiAgICAgICAgXG4gICAgICAgIGlmICghcG9pbnQpIHtcbiAgICAgICAgICAgIHBvaW50ID0gbmV3IFVJUG9pbnQoMCwgMClcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5iZWdpblVwZGF0ZXMoKVxuICAgIFxuICAgICAgICBjb25zdCBtaW4gPSB0aGlzLm1pbi5jb3B5KClcbiAgICAgICAgaWYgKG1pbi54ID09PSBuaWwpIHtcbiAgICAgICAgICAgIG1pbi54ID0gdGhpcy5tYXgueFxuICAgICAgICB9XG4gICAgICAgIGlmIChtaW4ueSA9PT0gbmlsKSB7XG4gICAgICAgICAgICBtaW4ueSA9IHRoaXMubWF4LnlcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBjb25zdCBtYXggPSB0aGlzLm1heC5jb3B5KClcbiAgICAgICAgaWYgKG1heC54ID09PSBuaWwpIHtcbiAgICAgICAgICAgIG1heC54ID0gdGhpcy5taW4ueFxuICAgICAgICB9XG4gICAgICAgIGlmIChtYXgueSA9PT0gbmlsKSB7XG4gICAgICAgICAgICBtYXgueSA9IHRoaXMubWluLnlcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5taW4ueCA9IE1hdGgubWluKG1pbi54LCBwb2ludC54KVxuICAgICAgICB0aGlzLm1pbi55ID0gTWF0aC5taW4obWluLnksIHBvaW50LnkpXG4gICAgICAgIHRoaXMubWF4LnggPSBNYXRoLm1heChtYXgueCwgcG9pbnQueClcbiAgICAgICAgdGhpcy5tYXgueSA9IE1hdGgubWF4KG1heC55LCBwb2ludC55KVxuICAgICAgICBcbiAgICAgICAgdGhpcy5maW5pc2hVcGRhdGVzKClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGdldCBoZWlnaHQoKSB7XG4gICAgICAgIGlmICh0aGlzLm1heC55ID09PSBuaWwpIHtcbiAgICAgICAgICAgIHJldHVybiBuaWxcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5tYXgueSAtIHRoaXMubWluLnlcbiAgICB9XG4gICAgXG4gICAgc2V0IGhlaWdodChoZWlnaHQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLm1heC55ID0gdGhpcy5taW4ueSArIGhlaWdodFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBnZXQgd2lkdGgoKSB7XG4gICAgICAgIGlmICh0aGlzLm1heC54ID09PSBuaWwpIHtcbiAgICAgICAgICAgIHJldHVybiBuaWxcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5tYXgueCAtIHRoaXMubWluLnhcbiAgICB9XG4gICAgXG4gICAgc2V0IHdpZHRoKHdpZHRoOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5tYXgueCA9IHRoaXMubWluLnggKyB3aWR0aFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBnZXQgeCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWluLnhcbiAgICB9XG4gICAgXG4gICAgc2V0IHgoeDogbnVtYmVyKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmJlZ2luVXBkYXRlcygpXG4gICAgXG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy53aWR0aFxuICAgICAgICB0aGlzLm1pbi54ID0geFxuICAgICAgICB0aGlzLm1heC54ID0gdGhpcy5taW4ueCArIHdpZHRoXG4gICAgICAgIFxuICAgICAgICB0aGlzLmZpbmlzaFVwZGF0ZXMoKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgZ2V0IHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbi55XG4gICAgfVxuICAgIFxuICAgIFxuICAgIHNldCB5KHk6IG51bWJlcikge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5iZWdpblVwZGF0ZXMoKVxuICAgIFxuICAgICAgICBjb25zdCBoZWlnaHQgPSB0aGlzLmhlaWdodFxuICAgICAgICB0aGlzLm1pbi55ID0geVxuICAgICAgICB0aGlzLm1heC55ID0gdGhpcy5taW4ueSArIGhlaWdodFxuICAgICAgICBcbiAgICAgICAgdGhpcy5maW5pc2hVcGRhdGVzKClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGdldCB0b3BMZWZ0KCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMubWluLmNvcHkoKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgZ2V0IHRvcFJpZ2h0KCkge1xuICAgICAgICByZXR1cm4gbmV3IFVJUG9pbnQodGhpcy5tYXgueCwgdGhpcy55KVxuICAgIH1cbiAgICBcbiAgICBnZXQgYm90dG9tTGVmdCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVSVBvaW50KHRoaXMueCwgdGhpcy5tYXgueSlcbiAgICB9XG4gICAgXG4gICAgZ2V0IGJvdHRvbVJpZ2h0KCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMubWF4LmNvcHkoKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgZ2V0IGNlbnRlcigpIHtcbiAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5taW4uY29weSgpLmFkZCh0aGlzLm1pbi50byh0aGlzLm1heCkuc2NhbGUoMC41KSlcbiAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc2V0IGNlbnRlcihjZW50ZXI6IFVJUG9pbnQpIHtcbiAgICBcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5jZW50ZXIudG8oY2VudGVyKVxuICAgICAgICB0aGlzLm9mZnNldEJ5UG9pbnQob2Zmc2V0KVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgb2Zmc2V0QnlQb2ludChvZmZzZXQ6IFVJUG9pbnQpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMubWluLmFkZChvZmZzZXQpXG4gICAgICAgIHRoaXMubWF4LmFkZChvZmZzZXQpXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgY29uY2F0ZW5hdGVXaXRoUmVjdGFuZ2xlKHJlY3RhbmdsZTogVUlSZWN0YW5nbGUpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudXBkYXRlQnlBZGRpbmdQb2ludChyZWN0YW5nbGUuYm90dG9tUmlnaHQpXG4gICAgICAgIHRoaXMudXBkYXRlQnlBZGRpbmdQb2ludChyZWN0YW5nbGUudG9wTGVmdClcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBpbnRlcnNlY3Rpb25SZWN0YW5nbGVXaXRoUmVjdGFuZ2xlKHJlY3RhbmdsZTogVUlSZWN0YW5nbGUpOiBVSVJlY3RhbmdsZSB7XG4gICAgXG4gICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuY29weSgpXG4gICAgXG4gICAgICAgIHJlc3VsdC5iZWdpblVwZGF0ZXMoKVxuICAgIFxuICAgICAgICBjb25zdCBtaW4gPSByZXN1bHQubWluXG4gICAgICAgIGlmIChtaW4ueCA9PT0gbmlsKSB7XG4gICAgICAgICAgICBtaW4ueCA9IHJlY3RhbmdsZS5tYXgueCAtIE1hdGgubWluKHJlc3VsdC53aWR0aCwgcmVjdGFuZ2xlLndpZHRoKVxuICAgICAgICB9XG4gICAgICAgIGlmIChtaW4ueSA9PT0gbmlsKSB7XG4gICAgICAgICAgICBtaW4ueSA9IHJlY3RhbmdsZS5tYXgueSAtIE1hdGgubWluKHJlc3VsdC5oZWlnaHQsIHJlY3RhbmdsZS5oZWlnaHQpXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgY29uc3QgbWF4ID0gcmVzdWx0Lm1heFxuICAgICAgICBpZiAobWF4LnggPT09IG5pbCkge1xuICAgICAgICAgICAgbWF4LnggPSByZWN0YW5nbGUubWluLnggKyBNYXRoLm1pbihyZXN1bHQud2lkdGgsIHJlY3RhbmdsZS53aWR0aClcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4LnkgPT09IG5pbCkge1xuICAgICAgICAgICAgbWF4LnkgPSByZWN0YW5nbGUubWluLnkgKyBNYXRoLm1pbihyZXN1bHQuaGVpZ2h0LCByZWN0YW5nbGUuaGVpZ2h0KVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXN1bHQubWluLnggPSBNYXRoLm1heChyZXN1bHQubWluLngsIHJlY3RhbmdsZS5taW4ueClcbiAgICAgICAgcmVzdWx0Lm1pbi55ID0gTWF0aC5tYXgocmVzdWx0Lm1pbi55LCByZWN0YW5nbGUubWluLnkpXG4gICAgICAgIHJlc3VsdC5tYXgueCA9IE1hdGgubWluKHJlc3VsdC5tYXgueCwgcmVjdGFuZ2xlLm1heC54KVxuICAgICAgICByZXN1bHQubWF4LnkgPSBNYXRoLm1pbihyZXN1bHQubWF4LnksIHJlY3RhbmdsZS5tYXgueSlcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpZiAocmVzdWx0LmhlaWdodCA8IDApIHtcbiAgICBcbiAgICAgICAgICAgIGNvbnN0IGF2ZXJhZ2VZID0gKHRoaXMuY2VudGVyLnkgKyByZWN0YW5nbGUuY2VudGVyLnkpICogMC41XG4gICAgICAgICAgICByZXN1bHQubWluLnkgPSBhdmVyYWdlWVxuICAgICAgICAgICAgcmVzdWx0Lm1heC55ID0gYXZlcmFnZVlcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAocmVzdWx0LndpZHRoIDwgMCkge1xuICAgIFxuICAgICAgICAgICAgY29uc3QgYXZlcmFnZVggPSAodGhpcy5jZW50ZXIueCArIHJlY3RhbmdsZS5jZW50ZXIueCkgKiAwLjVcbiAgICAgICAgICAgIHJlc3VsdC5taW4ueCA9IGF2ZXJhZ2VYXG4gICAgICAgICAgICByZXN1bHQubWF4LnggPSBhdmVyYWdlWFxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJlc3VsdC5maW5pc2hVcGRhdGVzKClcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIGdldCBhcmVhKCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmhlaWdodCAqIHRoaXMud2lkdGhcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBpbnRlcnNlY3RzV2l0aFJlY3RhbmdsZShyZWN0YW5nbGU6IFVJUmVjdGFuZ2xlKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gKHRoaXMuaW50ZXJzZWN0aW9uUmVjdGFuZ2xlV2l0aFJlY3RhbmdsZShyZWN0YW5nbGUpLmFyZWEgIT0gMClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIC8vIGFkZCBzb21lIHNwYWNlIGFyb3VuZCB0aGUgcmVjdGFuZ2xlXG4gICAgcmVjdGFuZ2xlV2l0aEluc2V0cyhsZWZ0OiBudW1iZXIsIHJpZ2h0OiBudW1iZXIsIGJvdHRvbTogbnVtYmVyLCB0b3A6IG51bWJlcikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmNvcHkoKVxuICAgICAgICByZXN1bHQubWluLnggPSB0aGlzLm1pbi54ICsgbGVmdFxuICAgICAgICByZXN1bHQubWF4LnggPSB0aGlzLm1heC54IC0gcmlnaHRcbiAgICAgICAgcmVzdWx0Lm1pbi55ID0gdGhpcy5taW4ueSArIHRvcFxuICAgICAgICByZXN1bHQubWF4LnkgPSB0aGlzLm1heC55IC0gYm90dG9tXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gICAgXG4gICAgcmVjdGFuZ2xlV2l0aEluc2V0KGluc2V0OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5yZWN0YW5nbGVXaXRoSW5zZXRzKGluc2V0LCBpbnNldCwgaW5zZXQsIGluc2V0KVxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxuICAgIFxuICAgIHJlY3RhbmdsZVdpdGhIZWlnaHQoaGVpZ2h0OiBudW1iZXIsIGNlbnRlcmVkT25Qb3NpdGlvbjogbnVtYmVyID0gbmlsKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAoaXNOYU4oY2VudGVyZWRPblBvc2l0aW9uKSkge1xuICAgICAgICAgICAgY2VudGVyZWRPblBvc2l0aW9uID0gbmlsXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5jb3B5KClcbiAgICAgICAgcmVzdWx0LmhlaWdodCA9IGhlaWdodFxuICAgICAgICBcbiAgICAgICAgaWYgKGNlbnRlcmVkT25Qb3NpdGlvbiAhPSBuaWwpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZSA9IGhlaWdodCAtIHRoaXMuaGVpZ2h0XG4gICAgICAgICAgICByZXN1bHQub2Zmc2V0QnlQb2ludChuZXcgVUlQb2ludCgwLCBjaGFuZ2UgKiBjZW50ZXJlZE9uUG9zaXRpb24pLnNjYWxlKC0xKSlcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgcmVjdGFuZ2xlV2l0aFdpZHRoKHdpZHRoOiBudW1iZXIsIGNlbnRlcmVkT25Qb3NpdGlvbjogbnVtYmVyID0gbmlsKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAoaXNOYU4oY2VudGVyZWRPblBvc2l0aW9uKSkge1xuICAgICAgICAgICAgY2VudGVyZWRPblBvc2l0aW9uID0gbmlsXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5jb3B5KClcbiAgICAgICAgcmVzdWx0LndpZHRoID0gd2lkdGhcbiAgICAgICAgXG4gICAgICAgIGlmIChjZW50ZXJlZE9uUG9zaXRpb24gIT0gbmlsKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFuZ2UgPSB3aWR0aCAtIHRoaXMud2lkdGhcbiAgICAgICAgICAgIHJlc3VsdC5vZmZzZXRCeVBvaW50KG5ldyBVSVBvaW50KGNoYW5nZSAqIGNlbnRlcmVkT25Qb3NpdGlvbiwgMCkuc2NhbGUoLTEpKVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICByZWN0YW5nbGVXaXRoSGVpZ2h0UmVsYXRpdmVUb1dpZHRoKGhlaWdodFJhdGlvOiBudW1iZXIgPSAxLCBjZW50ZXJlZE9uUG9zaXRpb246IG51bWJlciA9IG5pbCkge1xuICAgIFxuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnJlY3RhbmdsZVdpdGhIZWlnaHQodGhpcy53aWR0aCAqIGhlaWdodFJhdGlvLCBjZW50ZXJlZE9uUG9zaXRpb24pXG4gICAgXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHJlY3RhbmdsZVdpdGhXaWR0aFJlbGF0aXZlVG9IZWlnaHQod2lkdGhSYXRpbzogbnVtYmVyID0gMSwgY2VudGVyZWRPblBvc2l0aW9uOiBudW1iZXIgPSBuaWwpIHtcbiAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5yZWN0YW5nbGVXaXRoV2lkdGgodGhpcy5oZWlnaHQgKiB3aWR0aFJhdGlvLCBjZW50ZXJlZE9uUG9zaXRpb24pXG4gICAgXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHJlY3RhbmdsZVdpdGhYKHg6IG51bWJlciwgY2VudGVyZWRPblBvc2l0aW9uOiBudW1iZXIgPSAwKSB7XG4gICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuY29weSgpXG4gICAgICAgIHJlc3VsdC54ID0geCAtIHJlc3VsdC53aWR0aCAqIGNlbnRlcmVkT25Qb3NpdGlvblxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgcmVjdGFuZ2xlV2l0aFkoeTogbnVtYmVyLCBjZW50ZXJlZE9uUG9zaXRpb246IG51bWJlciA9IDApIHtcbiAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5jb3B5KClcbiAgICAgICAgcmVzdWx0LnkgPSB5IC0gcmVzdWx0LmhlaWdodCAqIGNlbnRlcmVkT25Qb3NpdGlvblxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgcmVjdGFuZ2xlQnlBZGRpbmdYKHg6IG51bWJlcikge1xuICAgIFxuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmNvcHkoKVxuICAgICAgICByZXN1bHQueCA9IHRoaXMueCArIHhcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHJlY3RhbmdsZUJ5QWRkaW5nWSh5OiBudW1iZXIpIHtcbiAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5jb3B5KClcbiAgICAgICAgcmVzdWx0LnkgPSB0aGlzLnkgKyB5XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICByZWN0YW5nbGVzQnlTcGxpdHRpbmdXaWR0aChcbiAgICAgICAgd2VpZ2h0czogbnVtYmVyW10sXG4gICAgICAgIHBhZGRpbmdzOiBudW1iZXIgfCBudW1iZXJbXSA9IDAsXG4gICAgICAgIGFic29sdXRlV2lkdGhzOiBudW1iZXIgfCBudW1iZXJbXSA9IG5pbFxuICAgICkge1xuICAgICAgICBcbiAgICAgICAgaWYgKElTX05JTChwYWRkaW5ncykpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcGFkZGluZ3MgPSAxXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKCEocGFkZGluZ3MgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcGFkZGluZ3MgPSBbcGFkZGluZ3NdLmFycmF5QnlSZXBlYXRpbmcod2VpZ2h0cy5sZW5ndGggLSAxKVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHBhZGRpbmdzID0gcGFkZGluZ3MuYXJyYXlCeVRyaW1taW5nVG9MZW5ndGhJZkxvbmdlcih3ZWlnaHRzLmxlbmd0aCAtIDEpXG4gICAgICAgIFxuICAgICAgICBpZiAoIShhYnNvbHV0ZVdpZHRocyBpbnN0YW5jZW9mIEFycmF5KSAmJiBJU19OT1RfTklMKGFic29sdXRlV2lkdGhzKSkge1xuICAgICAgICAgICAgYWJzb2x1dGVXaWR0aHMgPSBbYWJzb2x1dGVXaWR0aHNdLmFycmF5QnlSZXBlYXRpbmcod2VpZ2h0cy5sZW5ndGgpXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0OiBVSVJlY3RhbmdsZVtdID0gW11cbiAgICAgICAgY29uc3Qgc3VtT2ZXZWlnaHRzID0gd2VpZ2h0cy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIsIGluZGV4KSB7XG4gICAgICAgICAgICBpZiAoSVNfTk9UX05JTChhYnNvbHV0ZVdpZHRoc1tpbmRleF0pKSB7XG4gICAgICAgICAgICAgICAgYiA9IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhICsgYlxuICAgICAgICB9LCAwKVxuICAgICAgICBjb25zdCBzdW1PZlBhZGRpbmdzID0gcGFkZGluZ3Muc3VtbWVkVmFsdWVcbiAgICAgICAgY29uc3Qgc3VtT2ZBYnNvbHV0ZVdpZHRocyA9IChhYnNvbHV0ZVdpZHRocyBhcyBudW1iZXJbXSkuc3VtbWVkVmFsdWVcbiAgICAgICAgY29uc3QgdG90YWxSZWxhdGl2ZVdpZHRoID0gdGhpcy53aWR0aCAtIHN1bU9mUGFkZGluZ3MgLSBzdW1PZkFic29sdXRlV2lkdGhzXG4gICAgICAgIHZhciBwcmV2aW91c0NlbGxNYXhYID0gdGhpcy54XG4gICAgXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd2VpZ2h0cy5sZW5ndGg7IGkrKykge1xuICAgIFxuICAgICAgICAgICAgdmFyIHJlc3VsdFdpZHRoOiBudW1iZXJcbiAgICAgICAgICAgIGlmIChJU19OT1RfTklMKGFic29sdXRlV2lkdGhzW2ldKSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJlc3VsdFdpZHRoID0gYWJzb2x1dGVXaWR0aHNbaV0gfHwgMFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmVzdWx0V2lkdGggPSB0b3RhbFJlbGF0aXZlV2lkdGggKiAod2VpZ2h0c1tpXSAvIHN1bU9mV2VpZ2h0cylcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGNvbnN0IHJlY3RhbmdsZSA9IHRoaXMucmVjdGFuZ2xlV2l0aFdpZHRoKHJlc3VsdFdpZHRoKVxuICAgIFxuICAgICAgICAgICAgdmFyIHBhZGRpbmcgPSAwXG4gICAgICAgICAgICBpZiAocGFkZGluZ3MubGVuZ3RoID4gaSAmJiBwYWRkaW5nc1tpXSkge1xuICAgICAgICAgICAgICAgIHBhZGRpbmcgPSBwYWRkaW5nc1tpXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZWN0YW5nbGUueCA9IHByZXZpb3VzQ2VsbE1heFhcbiAgICAgICAgICAgIHByZXZpb3VzQ2VsbE1heFggPSByZWN0YW5nbGUubWF4LnggKyBwYWRkaW5nXG4gICAgICAgICAgICAvL3JlY3RhbmdsZSA9IHJlY3RhbmdsZS5yZWN0YW5nbGVXaXRoSW5zZXRzKDAsIHBhZGRpbmcsIDAsIDApO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gocmVjdGFuZ2xlKVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHJlY3RhbmdsZXNCeVNwbGl0dGluZ0hlaWdodChcbiAgICAgICAgd2VpZ2h0czogbnVtYmVyW10sXG4gICAgICAgIHBhZGRpbmdzOiBudW1iZXIgfCBudW1iZXJbXSA9IDAsXG4gICAgICAgIGFic29sdXRlSGVpZ2h0czogbnVtYmVyIHwgbnVtYmVyW10gPSBuaWxcbiAgICApIHtcbiAgICAgICAgXG4gICAgICAgIGlmIChJU19OSUwocGFkZGluZ3MpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHBhZGRpbmdzID0gMVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICghKHBhZGRpbmdzIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHBhZGRpbmdzID0gW3BhZGRpbmdzXS5hcnJheUJ5UmVwZWF0aW5nKHdlaWdodHMubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBwYWRkaW5ncyA9IHBhZGRpbmdzLmFycmF5QnlUcmltbWluZ1RvTGVuZ3RoSWZMb25nZXIod2VpZ2h0cy5sZW5ndGggLSAxKVxuICAgICAgICBcbiAgICAgICAgaWYgKCEoYWJzb2x1dGVIZWlnaHRzIGluc3RhbmNlb2YgQXJyYXkpICYmIElTX05PVF9OSUwoYWJzb2x1dGVIZWlnaHRzKSkge1xuICAgICAgICAgICAgYWJzb2x1dGVIZWlnaHRzID0gW2Fic29sdXRlSGVpZ2h0c10uYXJyYXlCeVJlcGVhdGluZyh3ZWlnaHRzLmxlbmd0aClcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBjb25zdCByZXN1bHQ6IFVJUmVjdGFuZ2xlW10gPSBbXVxuICAgICAgICBjb25zdCBzdW1PZldlaWdodHMgPSB3ZWlnaHRzLnJlZHVjZShmdW5jdGlvbiAoYSwgYiwgaW5kZXgpIHtcbiAgICAgICAgICAgIGlmIChJU19OT1RfTklMKGFic29sdXRlSGVpZ2h0c1tpbmRleF0pKSB7XG4gICAgICAgICAgICAgICAgYiA9IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhICsgYlxuICAgICAgICB9LCAwKVxuICAgICAgICBjb25zdCBzdW1PZlBhZGRpbmdzID0gcGFkZGluZ3Muc3VtbWVkVmFsdWVcbiAgICAgICAgY29uc3Qgc3VtT2ZBYnNvbHV0ZUhlaWdodHMgPSAoYWJzb2x1dGVIZWlnaHRzIGFzIG51bWJlcltdKS5zdW1tZWRWYWx1ZVxuICAgICAgICBjb25zdCB0b3RhbFJlbGF0aXZlSGVpZ2h0ID0gdGhpcy5oZWlnaHQgLSBzdW1PZlBhZGRpbmdzIC0gc3VtT2ZBYnNvbHV0ZUhlaWdodHNcbiAgICAgICAgdmFyIHByZXZpb3VzQ2VsbE1heFkgPSB0aGlzLnlcbiAgICBcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3ZWlnaHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0SGVpZ2h0OiBudW1iZXJcbiAgICAgICAgICAgIGlmIChJU19OT1RfTklMKGFic29sdXRlSGVpZ2h0c1tpXSkpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXN1bHRIZWlnaHQgPSBhYnNvbHV0ZUhlaWdodHNbaV0gfHwgMFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmVzdWx0SGVpZ2h0ID0gdG90YWxSZWxhdGl2ZUhlaWdodCAqICh3ZWlnaHRzW2ldIC8gc3VtT2ZXZWlnaHRzKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgY29uc3QgcmVjdGFuZ2xlID0gdGhpcy5yZWN0YW5nbGVXaXRoSGVpZ2h0KHJlc3VsdEhlaWdodClcbiAgICBcbiAgICAgICAgICAgIHZhciBwYWRkaW5nID0gMFxuICAgICAgICAgICAgaWYgKHBhZGRpbmdzLmxlbmd0aCA+IGkgJiYgcGFkZGluZ3NbaV0pIHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nID0gcGFkZGluZ3NbaV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVjdGFuZ2xlLnkgPSBwcmV2aW91c0NlbGxNYXhZXG4gICAgICAgICAgICBwcmV2aW91c0NlbGxNYXhZID0gcmVjdGFuZ2xlLm1heC55ICsgcGFkZGluZ1xuICAgICAgICAgICAgLy9yZWN0YW5nbGUgPSByZWN0YW5nbGUucmVjdGFuZ2xlV2l0aEluc2V0cygwLCAwLCBwYWRkaW5nLCAwKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHJlY3RhbmdsZSlcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgcmVjdGFuZ2xlc0J5RXF1YWxseVNwbGl0dGluZ1dpZHRoKG51bWJlck9mRnJhbWVzOiBudW1iZXIsIHBhZGRpbmc6IG51bWJlciA9IDApIHtcbiAgICAgICAgY29uc3QgcmVzdWx0OiBVSVJlY3RhbmdsZVtdID0gW11cbiAgICAgICAgY29uc3QgdG90YWxQYWRkaW5nID0gcGFkZGluZyAqIChudW1iZXJPZkZyYW1lcyAtIDEpXG4gICAgICAgIGNvbnN0IHJlc3VsdFdpZHRoID0gKHRoaXMud2lkdGggLSB0b3RhbFBhZGRpbmcpIC8gbnVtYmVyT2ZGcmFtZXNcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1iZXJPZkZyYW1lczsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCByZWN0YW5nbGUgPSB0aGlzLnJlY3RhbmdsZVdpdGhXaWR0aChyZXN1bHRXaWR0aCwgaSAvIChudW1iZXJPZkZyYW1lcyAtIDEpKVxuICAgICAgICAgICAgcmVzdWx0LnB1c2gocmVjdGFuZ2xlKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gICAgXG4gICAgcmVjdGFuZ2xlc0J5RXF1YWxseVNwbGl0dGluZ0hlaWdodChudW1iZXJPZkZyYW1lczogbnVtYmVyLCBwYWRkaW5nOiBudW1iZXIgPSAwKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdDogVUlSZWN0YW5nbGVbXSA9IFtdXG4gICAgICAgIGNvbnN0IHRvdGFsUGFkZGluZyA9IHBhZGRpbmcgKiAobnVtYmVyT2ZGcmFtZXMgLSAxKVxuICAgICAgICBjb25zdCByZXN1bHRIZWlnaHQgPSAodGhpcy5oZWlnaHQgLSB0b3RhbFBhZGRpbmcpIC8gbnVtYmVyT2ZGcmFtZXNcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1iZXJPZkZyYW1lczsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCByZWN0YW5nbGUgPSB0aGlzLnJlY3RhbmdsZVdpdGhIZWlnaHQocmVzdWx0SGVpZ2h0LCBpIC8gKG51bWJlck9mRnJhbWVzIC0gMSkpXG4gICAgICAgICAgICByZXN1bHQucHVzaChyZWN0YW5nbGUpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBkaXN0cmlidXRlVmlld3NBbG9uZ1dpZHRoKFxuICAgICAgICB2aWV3czogVUlWaWV3W10sXG4gICAgICAgIHdlaWdodHM6IG51bWJlciB8IG51bWJlcltdID0gMSxcbiAgICAgICAgcGFkZGluZ3M/OiBudW1iZXIgfCBudW1iZXJbXSxcbiAgICAgICAgYWJzb2x1dGVXaWR0aHM/OiBudW1iZXIgfCBudW1iZXJbXVxuICAgICkge1xuICAgICAgICBcbiAgICAgICAgaWYgKCEod2VpZ2h0cyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgICAgICAgd2VpZ2h0cyA9IFt3ZWlnaHRzXS5hcnJheUJ5UmVwZWF0aW5nKHZpZXdzLmxlbmd0aClcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBjb25zdCBmcmFtZXMgPSB0aGlzLnJlY3RhbmdsZXNCeVNwbGl0dGluZ1dpZHRoKHdlaWdodHMsIHBhZGRpbmdzLCBhYnNvbHV0ZVdpZHRocylcbiAgICBcbiAgICAgICAgZnJhbWVzLmZvckVhY2goZnVuY3Rpb24gKGZyYW1lLCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgICAgIHZpZXdzW2luZGV4XS5mcmFtZSA9IGZyYW1lXG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgZGlzdHJpYnV0ZVZpZXdzQWxvbmdIZWlnaHQoXG4gICAgICAgIHZpZXdzOiBVSVZpZXdbXSxcbiAgICAgICAgd2VpZ2h0czogbnVtYmVyIHwgbnVtYmVyW10gPSAxLFxuICAgICAgICBwYWRkaW5ncz86IG51bWJlciB8IG51bWJlcltdLFxuICAgICAgICBhYnNvbHV0ZUhlaWdodHM/OiBudW1iZXIgfCBudW1iZXJbXVxuICAgICkge1xuICAgICAgICBcbiAgICAgICAgaWYgKCEod2VpZ2h0cyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgICAgICAgd2VpZ2h0cyA9IFt3ZWlnaHRzXS5hcnJheUJ5UmVwZWF0aW5nKHZpZXdzLmxlbmd0aClcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBjb25zdCBmcmFtZXMgPSB0aGlzLnJlY3RhbmdsZXNCeVNwbGl0dGluZ0hlaWdodCh3ZWlnaHRzLCBwYWRkaW5ncywgYWJzb2x1dGVIZWlnaHRzKVxuICAgIFxuICAgICAgICBmcmFtZXMuZm9yRWFjaChmdW5jdGlvbiAoZnJhbWUsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgdmlld3NbaW5kZXhdLmZyYW1lID0gZnJhbWVcbiAgICAgICAgfSlcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBkaXN0cmlidXRlVmlld3NFcXVhbGx5QWxvbmdXaWR0aCh2aWV3czogVUlWaWV3W10sIHBhZGRpbmc6IG51bWJlcikge1xuICAgIFxuICAgICAgICBjb25zdCBmcmFtZXMgPSB0aGlzLnJlY3RhbmdsZXNCeUVxdWFsbHlTcGxpdHRpbmdXaWR0aCh2aWV3cy5sZW5ndGgsIHBhZGRpbmcpXG4gICAgXG4gICAgICAgIGZyYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChmcmFtZSwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICB2aWV3c1tpbmRleF0uZnJhbWUgPSBmcmFtZVxuICAgICAgICB9KVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGRpc3RyaWJ1dGVWaWV3c0VxdWFsbHlBbG9uZ0hlaWdodCh2aWV3czogVUlWaWV3W10sIHBhZGRpbmc6IG51bWJlcikge1xuICAgIFxuICAgICAgICBjb25zdCBmcmFtZXMgPSB0aGlzLnJlY3RhbmdsZXNCeUVxdWFsbHlTcGxpdHRpbmdIZWlnaHQodmlld3MubGVuZ3RoLCBwYWRkaW5nKVxuICAgIFxuICAgICAgICBmcmFtZXMuZm9yRWFjaChmdW5jdGlvbiAoZnJhbWUsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgdmlld3NbaW5kZXhdLmZyYW1lID0gZnJhbWVcbiAgICAgICAgfSlcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICByZWN0YW5nbGVGb3JOZXh0Um93KHBhZGRpbmc6IG51bWJlciA9IDAsIGhlaWdodCA9IHRoaXMuaGVpZ2h0KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucmVjdGFuZ2xlV2l0aFkodGhpcy5tYXgueSArIHBhZGRpbmcpXG4gICAgICAgIGlmIChoZWlnaHQgIT0gdGhpcy5oZWlnaHQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5oZWlnaHQgPSBoZWlnaHRcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxuICAgIFxuICAgIHJlY3RhbmdsZUZvck5leHRDb2x1bW4ocGFkZGluZzogbnVtYmVyID0gMCwgd2lkdGggPSB0aGlzLndpZHRoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucmVjdGFuZ2xlV2l0aFgodGhpcy5tYXgueCArIHBhZGRpbmcpXG4gICAgICAgIGlmICh3aWR0aCAhPSB0aGlzLndpZHRoKSB7XG4gICAgICAgICAgICByZXN1bHQud2lkdGggPSB3aWR0aFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gICAgXG4gICAgcmVjdGFuZ2xlRm9yUHJldmlvdXNSb3cocGFkZGluZzogbnVtYmVyID0gMCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnJlY3RhbmdsZVdpdGhZKHRoaXMubWluLnkgLSB0aGlzLmhlaWdodCAtIHBhZGRpbmcpXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gICAgXG4gICAgcmVjdGFuZ2xlRm9yUHJldmlvdXNDb2x1bW4ocGFkZGluZzogbnVtYmVyID0gMCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnJlY3RhbmdsZVdpdGhYKHRoaXMubWluLnggLSB0aGlzLndpZHRoIC0gcGFkZGluZylcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICAvLyBCb3VuZGluZyBib3hcbiAgICBzdGF0aWMgYm91bmRpbmdCb3hGb3JQb2ludHMocG9pbnRzKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVSVJlY3RhbmdsZSgpXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHQudXBkYXRlQnlBZGRpbmdQb2ludChwb2ludHNbaV0pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBiZWdpblVwZGF0ZXMoKSB7XG4gICAgICAgIHRoaXMuX2lzQmVpbmdVcGRhdGVkID0gWUVTXG4gICAgfVxuICAgIFxuICAgIGZpbmlzaFVwZGF0ZXMoKSB7XG4gICAgICAgIHRoaXMuX2lzQmVpbmdVcGRhdGVkID0gTk9cbiAgICAgICAgdGhpcy5kaWRDaGFuZ2UoKVxuICAgIH1cbiAgICBcbiAgICBcbiAgICBkaWRDaGFuZ2UoKSB7XG4gICAgICAgIFxuICAgICAgICAvLyBDYWxsYmFjayB0byBiZSBzZXQgYnkgZGVsZWdhdGVcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIF9yZWN0YW5nbGVQb2ludERpZENoYW5nZSgpIHtcbiAgICAgICAgXG4gICAgICAgIGlmICghdGhpcy5faXNCZWluZ1VwZGF0ZWQpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5kaWRDaGFuZ2UoKVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxufVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiIsIi8vLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2F1dG9sYXlvdXQvc3JjL0F1dG9MYXlvdXQuanNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vVUlPYmplY3QudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vVUlDb2xvci50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9VSVJlY3RhbmdsZS50c1wiIC8+XG5cbi8vaW1wb3J0IEF0dHJpYnV0ZSBmcm9tIFwiLi4vYXV0b2xheW91dC9zcmMvQXR0cmlidXRlXCI7XG5cbi8vaW1wb3J0IEF1dG9MYXlvdXQgZnJvbSBcIi4uL2F1dG9sYXlvdXQvc3JjL0F1dG9MYXlvdXRcIjtcblxuXG5cblxuXG5kZWNsYXJlIG1vZHVsZSBBdXRvTGF5b3V0IHtcbiAgICBcbiAgICBcbiAgICBjbGFzcyBDb25zdHJhaW50IHtcbiAgICAgICAgXG4gICAgICAgIFtrZXk6IHN0cmluZ106IGFueVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgY2xhc3MgVmlldyB7XG4gICAgICAgIFxuICAgICAgICBba2V5OiBzdHJpbmddOiBhbnlcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGNsYXNzIFZpc3VhbEZvcm1hdCB7XG4gICAgICAgIFxuICAgICAgICBzdGF0aWMgcGFyc2UoYXJnMDogYW55LCBhcmcxOiBhbnkpOiBhbnk7XG4gICAgICAgIFxuICAgICAgICBba2V5OiBzdHJpbmddOiBhbnlcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGVudW0gQXR0cmlidXRlIHtcbiAgICAgICAgXG4gICAgICAgIExFRlQsIFJJR0hULCBCT1RUT00sIFRPUCwgQ0VOVEVSWCwgQ0VOVEVSWSwgV0lEVEgsIEhFSUdIVCwgWklOREVYLCBWQVJJQUJMRSwgTk9UQU5BVFRSSUJVVEVcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGVudW0gUmVsYXRpb24ge1xuICAgICAgICBcbiAgICAgICAgRVFVLCBMRVEsIEdFUVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG59XG5cblxuXG5cblxuaW50ZXJmYWNlIExvb3NlT2JqZWN0IHtcbiAgICBba2V5OiBzdHJpbmddOiBhbnlcbn1cblxuXG5pbnRlcmZhY2UgQ29udHJvbEV2ZW50VGFyZ2V0c09iamVjdCB7XG4gICAgXG4gICAgW2tleTogc3RyaW5nXTogRnVuY3Rpb25bXTtcbiAgICBcbn1cblxuXG5pbnRlcmZhY2UgVUlWaWV3QnJvYWRjYXN0RXZlbnQge1xuICAgIFxuICAgIG5hbWU6IHN0cmluZztcbiAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IHN0cmluZyB8IHN0cmluZ1tdO1xuICAgIH1cbiAgICBcbn1cblxuXG5cbnR5cGUgVUlWaWV3QWRkQ29udHJvbEV2ZW50VGFyZ2V0T2JqZWN0PFQgZXh0ZW5kcyB0eXBlb2YgVUlWaWV3LmNvbnRyb2xFdmVudD4gPSB7XG4gICAgXG4gICAgW0sgaW4ga2V5b2YgVF06ICgoc2VuZGVyOiBVSVZpZXcsIGV2ZW50OiBFdmVudCkgPT4gdm9pZCkgJiBQYXJ0aWFsPFVJVmlld0FkZENvbnRyb2xFdmVudFRhcmdldE9iamVjdDxUPj5cbiAgICBcbn1cblxuXG5cblxuXG5jbGFzcyBVSVZpZXcgZXh0ZW5kcyBVSU9iamVjdCB7XG4gICAgXG4gICAgX25hdGl2ZVNlbGVjdGlvbkVuYWJsZWQ6IGJvb2xlYW4gPSBZRVNcbiAgICBfc2hvdWxkTGF5b3V0OiBib29sZWFuXG4gICAgX1VJVGFibGVWaWV3Um93SW5kZXg6IG51bWJlclxuICAgIF9VSVRhYmxlVmlld1JldXNhYmlsaXR5SWRlbnRpZmllcjogYW55XG4gICAgX1VJVmlld0ludHJpbnNpY1RlbXBvcmFyeVdpZHRoOiBzdHJpbmdcbiAgICBfVUlWaWV3SW50cmluc2ljVGVtcG9yYXJ5SGVpZ2h0OiBzdHJpbmdcbiAgICBfZW5hYmxlZDogYm9vbGVhbiA9IFlFU1xuICAgIF9mcmFtZTogYW55XG4gICAgX2JhY2tncm91bmRDb2xvcjogVUlDb2xvciA9IFVJQ29sb3IudHJhbnNwYXJlbnRDb2xvclxuICAgIFxuICAgIF92aWV3SFRNTEVsZW1lbnQ6IEhUTUxFbGVtZW50ICYgTG9vc2VPYmplY3RcbiAgICBcbiAgICBfaW5uZXJIVE1MS2V5OiBzdHJpbmdcbiAgICBfZGVmYXVsdElubmVySFRNTDogc3RyaW5nXG4gICAgX3BhcmFtZXRlcnM6IHsgW3g6IHN0cmluZ106IChzdHJpbmcgfCBVSUxvY2FsaXplZFRleHRPYmplY3QpIH1cbiAgICBcbiAgICBfbG9jYWxpemVkVGV4dE9iamVjdDogVUlMb2NhbGl6ZWRUZXh0T2JqZWN0ID0gbmlsXG4gICAgXG4gICAgX2NvbnRyb2xFdmVudFRhcmdldHM6IENvbnRyb2xFdmVudFRhcmdldHNPYmplY3QgPSB7fSAvL3sgXCJQb2ludGVyRG93blwiOiBGdW5jdGlvbltdOyBcIlBvaW50ZXJNb3ZlXCI6IEZ1bmN0aW9uW107IFwiUG9pbnRlckxlYXZlXCI6IEZ1bmN0aW9uW107IFwiUG9pbnRlckVudGVyXCI6IEZ1bmN0aW9uW107IFwiUG9pbnRlclVwSW5zaWRlXCI6IEZ1bmN0aW9uW107IFwiUG9pbnRlclVwXCI6IEZ1bmN0aW9uW107IFwiUG9pbnRlckhvdmVyXCI6IEZ1bmN0aW9uW107IH07XG4gICAgX2ZyYW1lVHJhbnNmb3JtOiBzdHJpbmdcbiAgICBfdmlld0NvbnRyb2xsZXJMYXlvdXRGdW5jdGlvbjogKCkgPT4gdm9pZCA9IG5pbFxuICAgIF9kaWRMYXlvdXRTdWJ2aWV3c0RlbGVnYXRlRnVuY3Rpb246ICgpID0+IHZvaWRcbiAgICBfZGlkUmVjZWl2ZUJyb2FkY2FzdEV2ZW50RGVsZWdhdGVGdW5jdGlvbjogKGV2ZW50OiBVSVZpZXdCcm9hZGNhc3RFdmVudCkgPT4gdm9pZFxuICAgIF91cGRhdGVMYXlvdXRGdW5jdGlvbjogYW55XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIF9jb25zdHJhaW50czogYW55W10gLy9BdXRvTGF5b3V0LkNvbnN0cmFpbnRbXTtcbiAgICBzdXBlcnZpZXc6IFVJVmlld1xuICAgIHN1YnZpZXdzOiBVSVZpZXdbXVxuICAgIF9zdHlsZUNsYXNzZXM6IGFueVtdXG4gICAgX2lzSGlkZGVuOiBib29sZWFuID0gTk9cbiAgICBcbiAgICBwYXVzZXNQb2ludGVyRXZlbnRzOiBib29sZWFuID0gTk9cbiAgICBzdG9wc1BvaW50ZXJFdmVudFByb3BhZ2F0aW9uOiBib29sZWFuID0gWUVTXG4gICAgX2lzUG9pbnRlckluc2lkZTogYm9vbGVhblxuICAgIF9pc1BvaW50ZXJWYWxpZDogYm9vbGVhblxuICAgIF9pbml0aWFsUG9pbnRlclBvc2l0aW9uOiBVSVBvaW50XG4gICAgX2hhc1BvaW50ZXJEcmFnZ2VkOiBib29sZWFuXG4gICAgX3BvaW50ZXJEcmFnVGhyZXNob2xkID0gMlxuICAgIFxuICAgIGlnbm9yZXNUb3VjaGVzOiBib29sZWFuID0gTk9cbiAgICBpZ25vcmVzTW91c2U6IGJvb2xlYW4gPSBOT1xuICAgIFxuICAgIFxuICAgIHN0YXRpYyBfVUlWaWV3SW5kZXg6IG51bWJlciA9IC0xXG4gICAgX1VJVmlld0luZGV4OiBudW1iZXJcbiAgICBcbiAgICBzdGF0aWMgX3ZpZXdzVG9MYXlvdXQ6IFVJVmlld1tdID0gW11cbiAgICBcbiAgICBmb3JjZUludHJpbnNpY1NpemVaZXJvOiBib29sZWFuID0gTk9cbiAgICBfdG91Y2hFdmVudFRpbWU6IG51bWJlclxuICAgIFxuICAgIHN0YXRpYyBfcGFnZVNjYWxlID0gMVxuICAgIFxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBlbGVtZW50SUQ6IHN0cmluZyA9IChcIlVJVmlld1wiICtcbiAgICAgICAgICAgIFVJVmlldy5uZXh0SW5kZXgpLFxuICAgICAgICB2aWV3SFRNTEVsZW1lbnQ6IEhUTUxFbGVtZW50ICYgTG9vc2VPYmplY3QgPSBudWxsLFxuICAgICAgICBlbGVtZW50VHlwZTogc3RyaW5nID0gbnVsbCxcbiAgICAgICAgaW5pdFZpZXdEYXRhPzogYW55XG4gICAgKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlcigpXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9jbGFzcyA9IFVJVmlld1xuICAgICAgICB0aGlzLnN1cGVyY2xhc3MgPSBVSU9iamVjdFxuICAgICAgICBcbiAgICAgICAgLy8gSW5zdGFuY2UgdmFyaWFibGVzXG4gICAgICAgIFxuICAgICAgICBVSVZpZXcuX1VJVmlld0luZGV4ID0gVUlWaWV3Lm5leHRJbmRleFxuICAgICAgICB0aGlzLl9VSVZpZXdJbmRleCA9IFVJVmlldy5fVUlWaWV3SW5kZXhcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3N0eWxlQ2xhc3NlcyA9IFtdXG4gICAgICAgIC8vIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInN0eWxlQ2xhc3Nlc1wiLCB7IGdldDogdGhpcy5zdHlsZUNsYXNzZXMsIHNldDogdGhpcy5zZXRTdHlsZUNsYXNzZXMgfSk7XG4gICAgICAgIC8vIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInN0eWxlQ2xhc3NOYW1lXCIsIHsgZ2V0OiB0aGlzLnN0eWxlQ2xhc3NOYW1lIH0pO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5faW5pdFZpZXdIVE1MRWxlbWVudChlbGVtZW50SUQsIHZpZXdIVE1MRWxlbWVudCwgZWxlbWVudFR5cGUpXG4gICAgICAgIFxuICAgICAgICB0aGlzLnN1YnZpZXdzID0gW11cbiAgICAgICAgdGhpcy5zdXBlcnZpZXcgPSBuaWxcbiAgICAgICAgXG4gICAgICAgIC8vIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImVsZW1lbnRJRFwiLCB7IGdldDogdGhpcy5lbGVtZW50SUQgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjb25zdHJhaW50c1wiLCB7IGdldDogdGhpcy5jb25zdHJhaW50cywgc2V0OiB0aGlzLnNldENvbnN0cmFpbnRzIH0pO1xuICAgICAgICB0aGlzLl9jb25zdHJhaW50cyA9IFtdXG4gICAgICAgIFxuICAgICAgICB0aGlzLl91cGRhdGVMYXlvdXRGdW5jdGlvbiA9IG5pbFxuICAgICAgICBcbiAgICAgICAgLy9PYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJiYWNrZ3JvdW5kQ29sb3JcIiwgeyBnZXQ6IHRoaXMuYmFja2dyb3VuZENvbG9yLCBzZXQ6IHRoaXMuc2V0QmFja2dyb3VuZENvbG9yIH0pO1xuICAgICAgICAvL3RoaXMuYmFja2dyb3VuZENvbG9yID0gXCJ0cmFuc3BhcmVudFwiO1xuICAgICAgICBcbiAgICAgICAgLy8gT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiYWxwaGFcIiwgeyBnZXQ6IHRoaXMuYWxwaGEsIHNldDogdGhpcy5zZXRBbHBoYSB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImZyYW1lXCIsIHsgZ2V0OiB0aGlzLmZyYW1lLCBzZXQ6IHRoaXMuc2V0RnJhbWUgfSk7XG4gICAgICAgIC8vIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImJvdW5kc1wiLCB7IGdldDogdGhpcy5ib3VuZHMsIHNldDogdGhpcy5zZXRCb3VuZHMgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ1c2VySW50ZXJhY3Rpb25FbmFibGVkXCIsIHsgZ2V0OiB0aGlzLnVzZXJJbnRlcmFjdGlvbkVuYWJsZWQsIHNldDogdGhpcy5zZXRVc2VySW50ZXJhY3Rpb25FbmFibGVkIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gdGhpcy5fY29udHJvbEV2ZW50VGFyZ2V0cyA9IHtcbiAgICAgICAgLy8gICAgIFwiUG9pbnRlckRvd25cIjogW10sXG4gICAgICAgIC8vICAgICBcIlBvaW50ZXJNb3ZlXCI6IFtdLFxuICAgICAgICAvLyAgICAgXCJQb2ludGVyTGVhdmVcIjogW10sXG4gICAgICAgIC8vICAgICBcIlBvaW50ZXJFbnRlclwiOiBbXSxcbiAgICAgICAgLy8gICAgIFwiUG9pbnRlclVwSW5zaWRlXCI6IFtdLFxuICAgICAgICAvLyAgICAgXCJQb2ludGVyVXBcIjogW10sXG4gICAgICAgIC8vICAgICBcIlBvaW50ZXJIb3ZlclwiOiBbXVxuICAgICAgICAvLyB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLl9kaWRMYXlvdXRTdWJ2aWV3c0RlbGVnYXRlRnVuY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2ZyYW1lVHJhbnNmb3JtID0gXCJcIlxuICAgICAgICBcbiAgICAgICAgdGhpcy5pbml0Vmlldyh0aGlzLnZpZXdIVE1MRWxlbWVudC5pZCwgdGhpcy52aWV3SFRNTEVsZW1lbnQsIGluaXRWaWV3RGF0YSlcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2luaXRWaWV3Q1NTU2VsZWN0b3JzSWZOZWVkZWQoKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fbG9hZFVJRXZlbnRzKClcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLnNldE5lZWRzTGF5b3V0KClcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBzdGF0aWMgZ2V0IG5leHRJbmRleCgpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBVSVZpZXcuX1VJVmlld0luZGV4ICsgMVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIGdldCBwYWdlSGVpZ2h0KCkge1xuICAgICAgICBcbiAgICAgICAgY29uc3QgYm9keSA9IGRvY3VtZW50LmJvZHlcbiAgICAgICAgY29uc3QgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudFxuICAgICAgICBcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gTWF0aC5tYXgoXG4gICAgICAgICAgICBib2R5LnNjcm9sbEhlaWdodCxcbiAgICAgICAgICAgIGJvZHkub2Zmc2V0SGVpZ2h0LFxuICAgICAgICAgICAgaHRtbC5jbGllbnRIZWlnaHQsXG4gICAgICAgICAgICBodG1sLnNjcm9sbEhlaWdodCxcbiAgICAgICAgICAgIGh0bWwub2Zmc2V0SGVpZ2h0XG4gICAgICAgIClcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBoZWlnaHRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHN0YXRpYyBnZXQgcGFnZVdpZHRoKCkge1xuICAgICAgICBcbiAgICAgICAgY29uc3QgYm9keSA9IGRvY3VtZW50LmJvZHlcbiAgICAgICAgY29uc3QgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudFxuICAgICAgICBcbiAgICAgICAgY29uc3Qgd2lkdGggPSBNYXRoLm1heChib2R5LnNjcm9sbFdpZHRoLCBib2R5Lm9mZnNldFdpZHRoLCBodG1sLmNsaWVudFdpZHRoLCBodG1sLnNjcm9sbFdpZHRoLCBodG1sLm9mZnNldFdpZHRoKVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHdpZHRoXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBpbml0VmlldyhlbGVtZW50SUQ6IHN0cmluZywgdmlld0hUTUxFbGVtZW50OiBIVE1MRWxlbWVudCwgaW5pdFZpZXdEYXRhPzogYW55KSB7XG4gICAgXG4gICAgXG4gICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGNlbnRlckluQ29udGFpbmVyKCkge1xuICAgICAgICB0aGlzLnN0eWxlLmxlZnQgPSBcIjUwJVwiXG4gICAgICAgIHRoaXMuc3R5bGUudG9wID0gXCI1MCVcIlxuICAgICAgICB0aGlzLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlWCgtNTAlKSB0cmFuc2xhdGVZKC01MCUpXCJcbiAgICB9XG4gICAgXG4gICAgY2VudGVyWEluQ29udGFpbmVyKCkge1xuICAgICAgICB0aGlzLnN0eWxlLmxlZnQgPSBcIjUwJVwiXG4gICAgICAgIHRoaXMuc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGVYKC01MCUpXCJcbiAgICB9XG4gICAgXG4gICAgY2VudGVyWUluQ29udGFpbmVyKCkge1xuICAgICAgICB0aGlzLnN0eWxlLnRvcCA9IFwiNTAlXCJcbiAgICAgICAgdGhpcy5zdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZVkoLTUwJSlcIlxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBfaW5pdFZpZXdIVE1MRWxlbWVudChlbGVtZW50SUQsIHZpZXdIVE1MRWxlbWVudCwgZWxlbWVudFR5cGUgPSBcImRpdlwiKSB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgaWYgKCFJUyhlbGVtZW50VHlwZSkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZWxlbWVudFR5cGUgPSBcImRpdlwiXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKCFJUyh2aWV3SFRNTEVsZW1lbnQpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX3ZpZXdIVE1MRWxlbWVudCA9IHRoaXMuY3JlYXRlRWxlbWVudChlbGVtZW50SUQsIGVsZW1lbnRUeXBlKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiXG4gICAgICAgICAgICB0aGlzLnN0eWxlLm1hcmdpbiA9IFwiMFwiXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5fdmlld0hUTUxFbGVtZW50ID0gdmlld0hUTUxFbGVtZW50XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKElTKGVsZW1lbnRJRCkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnZpZXdIVE1MRWxlbWVudC5pZCA9IGVsZW1lbnRJRFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMudmlld0hUTUxFbGVtZW50Lm9iZXlBdXRvbGF5b3V0ID0gWUVTXG4gICAgICAgIFxuICAgICAgICB0aGlzLnZpZXdIVE1MRWxlbWVudC5VSVZpZXcgPSB0aGlzXG4gICAgICAgIFxuICAgICAgICB0aGlzLmFkZFN0eWxlQ2xhc3ModGhpcy5zdHlsZUNsYXNzTmFtZSlcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIHNldCBuYXRpdmVTZWxlY3Rpb25FbmFibGVkKHNlbGVjdGFibGU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5fbmF0aXZlU2VsZWN0aW9uRW5hYmxlZCA9IHNlbGVjdGFibGVcbiAgICAgICAgaWYgKCFzZWxlY3RhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLnN0eWxlLmNzc1RleHQgPSB0aGlzLnN0eWxlLmNzc1RleHQgK1xuICAgICAgICAgICAgICAgIFwiIC13ZWJraXQtdG91Y2gtY2FsbG91dDogbm9uZTsgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTsgLWtodG1sLXVzZXItc2VsZWN0OiBub25lOyAtbW96LXVzZXItc2VsZWN0OiBub25lOyAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7IHVzZXItc2VsZWN0OiBub25lO1wiXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0eWxlLmNzc1RleHQgPSB0aGlzLnN0eWxlLmNzc1RleHQgK1xuICAgICAgICAgICAgICAgIFwiIC13ZWJraXQtdG91Y2gtY2FsbG91dDogdGV4dDsgLXdlYmtpdC11c2VyLXNlbGVjdDogdGV4dDsgLWtodG1sLXVzZXItc2VsZWN0OiB0ZXh0OyAtbW96LXVzZXItc2VsZWN0OiB0ZXh0OyAtbXMtdXNlci1zZWxlY3Q6IHRleHQ7IHVzZXItc2VsZWN0OiB0ZXh0O1wiXG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgXG4gICAgZ2V0IG5hdGl2ZVNlbGVjdGlvbkVuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9uYXRpdmVTZWxlY3Rpb25FbmFibGVkXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIGdldCBzdHlsZUNsYXNzTmFtZSgpIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFwiVUlDb3JlX1VJVmlld19cIiArIHRoaXMuY2xhc3MubmFtZVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgX2luaXRWaWV3Q1NTU2VsZWN0b3JzSWZOZWVkZWQoKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAoIXRoaXMuY2xhc3MuX2FyZVZpZXdDU1NTZWxlY3RvcnNJbml0aWFsaXplZCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmluaXRWaWV3U3R5bGVTZWxlY3RvcnMoKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmNsYXNzLl9hcmVWaWV3Q1NTU2VsZWN0b3JzSW5pdGlhbGl6ZWQgPSBZRVNcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBpbml0Vmlld1N0eWxlU2VsZWN0b3JzKCkge1xuICAgICAgICBcbiAgICAgICAgLy8gT3ZlcnJpZGUgdGhpcyBpbiBhIHN1YmNsYXNzXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBpbml0U3R5bGVTZWxlY3RvcihzZWxlY3Rvciwgc3R5bGUpIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHN0eWxlUnVsZXMgPSBVSVZpZXcuZ2V0U3R5bGVSdWxlcyhzZWxlY3RvcilcbiAgICAgICAgXG4gICAgICAgIGlmICghc3R5bGVSdWxlcykge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBVSVZpZXcuY3JlYXRlU3R5bGVTZWxlY3RvcihzZWxlY3Rvciwgc3R5bGUpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgY3JlYXRlRWxlbWVudChlbGVtZW50SUQsIGVsZW1lbnRUeXBlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50SUQpXG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICByZXN1bHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsZW1lbnRUeXBlKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gICAgXG4gICAgcHVibGljIGdldCB2aWV3SFRNTEVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92aWV3SFRNTEVsZW1lbnRcbiAgICB9XG4gICAgXG4gICAgcHVibGljIGdldCBlbGVtZW50SUQoKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy52aWV3SFRNTEVsZW1lbnQuaWRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHNldElubmVySFRNTChrZXk6IHN0cmluZywgZGVmYXVsdFN0cmluZzogc3RyaW5nLCBwYXJhbWV0ZXJzPzogeyBbeDogc3RyaW5nXTogc3RyaW5nIHwgVUlMb2NhbGl6ZWRUZXh0T2JqZWN0IH0pIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2lubmVySFRNTEtleSA9IGtleVxuICAgICAgICB0aGlzLl9kZWZhdWx0SW5uZXJIVE1MID0gZGVmYXVsdFN0cmluZ1xuICAgICAgICB0aGlzLl9wYXJhbWV0ZXJzID0gcGFyYW1ldGVyc1xuICAgICAgICBcbiAgICAgICAgY29uc3QgbGFuZ3VhZ2VOYW1lID0gVUlDb3JlLmxhbmd1YWdlU2VydmljZS5jdXJyZW50TGFuZ3VhZ2VLZXlcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gVUlDb3JlLmxhbmd1YWdlU2VydmljZS5zdHJpbmdGb3JLZXkoa2V5LCBsYW5ndWFnZU5hbWUsIGRlZmF1bHRTdHJpbmcsIHBhcmFtZXRlcnMpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmlubmVySFRNTCA9IHJlc3VsdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgX3NldElubmVySFRNTEZyb21LZXlJZlBvc3NpYmxlKCkge1xuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuX2lubmVySFRNTEtleSAmJiB0aGlzLl9kZWZhdWx0SW5uZXJIVE1MKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuc2V0SW5uZXJIVE1MKHRoaXMuX2lubmVySFRNTEtleSwgdGhpcy5fZGVmYXVsdElubmVySFRNTCwgdGhpcy5fcGFyYW1ldGVycylcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBfc2V0SW5uZXJIVE1MRnJvbUxvY2FsaXplZFRleHRPYmplY3RJZlBvc3NpYmxlKCkge1xuICAgICAgICBcbiAgICAgICAgaWYgKElTKHRoaXMuX2xvY2FsaXplZFRleHRPYmplY3QpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuaW5uZXJIVE1MID0gVUlDb3JlLmxhbmd1YWdlU2VydmljZS5zdHJpbmdGb3JDdXJyZW50TGFuZ3VhZ2UodGhpcy5fbG9jYWxpemVkVGV4dE9iamVjdClcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBnZXQgbG9jYWxpemVkVGV4dE9iamVjdCgpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzLl9sb2NhbGl6ZWRUZXh0T2JqZWN0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBzZXQgbG9jYWxpemVkVGV4dE9iamVjdChsb2NhbGl6ZWRUZXh0T2JqZWN0OiBVSUxvY2FsaXplZFRleHRPYmplY3QpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2xvY2FsaXplZFRleHRPYmplY3QgPSBsb2NhbGl6ZWRUZXh0T2JqZWN0XG4gICAgICAgIFxuICAgICAgICB0aGlzLl9zZXRJbm5lckhUTUxGcm9tTG9jYWxpemVkVGV4dE9iamVjdElmUG9zc2libGUoKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgZ2V0IGlubmVySFRNTCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld0hUTUxFbGVtZW50LmlubmVySFRNTFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBzZXQgaW5uZXJIVE1MKGlubmVySFRNTCkge1xuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuaW5uZXJIVE1MICE9IGlubmVySFRNTCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnZpZXdIVE1MRWxlbWVudC5pbm5lckhUTUwgPSBGSVJTVChpbm5lckhUTUwsIFwiXCIpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgc2V0IGhvdmVyVGV4dChob3ZlclRleHQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLnZpZXdIVE1MRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLCBob3ZlclRleHQpXG4gICAgfVxuICAgIFxuICAgIGdldCBob3ZlclRleHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdIVE1MRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiKVxuICAgIH1cbiAgICBcbiAgICBcbiAgICBnZXQgc2Nyb2xsU2l6ZSgpIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVSVJlY3RhbmdsZSgwLCAwLCB0aGlzLnZpZXdIVE1MRWxlbWVudC5zY3JvbGxIZWlnaHQsIHRoaXMudmlld0hUTUxFbGVtZW50LnNjcm9sbFdpZHRoKVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgZ2V0IGRpYWxvZ1ZpZXcoKTogVUlEaWFsb2dWaWV3IHtcbiAgICAgICAgaWYgKCFJUyh0aGlzLnN1cGVydmlldykpIHtcbiAgICAgICAgICAgIHJldHVybiBuaWxcbiAgICAgICAgfVxuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVUlEaWFsb2dWaWV3KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3VwZXJ2aWV3LmRpYWxvZ1ZpZXdcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICBcbiAgICBcbiAgICBnZXQgcm9vdFZpZXcoKTogVUlWaWV3IHtcbiAgICAgICAgaWYgKElTKHRoaXMuc3VwZXJ2aWV3KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3VwZXJ2aWV3LnJvb3RWaWV3XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgXG4gICAgXG4gICAgcHVibGljIHNldCBlbmFibGVkKGVuYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5fZW5hYmxlZCA9IGVuYWJsZWRcbiAgICAgICAgdGhpcy51cGRhdGVDb250ZW50Rm9yQ3VycmVudEVuYWJsZWRTdGF0ZSgpXG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBnZXQgZW5hYmxlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuYWJsZWRcbiAgICB9XG4gICAgXG4gICAgdXBkYXRlQ29udGVudEZvckN1cnJlbnRFbmFibGVkU3RhdGUoKSB7XG4gICAgICAgIHRoaXMuaGlkZGVuID0gIXRoaXMuZW5hYmxlZFxuICAgICAgICB0aGlzLnVzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSB0aGlzLmVuYWJsZWRcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgcHVibGljIGdldCB0YWJJbmRleCgpOiBudW1iZXIge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIE51bWJlcih0aGlzLnZpZXdIVE1MRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiKSlcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHB1YmxpYyBzZXQgdGFiSW5kZXgoaW5kZXg6IG51bWJlcikge1xuICAgICAgICBcbiAgICAgICAgdGhpcy52aWV3SFRNTEVsZW1lbnQuc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIiwgXCJcIiArIGluZGV4KVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgZ2V0IHN0eWxlQ2xhc3NlcygpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzLl9zdHlsZUNsYXNzZXNcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHNldCBzdHlsZUNsYXNzZXMoc3R5bGVDbGFzc2VzKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLl9zdHlsZUNsYXNzZXMgPSBzdHlsZUNsYXNzZXNcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGhhc1N0eWxlQ2xhc3Moc3R5bGVDbGFzcykge1xuICAgICAgICBcbiAgICAgICAgLy8gVGhpcyBpcyBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICAgICAgICBpZiAoIUlTKHN0eWxlQ2xhc3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gTk9cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnN0eWxlQ2xhc3Nlcy5pbmRleE9mKHN0eWxlQ2xhc3MpXG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gWUVTXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE5PXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBhZGRTdHlsZUNsYXNzKHN0eWxlQ2xhc3M6IHN0cmluZykge1xuICAgICAgICBcbiAgICAgICAgaWYgKCFJUyhzdHlsZUNsYXNzKSkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICghdGhpcy5oYXNTdHlsZUNsYXNzKHN0eWxlQ2xhc3MpKSB7XG4gICAgICAgICAgICB0aGlzLl9zdHlsZUNsYXNzZXMucHVzaChzdHlsZUNsYXNzKVxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICByZW1vdmVTdHlsZUNsYXNzKHN0eWxlQ2xhc3M6IHN0cmluZykge1xuICAgICAgICBcbiAgICAgICAgLy8gVGhpcyBpcyBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICAgICAgICBpZiAoIUlTKHN0eWxlQ2xhc3MpKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnN0eWxlQ2xhc3Nlcy5pbmRleE9mKHN0eWxlQ2xhc3MpXG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuc3R5bGVDbGFzc2VzLnNwbGljZShpbmRleCwgMSlcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgc3RhdGljIGZpbmRWaWV3V2l0aEVsZW1lbnRJRChlbGVtZW50SUQ6IHN0cmluZyk6IFVJVmlldyB7XG4gICAgICAgIGNvbnN0IHZpZXdIVE1MRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnRJRClcbiAgICAgICAgaWYgKElTX05PVCh2aWV3SFRNTEVsZW1lbnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmlsXG4gICAgICAgIH1cbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjb25zdCByZXN1bHQgPSB2aWV3SFRNTEVsZW1lbnQuVUlWaWV3XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgc3RhdGljIGNyZWF0ZVN0eWxlU2VsZWN0b3Ioc2VsZWN0b3IsIHN0eWxlKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm5cbiAgICAgICAgXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKCFkb2N1bWVudC5zdHlsZVNoZWV0cykge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKS5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBzdHlsZVNoZWV0XG4gICAgICAgIHZhciBtZWRpYVR5cGVcbiAgICAgICAgXG4gICAgICAgIGlmIChkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbDogYW55ID0gZG9jdW1lbnQuc3R5bGVTaGVldHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IG1lZGlhID0gZG9jdW1lbnQuc3R5bGVTaGVldHNbaV0ubWVkaWFcbiAgICAgICAgICAgICAgICBtZWRpYVR5cGUgPSB0eXBlb2YgbWVkaWFcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAobWVkaWFUeXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZWRpYSBhcyBhbnkgPT09IFwiXCIgfHwgKChtZWRpYSBhcyBhbnkpLmluZGV4T2YoXCJzY3JlZW5cIikgIT09IC0xKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVTaGVldCA9IGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobWVkaWFUeXBlID09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lZGlhLm1lZGlhVGV4dCA9PT0gXCJcIiB8fCAobWVkaWEubWVkaWFUZXh0LmluZGV4T2YoXCJzY3JlZW5cIikgIT09IC0xKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVTaGVldCA9IGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHlsZVNoZWV0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAodHlwZW9mIHN0eWxlU2hlZXQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0eWxlU2hlZXRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpXG4gICAgICAgICAgICBzdHlsZVNoZWV0RWxlbWVudC50eXBlID0gXCJ0ZXh0L2Nzc1wiXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF0uYXBwZW5kQ2hpbGQoc3R5bGVTaGVldEVsZW1lbnQpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5zdHlsZVNoZWV0c1tpXS5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdHlsZVNoZWV0ID0gZG9jdW1lbnQuc3R5bGVTaGVldHNbaV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbWVkaWFUeXBlID0gdHlwZW9mIHN0eWxlU2hlZXQubWVkaWFcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKG1lZGlhVHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdHlsZVNoZWV0LnJ1bGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChzdHlsZVNoZWV0LnJ1bGVzW2ldLnNlbGVjdG9yVGV4dCAmJiBzdHlsZVNoZWV0LnJ1bGVzW2ldLnNlbGVjdG9yVGV4dC50b0xvd2VyQ2FzZSgpID09XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVTaGVldC5ydWxlc1tpXS5zdHlsZS5jc3NUZXh0ID0gc3R5bGVcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3R5bGVTaGVldC5hZGRSdWxlKHNlbGVjdG9yLCBzdHlsZSlcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChtZWRpYVR5cGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIHN0eWxlU2hlZXRMZW5ndGggPSAwXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgc3R5bGVTaGVldExlbmd0aCA9IChzdHlsZVNoZWV0LmNzc1J1bGVzKSA/IHN0eWxlU2hlZXQuY3NzUnVsZXMubGVuZ3RoIDogMFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlU2hlZXRMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChzdHlsZVNoZWV0LmNzc1J1bGVzW2ldLnNlbGVjdG9yVGV4dCAmJiBzdHlsZVNoZWV0LmNzc1J1bGVzW2ldLnNlbGVjdG9yVGV4dC50b0xvd2VyQ2FzZSgpID09XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVTaGVldC5jc3NSdWxlc1tpXS5zdHlsZS5jc3NUZXh0ID0gc3R5bGVcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3R5bGVTaGVldC5pbnNlcnRSdWxlKHNlbGVjdG9yICsgXCJ7XCIgKyBzdHlsZSArIFwifVwiLCBzdHlsZVNoZWV0TGVuZ3RoKVxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHN0YXRpYyBnZXRTdHlsZVJ1bGVzKHNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHNlbGVjdG9yLnRvTG93ZXJDYXNlKClcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgc3R5bGVTaGVldCA9IGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldIGFzIGFueVxuICAgICAgICAgICAgdmFyIHN0eWxlUnVsZXNcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBzdHlsZVJ1bGVzID0gc3R5bGVTaGVldC5jc3NSdWxlcyA/IHN0eWxlU2hlZXQuY3NzUnVsZXMgOiBzdHlsZVNoZWV0LnJ1bGVzXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gc3R5bGVSdWxlc1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIGdldCBzdHlsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld0hUTUxFbGVtZW50LnN0eWxlXG4gICAgfVxuICAgIFxuICAgIGdldCBjb21wdXRlZFN0eWxlKCkge1xuICAgICAgICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLnZpZXdIVE1MRWxlbWVudClcbiAgICB9XG4gICAgXG4gICAgcHVibGljIGdldCBoaWRkZW4oKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0hpZGRlblxuICAgIH1cbiAgICBcbiAgICBcbiAgICBwdWJsaWMgc2V0IGhpZGRlbih2OiBib29sZWFuKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLl9pc0hpZGRlbiA9IHZcbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLl9pc0hpZGRlbikge1xuICAgICAgICAgICAgdGhpcy5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIlxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCJcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHN0YXRpYyBzZXQgcGFnZVNjYWxlKHNjYWxlOiBudW1iZXIpIHtcbiAgICAgICAgXG4gICAgICAgIFVJVmlldy5fcGFnZVNjYWxlID0gc2NhbGVcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHpvb20gPSBzY2FsZVxuICAgICAgICBjb25zdCB3aWR0aCA9IDEwMCAvIHpvb21cbiAgICAgICAgY29uc3Qgdmlld0hUTUxFbGVtZW50ID0gVUlDb3JlLm1haW4ucm9vdFZpZXdDb250cm9sbGVyLnZpZXcudmlld0hUTUxFbGVtZW50XG4gICAgICAgIHZpZXdIVE1MRWxlbWVudC5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBcImxlZnQgdG9wXCJcbiAgICAgICAgdmlld0hUTUxFbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IFwic2NhbGUoXCIgKyB6b29tICsgXCIpXCJcbiAgICAgICAgdmlld0hUTUxFbGVtZW50LnN0eWxlLndpZHRoID0gd2lkdGggKyBcIiVcIlxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIGdldCBwYWdlU2NhbGUoKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gVUlWaWV3Ll9wYWdlU2NhbGVcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGNhbGN1bGF0ZUFuZFNldFZpZXdGcmFtZSgpIHtcbiAgICAgICAgXG4gICAgICAgIC8vIFVzZSB0aGlzIG1ldGhvZCB0byBjYWxjdWxhdGUgdGhlIGZyYW1lIGZvciB0aGUgdmlldyBpdHNlbGZcbiAgICAgICAgXG4gICAgICAgIC8vIFRoaXMgY2FuIGJlIHVzZWQgd2hlbiBhZGRpbmcgc3Vidmlld3MgdG8gZXhpc3Rpbmcgdmlld3MgbGlrZSBidXR0b25zXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBwdWJsaWMgZ2V0IGZyYW1lKCk6IFVJUmVjdGFuZ2xlIHtcbiAgICAgICAgXG4gICAgICAgIC8vIHZhciByZXN1bHQgPSBuZXcgVUlSZWN0YW5nbGUoMSAqIHRoaXMudmlld0hUTUxFbGVtZW50Lm9mZnNldExlZnQsIDEgKiB0aGlzLnZpZXdIVE1MRWxlbWVudC5vZmZzZXRUb3AsIDEgKiB0aGlzLnZpZXdIVE1MRWxlbWVudC5vZmZzZXRIZWlnaHQsIDEgKiB0aGlzLnZpZXdIVE1MRWxlbWVudC5vZmZzZXRXaWR0aCk7XG4gICAgICAgIFxuICAgICAgICAvLyByZXN1bHQuekluZGV4ID0gMSAqIHRoaXMuc3R5bGUuekluZGV4O1xuICAgICAgICBcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2ZyYW1lXG4gICAgICAgIFxuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgVUlSZWN0YW5nbGUoMSAqIHRoaXMudmlld0hUTUxFbGVtZW50Lm9mZnNldExlZnQsIDEgKiB0aGlzLnZpZXdIVE1MRWxlbWVudC5vZmZzZXRUb3AsIDEgKlxuICAgICAgICAgICAgICAgIHRoaXMudmlld0hUTUxFbGVtZW50Lm9mZnNldEhlaWdodCwgMSAqIHRoaXMudmlld0hUTUxFbGVtZW50Lm9mZnNldFdpZHRoKVxuICAgICAgICAgICAgcmVzdWx0LnpJbmRleCA9IDBcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0LmNvcHkoKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgcHVibGljIHNldCBmcmFtZShyZWN0YW5nbGU6IFVJUmVjdGFuZ2xlKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAoSVMocmVjdGFuZ2xlKSkge1xuICAgICAgICAgICAgdGhpcy5zZXRGcmFtZShyZWN0YW5nbGUpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHNldEZyYW1lKHJlY3RhbmdsZSwgekluZGV4ID0gMCwgcGVyZm9ybVVuY2hlY2tlZExheW91dCA9IE5PKSB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgY29uc3QgZnJhbWUgPSB0aGlzLl9mcmFtZSB8fCBuZXcgVUlSZWN0YW5nbGUobmlsLCBuaWwsIG5pbCwgbmlsKVxuICAgICAgICBcbiAgICAgICAgaWYgKHpJbmRleCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlY3RhbmdsZS56SW5kZXggPSB6SW5kZXhcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9mcmFtZSA9IHJlY3RhbmdsZVxuICAgICAgICBcbiAgICAgICAgLy8gVGhpcyBpcyB1c2VsZXNzIGJlY2F1c2UgZnJhbWVzIGFyZSBjb3BpZWRcbiAgICAgICAgLy8gZnJhbWUuZGlkQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyAgICAgLy8gRG8gbm90aGluZ1xuICAgICAgICAvLyB9XG4gICAgICAgIC8vIHJlY3RhbmdsZS5kaWRDaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vICAgICB0aGlzLmZyYW1lID0gcmVjdGFuZ2xlO1xuICAgICAgICAvLyB9LmJpbmQodGhpcyk7XG4gICAgICAgIFxuICAgICAgICBpZiAoZnJhbWUgJiYgZnJhbWUuaXNFcXVhbFRvKHJlY3RhbmdsZSkgJiYgIXBlcmZvcm1VbmNoZWNrZWRMYXlvdXQpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgVUlWaWV3Ll9zZXRBYnNvbHV0ZVNpemVBbmRQb3NpdGlvbihcbiAgICAgICAgICAgIHRoaXMudmlld0hUTUxFbGVtZW50LFxuICAgICAgICAgICAgcmVjdGFuZ2xlLnRvcExlZnQueCxcbiAgICAgICAgICAgIHJlY3RhbmdsZS50b3BMZWZ0LnksXG4gICAgICAgICAgICByZWN0YW5nbGUud2lkdGgsXG4gICAgICAgICAgICByZWN0YW5nbGUuaGVpZ2h0LFxuICAgICAgICAgICAgcmVjdGFuZ2xlLnpJbmRleFxuICAgICAgICApXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgaWYgKGZyYW1lLmhlaWdodCAhPSByZWN0YW5nbGUuaGVpZ2h0IHx8IGZyYW1lLndpZHRoICE9IHJlY3RhbmdsZS53aWR0aCB8fCBwZXJmb3JtVW5jaGVja2VkTGF5b3V0KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuc2V0TmVlZHNMYXlvdXQoKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmJvdW5kc0RpZENoYW5nZSgpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vdGhpcy5sYXlvdXRTdWJ2aWV3cygpO1xuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgZ2V0IGJvdW5kcygpIHtcbiAgICAgICAgXG4gICAgICAgIHZhciByZXN1bHQ6IFVJUmVjdGFuZ2xlXG4gICAgICAgIFxuICAgICAgICAvLyBpZiAoSVNfTk9UKHRoaXMuX2ZyYW1lKSAmJiB0aGlzLnN0eWxlLmhlaWdodCA9PSBcIlwiICYmIHRoaXMuc3R5bGUud2lkdGggID09IFwiXCIgJiYgdGhpcy5zdHlsZS5sZWZ0ID09IFwiXCIgJiYgdGhpcy5zdHlsZS5yaWdodCA9PSBcIlwiICYmIHRoaXMuc3R5bGUuYm90dG9tID09IFwiXCIgJiYgdGhpcy5zdHlsZS50b3AgPT0gXCJcIikge1xuICAgICAgICBcbiAgICAgICAgLy8gICAgIHJlc3VsdCA9IG5ldyBVSVJlY3RhbmdsZSgwLCAwLCAwLCAwKVxuICAgICAgICBcbiAgICAgICAgLy8gfVxuICAgICAgICAvLyBlbHNlXG4gICAgICAgIGlmIChJU19OT1QodGhpcy5fZnJhbWUpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBVSVJlY3RhbmdsZSgwLCAwLCAxICogdGhpcy52aWV3SFRNTEVsZW1lbnQub2Zmc2V0SGVpZ2h0LCAxICogdGhpcy52aWV3SFRNTEVsZW1lbnQub2Zmc2V0V2lkdGgpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5mcmFtZS5jb3B5KClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVzdWx0LnggPSAwXG4gICAgICAgICAgICByZXN1bHQueSA9IDBcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBzZXQgYm91bmRzKHJlY3RhbmdsZSkge1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZnJhbWUgPSB0aGlzLmZyYW1lXG4gICAgICAgIFxuICAgICAgICB0aGlzLmZyYW1lID0gbmV3IFVJUmVjdGFuZ2xlKGZyYW1lLnRvcExlZnQueCwgZnJhbWUudG9wTGVmdC55LCByZWN0YW5nbGUuaGVpZ2h0LCByZWN0YW5nbGUud2lkdGgpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBib3VuZHNEaWRDaGFuZ2UoKSB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHNldFBvc2l0aW9uKFxuICAgICAgICBsZWZ0OiBudW1iZXIgfCBzdHJpbmcgPSBuaWwsXG4gICAgICAgIHJpZ2h0OiBudW1iZXIgfCBzdHJpbmcgPSBuaWwsXG4gICAgICAgIGJvdHRvbTogbnVtYmVyIHwgc3RyaW5nID0gbmlsLFxuICAgICAgICB0b3A6IG51bWJlciB8IHN0cmluZyA9IG5pbCxcbiAgICAgICAgaGVpZ2h0OiBudW1iZXIgfCBzdHJpbmcgPSBuaWwsXG4gICAgICAgIHdpZHRoOiBudW1iZXIgfCBzdHJpbmcgPSBuaWxcbiAgICApIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHByZXZpb3VzQm91bmRzID0gdGhpcy5ib3VuZHNcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2V0U3R5bGVQcm9wZXJ0eShcImxlZnRcIiwgbGVmdClcbiAgICAgICAgdGhpcy5zZXRTdHlsZVByb3BlcnR5KFwicmlnaHRcIiwgcmlnaHQpXG4gICAgICAgIHRoaXMuc2V0U3R5bGVQcm9wZXJ0eShcImJvdHRvbVwiLCBib3R0b20pXG4gICAgICAgIHRoaXMuc2V0U3R5bGVQcm9wZXJ0eShcInRvcFwiLCB0b3ApXG4gICAgICAgIHRoaXMuc2V0U3R5bGVQcm9wZXJ0eShcImhlaWdodFwiLCBoZWlnaHQpXG4gICAgICAgIHRoaXMuc2V0U3R5bGVQcm9wZXJ0eShcIndpZHRoXCIsIHdpZHRoKVxuICAgICAgICBcbiAgICAgICAgY29uc3QgYm91bmRzID0gdGhpcy5ib3VuZHNcbiAgICAgICAgaWYgKGJvdW5kcy5oZWlnaHQgIT0gcHJldmlvdXNCb3VuZHMuaGVpZ2h0IHx8IGJvdW5kcy53aWR0aCAhPSBwcmV2aW91c0JvdW5kcy53aWR0aCkge1xuICAgICAgICAgICAgdGhpcy5zZXROZWVkc0xheW91dCgpXG4gICAgICAgICAgICB0aGlzLmJvdW5kc0RpZENoYW5nZSgpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHNldFNpemVzKGhlaWdodD86IG51bWJlciB8IHN0cmluZywgd2lkdGg/OiBudW1iZXIgfCBzdHJpbmcpIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHByZXZpb3VzQm91bmRzID0gdGhpcy5ib3VuZHNcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2V0U3R5bGVQcm9wZXJ0eShcImhlaWdodFwiLCBoZWlnaHQpXG4gICAgICAgIHRoaXMuc2V0U3R5bGVQcm9wZXJ0eShcIndpZHRoXCIsIHdpZHRoKVxuICAgICAgICBcbiAgICAgICAgY29uc3QgYm91bmRzID0gdGhpcy5ib3VuZHNcbiAgICAgICAgaWYgKGJvdW5kcy5oZWlnaHQgIT0gcHJldmlvdXNCb3VuZHMuaGVpZ2h0IHx8IGJvdW5kcy53aWR0aCAhPSBwcmV2aW91c0JvdW5kcy53aWR0aCkge1xuICAgICAgICAgICAgdGhpcy5zZXROZWVkc0xheW91dCgpXG4gICAgICAgICAgICB0aGlzLmJvdW5kc0RpZENoYW5nZSgpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHNldE1pblNpemVzKGhlaWdodD86IG51bWJlciB8IHN0cmluZywgd2lkdGg/OiBudW1iZXIgfCBzdHJpbmcpIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHByZXZpb3VzQm91bmRzID0gdGhpcy5ib3VuZHNcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2V0U3R5bGVQcm9wZXJ0eShcIm1pbkhlaWdodFwiLCBoZWlnaHQpXG4gICAgICAgIHRoaXMuc2V0U3R5bGVQcm9wZXJ0eShcIm1pbldpZHRoXCIsIHdpZHRoKVxuICAgICAgICBcbiAgICAgICAgY29uc3QgYm91bmRzID0gdGhpcy5ib3VuZHNcbiAgICAgICAgaWYgKGJvdW5kcy5oZWlnaHQgIT0gcHJldmlvdXNCb3VuZHMuaGVpZ2h0IHx8IGJvdW5kcy53aWR0aCAhPSBwcmV2aW91c0JvdW5kcy53aWR0aCkge1xuICAgICAgICAgICAgdGhpcy5zZXROZWVkc0xheW91dCgpXG4gICAgICAgICAgICB0aGlzLmJvdW5kc0RpZENoYW5nZSgpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHNldE1heFNpemVzKGhlaWdodD86IG51bWJlciB8IHN0cmluZywgd2lkdGg/OiBudW1iZXIgfCBzdHJpbmcpIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHByZXZpb3VzQm91bmRzID0gdGhpcy5ib3VuZHNcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2V0U3R5bGVQcm9wZXJ0eShcIm1heEhlaWdodFwiLCBoZWlnaHQpXG4gICAgICAgIHRoaXMuc2V0U3R5bGVQcm9wZXJ0eShcIm1heFdpZHRoXCIsIHdpZHRoKVxuICAgICAgICBcbiAgICAgICAgY29uc3QgYm91bmRzID0gdGhpcy5ib3VuZHNcbiAgICAgICAgaWYgKGJvdW5kcy5oZWlnaHQgIT0gcHJldmlvdXNCb3VuZHMuaGVpZ2h0IHx8IGJvdW5kcy53aWR0aCAhPSBwcmV2aW91c0JvdW5kcy53aWR0aCkge1xuICAgICAgICAgICAgdGhpcy5zZXROZWVkc0xheW91dCgpXG4gICAgICAgICAgICB0aGlzLmJvdW5kc0RpZENoYW5nZSgpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHNldE1hcmdpbihtYXJnaW4/OiBudW1iZXIgfCBzdHJpbmcpIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHByZXZpb3VzQm91bmRzID0gdGhpcy5ib3VuZHNcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2V0U3R5bGVQcm9wZXJ0eShcIm1hcmdpblwiLCBtYXJnaW4pXG4gICAgICAgIFxuICAgICAgICBjb25zdCBib3VuZHMgPSB0aGlzLmJvdW5kc1xuICAgICAgICBpZiAoYm91bmRzLmhlaWdodCAhPSBwcmV2aW91c0JvdW5kcy5oZWlnaHQgfHwgYm91bmRzLndpZHRoICE9IHByZXZpb3VzQm91bmRzLndpZHRoKSB7XG4gICAgICAgICAgICB0aGlzLnNldE5lZWRzTGF5b3V0KClcbiAgICAgICAgICAgIHRoaXMuYm91bmRzRGlkQ2hhbmdlKClcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc2V0TWFyZ2lucyhsZWZ0PzogbnVtYmVyIHwgc3RyaW5nLCByaWdodD86IG51bWJlciB8IHN0cmluZywgYm90dG9tPzogbnVtYmVyIHwgc3RyaW5nLCB0b3A/OiBudW1iZXIgfCBzdHJpbmcpIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHByZXZpb3VzQm91bmRzID0gdGhpcy5ib3VuZHNcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2V0U3R5bGVQcm9wZXJ0eShcIm1hcmdpbkxlZnRcIiwgbGVmdClcbiAgICAgICAgdGhpcy5zZXRTdHlsZVByb3BlcnR5KFwibWFyZ2luUmlnaHRcIiwgcmlnaHQpXG4gICAgICAgIHRoaXMuc2V0U3R5bGVQcm9wZXJ0eShcIm1hcmdpbkJvdHRvbVwiLCBib3R0b20pXG4gICAgICAgIHRoaXMuc2V0U3R5bGVQcm9wZXJ0eShcIm1hcmdpblRvcFwiLCB0b3ApXG4gICAgICAgIFxuICAgICAgICBjb25zdCBib3VuZHMgPSB0aGlzLmJvdW5kc1xuICAgICAgICBpZiAoYm91bmRzLmhlaWdodCAhPSBwcmV2aW91c0JvdW5kcy5oZWlnaHQgfHwgYm91bmRzLndpZHRoICE9IHByZXZpb3VzQm91bmRzLndpZHRoKSB7XG4gICAgICAgICAgICB0aGlzLnNldE5lZWRzTGF5b3V0KClcbiAgICAgICAgICAgIHRoaXMuYm91bmRzRGlkQ2hhbmdlKClcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc2V0UGFkZGluZyhwYWRkaW5nPzogbnVtYmVyIHwgc3RyaW5nKSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBwcmV2aW91c0JvdW5kcyA9IHRoaXMuYm91bmRzXG4gICAgICAgIFxuICAgICAgICB0aGlzLnNldFN0eWxlUHJvcGVydHkoXCJwYWRkaW5nXCIsIHBhZGRpbmcpXG4gICAgICAgIFxuICAgICAgICBjb25zdCBib3VuZHMgPSB0aGlzLmJvdW5kc1xuICAgICAgICBpZiAoYm91bmRzLmhlaWdodCAhPSBwcmV2aW91c0JvdW5kcy5oZWlnaHQgfHwgYm91bmRzLndpZHRoICE9IHByZXZpb3VzQm91bmRzLndpZHRoKSB7XG4gICAgICAgICAgICB0aGlzLnNldE5lZWRzTGF5b3V0KClcbiAgICAgICAgICAgIHRoaXMuYm91bmRzRGlkQ2hhbmdlKClcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc2V0UGFkZGluZ3MobGVmdD86IG51bWJlciB8IHN0cmluZywgcmlnaHQ/OiBudW1iZXIgfCBzdHJpbmcsIGJvdHRvbT86IG51bWJlciB8IHN0cmluZywgdG9wPzogbnVtYmVyIHwgc3RyaW5nKSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBwcmV2aW91c0JvdW5kcyA9IHRoaXMuYm91bmRzXG4gICAgICAgIFxuICAgICAgICB0aGlzLnNldFN0eWxlUHJvcGVydHkoXCJwYWRkaW5nTGVmdFwiLCBsZWZ0KVxuICAgICAgICB0aGlzLnNldFN0eWxlUHJvcGVydHkoXCJwYWRkaW5nUmlnaHRcIiwgcmlnaHQpXG4gICAgICAgIHRoaXMuc2V0U3R5bGVQcm9wZXJ0eShcInBhZGRpbmdCb3R0b21cIiwgYm90dG9tKVxuICAgICAgICB0aGlzLnNldFN0eWxlUHJvcGVydHkoXCJwYWRkaW5nVG9wXCIsIHRvcClcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGJvdW5kcyA9IHRoaXMuYm91bmRzXG4gICAgICAgIGlmIChib3VuZHMuaGVpZ2h0ICE9IHByZXZpb3VzQm91bmRzLmhlaWdodCB8fCBib3VuZHMud2lkdGggIT0gcHJldmlvdXNCb3VuZHMud2lkdGgpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0TmVlZHNMYXlvdXQoKVxuICAgICAgICAgICAgdGhpcy5ib3VuZHNEaWRDaGFuZ2UoKVxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBzZXRCb3JkZXIoXG4gICAgICAgIHJhZGl1czogbnVtYmVyIHwgc3RyaW5nID0gbmlsLFxuICAgICAgICB3aWR0aDogbnVtYmVyIHwgc3RyaW5nID0gMSxcbiAgICAgICAgY29sb3I6IFVJQ29sb3IgPSBVSUNvbG9yLmJsYWNrQ29sb3IsXG4gICAgICAgIHN0eWxlOiBzdHJpbmcgPSBcInNvbGlkXCJcbiAgICApIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2V0U3R5bGVQcm9wZXJ0eShcImJvcmRlclN0eWxlXCIsIHN0eWxlKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5zZXRTdHlsZVByb3BlcnR5KFwiYm9yZGVyUmFkaXVzXCIsIHJhZGl1cylcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2V0U3R5bGVQcm9wZXJ0eShcImJvcmRlckNvbG9yXCIsIGNvbG9yLnN0cmluZ1ZhbHVlKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5zZXRTdHlsZVByb3BlcnR5KFwiYm9yZGVyV2lkdGhcIiwgd2lkdGgpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBzZXRTdHlsZVByb3BlcnR5KHByb3BlcnR5TmFtZTogc3RyaW5nLCB2YWx1ZT86IG51bWJlciB8IHN0cmluZykge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChJU19OSUwodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoSVNfREVGSU5FRCh2YWx1ZSkgJiYgKHZhbHVlIGFzIE51bWJlcikuaXNBTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBcIlwiICsgKHZhbHVlIGFzIG51bWJlcikuaW50ZWdlclZhbHVlICsgXCJweFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnN0eWxlW3Byb3BlcnR5TmFtZV0gPSB2YWx1ZVxuICAgICAgICAgICAgXG4gICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhleGNlcHRpb24pXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIGdldCB1c2VySW50ZXJhY3Rpb25FbmFibGVkKCkge1xuICAgICAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gKHRoaXMuc3R5bGUucG9pbnRlckV2ZW50cyAhPSBcIm5vbmVcIilcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHNldCB1c2VySW50ZXJhY3Rpb25FbmFibGVkKHVzZXJJbnRlcmFjdGlvbkVuYWJsZWQpIHtcbiAgICAgICAgXG4gICAgICAgIGlmICh1c2VySW50ZXJhY3Rpb25FbmFibGVkKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuc3R5bGUucG9pbnRlckV2ZW50cyA9IFwiXCJcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcIm5vbmVcIlxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIGdldCBiYWNrZ3JvdW5kQ29sb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iYWNrZ3JvdW5kQ29sb3JcbiAgICB9XG4gICAgXG4gICAgc2V0IGJhY2tncm91bmRDb2xvcihiYWNrZ3JvdW5kQ29sb3I6IFVJQ29sb3IpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2JhY2tncm91bmRDb2xvciA9IGJhY2tncm91bmRDb2xvclxuICAgICAgICBcbiAgICAgICAgdGhpcy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBiYWNrZ3JvdW5kQ29sb3Iuc3RyaW5nVmFsdWVcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIGdldCBhbHBoYSgpIHtcbiAgICAgICAgcmV0dXJuIDEgKiAodGhpcy5zdHlsZS5vcGFjaXR5IGFzIGFueSlcbiAgICB9XG4gICAgXG4gICAgc2V0IGFscGhhKGFscGhhKSB7XG4gICAgICAgIHRoaXMuc3R5bGUub3BhY2l0eSA9IFwiXCIgKyBhbHBoYVxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBzdGF0aWMgYW5pbWF0ZVZpZXdPclZpZXdzV2l0aER1cmF0aW9uRGVsYXlBbmRGdW5jdGlvbihcbiAgICAgICAgdmlld09yVmlld3M6IFVJVmlldyB8IEhUTUxFbGVtZW50IHwgVUlWaWV3W10gfCBIVE1MRWxlbWVudFtdLFxuICAgICAgICBkdXJhdGlvbjogbnVtYmVyLFxuICAgICAgICBkZWxheTogbnVtYmVyLFxuICAgICAgICB0aW1pbmdTdHlsZSA9IFwiY3ViaWMtYmV6aWVyKDAuMjUsMC4xLDAuMjUsMSlcIixcbiAgICAgICAgdHJhbnNmb3JtRnVuY3Rpb246IEZ1bmN0aW9uLFxuICAgICAgICB0cmFuc2l0aW9uY29tcGxldGlvbkZ1bmN0aW9uOiBGdW5jdGlvblxuICAgICkge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIGNhbGxUcmFuc2l0aW9uY29tcGxldGlvbkZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAodHJhbnNpdGlvbmNvbXBsZXRpb25GdW5jdGlvbiB8fCBuaWwpKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICh2aWV3T3JWaWV3cyBhcyBVSVZpZXdbXSkuZm9yRWFjaChmdW5jdGlvbiAodmlldywgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmlldy5hbmltYXRpb25EaWRGaW5pc2goKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgaWYgKElTX0ZJUkVGT1gpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRmlyZWZveCBkb2VzIG5vdCBmaXJlIHRoZSB0cmFuc2l0aW9uIGNvbXBsZXRpb24gZXZlbnQgcHJvcGVybHlcbiAgICAgICAgICAgIG5ldyBVSU9iamVjdCgpLnBlcmZvcm1GdW5jdGlvbldpdGhEZWxheShkZWxheSArIGR1cmF0aW9uLCBjYWxsVHJhbnNpdGlvbmNvbXBsZXRpb25GdW5jdGlvbilcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGlmICghKHZpZXdPclZpZXdzIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgICAgICB2aWV3T3JWaWV3cyA9IFt2aWV3T3JWaWV3c10gYXMgYW55XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHRyYW5zaXRpb25TdHlsZXMgPSBbXVxuICAgICAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb25zID0gW11cbiAgICAgICAgY29uc3QgdHJhbnNpdGlvbkRlbGF5cyA9IFtdXG4gICAgICAgIGNvbnN0IHRyYW5zaXRpb25UaW1pbmdzID0gW11cbiAgICAgICAgXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgKHZpZXdPclZpZXdzIGFzIGFueSkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIHZpZXcgPSB2aWV3T3JWaWV3c1tpXVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodmlldy52aWV3SFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2aWV3ID0gdmlldy52aWV3SFRNTEVsZW1lbnRcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmlldy5hZGRFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCB0cmFuc2l0aW9uRGlkRmluaXNoLCB0cnVlKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0cmFuc2l0aW9uU3R5bGVzLnB1c2godmlldy5zdHlsZS50cmFuc2l0aW9uKVxuICAgICAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9ucy5wdXNoKHZpZXcuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uKVxuICAgICAgICAgICAgdHJhbnNpdGlvbkRlbGF5cy5wdXNoKHZpZXcuc3R5bGUudHJhbnNpdGlvbkRlbGF5KVxuICAgICAgICAgICAgdHJhbnNpdGlvblRpbWluZ3MucHVzaCh2aWV3LnN0eWxlLnRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbilcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmlldy5zdHlsZS50cmFuc2l0aW9uID0gXCJhbGxcIlxuICAgICAgICAgICAgdmlldy5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBcIlwiICsgZHVyYXRpb24gKyBcInNcIlxuICAgICAgICAgICAgdmlldy5zdHlsZS50cmFuc2l0aW9uRGVsYXkgPSBcIlwiICsgZGVsYXkgKyBcInNcIlxuICAgICAgICAgICAgdmlldy5zdHlsZS50cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24gPSB0aW1pbmdTdHlsZVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdHJhbnNmb3JtRnVuY3Rpb24oKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHRyYW5zaXRpb25PYmplY3QgPSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFwiZmluaXNoSW1tZWRpYXRlbHlcIjogZmluaXNoVHJhbnNpdGlvbkltbWVkaWF0ZWx5LFxuICAgICAgICAgICAgXCJkaWRGaW5pc2hcIjogdHJhbnNpdGlvbkRpZEZpbmlzaE1hbnVhbGx5LFxuICAgICAgICAgICAgXCJ2aWV3c1wiOiB2aWV3T3JWaWV3cyxcbiAgICAgICAgICAgIFwicmVnaXN0cmF0aW9uVGltZVwiOiBEYXRlLm5vdygpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZnVuY3Rpb24gZmluaXNoVHJhbnNpdGlvbkltbWVkaWF0ZWx5KCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAodmlld09yVmlld3MgYXMgYW55KS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciB2aWV3ID0gdmlld09yVmlld3NbaV1cbiAgICAgICAgICAgICAgICBpZiAodmlldy52aWV3SFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmlldyA9IHZpZXcudmlld0hUTUxFbGVtZW50XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZpZXcuc3R5bGUudHJhbnNpdGlvbiA9IFwiYWxsXCJcbiAgICAgICAgICAgICAgICB2aWV3LnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IFwiXCIgKyBkdXJhdGlvbiArIFwic1wiXG4gICAgICAgICAgICAgICAgdmlldy5zdHlsZS50cmFuc2l0aW9uRGVsYXkgPSBcIlwiICsgZGVsYXkgKyBcInNcIlxuICAgICAgICAgICAgICAgIHZpZXcuc3R5bGUudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25TdHlsZXNbaV1cbiAgICAgICAgICAgICAgICB2aWV3LnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbnNbaV1cbiAgICAgICAgICAgICAgICB2aWV3LnN0eWxlLnRyYW5zaXRpb25EZWxheSA9IHRyYW5zaXRpb25EZWxheXNbaV1cbiAgICAgICAgICAgICAgICB2aWV3LnN0eWxlLnRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbiA9IHRyYW5zaXRpb25UaW1pbmdzW2ldXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIHRyYW5zaXRpb25EaWRGaW5pc2goZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciB2aWV3ID0gZXZlbnQuc3JjRWxlbWVudFxuICAgICAgICAgICAgaWYgKCF2aWV3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmlldy52aWV3SFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB2aWV3ID0gdmlldy52aWV3SFRNTEVsZW1lbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZpZXcuc3R5bGUudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25TdHlsZXNbaV1cbiAgICAgICAgICAgIHZpZXcuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uc1tpXVxuICAgICAgICAgICAgdmlldy5zdHlsZS50cmFuc2l0aW9uRGVsYXkgPSB0cmFuc2l0aW9uRGVsYXlzW2ldXG4gICAgICAgICAgICB2aWV3LnN0eWxlLnRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbiA9IHRyYW5zaXRpb25UaW1pbmdzW2ldXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNhbGxUcmFuc2l0aW9uY29tcGxldGlvbkZ1bmN0aW9uKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmlldy5yZW1vdmVFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCB0cmFuc2l0aW9uRGlkRmluaXNoLCB0cnVlKVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIHRyYW5zaXRpb25EaWRGaW5pc2hNYW51YWxseSgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgKHZpZXdPclZpZXdzIGFzIGFueSkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgdmlldyA9IHZpZXdPclZpZXdzW2ldXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHZpZXcudmlld0hUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHZpZXcgPSB2aWV3LnZpZXdIVE1MRWxlbWVudFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2aWV3LnN0eWxlLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uU3R5bGVzW2ldXG4gICAgICAgICAgICAgICAgdmlldy5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb25zW2ldXG4gICAgICAgICAgICAgICAgdmlldy5zdHlsZS50cmFuc2l0aW9uRGVsYXkgPSB0cmFuc2l0aW9uRGVsYXlzW2ldXG4gICAgICAgICAgICAgICAgdmlldy5zdHlsZS50cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24gPSB0cmFuc2l0aW9uVGltaW5nc1tpXVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZpZXcucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25lbmRcIiwgdHJhbnNpdGlvbkRpZEZpbmlzaCwgdHJ1ZSlcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRyYW5zaXRpb25PYmplY3RcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGFuaW1hdGlvbkRpZEZpbmlzaCgpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgc3RhdGljIF90cmFuc2Zvcm1BdHRyaWJ1dGUgPSAoKFwidHJhbnNmb3JtXCIgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlKSA/IFwidHJhbnNmb3JtXCIgOiB1bmRlZmluZWQpIHx8XG4gICAgICAgICgoXCItd2Via2l0LXRyYW5zZm9ybVwiIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSkgPyBcIi13ZWJraXQtdHJhbnNmb3JtXCIgOiBcInVuZGVmaW5lZFwiKSB8fFxuICAgICAgICAoKFwiLW1vei10cmFuc2Zvcm1cIiBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUpID8gXCItbW96LXRyYW5zZm9ybVwiIDogXCJ1bmRlZmluZWRcIikgfHxcbiAgICAgICAgKChcIi1tcy10cmFuc2Zvcm1cIiBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUpID8gXCItbXMtdHJhbnNmb3JtXCIgOiBcInVuZGVmaW5lZFwiKSB8fFxuICAgICAgICAoKFwiLW8tdHJhbnNmb3JtXCIgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlKSA/IFwiLW8tdHJhbnNmb3JtXCIgOiBcInVuZGVmaW5lZFwiKVxuICAgIFxuICAgIHN0YXRpYyBfc2V0QWJzb2x1dGVTaXplQW5kUG9zaXRpb24oZWxlbWVudCwgbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0LCB6SW5kZXggPSAwKSB7XG4gICAgICAgIFxuICAgICAgICAvLyBpZiAoIVVJVmlldy5fdHJhbnNmb3JtQXR0cmlidXRlKSB7XG4gICAgICAgIFxuICAgICAgICAvLyAgICAgVUlWaWV3Ll90cmFuc2Zvcm1BdHRyaWJ1dGUgPSAoKCd0cmFuc2Zvcm0nIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSkgPyAndHJhbnNmb3JtJyA6IHVuZGVmaW5lZCk7XG4gICAgICAgIC8vICAgICBVSVZpZXcuX3RyYW5zZm9ybUF0dHJpYnV0ZSA9IFVJVmlldy5fdHJhbnNmb3JtQXR0cmlidXRlIHx8ICgoJy13ZWJraXQtdHJhbnNmb3JtJyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUpID8gJy13ZWJraXQtdHJhbnNmb3JtJyA6ICd1bmRlZmluZWQnKTtcbiAgICAgICAgLy8gICAgIFVJVmlldy5fdHJhbnNmb3JtQXR0cmlidXRlID0gVUlWaWV3Ll90cmFuc2Zvcm1BdHRyaWJ1dGUgfHwgKCgnLW1vei10cmFuc2Zvcm0nIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSkgPyAnLW1vei10cmFuc2Zvcm0nIDogJ3VuZGVmaW5lZCcpO1xuICAgICAgICAvLyAgICAgVUlWaWV3Ll90cmFuc2Zvcm1BdHRyaWJ1dGUgPSBVSVZpZXcuX3RyYW5zZm9ybUF0dHJpYnV0ZSB8fCAoKCctbXMtdHJhbnNmb3JtJyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUpID8gJy1tcy10cmFuc2Zvcm0nIDogJ3VuZGVmaW5lZCcpO1xuICAgICAgICAvLyAgICAgVUlWaWV3Ll90cmFuc2Zvcm1BdHRyaWJ1dGUgPSBVSVZpZXcuX3RyYW5zZm9ybUF0dHJpYnV0ZSB8fCAoKCctby10cmFuc2Zvcm0nIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSkgPyAnLW8tdHJhbnNmb3JtJyA6ICd1bmRlZmluZWQnKTtcbiAgICAgICAgXG4gICAgICAgIC8vIH1cbiAgICAgICAgXG4gICAgICAgIGlmICghSVMoZWxlbWVudCkgfHwgIWVsZW1lbnQub2JleUF1dG9sYXlvdXQgJiYgIWVsZW1lbnQuZ2V0QXR0cmlidXRlKFwib2JleUF1dG9sYXlvdXRcIikpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoZWxlbWVudC5pZCA9PSBcIm1haW5WaWV3XCIpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgYXNkID0gMVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChJUyhoZWlnaHQpKSB7XG4gICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQuaW50ZWdlclZhbHVlICsgXCJweFwiXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChJUyh3aWR0aCkpIHtcbiAgICAgICAgICAgIHdpZHRoID0gd2lkdGguaW50ZWdlclZhbHVlICsgXCJweFwiXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBzdHIgPSBlbGVtZW50LnN0eWxlLmNzc1RleHRcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGZyYW1lVHJhbnNmb3JtID0gVUlWaWV3Ll90cmFuc2Zvcm1BdHRyaWJ1dGUgKyBcIjogdHJhbnNsYXRlM2QoXCIgKyAoMSAqIGxlZnQpLmludGVnZXJWYWx1ZSArIFwicHgsIFwiICtcbiAgICAgICAgICAgICgxICogdG9wKS5pbnRlZ2VyVmFsdWUgKyBcInB4LCBcIiArIHpJbmRleC5pbnRlZ2VyVmFsdWUgKyBcInB4KVwiXG4gICAgICAgIFxuICAgICAgICBpZiAoZWxlbWVudC5VSVZpZXcpIHtcbiAgICAgICAgICAgIHN0ciA9IHN0ciArIGZyYW1lVHJhbnNmb3JtICsgXCI7XCJcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnQuVUlWaWV3Ll9mcmFtZVRyYW5zZm9ybSA9IGZyYW1lVHJhbnNmb3JtXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChoZWlnaHQgPT0gbmlsKSB7XG4gICAgICAgICAgICBzdHIgPSBzdHIgKyBcIiBoZWlnaHQ6IHVuc2V0O1wiXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdHIgPSBzdHIgKyBcIiBoZWlnaHQ6XCIgKyBoZWlnaHQgKyBcIjtcIlxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAod2lkdGggPT0gbmlsKSB7XG4gICAgICAgICAgICBzdHIgPSBzdHIgKyBcIiB3aWR0aDogdW5zZXQ7XCJcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0ciA9IHN0ciArIFwiIHdpZHRoOlwiICsgd2lkdGggKyBcIjtcIlxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoZWxlbWVudC5pZCA9PSBcIm1haW5WaWV3XCIpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgYXNkID0gMVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGVsZW1lbnQuc3R5bGUuY3NzVGV4dCA9IGVsZW1lbnQuc3R5bGUuY3NzVGV4dCArIHN0clxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgc3RhdGljIHBlcmZvcm1BdXRvTGF5b3V0KHBhcmVudEVsZW1lbnQsIHZpc3VhbEZvcm1hdEFycmF5LCBjb25zdHJhaW50c0FycmF5KSB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBBdXRvTGF5b3V0LlZpZXcoKVxuICAgICAgICBcbiAgICAgICAgaWYgKElTKHZpc3VhbEZvcm1hdEFycmF5KSAmJiBJUyh2aXN1YWxGb3JtYXRBcnJheS5sZW5ndGgpKSB7XG4gICAgICAgICAgICB2aWV3LmFkZENvbnN0cmFpbnRzKEF1dG9MYXlvdXQuVmlzdWFsRm9ybWF0LnBhcnNlKHZpc3VhbEZvcm1hdEFycmF5LCB7IGV4dGVuZGVkOiB0cnVlIH0pKVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoSVMoY29uc3RyYWludHNBcnJheSkgJiYgSVMoY29uc3RyYWludHNBcnJheS5sZW5ndGgpKSB7XG4gICAgICAgICAgICB2aWV3LmFkZENvbnN0cmFpbnRzKGNvbnN0cmFpbnRzQXJyYXkpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0ge31cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHZpZXcuc3ViVmlld3MpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCF2aWV3LnN1YlZpZXdzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IG5pbFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBwYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjXCIgKyBrZXkpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJFcnJvciBvY2N1cnJlZCBcIiArIGVycm9yKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGVsZW1lbnQgJiYgIWVsZW1lbnQub2JleUF1dG9sYXlvdXQgJiYgIWVsZW1lbnQuZ2V0QXR0cmlidXRlKFwib2JleUF1dG9sYXlvdXRcIikpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSArPSBlbGVtZW50LmNsYXNzTmFtZSA/IFwiIGFic1wiIDogXCJhYnNcIlxuICAgICAgICAgICAgICAgIGVsZW1lbnRzW2tleV0gPSBlbGVtZW50XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIHBhcmVudFVJVmlldyA9IG5pbFxuICAgICAgICBcbiAgICAgICAgaWYgKHBhcmVudEVsZW1lbnQuVUlWaWV3KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHBhcmVudFVJVmlldyA9IHBhcmVudEVsZW1lbnQuVUlWaWV3XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgdXBkYXRlTGF5b3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmlldy5zZXRTaXplKFxuICAgICAgICAgICAgICAgIHBhcmVudEVsZW1lbnQgPyBwYXJlbnRFbGVtZW50LmNsaWVudFdpZHRoIDogd2luZG93LmlubmVyV2lkdGgsXG4gICAgICAgICAgICAgICAgcGFyZW50RWxlbWVudCA/IHBhcmVudEVsZW1lbnQuY2xpZW50SGVpZ2h0IDogd2luZG93LmlubmVySGVpZ2h0XG4gICAgICAgICAgICApXG4gICAgICAgICAgICBmb3IgKGtleSBpbiB2aWV3LnN1YlZpZXdzKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKCF2aWV3LnN1YlZpZXdzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3Qgc3ViVmlldyA9IHZpZXcuc3ViVmlld3Nba2V5XVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50c1trZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIFVJVmlldy5fc2V0QWJzb2x1dGVTaXplQW5kUG9zaXRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50c1trZXldLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViVmlldy5sZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViVmlldy50b3AsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJWaWV3LndpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViVmlldy5oZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcGFyZW50VUlWaWV3LmRpZExheW91dFN1YnZpZXdzKClcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB1cGRhdGVMYXlvdXQoKVxuICAgICAgICByZXR1cm4gdXBkYXRlTGF5b3V0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBzdGF0aWMgcnVuRnVuY3Rpb25CZWZvcmVOZXh0RnJhbWUoc3RlcDogKCkgPT4gdm9pZCkge1xuICAgICAgICBcbiAgICAgICAgaWYgKElTX1NBRkFSSSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBUaGlzIGNyZWF0ZXMgYSBtaWNyb3Rhc2tcbiAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oc3RlcClcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXApXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgc3RhdGljIHNjaGVkdWxlTGF5b3V0Vmlld3NJZk5lZWRlZCgpIHtcbiAgICAgICAgXG4gICAgICAgIFVJVmlldy5ydW5GdW5jdGlvbkJlZm9yZU5leHRGcmFtZShVSVZpZXcubGF5b3V0Vmlld3NJZk5lZWRlZClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHN0YXRpYyBsYXlvdXRWaWV3c0lmTmVlZGVkKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IFVJVmlldy5fdmlld3NUb0xheW91dC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdmlldyA9IFVJVmlldy5fdmlld3NUb0xheW91dFtpXVxuICAgICAgICAgICAgdmlldy5sYXlvdXRJZk5lZWRlZCgpXG4gICAgICAgIH1cbiAgICAgICAgVUlWaWV3Ll92aWV3c1RvTGF5b3V0ID0gW11cbiAgICB9XG4gICAgXG4gICAgXG4gICAgc2V0TmVlZHNMYXlvdXQoKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5fc2hvdWxkTGF5b3V0KSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fc2hvdWxkTGF5b3V0ID0gWUVTXG4gICAgICAgIFxuICAgICAgICAvLyBSZWdpc3RlciB2aWV3IGZvciBsYXlvdXQgYmVmb3JlIG5leHQgZnJhbWVcbiAgICAgICAgVUlWaWV3Ll92aWV3c1RvTGF5b3V0LnB1c2godGhpcylcbiAgICAgICAgXG4gICAgICAgIGlmIChVSVZpZXcuX3ZpZXdzVG9MYXlvdXQubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgIFVJVmlldy5zY2hlZHVsZUxheW91dFZpZXdzSWZOZWVkZWQoKVxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBnZXQgbmVlZHNMYXlvdXQoKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy5fc2hvdWxkTGF5b3V0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBsYXlvdXRJZk5lZWRlZCgpIHtcbiAgICAgICAgXG4gICAgICAgIGlmICghdGhpcy5fc2hvdWxkTGF5b3V0KSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fc2hvdWxkTGF5b3V0ID0gTk9cbiAgICAgICAgXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMubGF5b3V0U3Vidmlld3MoKVxuICAgICAgICAgICAgXG4gICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhleGNlcHRpb24pXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgbGF5b3V0U3Vidmlld3MoKSB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5fc2hvdWxkTGF5b3V0ID0gTk9cbiAgICAgICAgXG4gICAgICAgIC8vIEF1dG9sYXlvdXRcbiAgICAgICAgLy93aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5fdXBkYXRlTGF5b3V0RnVuY3Rpb24pO1xuICAgICAgICBpZiAodGhpcy5jb25zdHJhaW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlTGF5b3V0RnVuY3Rpb24gPSBVSVZpZXcucGVyZm9ybUF1dG9MYXlvdXQodGhpcy52aWV3SFRNTEVsZW1lbnQsIG51bGwsIHRoaXMuY29uc3RyYWludHMpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy90aGlzLl91cGRhdGVMYXlvdXRGdW5jdGlvbiA9IHRoaXMubGF5b3V0U3Vidmlld3MuYmluZCh0aGlzKTtcbiAgICAgICAgXG4gICAgICAgIC8vd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuX3VwZGF0ZUxheW91dEZ1bmN0aW9uKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3ZpZXdDb250cm9sbGVyTGF5b3V0RnVuY3Rpb24oKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5hcHBseUNsYXNzZXNBbmRTdHlsZXMoKVxuICAgICAgICBcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN1YnZpZXdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHN1YnZpZXcgPSB0aGlzLnN1YnZpZXdzW2ldXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHN1YnZpZXcuY2FsY3VsYXRlQW5kU2V0Vmlld0ZyYW1lKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9zdWJ2aWV3LmxheW91dFN1YnZpZXdzKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5kaWRMYXlvdXRTdWJ2aWV3cygpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBhcHBseUNsYXNzZXNBbmRTdHlsZXMoKSB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIC8vdmFyIGNsYXNzZXNTdHJpbmcgPSBcIlwiO1xuICAgICAgICBcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN0eWxlQ2xhc3Nlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBzdHlsZUNsYXNzID0gdGhpcy5zdHlsZUNsYXNzZXNbaV1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHN0eWxlQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdIVE1MRWxlbWVudC5jbGFzc0xpc3QuYWRkKHN0eWxlQ2xhc3MpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2NsYXNzZXNTdHJpbmcgPSBjbGFzc2VzU3RyaW5nICsgXCIgXCIgKyBzdHlsZUNsYXNzO1xuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAvL3RoaXMudmlld0hUTUxFbGVtZW50LmNsYXNzTmFtZSA9IGNsYXNzZXNTdHJpbmc7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGRpZExheW91dFN1YnZpZXdzKCkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5fZGlkTGF5b3V0U3Vidmlld3NEZWxlZ2F0ZUZ1bmN0aW9uKClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGdldCBjb25zdHJhaW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnN0cmFpbnRzXG4gICAgfVxuICAgIFxuICAgIHNldCBjb25zdHJhaW50cyhjb25zdHJhaW50cykge1xuICAgICAgICB0aGlzLl9jb25zdHJhaW50cyA9IGNvbnN0cmFpbnRzXG4gICAgfVxuICAgIFxuICAgIGFkZENvbnN0cmFpbnQoY29uc3RyYWludCkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5jb25zdHJhaW50cy5wdXNoKGNvbnN0cmFpbnQpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBhZGRDb25zdHJhaW50c1dpdGhWaXN1YWxGb3JtYXQodmlzdWFsRm9ybWF0QXJyYXkpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY29uc3RyYWludHMgPSB0aGlzLmNvbnN0cmFpbnRzLmNvbmNhdChBdXRvTGF5b3V0LlZpc3VhbEZvcm1hdC5wYXJzZShcbiAgICAgICAgICAgIHZpc3VhbEZvcm1hdEFycmF5LFxuICAgICAgICAgICAgeyBleHRlbmRlZDogdHJ1ZSB9XG4gICAgICAgICkpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBzdGF0aWMgY29uc3RyYWludFdpdGhWaWV3KHZpZXcsIGF0dHJpYnV0ZSwgcmVsYXRpb24sIHRvVmlldywgdG9BdHRyaWJ1dGUsIG11bHRpcGxpZXIsIGNvbnN0YW50LCBwcmlvcml0eSkge1xuICAgICAgICBcbiAgICAgICAgdmFyIFVJVmlld09iamVjdCA9IG5pbFxuICAgICAgICB2YXIgdmlld0lEID0gbnVsbFxuICAgICAgICBpZiAodmlldykge1xuICAgICAgICAgICAgaWYgKHZpZXcuaXNLaW5kT2ZDbGFzcyAmJiB2aWV3LmlzS2luZE9mQ2xhc3MoVUlWaWV3KSkge1xuICAgICAgICAgICAgICAgIFVJVmlld09iamVjdCA9IHZpZXdcbiAgICAgICAgICAgICAgICB2aWV3ID0gdmlldy52aWV3SFRNTEVsZW1lbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZpZXdJRCA9IHZpZXcuaWRcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIHRvVUlWaWV3T2JqZWN0ID0gbmlsXG4gICAgICAgIHZhciB0b1ZpZXdJRCA9IG51bGxcbiAgICAgICAgaWYgKHRvVmlldykge1xuICAgICAgICAgICAgaWYgKHRvVmlldy5pc0tpbmRPZkNsYXNzICYmIHZpZXcuaXNLaW5kT2ZDbGFzcyhVSVZpZXcpKSB7XG4gICAgICAgICAgICAgICAgdG9VSVZpZXdPYmplY3QgPSB0b1ZpZXdcbiAgICAgICAgICAgICAgICB0b1ZpZXcgPSB0b1ZpZXcudmlld0hUTUxFbGVtZW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b1ZpZXdJRCA9IHRvVmlldy5pZFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBjb25zdHJhaW50ID0ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2aWV3MTogdmlld0lELFxuICAgICAgICAgICAgYXR0cjE6IGF0dHJpYnV0ZSxcbiAgICAgICAgICAgIHJlbGF0aW9uOiByZWxhdGlvbixcbiAgICAgICAgICAgIHZpZXcyOiB0b1ZpZXdJRCxcbiAgICAgICAgICAgIGF0dHIyOiB0b0F0dHJpYnV0ZSxcbiAgICAgICAgICAgIG11bHRpcGxpZXI6IG11bHRpcGxpZXIsXG4gICAgICAgICAgICBjb25zdGFudDogY29uc3RhbnQsXG4gICAgICAgICAgICBwcmlvcml0eTogcHJpb3JpdHlcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gY29uc3RyYWludFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIGNvbnN0cmFpbnRBdHRyaWJ1dGUgPSB7XG4gICAgICAgIFxuICAgICAgICBcImxlZnRcIjogQXV0b0xheW91dC5BdHRyaWJ1dGUuTEVGVCxcbiAgICAgICAgXCJyaWdodFwiOiBBdXRvTGF5b3V0LkF0dHJpYnV0ZS5SSUdIVCxcbiAgICAgICAgXCJib3R0b21cIjogQXV0b0xheW91dC5BdHRyaWJ1dGUuQk9UVE9NLFxuICAgICAgICBcInRvcFwiOiBBdXRvTGF5b3V0LkF0dHJpYnV0ZS5UT1AsXG4gICAgICAgIFwiY2VudGVyWFwiOiBBdXRvTGF5b3V0LkF0dHJpYnV0ZS5DRU5URVJYLFxuICAgICAgICBcImNlbnRlcllcIjogQXV0b0xheW91dC5BdHRyaWJ1dGUuQ0VOVEVSWSxcbiAgICAgICAgXCJoZWlnaHRcIjogQXV0b0xheW91dC5BdHRyaWJ1dGUuSEVJR0hULFxuICAgICAgICBcIndpZHRoXCI6IEF1dG9MYXlvdXQuQXR0cmlidXRlLldJRFRILFxuICAgICAgICBcInpJbmRleFwiOiBBdXRvTGF5b3V0LkF0dHJpYnV0ZS5aSU5ERVgsXG4gICAgICAgIC8vIE5vdCBzdXJlIHdoYXQgdGhlc2UgYXJlIGZvclxuICAgICAgICBcImNvbnN0YW50XCI6IEF1dG9MYXlvdXQuQXR0cmlidXRlLk5PVEFOQVRUUklCVVRFLFxuICAgICAgICBcInZhcmlhYmxlXCI6IEF1dG9MYXlvdXQuQXR0cmlidXRlLlZBUklBQkxFXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBzdGF0aWMgY29uc3RyYWludFJlbGF0aW9uID0ge1xuICAgICAgICBcbiAgICAgICAgXCJlcXVhbFwiOiBBdXRvTGF5b3V0LlJlbGF0aW9uLkVRVSxcbiAgICAgICAgXCJsZXNzVGhhbk9yRXF1YWxcIjogQXV0b0xheW91dC5SZWxhdGlvbi5MRVEsXG4gICAgICAgIFwiZ3JlYXRlclRoYW5PckVxdWFsXCI6IEF1dG9MYXlvdXQuUmVsYXRpb24uR0VRXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBzdWJ2aWV3V2l0aElEKHZpZXdJRCkge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHZhciByZXN1bHRIVE1MRWxlbWVudCA9IG5pbFxuICAgICAgICBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVzdWx0SFRNTEVsZW1lbnQgPSB0aGlzLnZpZXdIVE1MRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiI1wiICsgdmlld0lEKVxuICAgICAgICAgICAgXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAocmVzdWx0SFRNTEVsZW1lbnQgJiYgcmVzdWx0SFRNTEVsZW1lbnQuVUlWaWV3KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0SFRNTEVsZW1lbnQuVUlWaWV3XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5pbFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICByZWN0YW5nbGVDb250YWluaW5nU3Vidmlld3MoKSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBjZW50ZXIgPSB0aGlzLmJvdW5kcy5jZW50ZXJcbiAgICAgICAgXG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgVUlSZWN0YW5nbGUoY2VudGVyLngsIGNlbnRlci55LCAwLCAwKVxuICAgICAgICBcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN1YnZpZXdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHN1YnZpZXcgPSB0aGlzLnN1YnZpZXdzW2ldXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBmcmFtZSA9IHN1YnZpZXcuZnJhbWVcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgcmVjdGFuZ2xlQ29udGFpbmluZ1N1YnZpZXdzID0gc3Vidmlldy5yZWN0YW5nbGVDb250YWluaW5nU3Vidmlld3MoKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBmcmFtZSA9IGZyYW1lLmNvbmNhdGVuYXRlV2l0aFJlY3RhbmdsZShyZWN0YW5nbGVDb250YWluaW5nU3Vidmlld3MpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXRlbmF0ZVdpdGhSZWN0YW5nbGUoZnJhbWUpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgaGFzU3Vidmlldyh2aWV3OiBVSVZpZXcpIHtcbiAgICAgICAgXG4gICAgICAgIC8vIFRoaXMgaXMgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgICAgICAgaWYgKCFJUyh2aWV3KSkge1xuICAgICAgICAgICAgcmV0dXJuIE5PXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zdWJ2aWV3cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgc3VidmlldyA9IHRoaXMuc3Vidmlld3NbaV1cbiAgICAgICAgICAgIGlmIChzdWJ2aWV3ID09IHZpZXcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWUVTXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE5PXG4gICAgfVxuICAgIFxuICAgIGdldCB2aWV3QmVsb3dUaGlzVmlldygpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0OiBVSVZpZXcgPSAodGhpcy52aWV3SFRNTEVsZW1lbnQucHJldmlvdXNFbGVtZW50U2libGluZyBhcyBhbnkgfHwge30pLlVJVmlld1xuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxuICAgIFxuICAgIGdldCB2aWV3QWJvdmVUaGlzVmlldygpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0OiBVSVZpZXcgPSAodGhpcy52aWV3SFRNTEVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nIGFzIGFueSB8fCB7fSkuVUlWaWV3XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gICAgXG4gICAgYWRkU3Vidmlldyh2aWV3OiBVSVZpZXcsIGFib3ZlVmlldz86IFVJVmlldykge1xuICAgICAgICBcbiAgICAgICAgaWYgKCF0aGlzLmhhc1N1YnZpZXcodmlldykgJiYgSVModmlldykpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmlldy53aWxsTW92ZVRvU3VwZXJ2aWV3KHRoaXMpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChJUyhhYm92ZVZpZXcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3SFRNTEVsZW1lbnQuaW5zZXJ0QmVmb3JlKHZpZXcudmlld0hUTUxFbGVtZW50LCBhYm92ZVZpZXcudmlld0hUTUxFbGVtZW50Lm5leHRTaWJsaW5nKVxuICAgICAgICAgICAgICAgIHRoaXMuc3Vidmlld3MuaW5zZXJ0RWxlbWVudEF0SW5kZXgodGhpcy5zdWJ2aWV3cy5pbmRleE9mKGFib3ZlVmlldyksIHZpZXcpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdIVE1MRWxlbWVudC5hcHBlbmRDaGlsZCh2aWV3LnZpZXdIVE1MRWxlbWVudClcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnZpZXdzLnB1c2godmlldylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZpZXcuZGlkTW92ZVRvU3VwZXJ2aWV3KHRoaXMpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICh0aGlzLnN1cGVydmlldyAmJiB0aGlzLmlzTWVtYmVyT2ZWaWV3VHJlZSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZpZXcuYnJvYWRjYXN0RXZlbnRJblN1YnRyZWUoe1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogVUlWaWV3LmJyb2FkY2FzdEV2ZW50TmFtZS5BZGRlZFRvVmlld1RyZWUsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnM6IG5pbFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnNldE5lZWRzTGF5b3V0KClcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBhZGRTdWJ2aWV3cyh2aWV3czogVUlWaWV3W10pIHtcbiAgICAgICAgdmlld3MuZm9yRWFjaChmdW5jdGlvbiAodGhpczogVUlWaWV3LCB2aWV3OiBVSVZpZXcsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgdGhpcy5hZGRTdWJ2aWV3KHZpZXcpXG4gICAgICAgIH0sIHRoaXMpXG4gICAgfVxuICAgIFxuICAgIFxuICAgIG1vdmVUb0JvdHRvbU9mU3VwZXJ2aWV3KCkge1xuICAgICAgICBcbiAgICAgICAgaWYgKElTKHRoaXMuc3VwZXJ2aWV3KSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBib3R0b21WaWV3ID0gdGhpcy5zdXBlcnZpZXcuc3Vidmlld3MuZmlyc3RFbGVtZW50XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChib3R0b21WaWV3ID09IHRoaXMpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zdXBlcnZpZXcuc3Vidmlld3MucmVtb3ZlRWxlbWVudCh0aGlzKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnN1cGVydmlldy5zdWJ2aWV3cy5pbnNlcnRFbGVtZW50QXRJbmRleCgwLCB0aGlzKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnN1cGVydmlldy52aWV3SFRNTEVsZW1lbnQuaW5zZXJ0QmVmb3JlKHRoaXMudmlld0hUTUxFbGVtZW50LCBib3R0b21WaWV3LnZpZXdIVE1MRWxlbWVudClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgbW92ZVRvVG9wT2ZTdXBlcnZpZXcoKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAoSVModGhpcy5zdXBlcnZpZXcpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHRvcFZpZXcgPSB0aGlzLnN1cGVydmlldy5zdWJ2aWV3cy5sYXN0RWxlbWVudFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodG9wVmlldyA9PSB0aGlzKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuc3VwZXJ2aWV3LnN1YnZpZXdzLnJlbW92ZUVsZW1lbnQodGhpcylcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zdXBlcnZpZXcuc3Vidmlld3MucHVzaCh0aGlzKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnN1cGVydmlldy52aWV3SFRNTEVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy52aWV3SFRNTEVsZW1lbnQpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHJlbW92ZUZyb21TdXBlcnZpZXcoKSB7XG4gICAgICAgIGlmIChJUyh0aGlzLnN1cGVydmlldykpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5mb3JFYWNoVmlld0luU3VidHJlZShmdW5jdGlvbiAodmlldykge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZpZXcuYmx1cigpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuc3VwZXJ2aWV3LnN1YnZpZXdzLmluZGV4T2YodGhpcylcbiAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdXBlcnZpZXcuc3Vidmlld3Muc3BsaWNlKGluZGV4LCAxKVxuICAgICAgICAgICAgICAgIHRoaXMuc3VwZXJ2aWV3LnZpZXdIVE1MRWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLnZpZXdIVE1MRWxlbWVudClcbiAgICAgICAgICAgICAgICB0aGlzLnN1cGVydmlldyA9IG5pbFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuYnJvYWRjYXN0RXZlbnRJblN1YnRyZWUoe1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogVUlWaWV3LmJyb2FkY2FzdEV2ZW50TmFtZS5SZW1vdmVkRnJvbVZpZXdUcmVlLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzOiBuaWxcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBcbiAgICB3aWxsQXBwZWFyKCkge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICB3aWxsTW92ZVRvU3VwZXJ2aWV3KHN1cGVydmlldzogVUlWaWV3KSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLl9zZXRJbm5lckhUTUxGcm9tS2V5SWZQb3NzaWJsZSgpXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9zZXRJbm5lckhUTUxGcm9tTG9jYWxpemVkVGV4dE9iamVjdElmUG9zc2libGUoKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgZGlkTW92ZVRvU3VwZXJ2aWV3KHN1cGVydmlldzogVUlWaWV3KSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnN1cGVydmlldyA9IHN1cGVydmlld1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgd2FzQWRkZWRUb1ZpZXdUcmVlKCkge1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgd2FzUmVtb3ZlZEZyb21WaWV3VHJlZSgpIHtcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGdldCBpc01lbWJlck9mVmlld1RyZWUoKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy52aWV3SFRNTEVsZW1lbnRcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGVsZW1lbnQ7IGkgPSBpKSB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5wYXJlbnRFbGVtZW50ICYmIGVsZW1lbnQucGFyZW50RWxlbWVudCA9PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFlFU1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBOT1xuICAgIH1cbiAgICBcbiAgICBcbiAgICBnZXQgYWxsU3VwZXJ2aWV3cygpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW11cbiAgICAgICAgdmFyIHZpZXc6IFVJVmlldyA9IHRoaXNcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IElTKHZpZXcpOyBpID0gaSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godmlldylcbiAgICAgICAgICAgIHZpZXcgPSB2aWV3LnN1cGVydmlld1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gICAgXG4gICAgXG4gICAgc2V0TmVlZHNMYXlvdXRPbkFsbFN1cGVydmlld3MoKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmFsbFN1cGVydmlld3MucmV2ZXJzZSgpLmZvckVhY2goZnVuY3Rpb24gKHZpZXc6IFVJVmlldywgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZpZXcuc2V0TmVlZHNMYXlvdXQoKVxuICAgICAgICAgICAgXG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBzZXROZWVkc0xheW91dFVwVG9Sb290VmlldygpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2V0TmVlZHNMYXlvdXRPbkFsbFN1cGVydmlld3MoKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5zZXROZWVkc0xheW91dCgpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBmb2N1cygpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudmlld0hUTUxFbGVtZW50LmZvY3VzKClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGJsdXIoKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnZpZXdIVE1MRWxlbWVudC5ibHVyKClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIF9sb2FkVUlFdmVudHMoKSB7XG4gICAgICAgIFxuICAgICAgICAvL3RoaXMudmlld0hUTUxFbGVtZW50ID0gbmlsO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgaXNUb3VjaEV2ZW50Q2xhc3NEZWZpbmVkOiBib29sZWFuID0gTk8gfHwgKHdpbmRvdyBhcyBhbnkpLlRvdWNoRXZlbnRcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHBhdXNlRXZlbnQgPSAoZXZlbnQ6IEV2ZW50LCBmb3JjZWQgPSBOTykgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodGhpcy5wYXVzZXNQb2ludGVyRXZlbnRzIHx8IGZvcmNlZCkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZVxuICAgICAgICAgICAgICAgIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGV2ZW50LnN0b3BQcm9wYWdhdGlvbiAmJiB0aGlzLnN0b3BzUG9pbnRlckV2ZW50UHJvcGFnYXRpb24pIHtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG9uTW91c2VEb3duID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICgodGhpcy5pZ25vcmVzVG91Y2hlcyAmJiBpc1RvdWNoRXZlbnRDbGFzc0RlZmluZWQgJiYgZXZlbnQgaW5zdGFuY2VvZiBUb3VjaEV2ZW50KSB8fFxuICAgICAgICAgICAgICAgICgodGhpcy5pZ25vcmVzTW91c2UgfHwgKElTKHRoaXMuX3RvdWNoRXZlbnRUaW1lKSAmJiAoRGF0ZS5ub3coKSAtIHRoaXMuX3RvdWNoRXZlbnRUaW1lKSA+IDUwMCkpICYmXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50IGluc3RhbmNlb2YgTW91c2VFdmVudCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zZW5kQ29udHJvbEV2ZW50Rm9yS2V5KFVJVmlldy5jb250cm9sRXZlbnQuUG9pbnRlckRvd24sIGV2ZW50KVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl9pc1BvaW50ZXJJbnNpZGUgPSBZRVNcbiAgICAgICAgICAgIHRoaXMuX2lzUG9pbnRlclZhbGlkID0gWUVTXG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsUG9pbnRlclBvc2l0aW9uID0gbmV3IFVJUG9pbnQoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSlcbiAgICAgICAgICAgIGlmIChpc1RvdWNoRXZlbnRDbGFzc0RlZmluZWQgJiYgZXZlbnQgaW5zdGFuY2VvZiBUb3VjaEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5fdG91Y2hFdmVudFRpbWUgPSBEYXRlLm5vdygpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5faW5pdGlhbFBvaW50ZXJQb3NpdGlvbiA9IG5ldyBVSVBvaW50KGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WCwgZXZlbnQudG91Y2hlc1swXS5jbGllbnRZKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChldmVudC50b3VjaGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIG9uVG91Y2hDYW5jZWwoZXZlbnQpXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5fdG91Y2hFdmVudFRpbWUgPSBuaWxcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBwYXVzZUV2ZW50KGV2ZW50KVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX2hhc1BvaW50ZXJEcmFnZ2VkID0gTk9cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBvblRvdWNoU3RhcnQgPSBvbk1vdXNlRG93biBhcyBhbnlcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG9ubW91c2V1cCA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lzUG9pbnRlclZhbGlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICgodGhpcy5pZ25vcmVzVG91Y2hlcyAmJiBpc1RvdWNoRXZlbnRDbGFzc0RlZmluZWQgJiYgZXZlbnQgaW5zdGFuY2VvZiBUb3VjaEV2ZW50KSB8fFxuICAgICAgICAgICAgICAgICh0aGlzLmlnbm9yZXNNb3VzZSAmJiBldmVudCBpbnN0YW5jZW9mIE1vdXNlRXZlbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc1BvaW50ZXJJbnNpZGUpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBvblBvaW50ZXJVcEluc2lkZShldmVudClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2hhc1BvaW50ZXJEcmFnZ2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRDb250cm9sRXZlbnRGb3JLZXkoVUlWaWV3LmNvbnRyb2xFdmVudC5Qb2ludGVyVGFwLCBldmVudClcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBUaGlzIGhhcyB0byBiZSBzZW50IGFmdGVyIHRoZSBtb3JlIHNwZWNpZmljIGV2ZW50IHNvIHRoYXQgVUlCdXR0b24gY2FuIGlnbm9yZSBpdCB3aGVuIG5vdCBoaWdobGlnaHRlZFxuICAgICAgICAgICAgdGhpcy5zZW5kQ29udHJvbEV2ZW50Rm9yS2V5KFVJVmlldy5jb250cm9sRXZlbnQuUG9pbnRlclVwLCBldmVudClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcGF1c2VFdmVudChldmVudClcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBvblRvdWNoRW5kID0gb25tb3VzZXVwXG4gICAgICAgIFxuICAgICAgICAvLyBmdW5jdGlvbiBvbk1vdXNlRW50ZXIoZXZlbnQpIHtcbiAgICAgICAgXG4gICAgICAgIC8vICAgICB0aGlzLnNlbmRDb250cm9sRXZlbnRGb3JLZXkoVUlWaWV3LmNvbnRyb2xFdmVudC5Qb2ludGVyRW50ZXIsIGV2ZW50KTtcbiAgICAgICAgXG4gICAgICAgIC8vICAgICB0aGlzLl9pc1BvaW50ZXJJbnNpZGUgPSBZRVM7XG4gICAgICAgIFxuICAgICAgICAvLyAgICAgcGF1c2VFdmVudChldmVudCk7XG4gICAgICAgIFxuICAgICAgICAvLyB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBvbm1vdXNlb3V0ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICgodGhpcy5pZ25vcmVzVG91Y2hlcyAmJiBpc1RvdWNoRXZlbnRDbGFzc0RlZmluZWQgJiYgZXZlbnQgaW5zdGFuY2VvZiBUb3VjaEV2ZW50KSB8fFxuICAgICAgICAgICAgICAgICh0aGlzLmlnbm9yZXNNb3VzZSAmJiBldmVudCBpbnN0YW5jZW9mIE1vdXNlRXZlbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuc2VuZENvbnRyb2xFdmVudEZvcktleShVSVZpZXcuY29udHJvbEV2ZW50LlBvaW50ZXJMZWF2ZSwgZXZlbnQpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX2lzUG9pbnRlckluc2lkZSA9IE5PXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHBhdXNlRXZlbnQoZXZlbnQpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3Qgb25Ub3VjaExlYXZlID0gb25tb3VzZW91dFxuICAgICAgICBcbiAgICAgICAgdmFyIG9uVG91Y2hDYW5jZWwgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pc1BvaW50ZXJWYWxpZCkge1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoKHRoaXMuaWdub3Jlc1RvdWNoZXMgJiYgaXNUb3VjaEV2ZW50Q2xhc3NEZWZpbmVkICYmIGV2ZW50IGluc3RhbmNlb2YgVG91Y2hFdmVudCkgfHxcbiAgICAgICAgICAgICAgICAodGhpcy5pZ25vcmVzTW91c2UgJiYgZXZlbnQgaW5zdGFuY2VvZiBNb3VzZUV2ZW50KSkge1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl9pc1BvaW50ZXJWYWxpZCA9IE5PXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuc2VuZENvbnRyb2xFdmVudEZvcktleShVSVZpZXcuY29udHJvbEV2ZW50LlBvaW50ZXJDYW5jZWwsIGV2ZW50KVxuICAgICAgICAgICAgXG4gICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICBcbiAgICAgICAgY29uc3Qgb25tb3VzZW92ZXIgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCh0aGlzLmlnbm9yZXNUb3VjaGVzICYmIGlzVG91Y2hFdmVudENsYXNzRGVmaW5lZCAmJiBldmVudCBpbnN0YW5jZW9mIFRvdWNoRXZlbnQpIHx8XG4gICAgICAgICAgICAgICAgKHRoaXMuaWdub3Jlc01vdXNlICYmIGV2ZW50IGluc3RhbmNlb2YgTW91c2VFdmVudCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zZW5kQ29udHJvbEV2ZW50Rm9yS2V5KFVJVmlldy5jb250cm9sRXZlbnQuUG9pbnRlckhvdmVyLCBldmVudClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5faXNQb2ludGVySW5zaWRlID0gWUVTXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX2lzUG9pbnRlclZhbGlkID0gWUVTXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHBhdXNlRXZlbnQoZXZlbnQpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3Qgb25Nb3VzZU1vdmUgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pc1BvaW50ZXJWYWxpZCkge1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoKHRoaXMuaWdub3Jlc1RvdWNoZXMgJiYgaXNUb3VjaEV2ZW50Q2xhc3NEZWZpbmVkICYmIGV2ZW50IGluc3RhbmNlb2YgVG91Y2hFdmVudCkgfHxcbiAgICAgICAgICAgICAgICAodGhpcy5pZ25vcmVzTW91c2UgJiYgZXZlbnQgaW5zdGFuY2VvZiBNb3VzZUV2ZW50KSkge1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoSVNfTk9UKHRoaXMuX2luaXRpYWxQb2ludGVyUG9zaXRpb24pKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5faW5pdGlhbFBvaW50ZXJQb3NpdGlvbiA9IG5ldyBVSVBvaW50KGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChuZXcgVUlQb2ludChldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZKS50byh0aGlzLl9pbml0aWFsUG9pbnRlclBvc2l0aW9uKS5sZW5ndGggPlxuICAgICAgICAgICAgICAgIHRoaXMuX3BvaW50ZXJEcmFnVGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5faGFzUG9pbnRlckRyYWdnZWQgPSBZRVNcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnNlbmRDb250cm9sRXZlbnRGb3JLZXkoVUlWaWV3LmNvbnRyb2xFdmVudC5Qb2ludGVyTW92ZSwgZXZlbnQpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHBhdXNlRXZlbnQoZXZlbnQpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3Qgb25Ub3VjaE1vdmUgPSBmdW5jdGlvbiAoZXZlbnQ6IFRvdWNoRXZlbnQpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pc1BvaW50ZXJWYWxpZCkge1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoKHRoaXMuaWdub3Jlc1RvdWNoZXMgJiYgaXNUb3VjaEV2ZW50Q2xhc3NEZWZpbmVkICYmIGV2ZW50IGluc3RhbmNlb2YgVG91Y2hFdmVudCkgfHxcbiAgICAgICAgICAgICAgICAodGhpcy5pZ25vcmVzTW91c2UgJiYgZXZlbnQgaW5zdGFuY2VvZiBNb3VzZUV2ZW50KSkge1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZXZlbnQudG91Y2hlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgb25Ub3VjaFpvb20oZXZlbnQpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHRvdWNoID0gZXZlbnQudG91Y2hlc1swXVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAobmV3IFVJUG9pbnQodG91Y2guY2xpZW50WCwgdG91Y2guY2xpZW50WSkudG8odGhpcy5faW5pdGlhbFBvaW50ZXJQb3NpdGlvbikubGVuZ3RoID5cbiAgICAgICAgICAgICAgICB0aGlzLl9wb2ludGVyRHJhZ1RocmVzaG9sZCkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuX2hhc1BvaW50ZXJEcmFnZ2VkID0gWUVTXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHRoaXMuX2lzUG9pbnRlckluc2lkZSAmJiB0aGlzLnZpZXdIVE1MRWxlbWVudCAhPVxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQodG91Y2guY2xpZW50WCwgdG91Y2guY2xpZW50WSkpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLl9pc1BvaW50ZXJJbnNpZGUgPSBOT1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZENvbnRyb2xFdmVudEZvcktleShVSVZpZXcuY29udHJvbEV2ZW50LlBvaW50ZXJMZWF2ZSwgZXZlbnQpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zZW5kQ29udHJvbEV2ZW50Rm9yS2V5KFVJVmlldy5jb250cm9sRXZlbnQuUG9pbnRlck1vdmUsIGV2ZW50KVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL3BhdXNlRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIG9uVG91Y2hab29tID0gZnVuY3Rpb24gb25Ub3VjaFpvb20oZXZlbnQ6IFRvdWNoRXZlbnQpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zZW5kQ29udHJvbEV2ZW50Rm9yS2V5KFVJVmlldy5jb250cm9sRXZlbnQuTXVsdGlwbGVUb3VjaGVzLCBldmVudClcbiAgICAgICAgICAgIFxuICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB2YXIgb25Qb2ludGVyVXBJbnNpZGUgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHBhdXNlRXZlbnQoZXZlbnQpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuc2VuZENvbnRyb2xFdmVudEZvcktleShVSVZpZXcuY29udHJvbEV2ZW50LlBvaW50ZXJVcEluc2lkZSwgZXZlbnQpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIGV2ZW50S2V5SXNFbnRlcihldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgIT09IDEzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE5PXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gWUVTXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIGV2ZW50S2V5SXNUYWIoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlICE9PSA5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE5PXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gWUVTXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIGV2ZW50S2V5SXNFc2MoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBmYWxzZVxuICAgICAgICAgICAgaWYgKFwia2V5XCIgaW4gZXZlbnQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSAoZXZlbnQua2V5ID09IFwiRXNjYXBlXCIgfHwgZXZlbnQua2V5ID09IFwiRXNjXCIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSAoZXZlbnQua2V5Q29kZSA9PSAyNylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZnVuY3Rpb24gZXZlbnRLZXlJc0xlZnQoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlICE9IFwiMzdcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBOT1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFlFU1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBmdW5jdGlvbiBldmVudEtleUlzUmlnaHQoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlICE9IFwiMzlcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBOT1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFlFU1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBmdW5jdGlvbiBldmVudEtleUlzRG93bihldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgIT0gXCI0MFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE5PXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gWUVTXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIGV2ZW50S2V5SXNVcChldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgIT0gXCIzOFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE5PXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gWUVTXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG9uS2V5RG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZXZlbnRLZXlJc0VudGVyKGV2ZW50KSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZENvbnRyb2xFdmVudEZvcktleShVSVZpZXcuY29udHJvbEV2ZW50LkVudGVyRG93biwgZXZlbnQpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChldmVudEtleUlzRXNjKGV2ZW50KSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZENvbnRyb2xFdmVudEZvcktleShVSVZpZXcuY29udHJvbEV2ZW50LkVzY0Rvd24sIGV2ZW50KVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZXZlbnRLZXlJc1RhYihldmVudCkgJiYgdGhpcy5fY29udHJvbEV2ZW50VGFyZ2V0cy5UYWJEb3duICYmIHRoaXMuX2NvbnRyb2xFdmVudFRhcmdldHMuVGFiRG93bi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRDb250cm9sRXZlbnRGb3JLZXkoVUlWaWV3LmNvbnRyb2xFdmVudC5UYWJEb3duLCBldmVudClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBwYXVzZUV2ZW50KGV2ZW50LCBZRVMpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChldmVudEtleUlzTGVmdChldmVudCkpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRDb250cm9sRXZlbnRGb3JLZXkoVUlWaWV3LmNvbnRyb2xFdmVudC5MZWZ0QXJyb3dEb3duLCBldmVudClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGV2ZW50S2V5SXNSaWdodChldmVudCkpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRDb250cm9sRXZlbnRGb3JLZXkoVUlWaWV3LmNvbnRyb2xFdmVudC5SaWdodEFycm93RG93biwgZXZlbnQpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChldmVudEtleUlzRG93bihldmVudCkpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRDb250cm9sRXZlbnRGb3JLZXkoVUlWaWV3LmNvbnRyb2xFdmVudC5Eb3duQXJyb3dEb3duLCBldmVudClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGV2ZW50S2V5SXNVcChldmVudCkpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRDb250cm9sRXZlbnRGb3JLZXkoVUlWaWV3LmNvbnRyb2xFdmVudC5VcEFycm93RG93biwgZXZlbnQpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgIFxuICAgICAgICBjb25zdCBvbktleVVwID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChldmVudEtleUlzRW50ZXIoZXZlbnQpKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kQ29udHJvbEV2ZW50Rm9yS2V5KFVJVmlldy5jb250cm9sRXZlbnQuRW50ZXJVcCwgZXZlbnQpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgY29uc3Qgb25mb2N1cyA9IGZ1bmN0aW9uIChldmVudDogRXZlbnQpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zZW5kQ29udHJvbEV2ZW50Rm9yS2V5KFVJVmlldy5jb250cm9sRXZlbnQuRm9jdXMsIGV2ZW50KVxuICAgICAgICAgICAgXG4gICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICBcbiAgICAgICAgY29uc3Qgb25ibHVyID0gZnVuY3Rpb24gKGV2ZW50OiBFdmVudCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnNlbmRDb250cm9sRXZlbnRGb3JLZXkoVUlWaWV3LmNvbnRyb2xFdmVudC5CbHVyLCBldmVudClcbiAgICAgICAgICAgIFxuICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAvLyBNb3VzZSBhbmQgdG91Y2ggc3RhcnQgZXZlbnRzXG4gICAgICAgIHRoaXMuX3ZpZXdIVE1MRWxlbWVudC5vbm1vdXNlZG93biA9IG9uTW91c2VEb3duLmJpbmQodGhpcylcbiAgICAgICAgdGhpcy5fdmlld0hUTUxFbGVtZW50Lm9udG91Y2hzdGFydCA9IG9uVG91Y2hTdGFydC5iaW5kKHRoaXMpXG4gICAgICAgIC8vIHRoaXMudmlld0hUTUxFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgb25Nb3VzZURvd24uYmluZCh0aGlzKSwgZmFsc2UpXG4gICAgICAgIC8vIHRoaXMudmlld0hUTUxFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvblRvdWNoU3RhcnQuYmluZCh0aGlzKSwgZmFsc2UpXG4gICAgICAgIC8vIC8vdGhpcy52aWV3SFRNTEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgb25Nb3VzZUVudGVyLmJpbmQodGhpcyksIGZhbHNlKTtcbiAgICAgICAgXG4gICAgICAgIC8vIE1vdXNlIGFuZCB0b3VjaCBtb3ZlIGV2ZW50c1xuICAgICAgICB0aGlzLl92aWV3SFRNTEVsZW1lbnQub25tb3VzZW1vdmUgPSBvbk1vdXNlTW92ZS5iaW5kKHRoaXMpXG4gICAgICAgIHRoaXMuX3ZpZXdIVE1MRWxlbWVudC5vbnRvdWNobW92ZSA9IG9uVG91Y2hNb3ZlLmJpbmQodGhpcylcbiAgICAgICAgLy8gdGhpcy52aWV3SFRNTEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBvbk1vdXNlTW92ZS5iaW5kKHRoaXMpLCBmYWxzZSlcbiAgICAgICAgLy8gdGhpcy52aWV3SFRNTEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25Ub3VjaE1vdmUuYmluZCh0aGlzKSwgZmFsc2UpXG4gICAgICAgIFxuICAgICAgICAvL3RoaXMudmlld0hUTUxFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXdoZWVsXCIsIG9ubW91c2V3aGVlbC5iaW5kKHRoaXMpLCBmYWxzZSlcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3ZpZXdIVE1MRWxlbWVudC5vbm1vdXNlb3ZlciA9IG9ubW91c2VvdmVyLmJpbmQodGhpcylcbiAgICAgICAgLy8gdGhpcy52aWV3SFRNTEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLCBvbm1vdXNlb3Zlci5iaW5kKHRoaXMpLCBmYWxzZSlcbiAgICAgICAgXG4gICAgICAgIC8vIE1vdXNlIGFuZCB0b3VjaCBlbmQgZXZlbnRzXG4gICAgICAgIHRoaXMuX3ZpZXdIVE1MRWxlbWVudC5vbm1vdXNldXAgPSBvbm1vdXNldXAuYmluZCh0aGlzKVxuICAgICAgICB0aGlzLl92aWV3SFRNTEVsZW1lbnQub250b3VjaGVuZCA9IG9uVG91Y2hFbmQuYmluZCh0aGlzKVxuICAgICAgICB0aGlzLl92aWV3SFRNTEVsZW1lbnQub250b3VjaGNhbmNlbCA9IG9uVG91Y2hDYW5jZWwuYmluZCh0aGlzKVxuICAgICAgICAvLyB0aGlzLnZpZXdIVE1MRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBvbm1vdXNldXAuYmluZCh0aGlzKSwgZmFsc2UpXG4gICAgICAgIC8vIHRoaXMudmlld0hUTUxFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25Ub3VjaEVuZC5iaW5kKHRoaXMpLCBmYWxzZSlcbiAgICAgICAgLy8gdGhpcy52aWV3SFRNTEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hjYW5jZWwnLCBvblRvdWNoQ2FuY2VsLmJpbmQodGhpcyksIGZhbHNlKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fdmlld0hUTUxFbGVtZW50Lm9ubW91c2VvdXQgPSBvbm1vdXNlb3V0LmJpbmQodGhpcylcbiAgICAgICAgLy8gdGhpcy52aWV3SFRNTEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3V0XCIsIG9ubW91c2VvdXQuYmluZCh0aGlzKSwgZmFsc2UpXG4gICAgICAgIHRoaXMuX3ZpZXdIVE1MRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hsZWF2ZVwiLCBvblRvdWNoTGVhdmUuYmluZCh0aGlzKSwgZmFsc2UpXG4gICAgICAgIFxuICAgICAgICAvLyB0aGlzLnZpZXdIVE1MRWxlbWVudC5vbmtleWRvd24gPSBvbmtleWRvd25cbiAgICAgICAgLy8gdGhpcy52aWV3SFRNTEVsZW1lbnQub25rZXl1cCA9IG9ua2V5dXBcbiAgICAgICAgdGhpcy5fdmlld0hUTUxFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIG9uS2V5RG93biwgZmFsc2UpXG4gICAgICAgIHRoaXMuX3ZpZXdIVE1MRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgb25LZXlVcCwgZmFsc2UpXG4gICAgICAgIFxuICAgICAgICAvLyBGb2N1cyBldmVudHNcbiAgICAgICAgdGhpcy5fdmlld0hUTUxFbGVtZW50Lm9uZm9jdXMgPSBvbmZvY3VzXG4gICAgICAgIHRoaXMuX3ZpZXdIVE1MRWxlbWVudC5vbmJsdXIgPSBvbmJsdXJcbiAgICAgICAgLy8gdGhpcy52aWV3SFRNTEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIG9uZm9jdXMsIHRydWUpXG4gICAgICAgIC8vIHRoaXMudmlld0hUTUxFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIG9uYmx1ciwgdHJ1ZSlcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBwdWJsaWMgc3RhdGljIGNvbnRyb2xFdmVudCA9IHtcbiAgICAgICAgXG4gICAgICAgIFwiUG9pbnRlckRvd25cIjogXCJQb2ludGVyRG93blwiLFxuICAgICAgICBcIlBvaW50ZXJNb3ZlXCI6IFwiUG9pbnRlck1vdmVcIixcbiAgICAgICAgXCJQb2ludGVyTGVhdmVcIjogXCJQb2ludGVyTGVhdmVcIixcbiAgICAgICAgXCJQb2ludGVyRW50ZXJcIjogXCJQb2ludGVyRW50ZXJcIixcbiAgICAgICAgXCJQb2ludGVyVXBJbnNpZGVcIjogXCJQb2ludGVyVXBJbnNpZGVcIixcbiAgICAgICAgXCJQb2ludGVyVGFwXCI6IFwiUG9pbnRlclRhcFwiLFxuICAgICAgICBcIlBvaW50ZXJVcFwiOiBcIlBvaW50ZXJVcFwiLFxuICAgICAgICBcIk11bHRpcGxlVG91Y2hlc1wiOiBcIlBvaW50ZXJab29tXCIsXG4gICAgICAgIFwiUG9pbnRlckNhbmNlbFwiOiBcIlBvaW50ZXJDYW5jZWxcIixcbiAgICAgICAgXCJQb2ludGVySG92ZXJcIjogXCJQb2ludGVySG92ZXJcIixcbiAgICAgICAgXCJFbnRlckRvd25cIjogXCJFbnRlckRvd25cIixcbiAgICAgICAgXCJFbnRlclVwXCI6IFwiRW50ZXJVcFwiLFxuICAgICAgICBcIkVzY0Rvd25cIjogXCJFc2NEb3duXCIsXG4gICAgICAgIFwiVGFiRG93blwiOiBcIlRhYkRvd25cIixcbiAgICAgICAgXCJMZWZ0QXJyb3dEb3duXCI6IFwiTGVmdEFycm93RG93blwiLFxuICAgICAgICBcIlJpZ2h0QXJyb3dEb3duXCI6IFwiUmlnaHRBcnJvd0Rvd25cIixcbiAgICAgICAgXCJEb3duQXJyb3dEb3duXCI6IFwiRG93bkFycm93RG93blwiLFxuICAgICAgICBcIlVwQXJyb3dEb3duXCI6IFwiVXBBcnJvd0Rvd25cIixcbiAgICAgICAgXCJGb2N1c1wiOiBcIkZvY3VzXCIsXG4gICAgICAgIFwiQmx1clwiOiBcIkJsdXJcIlxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgY29udHJvbEV2ZW50ID0gVUlWaWV3LmNvbnRyb2xFdmVudFxuICAgIFxuICAgIFxuICAgIFxuICAgIGdldCBhZGRDb250cm9sRXZlbnRUYXJnZXQoKSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBldmVudEtleXMgPSBbXVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdDogVUlWaWV3QWRkQ29udHJvbEV2ZW50VGFyZ2V0T2JqZWN0PHR5cGVvZiBVSVZpZXcuY29udHJvbEV2ZW50PiA9IG5ldyBQcm94eShcbiAgICAgICAgICAgICh0aGlzLmNvbnN0cnVjdG9yIGFzIGFueSkuY29udHJvbEV2ZW50LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGdldDogKHRhcmdldCwga2V5LCByZWNlaXZlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRLZXlzLnB1c2goa2V5KVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogKHRhcmdldCwga2V5LCB2YWx1ZSwgcmVjZWl2ZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50S2V5cy5wdXNoKGtleSlcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVGFyZ2V0Rm9yQ29udHJvbEV2ZW50cyhldmVudEtleXMsIHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICApXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBhZGRUYXJnZXRGb3JDb250cm9sRXZlbnRzKGV2ZW50S2V5czogc3RyaW5nW10sIHRhcmdldEZ1bmN0aW9uOiAoc2VuZGVyOiBVSVZpZXcsIGV2ZW50OiBFdmVudCkgPT4gdm9pZCkge1xuICAgICAgICBcbiAgICAgICAgZXZlbnRLZXlzLmZvckVhY2goZnVuY3Rpb24gKHRoaXM6IFVJVmlldywga2V5OiBzdHJpbmcsIGluZGV4OiBudW1iZXIsIGFycmF5OiBzdHJpbmdbXSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmFkZFRhcmdldEZvckNvbnRyb2xFdmVudChrZXksIHRhcmdldEZ1bmN0aW9uKVxuICAgICAgICAgICAgXG4gICAgICAgIH0sIHRoaXMpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBhZGRUYXJnZXRGb3JDb250cm9sRXZlbnQoZXZlbnRLZXk6IHN0cmluZywgdGFyZ2V0RnVuY3Rpb246IChzZW5kZXI6IFVJVmlldywgZXZlbnQ6IEV2ZW50KSA9PiB2b2lkKSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgdGFyZ2V0cyA9IHRoaXMuX2NvbnRyb2xFdmVudFRhcmdldHNbZXZlbnRLZXldXG4gICAgICAgIFxuICAgICAgICBpZiAoIXRhcmdldHMpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHRhcmdldHMgPSBbXVxuICAgICAgICAgICAgdGhpcy5fY29udHJvbEV2ZW50VGFyZ2V0c1tldmVudEtleV0gPSB0YXJnZXRzXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICh0YXJnZXRzLmluZGV4T2YodGFyZ2V0RnVuY3Rpb24pID09IC0xKSB7XG4gICAgICAgICAgICB0YXJnZXRzLnB1c2godGFyZ2V0RnVuY3Rpb24pXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHJlbW92ZVRhcmdldEZvckNvbnRyb2xFdmVudChldmVudEtleTogc3RyaW5nLCB0YXJnZXRGdW5jdGlvbjogKHNlbmRlcjogVUlWaWV3LCBldmVudDogRXZlbnQpID0+IHZvaWQpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0cyA9IHRoaXMuX2NvbnRyb2xFdmVudFRhcmdldHNbZXZlbnRLZXldXG4gICAgICAgIGlmICghdGFyZ2V0cykge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5kZXggPSB0YXJnZXRzLmluZGV4T2YodGFyZ2V0RnVuY3Rpb24pXG4gICAgICAgIGlmIChpbmRleCAhPSAtMSkge1xuICAgICAgICAgICAgdGFyZ2V0cy5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmVtb3ZlVGFyZ2V0Rm9yQ29udHJvbEV2ZW50cyhldmVudEtleXM6IHN0cmluZ1tdLCB0YXJnZXRGdW5jdGlvbjogKHNlbmRlcjogVUlWaWV3LCBldmVudDogRXZlbnQpID0+IHZvaWQpIHtcbiAgICAgICAgXG4gICAgICAgIGV2ZW50S2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXksIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnJlbW92ZVRhcmdldEZvckNvbnRyb2xFdmVudChrZXksIHRhcmdldEZ1bmN0aW9uKVxuICAgICAgICAgICAgXG4gICAgICAgIH0sIHRoaXMpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBzZW5kQ29udHJvbEV2ZW50Rm9yS2V5KGV2ZW50S2V5OiBzdHJpbmcsIG5hdGl2ZUV2ZW50OiBFdmVudCkge1xuICAgICAgICB2YXIgdGFyZ2V0cyA9IHRoaXMuX2NvbnRyb2xFdmVudFRhcmdldHNbZXZlbnRLZXldXG4gICAgICAgIGlmICghdGFyZ2V0cykge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0cyA9IHRhcmdldHMuY29weSgpXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFyZ2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGFyZ2V0c1tpXVxuICAgICAgICAgICAgdGFyZ2V0KHRoaXMsIG5hdGl2ZUV2ZW50KVxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIHN0YXRpYyBicm9hZGNhc3RFdmVudE5hbWUgPSB7XG4gICAgICAgIFxuICAgICAgICBcIkxhbmd1YWdlQ2hhbmdlZFwiOiBcIkxhbmd1YWdlQ2hhbmdlZFwiLFxuICAgICAgICBcIlJlbW92ZWRGcm9tVmlld1RyZWVcIjogXCJSZW1vdmVkRnJvbVZpZXdUcmVlXCIsXG4gICAgICAgIFwiQWRkZWRUb1ZpZXdUcmVlXCI6IFwiQWRkZWRUb1ZpZXdUcmVlXCIsXG4gICAgICAgIFwiUGFnZURpZFNjcm9sbFwiOiBcIlBhZ2VEaWRTY3JvbGxcIlxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgYnJvYWRjYXN0RXZlbnRJblN1YnRyZWUoZXZlbnQ6IFVJVmlld0Jyb2FkY2FzdEV2ZW50KSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmZvckVhY2hWaWV3SW5TdWJ0cmVlKGZ1bmN0aW9uICh2aWV3KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZpZXcuZGlkUmVjZWl2ZUJyb2FkY2FzdEV2ZW50KGV2ZW50KVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodmlldy5fZGlkUmVjZWl2ZUJyb2FkY2FzdEV2ZW50RGVsZWdhdGVGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZpZXcuX2RpZFJlY2VpdmVCcm9hZGNhc3RFdmVudERlbGVnYXRlRnVuY3Rpb24oZXZlbnQpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfSlcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBkaWRSZWNlaXZlQnJvYWRjYXN0RXZlbnQoZXZlbnQ6IFVJVmlld0Jyb2FkY2FzdEV2ZW50KSB7XG4gICAgICAgIFxuICAgICAgICBpZiAoZXZlbnQubmFtZSA9PSBVSVZpZXcuYnJvYWRjYXN0RXZlbnROYW1lLlBhZ2VEaWRTY3JvbGwpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5faXNQb2ludGVyVmFsaWQgPSBOT1xuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChldmVudC5uYW1lID09IFVJVmlldy5icm9hZGNhc3RFdmVudE5hbWUuQWRkZWRUb1ZpZXdUcmVlKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMud2FzQWRkZWRUb1ZpZXdUcmVlKClcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoZXZlbnQubmFtZSA9PSBVSVZpZXcuYnJvYWRjYXN0RXZlbnROYW1lLlJlbW92ZWRGcm9tVmlld1RyZWUpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy53YXNSZW1vdmVkRnJvbVZpZXdUcmVlKClcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoZXZlbnQubmFtZSA9PSBVSVZpZXcuYnJvYWRjYXN0RXZlbnROYW1lLkxhbmd1YWdlQ2hhbmdlZCB8fCBldmVudC5uYW1lID09XG4gICAgICAgICAgICBVSVZpZXcuYnJvYWRjYXN0RXZlbnROYW1lLkFkZGVkVG9WaWV3VHJlZSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl9zZXRJbm5lckhUTUxGcm9tS2V5SWZQb3NzaWJsZSgpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX3NldElubmVySFRNTEZyb21Mb2NhbGl6ZWRUZXh0T2JqZWN0SWZQb3NzaWJsZSgpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBmb3JFYWNoVmlld0luU3VidHJlZShmdW5jdGlvblRvQ2FsbDogKHZpZXc6IFVJVmlldykgPT4gdm9pZCkge1xuICAgICAgICBcbiAgICAgICAgZnVuY3Rpb25Ub0NhbGwodGhpcylcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc3Vidmlld3MuZm9yRWFjaChmdW5jdGlvbiAoc3VidmlldywgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHN1YnZpZXcuZm9yRWFjaFZpZXdJblN1YnRyZWUoZnVuY3Rpb25Ub0NhbGwpXG4gICAgICAgICAgICBcbiAgICAgICAgfSlcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIHJlY3RhbmdsZUluVmlldyhyZWN0YW5nbGU6IFVJUmVjdGFuZ2xlLCB2aWV3OiBVSVZpZXcpIHtcbiAgICAgICAgaWYgKCF2aWV3LmlzTWVtYmVyT2ZWaWV3VHJlZSB8fCAhdGhpcy5pc01lbWJlck9mVmlld1RyZWUpIHtcbiAgICAgICAgICAgIHJldHVybiBuaWxcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3Qgdmlld0NsaWVudFJlY3RhbmdsZSA9IHZpZXcudmlld0hUTUxFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgIGNvbnN0IHZpZXdMb2NhdGlvbiA9IG5ldyBVSVBvaW50KHZpZXdDbGllbnRSZWN0YW5nbGUubGVmdCwgdmlld0NsaWVudFJlY3RhbmdsZS50b3ApXG4gICAgICAgIFxuICAgICAgICBjb25zdCBzZWxmQ2xpZW50UmVjdGFuZ2xlID0gdGhpcy52aWV3SFRNTEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgY29uc3Qgc2VsZkxvY2F0aW9uID0gbmV3IFVJUG9pbnQoc2VsZkNsaWVudFJlY3RhbmdsZS5sZWZ0LCBzZWxmQ2xpZW50UmVjdGFuZ2xlLnRvcClcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG9mZnNldFBvaW50ID0gc2VsZkxvY2F0aW9uLnN1YnRyYWN0KHZpZXdMb2NhdGlvbilcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZWN0YW5nbGUuY29weSgpLm9mZnNldEJ5UG9pbnQob2Zmc2V0UG9pbnQpXG4gICAgfVxuICAgIFxuICAgIHJlY3RhbmdsZUZyb21WaWV3KHJlY3RhbmdsZTogVUlSZWN0YW5nbGUsIHZpZXc6IFVJVmlldykge1xuICAgICAgICByZXR1cm4gdmlldy5yZWN0YW5nbGVJblZpZXcocmVjdGFuZ2xlLCB0aGlzKVxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBpbnRyaW5zaWNDb250ZW50U2l6ZVdpdGhDb25zdHJhaW50cyhjb25zdHJhaW5pbmdIZWlnaHQ6IG51bWJlciA9IDAsIGNvbnN0cmFpbmluZ1dpZHRoOiBudW1iZXIgPSAwKSB7XG4gICAgICAgIFxuICAgICAgICAvLyBUaGlzIHdvcmtzIGJ1dCBpcyBzbG93XG4gICAgICAgIFxuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgVUlSZWN0YW5nbGUoMCwgMCwgMCwgMClcbiAgICAgICAgaWYgKHRoaXMucm9vdFZpZXcuZm9yY2VJbnRyaW5zaWNTaXplWmVybykge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgdGVtcG9yYXJpbHlJblZpZXdUcmVlID0gTk9cbiAgICAgICAgdmFyIG5vZGVBYm92ZVRoaXNWaWV3OiBOb2RlXG4gICAgICAgIGlmICghdGhpcy5pc01lbWJlck9mVmlld1RyZWUpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy52aWV3SFRNTEVsZW1lbnQpXG4gICAgICAgICAgICB0ZW1wb3JhcmlseUluVmlld1RyZWUgPSBZRVNcbiAgICAgICAgICAgIG5vZGVBYm92ZVRoaXNWaWV3ID0gdGhpcy52aWV3SFRNTEVsZW1lbnQubmV4dFNpYmxpbmdcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5zdHlsZS5oZWlnaHRcbiAgICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLnN0eWxlLndpZHRoXG4gICAgICAgIFxuICAgICAgICB0aGlzLnN0eWxlLmhlaWdodCA9IFwiXCIgKyBjb25zdHJhaW5pbmdIZWlnaHRcbiAgICAgICAgdGhpcy5zdHlsZS53aWR0aCA9IFwiXCIgKyBjb25zdHJhaW5pbmdXaWR0aFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGxlZnQgPSB0aGlzLnN0eWxlLmxlZnRcbiAgICAgICAgY29uc3QgcmlnaHQgPSB0aGlzLnN0eWxlLnJpZ2h0XG4gICAgICAgIGNvbnN0IGJvdHRvbSA9IHRoaXMuc3R5bGUuYm90dG9tXG4gICAgICAgIGNvbnN0IHRvcCA9IHRoaXMuc3R5bGUudG9wXG4gICAgICAgIFxuICAgICAgICB0aGlzLnN0eWxlLmxlZnQgPSBcIlwiXG4gICAgICAgIHRoaXMuc3R5bGUucmlnaHQgPSBcIlwiXG4gICAgICAgIHRoaXMuc3R5bGUuYm90dG9tID0gXCJcIlxuICAgICAgICB0aGlzLnN0eWxlLnRvcCA9IFwiXCJcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBjb25zdCByZXN1bHRIZWlnaHQgPSB0aGlzLnZpZXdIVE1MRWxlbWVudC5zY3JvbGxIZWlnaHRcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBjb25zdCB3aGl0ZVNwYWNlID0gdGhpcy5zdHlsZS53aGl0ZVNwYWNlXG4gICAgICAgIHRoaXMuc3R5bGUud2hpdGVTcGFjZSA9IFwibm93cmFwXCJcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdFdpZHRoID0gdGhpcy52aWV3SFRNTEVsZW1lbnQuc2Nyb2xsV2lkdGhcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc3R5bGUud2hpdGVTcGFjZSA9IHdoaXRlU3BhY2VcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5zdHlsZS5oZWlnaHQgPSBoZWlnaHRcbiAgICAgICAgdGhpcy5zdHlsZS53aWR0aCA9IHdpZHRoXG4gICAgICAgIFxuICAgICAgICB0aGlzLnN0eWxlLmxlZnQgPSBsZWZ0XG4gICAgICAgIHRoaXMuc3R5bGUucmlnaHQgPSByaWdodFxuICAgICAgICB0aGlzLnN0eWxlLmJvdHRvbSA9IGJvdHRvbVxuICAgICAgICB0aGlzLnN0eWxlLnRvcCA9IHRvcFxuICAgICAgICBcbiAgICAgICAgaWYgKHRlbXBvcmFyaWx5SW5WaWV3VHJlZSkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLnZpZXdIVE1MRWxlbWVudClcbiAgICAgICAgICAgIGlmICh0aGlzLnN1cGVydmlldykge1xuICAgICAgICAgICAgICAgIGlmIChub2RlQWJvdmVUaGlzVmlldykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1cGVydmlldy52aWV3SFRNTEVsZW1lbnQuaW5zZXJ0QmVmb3JlKHRoaXMudmlld0hUTUxFbGVtZW50LCBub2RlQWJvdmVUaGlzVmlldylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3VwZXJ2aWV3LnZpZXdIVE1MRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnZpZXdIVE1MRWxlbWVudClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJlc3VsdC5oZWlnaHQgPSByZXN1bHRIZWlnaHRcbiAgICAgICAgcmVzdWx0LndpZHRoID0gcmVzdWx0V2lkdGhcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBpbnRyaW5zaWNDb250ZW50V2lkdGgoY29uc3RyYWluaW5nSGVpZ2h0OiBudW1iZXIgPSAwKTogbnVtYmVyIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuaW50cmluc2ljQ29udGVudFNpemVXaXRoQ29uc3RyYWludHMoY29uc3RyYWluaW5nSGVpZ2h0KS53aWR0aFxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgaW50cmluc2ljQ29udGVudEhlaWdodChjb25zdHJhaW5pbmdXaWR0aDogbnVtYmVyID0gMCk6IG51bWJlciB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmludHJpbnNpY0NvbnRlbnRTaXplV2l0aENvbnN0cmFpbnRzKHVuZGVmaW5lZCwgY29uc3RyYWluaW5nV2lkdGgpLmhlaWdodFxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGludHJpbnNpY0NvbnRlbnRTaXplKCk6IFVJUmVjdGFuZ2xlIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBuaWxcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxufVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vVUlDb3JlL1VJVmlldy50c1wiIC8+XG5cblxuXG5cbmNsYXNzIEJvdHRvbUJhclZpZXcgZXh0ZW5kcyBVSVZpZXcge1xuICAgIFxuICAgIC8vbGFiZWw6IFVJVGV4dFZpZXc7XG4gICAgXG4gICAgY29uc3RydWN0b3IoZWxlbWVudElEOiBzdHJpbmcpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyKGVsZW1lbnRJRClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2NsYXNzID0gQm90dG9tQmFyVmlld1xuICAgICAgICB0aGlzLnN1cGVyY2xhc3MgPSBVSVZpZXdcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGluaXRWaWV3KGVsZW1lbnRJRDogc3RyaW5nLCB2aWV3SFRNTEVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci5pbml0VmlldyhlbGVtZW50SUQsIHZpZXdIVE1MRWxlbWVudClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gVUlDb2xvci5jb2xvcldpdGhSR0JBKDUwLCA1MCwgNTApXG4gICAgICAgIFxuICAgICAgICB0aGlzLnNldElubmVySFRNTChcImJvdHRvbUJhckNvbnRlbnRcIiwgXCJib3R0b21CYXJDb250ZW50XCIpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgLy8gdGhpcy5sYWJlbCA9IG5ldyBVSVRleHRWaWV3KFwiQm90dG9tQmFyTGFiZWxcIik7XG4gICAgICAgIC8vIHRoaXMubGFiZWwuc2V0VGV4dChcImJvdHRvbUJhckxhYmVsVGV4dFwiLFwiQm90dG9tIGJhciBmb3IgY29udGFjdCBpbmZvcm1hdGlvbiBhbmQgc3VjaFwiKTtcbiAgICAgICAgLy8gdGhpcy5sYWJlbC50ZXh0Q29sb3IgPSBVSUNvbG9yLndoaXRlQ29sb3I7XG4gICAgICAgIC8vIHRoaXMubGFiZWwudGV4dEFsaWdubWVudCA9IFVJVGV4dFZpZXcudGV4dEFsaWdubWVudC5jZW50ZXI7XG4gICAgICAgIFxuICAgICAgICAvLyB0aGlzLmFkZFN1YnZpZXcodGhpcy5sYWJlbCk7XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBsYXlvdXRTdWJ2aWV3cygpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyLmxheW91dFN1YnZpZXdzKClcbiAgICAgICAgXG4gICAgICAgIC8vdGhpcy5sYWJlbC5jZW50ZXJJbkNvbnRhaW5lcigpO1xuICAgICAgICBcbiAgICB9XG4gICAgXG59XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iLCJpZiAoXCJyZW1vdmVFbGVtZW50QXRJbmRleFwiIGluIEFycmF5LnByb3RvdHlwZSA9PSBOTykge1xuICAgIFxuICAgIChBcnJheS5wcm90b3R5cGUgYXMgYW55KS5yZW1vdmVFbGVtZW50QXRJbmRleCA9IGZ1bmN0aW9uICh0aGlzOiBBcnJheTxhbnk+LCBpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuc3BsaWNlKGluZGV4LCAxKVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIFxufVxuXG5cbmludGVyZmFjZSBBcnJheTxUPiB7XG4gICAgXG4gICAgcmVtb3ZlRWxlbWVudEF0SW5kZXgoaW5kZXg6IG51bWJlcik7XG4gICAgXG59XG5cblxuaWYgKFwicmVtb3ZlRWxlbWVudFwiIGluIEFycmF5LnByb3RvdHlwZSA9PSBOTykge1xuICAgIFxuICAgIChBcnJheS5wcm90b3R5cGUgYXMgYW55KS5yZW1vdmVFbGVtZW50ID0gZnVuY3Rpb24gKHRoaXM6IEFycmF5PGFueT4sIGVsZW1lbnQpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMucmVtb3ZlRWxlbWVudEF0SW5kZXgodGhpcy5pbmRleE9mKGVsZW1lbnQpKVxuICAgICAgICBcbiAgICB9XG4gICAgXG59XG5cblxuaW50ZXJmYWNlIEFycmF5PFQ+IHtcbiAgICBcbiAgICByZW1vdmVFbGVtZW50KGVsZW1lbnQ6IFQpO1xuICAgIFxufVxuXG5cbmlmIChcImluc2VydEVsZW1lbnRBdEluZGV4XCIgaW4gQXJyYXkucHJvdG90eXBlID09IE5PKSB7XG4gICAgXG4gICAgKEFycmF5LnByb3RvdHlwZSBhcyBhbnkpLmluc2VydEVsZW1lbnRBdEluZGV4ID0gZnVuY3Rpb24gKHRoaXM6IEFycmF5PGFueT4sIGluZGV4OiBudW1iZXIsIGVsZW1lbnQ6IGFueSkge1xuICAgICAgICBcbiAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPD0gdGhpcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zcGxpY2UoaW5kZXgsIDAsIGVsZW1lbnQpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG59XG5cblxuaW50ZXJmYWNlIEFycmF5PFQ+IHtcbiAgICBcbiAgICBpbnNlcnRFbGVtZW50QXRJbmRleChpbmRleDogbnVtYmVyLCBlbGVtZW50OiBUKTtcbiAgICBcbn1cblxuXG5pZiAoXCJyZXBsYWNlRWxlbWVudEF0SW5kZXhcIiBpbiBBcnJheS5wcm90b3R5cGUgPT0gTk8pIHtcbiAgICBcbiAgICAoQXJyYXkucHJvdG90eXBlIGFzIGFueSkucmVwbGFjZUVsZW1lbnRBdEluZGV4ID0gZnVuY3Rpb24gKHRoaXM6IEFycmF5PGFueT4sIGluZGV4OiBudW1iZXIsIGVsZW1lbnQ6IGFueSkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5yZW1vdmVFbGVtZW50QXRJbmRleChpbmRleClcbiAgICAgICAgdGhpcy5pbnNlcnRFbGVtZW50QXRJbmRleChpbmRleCwgZWxlbWVudClcbiAgICAgICAgXG4gICAgfVxuICAgIFxufVxuXG5cbmludGVyZmFjZSBBcnJheTxUPiB7XG4gICAgXG4gICAgcmVwbGFjZUVsZW1lbnRBdEluZGV4KGluZGV4OiBudW1iZXIsIGVsZW1lbnQ6IFQpO1xuICAgIFxufVxuXG5cbmlmIChcImNvbnRhaW5zXCIgaW4gQXJyYXkucHJvdG90eXBlID09IE5PKSB7XG4gICAgXG4gICAgKEFycmF5LnByb3RvdHlwZSBhcyBhbnkpLmNvbnRhaW5zID0gZnVuY3Rpb24gKHRoaXM6IEFycmF5PGFueT4sIGVsZW1lbnQpIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9ICh0aGlzLmluZGV4T2YoZWxlbWVudCkgIT0gLTEpXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgfVxuICAgIFxufVxuXG5pZiAoXCJjb250YWluc0FueVwiIGluIEFycmF5LnByb3RvdHlwZSA9PSBOTykge1xuICAgIFxuICAgIChBcnJheS5wcm90b3R5cGUgYXMgYW55KS5jb250YWluc0FueSA9IGZ1bmN0aW9uICh0aGlzOiBBcnJheTxhbnk+LCBlbGVtZW50czogYW55W10pIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuYW55TWF0Y2goZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRzLmNvbnRhaW5zKGVsZW1lbnQpXG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbn1cblxuXG5pbnRlcmZhY2UgQXJyYXk8VD4ge1xuICAgIFxuICAgIGNvbnRhaW5zKGVsZW1lbnQ6IFQpOiBib29sZWFuO1xuICAgIFxuICAgIGNvbnRhaW5zQW55KGVsZW1lbnQ6IFRbXSk6IGJvb2xlYW47XG4gICAgXG59XG5cbkFycmF5LnByb3RvdHlwZS5tYXggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgdGhpcyk7XG59O1xuXG5BcnJheS5wcm90b3R5cGUubWluID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIE1hdGgubWluLmFwcGx5KG51bGwsIHRoaXMpO1xufTtcblxuaW50ZXJmYWNlIEFycmF5PFQ+IHtcbiAgICBcbiAgICByZWFkb25seSBzdW1tZWRWYWx1ZTogVDtcbiAgICBcbiAgICBtYXgoKTogbnVtYmVyO1xuICAgIG1pbigpOiBudW1iZXI7XG4gICAgXG4gICAgXG59XG5cblxuaWYgKFwiYW55TWF0Y2hcIiBpbiBBcnJheS5wcm90b3R5cGUgPT0gTk8pIHtcbiAgICBcbiAgICAoQXJyYXkucHJvdG90eXBlIGFzIGFueSkuYW55TWF0Y2ggPSBmdW5jdGlvbiAoXG4gICAgICAgIHRoaXM6IEFycmF5PGFueT4sXG4gICAgICAgIGZ1bmN0aW9uVG9DYWxsOiAodmFsdWU6IGFueSwgaW5kZXg6IG51bWJlciwgYXJyYXk6IGFueVtdKSA9PiBib29sZWFuXG4gICAgKSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCByZXN1bHQgPSAodGhpcy5maW5kSW5kZXgoZnVuY3Rpb25Ub0NhbGwpID4gLTEpXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbn1cblxuaWYgKFwibm9uZU1hdGNoXCIgaW4gQXJyYXkucHJvdG90eXBlID09IE5PKSB7XG4gICAgXG4gICAgKEFycmF5LnByb3RvdHlwZSBhcyBhbnkpLm5vbmVNYXRjaCA9IGZ1bmN0aW9uIChcbiAgICAgICAgdGhpczogQXJyYXk8YW55PixcbiAgICAgICAgZnVuY3Rpb25Ub0NhbGw6ICh2YWx1ZTogYW55LCBpbmRleDogbnVtYmVyLCBhcnJheTogYW55W10pID0+IGJvb2xlYW5cbiAgICApIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9ICh0aGlzLmZpbmRJbmRleChmdW5jdGlvblRvQ2FsbCkgPT0gLTEpXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbn1cblxuaWYgKFwiYWxsTWF0Y2hcIiBpbiBBcnJheS5wcm90b3R5cGUgPT0gTk8pIHtcbiAgICBcbiAgICAoQXJyYXkucHJvdG90eXBlIGFzIGFueSkuYWxsTWF0Y2ggPSBmdW5jdGlvbiAoXG4gICAgICAgIHRoaXM6IEFycmF5PGFueT4sXG4gICAgICAgIGZ1bmN0aW9uVG9DYWxsOiAodmFsdWU6IGFueSwgaW5kZXg6IG51bWJlciwgYXJyYXk6IGFueVtdKSA9PiBib29sZWFuXG4gICAgKSB7XG4gICAgICAgIFxuICAgICAgICBmdW5jdGlvbiByZXZlcnNlZEZ1bmN0aW9uKHZhbHVlOiBhbnksIGluZGV4OiBudW1iZXIsIGFycmF5OiBhbnlbXSkge1xuICAgICAgICAgICAgcmV0dXJuICFmdW5jdGlvblRvQ2FsbCh2YWx1ZSwgaW5kZXgsIGFycmF5KVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCByZXN1bHQgPSAodGhpcy5maW5kSW5kZXgocmV2ZXJzZWRGdW5jdGlvbikgPT0gLTEpXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbn1cblxuXG5pbnRlcmZhY2UgQXJyYXk8VD4ge1xuICAgIFxuICAgIGFueU1hdGNoKHByZWRpY2F0ZTogKHZhbHVlOiBULCBpbmRleDogbnVtYmVyLCBvYmo6IFRbXSkgPT4gYm9vbGVhbik6IGJvb2xlYW5cbiAgICBcbiAgICBub25lTWF0Y2gocHJlZGljYXRlOiAodmFsdWU6IFQsIGluZGV4OiBudW1iZXIsIG9iajogVFtdKSA9PiBib29sZWFuKTogYm9vbGVhblxuICAgIFxuICAgIGFsbE1hdGNoKHByZWRpY2F0ZTogKHZhbHVlOiBULCBpbmRleDogbnVtYmVyLCBvYmo6IFRbXSkgPT4gYm9vbGVhbik6IGJvb2xlYW5cbiAgICBcbn1cblxuXG5pZiAoXCJncm91cGVkQnlcIiBpbiBBcnJheS5wcm90b3R5cGUgPT0gTk8pIHtcbiAgICBcbiAgICBBcnJheS5wcm90b3R5cGUuZ3JvdXBlZEJ5ID0gZnVuY3Rpb24gKHRoaXM6IEFycmF5PGFueT4sIGZ1bmNQcm9wKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCB2YWwpIHtcbiAgICAgICAgICAgIChhY2NbZnVuY1Byb3AodmFsKV0gPSBhY2NbZnVuY1Byb3AodmFsKV0gfHwgW10pLnB1c2godmFsKVxuICAgICAgICAgICAgcmV0dXJuIGFjY1xuICAgICAgICB9LCB7fSlcbiAgICB9XG4gICAgXG59XG5cblxuaW50ZXJmYWNlIEFycmF5PFQ+IHtcbiAgICBcbiAgICBncm91cGVkQnkoa2V5RnVuY3Rpb246IChpdGVtOiBUKSA9PiBhbnkpOiB7IFtrZXk6IHN0cmluZ106IEFycmF5PFQ+IH07XG4gICAgXG59XG5cblxuaWYgKFwiZmlyc3RFbGVtZW50XCIgaW4gQXJyYXkucHJvdG90eXBlID09IE5PKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgXCJmaXJzdEVsZW1lbnRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGZpcnN0RWxlbWVudCh0aGlzOiBBcnJheTxhbnk+KSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzWzBdXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHRoaXM6IEFycmF5PGFueT4sIGVsZW1lbnQ6IGFueSkge1xuICAgICAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnB1c2goZWxlbWVudClcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXNbMF0gPSBlbGVtZW50XG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5pZiAoXCJsYXN0RWxlbWVudFwiIGluIEFycmF5LnByb3RvdHlwZSA9PSBOTykge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwibGFzdEVsZW1lbnRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGxhc3RFbGVtZW50KHRoaXM6IEFycmF5PGFueT4pIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXNbdGhpcy5sZW5ndGggLSAxXVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh0aGlzOiBBcnJheTxhbnk+LCBlbGVtZW50OiBhbnkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wdXNoKGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzW3RoaXMubGVuZ3RoIC0gMV0gPSBlbGVtZW50XG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5pZiAoXCJldmVyeUVsZW1lbnRcIiBpbiBBcnJheS5wcm90b3R5cGUgPT0gTk8pIHtcbiAgICBcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCBcImV2ZXJ5RWxlbWVudFwiLCB7XG4gICAgICAgIFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGV2ZXJ5RWxlbWVudCh0aGlzOiBBcnJheTxhbnk+KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciB2YWx1ZUtleXMgPSBbXVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCB0YXJnZXRGdW5jdGlvbiA9IChvYmplY3RzKSA9PiB7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFwKChlbGVtZW50LCBpbmRleCwgYXJyYXkpID0+IHtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50RnVuY3Rpb24gPSAoVUlPYmplY3QudmFsdWVGb3JLZXlQYXRoKHZhbHVlS2V5cy5qb2luKFwiLlwiKSwgZWxlbWVudCkgYXMgRnVuY3Rpb24pLmJpbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0c1xuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudEZ1bmN0aW9uKClcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBQcm94eShcbiAgICAgICAgICAgICAgICB0YXJnZXRGdW5jdGlvbixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBnZXQ6ICh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpID0+IHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT0gXCJVSV9lbGVtZW50VmFsdWVzXCIpIHtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFwKChlbGVtZW50LCBpbmRleCwgYXJyYXkpID0+IFVJT2JqZWN0LnZhbHVlRm9yS2V5UGF0aChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVLZXlzLmpvaW4oXCIuXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlS2V5cy5wdXNoKGtleSlcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHNldDogKHRhcmdldCwga2V5LCB2YWx1ZSwgcmVjZWl2ZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVLZXlzLnB1c2goa2V5KVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvckVhY2goKGVsZW1lbnQsIGluZGV4LCBhcnJheSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVJT2JqZWN0LnNldFZhbHVlRm9yS2V5UGF0aCh2YWx1ZUtleXMuam9pbihcIi5cIiksIHZhbHVlLCBlbGVtZW50LCBZRVMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgICAgICBcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodGhpczogQXJyYXk8YW55PiwgZWxlbWVudDogYW55KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXNbaV0gPSBlbGVtZW50XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9KVxuICAgIFxufVxuXG5cbnR5cGUgVUlFdmVyeUVsZW1lbnRJdGVtPFQ+ID0ge1xuICAgIFxuICAgIFtQIGluIGtleW9mIFRdOiBVSUV2ZXJ5RWxlbWVudEl0ZW08VFtQXT5cbiAgICBcbn0gJiB7XG4gICAgXG4gICAgVUlfZWxlbWVudFZhbHVlcz86IFRbXTtcbiAgICBcbn0gJiBUXG5cbmludGVyZmFjZSBBcnJheTxUPiB7XG4gICAgXG4gICAgZmlyc3RFbGVtZW50OiBUO1xuICAgIGxhc3RFbGVtZW50OiBUO1xuICAgIFxuICAgIGV2ZXJ5RWxlbWVudDogVUlFdmVyeUVsZW1lbnRJdGVtPFQ+O1xuICAgIFxufVxuXG5cbmlmIChcImNvcHlcIiBpbiBBcnJheS5wcm90b3R5cGUgPT0gTk8pIHtcbiAgICBcbiAgICAoQXJyYXkucHJvdG90eXBlIGFzIGFueSkuY29weSA9IGZ1bmN0aW9uICh0aGlzOiBBcnJheTxhbnk+KSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnNsaWNlKDApXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgfVxuICAgIFxufVxuXG5cbmludGVyZmFjZSBBcnJheTxUPiB7XG4gICAgXG4gICAgY29weSgpOiBBcnJheTxUPjtcbiAgICBcbn1cblxuXG5pZiAoXCJhcnJheUJ5UmVwZWF0aW5nXCIgaW4gQXJyYXkucHJvdG90eXBlID09IE5PKSB7XG4gICAgXG4gICAgKEFycmF5LnByb3RvdHlwZSBhcyBhbnkpLmFycmF5QnlSZXBlYXRpbmcgPSBmdW5jdGlvbiAodGhpczogQXJyYXk8YW55PiwgbnVtYmVyT2ZSZXBldGl0aW9uczogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVyT2ZSZXBldGl0aW9uczsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGVsZW1lbnQpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gICAgXG59XG5cblxuaW50ZXJmYWNlIEFycmF5PFQ+IHtcbiAgICBcbiAgICBhcnJheUJ5UmVwZWF0aW5nKG51bWJlck9mUmVwZXRpdGlvbnM6IG51bWJlcik6IEFycmF5PFQ+O1xuICAgIFxufVxuXG5cbmlmIChcImFycmF5QnlUcmltbWluZ1RvTGVuZ3RoSWZMb25nZXJcIiBpbiBBcnJheS5wcm90b3R5cGUgPT0gTk8pIHtcbiAgICAoQXJyYXkucHJvdG90eXBlIGFzIGFueSkuYXJyYXlCeVRyaW1taW5nVG9MZW5ndGhJZkxvbmdlciA9IGZ1bmN0aW9uICh0aGlzOiBBcnJheTxhbnk+LCBtYXhMZW5ndGg6IG51bWJlcikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1heExlbmd0aCAmJiBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpc1tpXSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxufVxuXG5cbmludGVyZmFjZSBBcnJheTxUPiB7XG4gICAgXG4gICAgYXJyYXlCeVRyaW1taW5nVG9MZW5ndGhJZkxvbmdlcihtYXhMZW5ndGg6IG51bWJlcik6IEFycmF5PFQ+O1xuICAgIFxufVxuXG5cbmlmIChcInN1bW1lZFZhbHVlXCIgaW4gQXJyYXkucHJvdG90eXBlID09IE5PKSB7XG4gICAgXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgXCJzdW1tZWRWYWx1ZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gc3VtbWVkVmFsdWUodGhpczogQXJyYXk8YW55Pikge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYSArIGJcbiAgICAgICAgICAgIH0sIDApXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIH1cbiAgICB9KVxuICAgIFxufVxuXG5cbmludGVyZmFjZSBBcnJheTxUPiB7XG4gICAgXG4gICAgcmVhZG9ubHkgc3VtbWVkVmFsdWU6IFQ7XG4gICAgXG59XG5cblxuLy8gV2FybiBpZiBvdmVycmlkaW5nIGV4aXN0aW5nIG1ldGhvZFxuaWYgKFwiaXNFcXVhbFRvQXJyYXlcIiBpbiBBcnJheS5wcm90b3R5cGUgPT0gWUVTKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgICBcIk92ZXJyaWRpbmcgZXhpc3RpbmcgQXJyYXkucHJvdG90eXBlLmlzRXF1YWxUb0FycmF5LiBQb3NzaWJsZSBjYXVzZXM6IE5ldyBBUEkgZGVmaW5lcyB0aGUgbWV0aG9kLCB0aGVyZSdzIGEgZnJhbWV3b3JrIGNvbmZsaWN0IG9yIHlvdSd2ZSBnb3QgZG91YmxlIGluY2x1c2lvbnMgaW4geW91ciBjb2RlLlwiKVxufVxuLy8gYXR0YWNoIHRoZSAuZXF1YWxzIG1ldGhvZCB0byBBcnJheSdzIHByb3RvdHlwZSB0byBjYWxsIGl0IG9uIGFueSBhcnJheVxuQXJyYXkucHJvdG90eXBlLmlzRXF1YWxUb0FycmF5ID0gZnVuY3Rpb24gKGFycmF5OiBhbnlbXSwga2V5UGF0aD86IHN0cmluZykge1xuICAgIFxuICAgIC8vIGlmIHRoZSBvdGhlciBhcnJheSBpcyBhIGZhbHN5IHZhbHVlLCByZXR1cm5cbiAgICBpZiAoIWFycmF5KSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBcbiAgICAvLyBjb21wYXJlIGxlbmd0aHMgLSBjYW4gc2F2ZSBhIGxvdCBvZiB0aW1lIFxuICAgIGlmICh0aGlzLmxlbmd0aCAhPSBhcnJheS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIFxuICAgIHZhciBpID0gMFxuICAgIGNvbnN0IGwgPSB0aGlzLmxlbmd0aFxuICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIFxuICAgICAgICAvLyBDaGVjayBpZiB3ZSBoYXZlIG5lc3RlZCBhcnJheXNcbiAgICAgICAgaWYgKHRoaXNbaV0gaW5zdGFuY2VvZiBBcnJheSAmJiBhcnJheVtpXSBpbnN0YW5jZW9mIEFycmF5ICYmICFrZXlQYXRoKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIHJlY3Vyc2UgaW50byB0aGUgbmVzdGVkIGFycmF5c1xuICAgICAgICAgICAgaWYgKCF0aGlzW2ldLmlzRXF1YWxUb0FycmF5KGFycmF5W2ldKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5UGF0aCAmJiBVSU9iamVjdC52YWx1ZUZvcktleVBhdGgoa2V5UGF0aCwgdGhpc1tpXSkgIT0gVUlPYmplY3QudmFsdWVGb3JLZXlQYXRoKGtleVBhdGgsIGFycmF5W2ldKSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXNbaV0gIT0gYXJyYXlbaV0pIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gV2FybmluZyAtIHR3byBkaWZmZXJlbnQgb2JqZWN0IGluc3RhbmNlcyB3aWxsIG5ldmVyIGJlIGVxdWFsOiB7eDoyMH0gIT0ge3g6MjB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gdHJ1ZVxuICAgIFxufVxuXG4vLyBIaWRlIG1ldGhvZCBmcm9tIGZvci1pbiBsb29wc1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgXCJpc0VxdWFsVG9BcnJheVwiLCB7IGVudW1lcmFibGU6IGZhbHNlIH0pXG5cblxuaW50ZXJmYWNlIEFycmF5PFQ+IHtcbiAgICBcbiAgICBpc0VxdWFsVG9BcnJheShhcnJheTogQXJyYXk8VD4sIGtleVBhdGg/OiBzdHJpbmcpOiBib29sZWFuO1xuICAgIFxufVxuXG5cblxuaWYgKFwiZm9yRWFjaFwiIGluIE9iamVjdC5wcm90b3R5cGUgPT0gTk8pIHtcbiAgICBcbiAgICAoT2JqZWN0LnByb3RvdHlwZSBhcyBhbnkpLmZvckVhY2ggPSBmdW5jdGlvbiAodGhpczogT2JqZWN0LCBjYWxsYmFja0Z1bmN0aW9uOiAodmFsdWU6IGFueSwga2V5OiBzdHJpbmcpID0+IHZvaWQpIHtcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpXG4gICAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5LCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrRnVuY3Rpb24odGhpc1trZXldLCBrZXkpXG4gICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICB9XG4gICAgXG4gICAgLy8gSGlkZSBtZXRob2QgZnJvbSBmb3ItaW4gbG9vcHNcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JqZWN0LnByb3RvdHlwZSwgXCJmb3JFYWNoXCIsIHsgZW51bWVyYWJsZTogZmFsc2UgfSlcbiAgICBcbn1cblxuXG5pbnRlcmZhY2UgT2JqZWN0IHtcbiAgICBcbiAgICBmb3JFYWNoKGNhbGxiYWNrRnVuY3Rpb246ICh2YWx1ZTogYW55LCBrZXk6IHN0cmluZykgPT4gdm9pZCk6IHZvaWQ7XG4gICAgXG59XG5cblxuaWYgKFwiYWxsVmFsdWVzXCIgaW4gT2JqZWN0LnByb3RvdHlwZSA9PSBOTykge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3QucHJvdG90eXBlLCBcImFsbFZhbHVlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKHRoaXM6IE9iamVjdCkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gW11cbiAgICAgICAgICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWU6IGFueSkge1xuICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZXNcbiAgICAgICAgfVxuICAgIH0pXG59XG5cblxuaW50ZXJmYWNlIE9iamVjdCB7XG4gICAgXG4gICAgcmVhZG9ubHkgYWxsVmFsdWVzOiBBcnJheTxhbnk+O1xuICAgIFxufVxuXG5cbmlmIChcImFsbEtleXNcIiBpbiBPYmplY3QucHJvdG90eXBlID09IE5PKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdC5wcm90b3R5cGUsIFwiYWxsS2V5c1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKHRoaXM6IE9iamVjdCkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gT2JqZWN0LmtleXModGhpcylcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZXNcbiAgICAgICAgfVxuICAgIH0pXG59XG5cblxuaW50ZXJmYWNlIE9iamVjdCB7XG4gICAgXG4gICAgcmVhZG9ubHkgYWxsS2V5czogc3RyaW5nW107XG4gICAgXG59XG5cblxuaWYgKFwib2JqZWN0QnlDb3B5aW5nVmFsdWVzUmVjdXJzaXZlbHlGcm9tT2JqZWN0XCIgaW4gT2JqZWN0LnByb3RvdHlwZSA9PSBOTykge1xuICAgIFxuICAgIChPYmplY3QucHJvdG90eXBlIGFzIGFueSkub2JqZWN0QnlDb3B5aW5nVmFsdWVzUmVjdXJzaXZlbHlGcm9tT2JqZWN0ID0gZnVuY3Rpb24gKHRoaXM6IE9iamVjdCwgb2JqZWN0OiBhbnkpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBmdW5jdGlvbiBpc0FuT2JqZWN0KGl0ZW06IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIChpdGVtICYmIHR5cGVvZiBpdGVtID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KGl0ZW0pKVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBmdW5jdGlvbiBtZXJnZVJlY3Vyc2l2ZWx5KHRhcmdldDogYW55LCBzb3VyY2U6IGFueSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBvdXRwdXQgPSBPYmplY3QuYXNzaWduKHt9LCB0YXJnZXQpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChpc0FuT2JqZWN0KHRhcmdldCkgJiYgaXNBbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0FuT2JqZWN0KHNvdXJjZVtrZXldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAoIShrZXkgaW4gdGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgT2JqZWN0LmFzc2lnbihvdXRwdXQsIHsgW2tleV06IHNvdXJjZVtrZXldIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W2tleV0gPSBtZXJnZVJlY3Vyc2l2ZWx5KHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSlcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy99XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihvdXRwdXQsIHsgW2tleV06IHNvdXJjZVtrZXldIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbWVyZ2VSZWN1cnNpdmVseSh0aGlzLCBvYmplY3QpXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICAvLyBIaWRlIG1ldGhvZCBmcm9tIGZvci1pbiBsb29wc1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3QucHJvdG90eXBlLCBcIm9iamVjdEJ5Q29weWluZ1ZhbHVlc1JlY3Vyc2l2ZWx5RnJvbU9iamVjdFwiLCB7IGVudW1lcmFibGU6IGZhbHNlIH0pXG4gICAgXG59XG5cbmlmIChcImNvcHlWYWx1ZXNSZWN1cnNpdmVseUZyb21PYmplY3RcIiBpbiBPYmplY3QucHJvdG90eXBlID09IE5PKSB7XG4gICAgXG4gICAgKE9iamVjdC5wcm90b3R5cGUgYXMgYW55KS5jb3B5VmFsdWVzUmVjdXJzaXZlbHlGcm9tT2JqZWN0ID0gZnVuY3Rpb24gKHRoaXM6IE9iamVjdCwgb2JqZWN0OiBhbnkpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBmdW5jdGlvbiBpc0FuT2JqZWN0KGl0ZW06IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIChpdGVtICYmIHR5cGVvZiBpdGVtID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KGl0ZW0pKVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBmdW5jdGlvbiBtZXJnZVJlY3Vyc2l2ZWx5KHRhcmdldDogYW55LCBzb3VyY2U6IGFueSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBvdXRwdXQgPSB0YXJnZXQ7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChpc0FuT2JqZWN0KHRhcmdldCkgJiYgaXNBbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0FuT2JqZWN0KHNvdXJjZVtrZXldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAoIShrZXkgaW4gdGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgT2JqZWN0LmFzc2lnbihvdXRwdXQsIHsgW2tleV06IHNvdXJjZVtrZXldIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W2tleV0gPSBtZXJnZVJlY3Vyc2l2ZWx5KHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSlcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy99XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihvdXRwdXQsIHsgW2tleV06IHNvdXJjZVtrZXldIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbWVyZ2VSZWN1cnNpdmVseSh0aGlzLCBvYmplY3QpXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICAvLyBIaWRlIG1ldGhvZCBmcm9tIGZvci1pbiBsb29wc1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3QucHJvdG90eXBlLCBcImNvcHlWYWx1ZXNSZWN1cnNpdmVseUZyb21PYmplY3RcIiwgeyBlbnVtZXJhYmxlOiBmYWxzZSB9KVxuICAgIFxufVxuXG5cbmludGVyZmFjZSBPYmplY3Qge1xuICAgIFxuICAgIC8vIG9iamVjdEJ5Q29weWluZ1ZhbHVlc1JlY3Vyc2l2ZWx5RnJvbU9iamVjdDxUPihvYmplY3Q6IFQpOiB0aGlzICYgVDtcbiAgICBjb3B5VmFsdWVzUmVjdXJzaXZlbHlGcm9tT2JqZWN0KG9iamVjdDogUGFydGlhbDx0aGlzPik6IHRoaXM7XG4gICAgXG59XG5cbmludGVyZmFjZSBVSU9iamVjdCB7XG4gICBcbiAgIC8vIG9iamVjdEJ5Q29weWluZ1ZhbHVlc1JlY3Vyc2l2ZWx5RnJvbU9iamVjdDxUPihvYmplY3Q6IFQpOiB0aGlzICYgVDtcbiAgICBjb3B5VmFsdWVzUmVjdXJzaXZlbHlGcm9tT2JqZWN0KG9iamVjdDogUmVjdXJzaXZlUGFydGlhbDx0aGlzPik6IHRoaXM7XG4gICAgXG59XG5cblxuXG5pZiAoXCJjb250YWluc1wiIGluIFN0cmluZy5wcm90b3R5cGUgPT0gTk8pIHtcbiAgICBcbiAgICAoU3RyaW5nLnByb3RvdHlwZSBhcyBhbnkpLmNvbnRhaW5zID0gZnVuY3Rpb24gKHRoaXM6IFN0cmluZywgc3RyaW5nKSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCByZXN1bHQgPSAodGhpcy5pbmRleE9mKHN0cmluZykgIT0gLTEpXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgfVxuICAgIFxufVxuXG5cbmludGVyZmFjZSBTdHJpbmcge1xuICAgIFxuICAgIGNvbnRhaW5zKHN0cmluZyk6IGJvb2xlYW47XG4gICAgXG59XG5cblxuaWYgKFwiY2FwaXRhbGl6ZWRTdHJpbmdcIiBpbiBTdHJpbmcucHJvdG90eXBlID09IE5PKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdC5wcm90b3R5cGUsIFwiY2FwaXRhbGl6ZWRTdHJpbmdcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICh0aGlzOiBTdHJpbmcpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0aGlzLnNsaWNlKDEpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgfVxuICAgIH0pXG59XG5cblxuaW50ZXJmYWNlIFN0cmluZyB7XG4gICAgXG4gICAgcmVhZG9ubHkgY2FwaXRhbGl6ZWRTdHJpbmc6IHN0cmluZztcbiAgICBcbn1cblxuXG5pZiAoXCJudW1lcmljYWxWYWx1ZVwiIGluIFN0cmluZy5wcm90b3R5cGUgPT0gTk8pIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RyaW5nLnByb3RvdHlwZSwgXCJudW1lcmljYWxWYWx1ZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gbnVtZXJpY2FsVmFsdWUodGhpczogc3RyaW5nKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBOdW1iZXIodGhpcylcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgfVxuICAgIH0pXG59XG5cblxuaW50ZXJmYWNlIFN0cmluZyB7XG4gICAgXG4gICAgcmVhZG9ubHkgbnVtZXJpY2FsVmFsdWU6IG51bWJlcjtcbiAgICBcbn1cblxuXG5pZiAoXCJpc0FTdHJpbmdcIiBpbiBTdHJpbmcucHJvdG90eXBlID09IE5PKSB7XG4gICAgXG4gICAgKFN0cmluZy5wcm90b3R5cGUgYXMgYW55KS5pc0FTdHJpbmcgPSBZRVNcbiAgICBcbn1cblxuXG5pbnRlcmZhY2UgU3RyaW5nIHtcbiAgICBcbiAgICBpc0FTdHJpbmc6IGJvb2xlYW47XG4gICAgXG59XG5cblxuaWYgKFwiaXNBTnVtYmVyXCIgaW4gTnVtYmVyLnByb3RvdHlwZSA9PSBOTykge1xuICAgIFxuICAgIChOdW1iZXIucHJvdG90eXBlIGFzIGFueSkuaXNBTnVtYmVyID0gWUVTXG4gICAgXG59XG5cblxuaW50ZXJmYWNlIE51bWJlciB7XG4gICAgXG4gICAgaXNBTnVtYmVyOiBib29sZWFuO1xuICAgIFxufVxuXG5cblxuXG5cbmlmIChcImludGVnZXJWYWx1ZVwiIGluIE51bWJlci5wcm90b3R5cGUgPT0gTk8pIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTnVtYmVyLnByb3RvdHlwZSwgXCJpbnRlZ2VyVmFsdWVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICh0aGlzOiBudW1iZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHBhcnNlSW50KFwiXCIgKyAoTWF0aC5yb3VuZCh0aGlzKSArIDAuNSkpXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5cbmludGVyZmFjZSBOdW1iZXIge1xuICAgIFxuICAgIHJlYWRvbmx5IGludGVnZXJWYWx1ZTogbnVtYmVyO1xuICAgIFxufVxuXG5cblxuY2xhc3MgUHJpbWl0aXZlTnVtYmVyIHtcbiAgICBcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgc3RhdGljIFtTeW1ib2wuaGFzSW5zdGFuY2VdKHgpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIFxufVxuXG5cbmlmIChcImludGVnZXJWYWx1ZVwiIGluIEJvb2xlYW4ucHJvdG90eXBlID09IE5PKSB7XG4gICAgXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJvb2xlYW4ucHJvdG90eXBlLCBcImludGVnZXJWYWx1ZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKHRoaXM6IGJvb2xlYW4pIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHRoaXMgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiAxXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiAwXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIH0pXG4gICAgXG59XG5cblxuaW50ZXJmYWNlIEJvb2xlYW4ge1xuICAgIFxuICAgIHJlYWRvbmx5IGludGVnZXJWYWx1ZTogbnVtYmVyO1xuICAgIFxufVxuXG5cbmlmIChcImRhdGVTdHJpbmdcIiBpbiBEYXRlLnByb3RvdHlwZSA9PSBOTykge1xuICAgIFxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEYXRlLnByb3RvdHlwZSwgXCJkYXRlU3RyaW5nXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBkYXRlU3RyaW5nKHRoaXM6IERhdGUpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gKFwiMFwiICsgdGhpcy5nZXREYXRlKCkpLnNsaWNlKC0yKSArIFwiLVwiICsgKFwiMFwiICsgKHRoaXMuZ2V0TW9udGgoKSArIDEpKS5zbGljZSgtMikgKyBcIi1cIiArXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRGdWxsWWVhcigpICsgXCIgXCIgKyAoXCIwXCIgKyB0aGlzLmdldEhvdXJzKCkpLnNsaWNlKC0yKSArIFwiOlwiICtcbiAgICAgICAgICAgICAgICAoXCIwXCIgKyB0aGlzLmdldE1pbnV0ZXMoKSkuc2xpY2UoLTIpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgfSlcbiAgICBcbiAgICBcbiAgICBcbn1cblxuXG5pbnRlcmZhY2UgRGF0ZSB7XG4gICAgXG4gICAgcmVhZG9ubHkgZGF0ZVN0cmluZzogc3RyaW5nO1xuICAgIFxufVxuXG5cblxuXG5cblxuXG5cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9VSUNvcmUvVUlPYmplY3QudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL1VJQ29yZS9VSUNvcmVFeHRlbnNpb25zLnRzXCIgLz5cblxuXG5cblxuXG5pbnRlcmZhY2UgQ0JTb2NrZXRDYWxsYmFja0hvbGRlck1lc3NhZ2VEZXNjcmlwdG9yIHtcbiAgICBcbiAgICBrZXk6IHN0cmluZztcbiAgICBtZXNzYWdlOiB7XG4gICAgICAgIGlkZW50aWZpZXI6IHN0cmluZztcbiAgICAgICAgaW5SZXNwb25zZVRvSWRlbnRpZmllcj86IHN0cmluZztcbiAgICAgICAga2VlcFdhaXRpbmdGb3JSZXNwb25zZXM/OiBib29sZWFuO1xuICAgIH1cbiAgICBcbiAgICBcbiAgICBzZW50QXRUaW1lOiBudW1iZXI7XG4gICAgXG4gICAgLy9jb21wbGV0aW9uVHJpZ2dlcmVkOiBib29sZWFuO1xuICAgIFxuICAgIG1lc3NhZ2VEYXRhSGFzaDogc3RyaW5nO1xuICAgIFxuICAgIHJlc3BvbnNlRGF0YUhhc2g/OiBzdHJpbmc7XG4gICAgXG4gICAgbWFpblJlc3BvbnNlUmVjZWl2ZWQ6IGJvb2xlYW47XG4gICAgXG4gICAgYW55TWFpblJlc3BvbnNlUmVjZWl2ZWQ6IGJvb2xlYW47XG4gICAgXG4gICAgY29tcGxldGlvblBvbGljeTogc3RyaW5nO1xuICAgIGNvbXBsZXRpb25GdW5jdGlvbjogQ0JTb2NrZXRNZXNzYWdlY29tcGxldGlvbkZ1bmN0aW9uO1xuICAgIFxufVxuXG5cbmludGVyZmFjZSBDQlNvY2tldENhbGxiYWNrSG9sZGVyU3RvcmVkUmVzcG9uc2VPYmplY3Qge1xuICAgIFxuICAgIG1lc3NhZ2VLZXk6IHN0cmluZztcbiAgICBtZXNzYWdlRGF0YTogYW55O1xuICAgIG1lc3NhZ2VEYXRhSGFzaDogc3RyaW5nO1xuICAgIFxufVxuXG5cblxuXG5jbGFzcyBDQlNvY2tldENhbGxiYWNrSG9sZGVyIGV4dGVuZHMgVUlPYmplY3Qge1xuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIG1lc3NhZ2VEZXNjcmlwdG9yczoge1xuICAgICAgICBcbiAgICAgICAgW3g6IHN0cmluZ106IENCU29ja2V0Q2FsbGJhY2tIb2xkZXJNZXNzYWdlRGVzY3JpcHRvcltdXG4gICAgICAgIFxuICAgIH0gPSB7fVxuICAgIFxuICAgIGhhbmRsZXJzOiB7XG4gICAgICAgIFt4OiBzdHJpbmddOiBDQlNvY2tldE1lc3NhZ2VIYW5kbGVyRnVuY3Rpb25bXVxuICAgIH0gPSB7fVxuICAgIFxuICAgIG9uZXRpbWVIYW5kbGVyczoge1xuICAgICAgICBbeDogc3RyaW5nXTogQ0JTb2NrZXRNZXNzYWdlSGFuZGxlckZ1bmN0aW9uW11cbiAgICB9ID0ge31cbiAgICBcbiAgICBrZXlzRm9ySWRlbnRpZmllcnM6IHtcbiAgICAgICAgXG4gICAgICAgIFt4OiBzdHJpbmddOiBzdHJpbmdcbiAgICAgICAgXG4gICAgfSA9IHt9XG4gICAgXG4gICAgXG4gICAgaXNWYWxpZCA9IFlFU1xuICAgIF9zdG9yZWFibGVSZXNwb25zZUtleXM6IHN0cmluZ1tdXG4gICAgX3N0b3JlZFJlc3BvbnNlSGFzaGVzRGljdGlvbmFyeToge1xuICAgICAgICBcbiAgICAgICAgW3g6IHN0cmluZ106IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaGFzaDogc3RyaW5nLFxuICAgICAgICAgICAgdmFsaWRpdHlEYXRlOiBudW1iZXJcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBfdmVyaWZpZWRSZXNwb25zZUhhc2hlc0RpY3Rpb25hcnk6IHtcbiAgICAgICAgXG4gICAgICAgIFt4OiBzdHJpbmddOiBib29sZWFuXG4gICAgICAgIFxuICAgIH0gPSB7fVxuICAgIFxuICAgIF9zb2NrZXRDbGllbnQ6IENCU29ja2V0Q2xpZW50XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgY29uc3RydWN0b3Ioc29ja2V0Q2xpZW50OiBDQlNvY2tldENsaWVudCwgcHJldmlvdXNDYWxsYmFja0hvbGRlcj86IENCU29ja2V0Q2FsbGJhY2tIb2xkZXIpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9zb2NrZXRDbGllbnQgPSBzb2NrZXRDbGllbnRcbiAgICAgICAgXG4gICAgICAgIGlmIChJUyhwcmV2aW91c0NhbGxiYWNrSG9sZGVyKSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmhhbmRsZXJzID0gcHJldmlvdXNDYWxsYmFja0hvbGRlci5oYW5kbGVyc1xuICAgICAgICAgICAgdGhpcy5fdmVyaWZpZWRSZXNwb25zZUhhc2hlc0RpY3Rpb25hcnkgPSBwcmV2aW91c0NhbGxiYWNrSG9sZGVyLl92ZXJpZmllZFJlc3BvbnNlSGFzaGVzRGljdGlvbmFyeVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICB0cmlnZ2VyRGlzY29ubmVjdEhhbmRsZXJzKCkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5tZXNzYWdlRGVzY3JpcHRvcnMuZm9yRWFjaChmdW5jdGlvbiAoZGVzY3JpcHRvcjogQ0JTb2NrZXRDYWxsYmFja0hvbGRlck1lc3NhZ2VEZXNjcmlwdG9yLCBrZXk6IHN0cmluZykge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZGVzY3JpcHRvci5tYWluUmVzcG9uc2VSZWNlaXZlZCkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IuY29tcGxldGlvbkZ1bmN0aW9uKENCU29ja2V0Q2xpZW50LmRpc2Nvbm5lY3Rpb25NZXNzYWdlLCBuaWwpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfSlcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIHJlZ2lzdGVySGFuZGxlcihrZXk6IHN0cmluZywgaGFuZGxlckZ1bmN0aW9uOiBDQlNvY2tldE1lc3NhZ2VIYW5kbGVyRnVuY3Rpb24pIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpZiAoIXRoaXMuaGFuZGxlcnNba2V5XSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmhhbmRsZXJzW2tleV0gPSBbXVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMuaGFuZGxlcnNba2V5XS5wdXNoKGhhbmRsZXJGdW5jdGlvbilcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgcmVnaXN0ZXJPbmV0aW1lSGFuZGxlcihrZXk6IHN0cmluZywgaGFuZGxlckZ1bmN0aW9uOiBDQlNvY2tldE1lc3NhZ2VIYW5kbGVyRnVuY3Rpb24pIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpZiAoIXRoaXMub25ldGltZUhhbmRsZXJzW2tleV0pIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5vbmV0aW1lSGFuZGxlcnNba2V5XSA9IFtdXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5vbmV0aW1lSGFuZGxlcnNba2V5XS5wdXNoKGhhbmRsZXJGdW5jdGlvbilcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgZ2V0IHN0b3JlZFJlc3BvbnNlSGFzaGVzRGljdGlvbmFyeSgpIHtcbiAgICAgICAgXG4gICAgICAgIGlmIChJU19OT1QodGhpcy5fc3RvcmVkUmVzcG9uc2VIYXNoZXNEaWN0aW9uYXJ5KSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl9zdG9yZWRSZXNwb25zZUhhc2hlc0RpY3Rpb25hcnkgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZVtcIkNCU29ja2V0UmVzcG9uc2VIYXNoZXNEaWN0aW9uYXJ5XCJdIHx8IFwie31cIilcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy5fc3RvcmVkUmVzcG9uc2VIYXNoZXNEaWN0aW9uYXJ5XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBzdG9yZWRSZXNwb25zZUhhc2hPYmplY3RGb3JLZXkocmVxdWVzdEtleTogc3RyaW5nLCByZXF1ZXN0RGF0YUhhc2g6IHN0cmluZykge1xuICAgICAgICBcbiAgICAgICAgY29uc3QgbG9jYWxTdG9yYWdlS2V5ID0gdGhpcy5rZXlGb3JSZXF1ZXN0S2V5QW5kUmVxdWVzdERhdGFIYXNoKHJlcXVlc3RLZXksIHJlcXVlc3REYXRhSGFzaClcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGhhc2hPYmplY3QgPSB0aGlzLnN0b3JlZFJlc3BvbnNlSGFzaGVzRGljdGlvbmFyeVtsb2NhbFN0b3JhZ2VLZXldXG4gICAgICAgIFxuICAgICAgICBjb25zdCByZXN1bHQgPSBGSVJTVChoYXNoT2JqZWN0LCB7fSBhcyBhbnkpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHN0b3JlZFJlc3BvbnNlRm9yS2V5KHJlcXVlc3RLZXk6IHN0cmluZywgcmVxdWVzdERhdGFIYXNoOiBzdHJpbmcpIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGxvY2FsU3RvcmFnZUtleSA9IHRoaXMua2V5Rm9yUmVxdWVzdEtleUFuZFJlcXVlc3REYXRhSGFzaChyZXF1ZXN0S2V5LCByZXF1ZXN0RGF0YUhhc2gpXG4gICAgICAgIFxuICAgICAgICBjb25zdCBzdG9yZWRPYmplY3QgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZVtsb2NhbFN0b3JhZ2VLZXldIHx8IFwie31cIilcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBzdG9yZWRPYmplY3QucmVzcG9uc2VNZXNzYWdlRGF0YVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAga2V5Rm9yUmVxdWVzdEtleUFuZFJlcXVlc3REYXRhSGFzaChyZXF1ZXN0S2V5OiBzdHJpbmcsIHJlcXVlc3REYXRhSGFzaDogc3RyaW5nKSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCByZXN1bHQgPSBcIl9DQlNDSF9MU19rZXlfXCIgKyByZXF1ZXN0S2V5ICsgXCJfXCIgKyByZXF1ZXN0RGF0YUhhc2hcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHN0b3JlUmVzcG9uc2UoXG4gICAgICAgIHJlcXVlc3RLZXk6IHN0cmluZyxcbiAgICAgICAgcmVxdWVzdERhdGFIYXNoOiBzdHJpbmcsXG4gICAgICAgIHJlc3BvbnNlTWVzc2FnZTogQ0JTb2NrZXRNZXNzYWdlPGFueT4sXG4gICAgICAgIHJlc3BvbnNlRGF0YUhhc2g6IHN0cmluZ1xuICAgICkge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGlmICghcmVzcG9uc2VNZXNzYWdlLmNhbkJlU3RvcmVkQXNSZXNwb25zZSB8fFxuICAgICAgICAgICAgKElTX05PVChyZXNwb25zZU1lc3NhZ2UubWVzc2FnZURhdGEpICYmIElTX05PVChyZXNwb25zZU1lc3NhZ2UubWVzc2FnZURhdGFIYXNoKSkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGxvY2FsU3RvcmFnZUtleSA9IHRoaXMua2V5Rm9yUmVxdWVzdEtleUFuZFJlcXVlc3REYXRhSGFzaChyZXF1ZXN0S2V5LCByZXF1ZXN0RGF0YUhhc2gpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdmFyIHZhbGlkaXR5RGF0ZTogbnVtYmVyXG4gICAgICAgIFxuICAgICAgICBpZiAocmVzcG9uc2VNZXNzYWdlLnJlc3BvbnNlVmFsaWRpdHlEdXJhdGlvbikge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YWxpZGl0eURhdGUgPSBEYXRlLm5vdygpICsgcmVzcG9uc2VNZXNzYWdlLnJlc3BvbnNlVmFsaWRpdHlEdXJhdGlvblxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHN0b3JlZFJlc3BvbnNlSGFzaGVzRGljdGlvbmFyeSA9IHRoaXMuc3RvcmVkUmVzcG9uc2VIYXNoZXNEaWN0aW9uYXJ5XG4gICAgICAgIHN0b3JlZFJlc3BvbnNlSGFzaGVzRGljdGlvbmFyeVtsb2NhbFN0b3JhZ2VLZXldID0ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBoYXNoOiByZXNwb25zZURhdGFIYXNoLFxuICAgICAgICAgICAgdmFsaWRpdHlEYXRlOiB2YWxpZGl0eURhdGVcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLnNhdmVJbkxvY2FsU3RvcmFnZShsb2NhbFN0b3JhZ2VLZXksIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVzcG9uc2VNZXNzYWdlRGF0YTogcmVzcG9uc2VNZXNzYWdlLm1lc3NhZ2VEYXRhLFxuICAgICAgICAgICAgcmVzcG9uc2VIYXNoOiByZXNwb25zZURhdGFIYXNoXG4gICAgICAgICAgICBcbiAgICAgICAgfSlcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLnNhdmVTdG9yZWRSZXNwb25zZUhhc2hlc0RpY3Rpb25hcnkoc3RvcmVkUmVzcG9uc2VIYXNoZXNEaWN0aW9uYXJ5KVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgcHJpdmF0ZSBzYXZlU3RvcmVkUmVzcG9uc2VIYXNoZXNEaWN0aW9uYXJ5KHN0b3JlZFJlc3BvbnNlSGFzaGVzRGljdGlvbmFyeTogeyBbeDogc3RyaW5nXTogeyBoYXNoOiBzdHJpbmc7IHZhbGlkaXR5RGF0ZTogbnVtYmVyOyB9OyB9KSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnNhdmVJbkxvY2FsU3RvcmFnZShcIkNCU29ja2V0UmVzcG9uc2VIYXNoZXNEaWN0aW9uYXJ5XCIsIHN0b3JlZFJlc3BvbnNlSGFzaGVzRGljdGlvbmFyeSlcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHNhdmVJbkxvY2FsU3RvcmFnZShrZXk6IHN0cmluZywgb2JqZWN0OiBhbnkpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBjb25zdCBzdHJpbmdUb1NhdmUgPSBKU09OLnN0cmluZ2lmeShvYmplY3QpXG4gICAgICAgIFxuICAgICAgICBpZiAoc3RyaW5nVG9TYXZlICE9IGxvY2FsU3RvcmFnZVtrZXldKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZVtrZXldID0gc3RyaW5nVG9TYXZlXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIHNvY2tldFNob3VsZFNlbmRNZXNzYWdlKFxuICAgICAgICBrZXk6IHN0cmluZyxcbiAgICAgICAgbWVzc2FnZTogQ0JTb2NrZXRNZXNzYWdlPGFueT4sXG4gICAgICAgIGNvbXBsZXRpb25Qb2xpY3k6IHN0cmluZyxcbiAgICAgICAgY29tcGxldGlvbkZ1bmN0aW9uOiBDQlNvY2tldE1lc3NhZ2Vjb21wbGV0aW9uRnVuY3Rpb25cbiAgICApIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdmFyIHJlc3VsdCA9IFlFU1xuICAgICAgICBcbiAgICAgICAgdmFyIHRyaWdnZXJTdG9yZWRSZXNwb25zZUltbWVkaWF0ZWx5ID0gTk9cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNvbnN0IG1lc3NhZ2VEYXRhSGFzaCA9IG9iamVjdEhhc2gobWVzc2FnZS5tZXNzYWdlRGF0YSB8fCBuaWwpXG4gICAgICAgIFxuICAgICAgICBjb25zdCBkZXNjcmlwdG9yS2V5ID0gXCJzb2NrZXRNZXNzYWdlRGVzY3JpcHRvcl9cIiArIGtleSArIG1lc3NhZ2VEYXRhSGFzaFxuICAgICAgICBcbiAgICAgICAgdGhpcy5tZXNzYWdlRGVzY3JpcHRvcnNbZGVzY3JpcHRvcktleV0gPSAodGhpcy5tZXNzYWdlRGVzY3JpcHRvcnNbZGVzY3JpcHRvcktleV0gfHwgW10pXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgY29uc3QgaGFzaE9iamVjdCA9IHRoaXMuc3RvcmVkUmVzcG9uc2VIYXNoT2JqZWN0Rm9yS2V5KGtleSwgbWVzc2FnZURhdGFIYXNoKVxuICAgICAgICBtZXNzYWdlLnN0b3JlZFJlc3BvbnNlSGFzaCA9IGhhc2hPYmplY3QuaGFzaFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpZiAoY29tcGxldGlvblBvbGljeSA9PSBDQlNvY2tldENsaWVudC5jb21wbGV0aW9uUG9saWN5LmZpcnN0KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGRlc2NyaXB0b3JzRm9yS2V5ID0gKHRoaXMubWVzc2FnZURlc2NyaXB0b3JzW2Rlc2NyaXB0b3JLZXldIHx8IFtdKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBtYXRjaGluZ0Rlc2NyaXB0b3IgPSBkZXNjcmlwdG9yc0ZvcktleS5maW5kKGZ1bmN0aW9uIChkZXNjcmlwdG9yLCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGRlc2NyaXB0b3IubWVzc2FnZURhdGFIYXNoID09IG1lc3NhZ2VEYXRhSGFzaClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChtYXRjaGluZ0Rlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBOT1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChjb21wbGV0aW9uUG9saWN5ID09IENCU29ja2V0Q2xpZW50LmNvbXBsZXRpb25Qb2xpY3kuc3RvcmVkT3JGaXJzdCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBkZXNjcmlwdG9yc0ZvcktleSA9ICh0aGlzLm1lc3NhZ2VEZXNjcmlwdG9yc1tkZXNjcmlwdG9yS2V5XSB8fCBbXSlcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgbWF0Y2hpbmdEZXNjcmlwdG9yID0gZGVzY3JpcHRvcnNGb3JLZXkuZmluZChmdW5jdGlvbiAoZGVzY3JpcHRvciwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChkZXNjcmlwdG9yLm1lc3NhZ2VEYXRhSGFzaCA9PSBtZXNzYWdlRGF0YUhhc2gpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBzdG9yZWRSZXNwb25zZSA9IElTKG1lc3NhZ2Uuc3RvcmVkUmVzcG9uc2VIYXNoKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAobWF0Y2hpbmdEZXNjcmlwdG9yIHx8XG4gICAgICAgICAgICAgICAgKHN0b3JlZFJlc3BvbnNlICYmIHRoaXMuX3ZlcmlmaWVkUmVzcG9uc2VIYXNoZXNEaWN0aW9uYXJ5W21lc3NhZ2Uuc3RvcmVkUmVzcG9uc2VIYXNoXSkpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBOT1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRyaWdnZXJTdG9yZWRSZXNwb25zZUltbWVkaWF0ZWx5ID0gWUVTXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKGNvbXBsZXRpb25Qb2xpY3kgPT0gQ0JTb2NrZXRDbGllbnQuY29tcGxldGlvblBvbGljeS5maXJzdE9ubHkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZGVzY3JpcHRvcnNGb3JLZXkgPSAodGhpcy5tZXNzYWdlRGVzY3JpcHRvcnNbZGVzY3JpcHRvcktleV0gfHwgW10pXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoaW5nRGVzY3JpcHRvciA9IGRlc2NyaXB0b3JzRm9yS2V5LmZpbmQoZnVuY3Rpb24gKGRlc2NyaXB0b3IsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoZGVzY3JpcHRvci5tZXNzYWdlRGF0YUhhc2ggPT0gbWVzc2FnZURhdGFIYXNoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKG1hdGNoaW5nRGVzY3JpcHRvcikge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBOT1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpZiAoaGFzaE9iamVjdCAmJiBoYXNoT2JqZWN0Lmhhc2ggJiYgaGFzaE9iamVjdC52YWxpZGl0eURhdGUgJiYgbWVzc2FnZS5zdG9yZWRSZXNwb25zZUhhc2ggJiZcbiAgICAgICAgICAgIHRoaXMuX3ZlcmlmaWVkUmVzcG9uc2VIYXNoZXNEaWN0aW9uYXJ5W21lc3NhZ2Uuc3RvcmVkUmVzcG9uc2VIYXNoXSAmJiBoYXNoT2JqZWN0LnZhbGlkaXR5RGF0ZSA+XG4gICAgICAgICAgICBEYXRlLm5vdygpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJlc3VsdCA9IE5PXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRyaWdnZXJTdG9yZWRSZXNwb25zZUltbWVkaWF0ZWx5ID0gWUVTXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGlmIChJUyhjb21wbGV0aW9uRnVuY3Rpb24pKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZURlc2NyaXB0b3JzW2Rlc2NyaXB0b3JLZXldLnB1c2goe1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlkZW50aWZpZXI6IG1lc3NhZ2UuaWRlbnRpZmllcixcbiAgICAgICAgICAgICAgICAgICAgaW5SZXNwb25zZVRvSWRlbnRpZmllcjogbWVzc2FnZS5pblJlc3BvbnNlVG9JZGVudGlmaWVyLFxuICAgICAgICAgICAgICAgICAgICBrZWVwV2FpdGluZ0ZvclJlc3BvbnNlczogbWVzc2FnZS5rZWVwV2FpdGluZ0ZvclJlc3BvbnNlc1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHNlbnRBdFRpbWU6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy9jb21wbGV0aW9uVHJpZ2dlcmVkOiBOTyxcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBtZXNzYWdlRGF0YUhhc2g6IG1lc3NhZ2VEYXRhSGFzaCxcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBtYWluUmVzcG9uc2VSZWNlaXZlZDogTk8sXG4gICAgICAgICAgICAgICAgYW55TWFpblJlc3BvbnNlUmVjZWl2ZWQ6IE5PLFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbXBsZXRpb25Qb2xpY3k6IGNvbXBsZXRpb25Qb2xpY3ksXG4gICAgICAgICAgICAgICAgY29tcGxldGlvbkZ1bmN0aW9uOiBjb21wbGV0aW9uRnVuY3Rpb25cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMua2V5c0ZvcklkZW50aWZpZXJzW21lc3NhZ2UuaWRlbnRpZmllcl0gPSBkZXNjcmlwdG9yS2V5XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGlmICh0cmlnZ2VyU3RvcmVkUmVzcG9uc2VJbW1lZGlhdGVseSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnNvY2tldERpZFJlY2VpdmVNZXNzYWdlRm9yS2V5KFxuICAgICAgICAgICAgICAgIENCU29ja2V0Q2xpZW50LnJlc3BvbnNlTWVzc2FnZUtleSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZGVudGlmaWVyOiBuaWwsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VEYXRhOiBuaWwsXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpblJlc3BvbnNlVG9JZGVudGlmaWVyOiBtZXNzYWdlLmlkZW50aWZpZXIsXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB1c2VTdG9yZWRSZXNwb25zZTogWUVTXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbmlsXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBzdGF0aWMgZGVmYXVsdE11bHRpcGxlTWVzc2FnZWNvbXBsZXRpb25GdW5jdGlvbihyZXNwb25zZU1lc3NhZ2VzOiBhbnlbXSwgY2FsbGNvbXBsZXRpb25GdW5jdGlvbnM6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgY2FsbGNvbXBsZXRpb25GdW5jdGlvbnMoKVxuICAgIH1cbiAgICBcbiAgICBcbiAgICBzb2NrZXRXaWxsU2VuZE11bHRpcGxlTWVzc2FnZShcbiAgICAgICAgbWVzc2FnZVRvU2VuZDogQ0JTb2NrZXRNdWx0aXBsZU1lc3NhZ2UsXG4gICAgICAgIGNvbXBsZXRpb25GdW5jdGlvbjogQ0JTb2NrZXRNdWx0aXBsZU1lc3NhZ2Vjb21wbGV0aW9uRnVuY3Rpb24gPSBDQlNvY2tldENhbGxiYWNrSG9sZGVyLmRlZmF1bHRNdWx0aXBsZU1lc3NhZ2Vjb21wbGV0aW9uRnVuY3Rpb25cbiAgICApIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgY29uc3Qga2V5ID0gQ0JTb2NrZXRDbGllbnQubXVsdGlwbGVNZXNzYWdlS2V5XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjb25zdCBtZXNzYWdlRGF0YUhhc2ggPSBvYmplY3RIYXNoKG1lc3NhZ2VUb1NlbmQubWVzc2FnZURhdGEgfHwgbmlsKVxuICAgICAgICBcbiAgICAgICAgY29uc3QgZGVzY3JpcHRvcktleSA9IFwic29ja2V0TWVzc2FnZURlc2NyaXB0b3JfXCIgKyBrZXkgKyBtZXNzYWdlRGF0YUhhc2hcbiAgICAgICAgXG4gICAgICAgIHRoaXMubWVzc2FnZURlc2NyaXB0b3JzW2Rlc2NyaXB0b3JLZXldID0gKHRoaXMubWVzc2FnZURlc2NyaXB0b3JzW2Rlc2NyaXB0b3JLZXldIHx8IFtdKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIG1lc3NhZ2VUb1NlbmQuc3RvcmVkUmVzcG9uc2VIYXNoID0gdGhpcy5zdG9yZWRSZXNwb25zZUhhc2hPYmplY3RGb3JLZXkoa2V5LCBtZXNzYWdlRGF0YUhhc2gpLmhhc2hcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLm1lc3NhZ2VEZXNjcmlwdG9yc1tkZXNjcmlwdG9yS2V5XS5wdXNoKHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICBtZXNzYWdlOiB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWRlbnRpZmllcjogbWVzc2FnZVRvU2VuZC5pZGVudGlmaWVyLFxuICAgICAgICAgICAgICAgIGluUmVzcG9uc2VUb0lkZW50aWZpZXI6IG1lc3NhZ2VUb1NlbmQuaW5SZXNwb25zZVRvSWRlbnRpZmllcixcbiAgICAgICAgICAgICAgICBrZWVwV2FpdGluZ0ZvclJlc3BvbnNlczogbWVzc2FnZVRvU2VuZC5rZWVwV2FpdGluZ0ZvclJlc3BvbnNlc1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgc2VudEF0VGltZTogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9jb21wbGV0aW9uVHJpZ2dlcmVkOiBOTyxcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBtZXNzYWdlRGF0YUhhc2g6IG1lc3NhZ2VEYXRhSGFzaCxcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbWFpblJlc3BvbnNlUmVjZWl2ZWQ6IE5PLFxuICAgICAgICAgICAgYW55TWFpblJlc3BvbnNlUmVjZWl2ZWQ6IE5PLFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbXBsZXRpb25Qb2xpY3k6IENCU29ja2V0Q2xpZW50LmNvbXBsZXRpb25Qb2xpY3kuZGlyZWN0T25seSxcbiAgICAgICAgICAgIGNvbXBsZXRpb25GdW5jdGlvbjogZnVuY3Rpb24gKFxuICAgICAgICAgICAgICAgIHRoaXM6IENCU29ja2V0Q2FsbGJhY2tIb2xkZXIsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VNZXNzYWdlOiBDQlNvY2tldE11bHRpcGxlTWVzc2FnZU9iamVjdFtdLFxuICAgICAgICAgICAgICAgIHJlc3BvbmRXaXRoTWVzc2FnZVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29tcGxldGlvbkZ1bmN0aW9uKFxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZU1lc3NhZ2UubWFwKGZ1bmN0aW9uIChtZXNzYWdlT2JqZWN0LCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2VPYmplY3QubWVzc2FnZS5tZXNzYWdlRGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAodGhpczogQ0JTb2NrZXRDYWxsYmFja0hvbGRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiUmVjZWl2ZWQgbXVsdGlwbGUgbWVzc2FnZSByZXNwb25zZSB3aXRoIGxlbmd0aCBvZiBcIiArIHJlc3BvbnNlTWVzc2FnZS5sZW5ndGggKyBcIi5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhbGwgYWxsIGNvbXBsZXRpb24gZnVuY3Rpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZU1lc3NhZ2UuZm9yRWFjaChmdW5jdGlvbiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpczogQ0JTb2NrZXRDYWxsYmFja0hvbGRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlT2JqZWN0OiBDQlNvY2tldE11bHRpcGxlTWVzc2FnZU9iamVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5OiBDQlNvY2tldE11bHRpcGxlTWVzc2FnZU9iamVjdFtdXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zb2NrZXRDbGllbnQuZGlkUmVjZWl2ZU1lc3NhZ2VGb3JLZXkobWVzc2FnZU9iamVjdC5rZXksIG1lc3NhZ2VPYmplY3QubWVzc2FnZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgICAgIFxuICAgICAgICB9KVxuICAgICAgICBcbiAgICAgICAgdGhpcy5rZXlzRm9ySWRlbnRpZmllcnNbbWVzc2FnZVRvU2VuZC5pZGVudGlmaWVyXSA9IGRlc2NyaXB0b3JLZXlcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBzb2NrZXREaWRSZWNlaXZlTWVzc2FnZUZvcktleShcbiAgICAgICAga2V5OiBzdHJpbmcsXG4gICAgICAgIG1lc3NhZ2U6IENCU29ja2V0TWVzc2FnZTxhbnk+LFxuICAgICAgICBzZW5kUmVzcG9uc2VGdW5jdGlvbjogQ0JTb2NrZXRNZXNzYWdlU2VuZFJlc3BvbnNlRnVuY3Rpb25cbiAgICApIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgLy8gQ2FsbCBzdGF0aWMgaGFuZGxlcnNcbiAgICAgICAgaWYgKHRoaXMuaGFuZGxlcnNba2V5XSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmhhbmRsZXJzW2tleV0uZm9yRWFjaChmdW5jdGlvbiAoXG4gICAgICAgICAgICAgICAgdGhpczogQ0JTb2NrZXRDYWxsYmFja0hvbGRlcixcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBDQlNvY2tldE1lc3NhZ2VIYW5kbGVyRnVuY3Rpb24sXG4gICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgICAgYXJyYXlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGhhbmRsZXIobWVzc2FnZS5tZXNzYWdlRGF0YSwgc2VuZFJlc3BvbnNlRnVuY3Rpb24pXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMub25ldGltZUhhbmRsZXJzW2tleV0pIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5vbmV0aW1lSGFuZGxlcnNba2V5XS5mb3JFYWNoKGZ1bmN0aW9uIChcbiAgICAgICAgICAgICAgICB0aGlzOiBDQlNvY2tldENhbGxiYWNrSG9sZGVyLFxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IENCU29ja2V0TWVzc2FnZUhhbmRsZXJGdW5jdGlvbixcbiAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICBhcnJheVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaGFuZGxlcihtZXNzYWdlLm1lc3NhZ2VEYXRhLCBzZW5kUmVzcG9uc2VGdW5jdGlvbilcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZGVsZXRlIHRoaXMub25ldGltZUhhbmRsZXJzW2tleV1cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIC8vIFRlbXBvcmFyeSByZXNwb25zZSBoYW5kbGVycyBhcmUgZXZhbHVhdGVkIGhlcmVcbiAgICAgICAgaWYgKG1lc3NhZ2UuaW5SZXNwb25zZVRvSWRlbnRpZmllciAmJlxuICAgICAgICAgICAgKENCU29ja2V0Q2xpZW50LnJlc3BvbnNlTWVzc2FnZUtleSA9PSBrZXkgfHwgQ0JTb2NrZXRDbGllbnQubXVsdGlwbGVNZXNzYWdlS2V5ID09IGtleSkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRmluZCBkZXNjcmlwdG9ycyBmb3IgdGhlIGtleSBvZiB0aGUgbWVzc2FnZSB0aGF0IGlzIGJlaW5nIHJlc3BvbmRlZCB0b1xuICAgICAgICAgICAgY29uc3QgZGVzY3JpcHRvcktleSA9IHRoaXMua2V5c0ZvcklkZW50aWZpZXJzW21lc3NhZ2UuaW5SZXNwb25zZVRvSWRlbnRpZmllcl1cbiAgICAgICAgICAgIGNvbnN0IGRlc2NyaXB0b3JzRm9yS2V5ID0gKHRoaXMubWVzc2FnZURlc2NyaXB0b3JzW2Rlc2NyaXB0b3JLZXldIHx8IFtdKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBGaW5kIHJlc3BvbnNlIGRhdGEgaGFzaCB0byBjaGVjayBmb3IgZGlmZmVyZW5jZXNcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YUhhc2ggPSBtZXNzYWdlLm1lc3NhZ2VEYXRhSGFzaFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBSZW1vdmUgaWRlbnRpZmllciBmcm9tIGRpY3Rpb25hcnlcbiAgICAgICAgICAgIGlmICghbWVzc2FnZS5rZWVwV2FpdGluZ0ZvclJlc3BvbnNlcykge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmtleXNGb3JJZGVudGlmaWVyc1ttZXNzYWdlLmluUmVzcG9uc2VUb0lkZW50aWZpZXJdXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMubWVzc2FnZURlc2NyaXB0b3JzW2Rlc2NyaXB0b3JLZXldXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRnVuY3Rpb24gdG8gY2FsbCBjb21wbGV0aW9uIGZ1bmN0aW9uXG4gICAgICAgICAgICBjb25zdCBjYWxsQ29tcGxldGlvbkZ1bmN0aW9uID0gKGRlc2NyaXB0b3IsIHN0b3JlZFJlc3BvbnNlQ29uZGl0aW9uID0gTk8pID0+IHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZURhdGEgPSBtZXNzYWdlLm1lc3NhZ2VEYXRhXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UudXNlU3RvcmVkUmVzcG9uc2UgJiYgc3RvcmVkUmVzcG9uc2VDb25kaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VEYXRhID0gdGhpcy5zdG9yZWRSZXNwb25zZUZvcktleShkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvci5tZXNzYWdlRGF0YUhhc2gpXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZUhhc2ggPSB0aGlzLnN0b3JlZFJlc3BvbnNlSGFzaE9iamVjdEZvcktleShcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0b3Iua2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvci5tZXNzYWdlRGF0YUhhc2hcbiAgICAgICAgICAgICAgICAgICAgKS5oYXNoXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFN0b3JhZ2VLZXkgPSB0aGlzLmtleUZvclJlcXVlc3RLZXlBbmRSZXF1ZXN0RGF0YUhhc2goXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLmtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IubWVzc2FnZURhdGFIYXNoXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnJlc3BvbnNlVmFsaWRpdHlEdXJhdGlvbiAmJiB0aGlzLnN0b3JlZFJlc3BvbnNlSGFzaGVzRGljdGlvbmFyeVtsb2NhbFN0b3JhZ2VLZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcmVkUmVzcG9uc2VIYXNoZXNEaWN0aW9uYXJ5W2xvY2FsU3RvcmFnZUtleV0udmFsaWRpdHlEYXRlID0gRGF0ZS5ub3coKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5yZXNwb25zZVZhbGlkaXR5RHVyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlU3RvcmVkUmVzcG9uc2VIYXNoZXNEaWN0aW9uYXJ5KHRoaXMuc3RvcmVkUmVzcG9uc2VIYXNoZXNEaWN0aW9uYXJ5KVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZlcmlmaWVkUmVzcG9uc2VIYXNoZXNEaWN0aW9uYXJ5W3Jlc3BvbnNlSGFzaF0gPSBZRVNcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVXNpbmcgc3RvcmVkIHJlc3BvbnNlLlwiKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQ2FsbCBjb21wbGV0aW9uRnVuY3Rpb24gYW5kIHNldCByZXNwb25zZSBkYXRhIGhhc2hcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLmNvbXBsZXRpb25GdW5jdGlvbihtZXNzYWdlRGF0YSwgc2VuZFJlc3BvbnNlRnVuY3Rpb24pXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRvci5yZXNwb25zZURhdGFIYXNoID0gcmVzcG9uc2VEYXRhSGFzaFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGRlc2NyaXB0b3JzRm9yS2V5LmNvcHkoKS5mb3JFYWNoKGZ1bmN0aW9uIChcbiAgICAgICAgICAgICAgICB0aGlzOiBDQlNvY2tldENhbGxiYWNrSG9sZGVyLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3I6IENCU29ja2V0Q2FsbGJhY2tIb2xkZXJNZXNzYWdlRGVzY3JpcHRvcixcbiAgICAgICAgICAgICAgICBpbmRleDogbnVtYmVyLFxuICAgICAgICAgICAgICAgIGFycmF5OiBDQlNvY2tldENhbGxiYWNrSG9sZGVyTWVzc2FnZURlc2NyaXB0b3JbXVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKChkZXNjcmlwdG9yLmNvbXBsZXRpb25Qb2xpY3kgPT0gQ0JTb2NrZXRDbGllbnQuY29tcGxldGlvblBvbGljeS5kaXJlY3RPbmx5ICYmXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IubWVzc2FnZS5pZGVudGlmaWVyID09IG1lc3NhZ2UuaW5SZXNwb25zZVRvSWRlbnRpZmllcikgfHwgZGVzY3JpcHRvci5jb21wbGV0aW9uUG9saWN5ID09XG4gICAgICAgICAgICAgICAgICAgIENCU29ja2V0Q2xpZW50LmNvbXBsZXRpb25Qb2xpY3kuZmlyc3QgfHwgZGVzY3JpcHRvci5jb21wbGV0aW9uUG9saWN5ID09XG4gICAgICAgICAgICAgICAgICAgIENCU29ja2V0Q2xpZW50LmNvbXBsZXRpb25Qb2xpY3kuZmlyc3RPbmx5IHx8IGRlc2NyaXB0b3IuY29tcGxldGlvblBvbGljeSA9PVxuICAgICAgICAgICAgICAgICAgICBDQlNvY2tldENsaWVudC5jb21wbGV0aW9uUG9saWN5LnN0b3JlZE9yRmlyc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGxpbmcgY29tcGxldGlvbiBmdW5jdGlvbiBhbmQgcmVtb3ZpbmcgZGVzY3JpcHRvclxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtZXNzYWdlLmtlZXBXYWl0aW5nRm9yUmVzcG9uc2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcmVSZXNwb25zZShkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvci5tZXNzYWdlRGF0YUhhc2gsIG1lc3NhZ2UsIHJlc3BvbnNlRGF0YUhhc2gpXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0b3JzRm9yS2V5LnJlbW92ZUVsZW1lbnQoZGVzY3JpcHRvcilcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlRnVuY3Rpb24ucmVzcG9uZGluZ1RvTWFpblJlc3BvbnNlID0gWUVTXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FsbENvbXBsZXRpb25GdW5jdGlvbihkZXNjcmlwdG9yLCAhbWVzc2FnZS5rZWVwV2FpdGluZ0ZvclJlc3BvbnNlcylcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGRlc2NyaXB0b3IuY29tcGxldGlvblBvbGljeSA9PSBDQlNvY2tldENsaWVudC5jb21wbGV0aW9uUG9saWN5LmFsbCkge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsbGluZyBjb21wbGV0aW9uIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgIGNhbGxDb21wbGV0aW9uRnVuY3Rpb24oZGVzY3JpcHRvciwgIW1lc3NhZ2Uua2VlcFdhaXRpbmdGb3JSZXNwb25zZXMpXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBNYXJraW5nIGRlc2NyaXB0b3IgYXMgaGF2aW5nIGJlZW4gcmVzcG9uZGVkIHRvXG4gICAgICAgICAgICAgICAgICAgIGlmICghbWVzc2FnZS5rZWVwV2FpdGluZ0ZvclJlc3BvbnNlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5pblJlc3BvbnNlVG9JZGVudGlmaWVyID09IGRlc2NyaXB0b3IubWVzc2FnZS5pZGVudGlmaWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlRnVuY3Rpb24ucmVzcG9uZGluZ1RvTWFpblJlc3BvbnNlID0gWUVTXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvci5tYWluUmVzcG9uc2VSZWNlaXZlZCA9IFlFU1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0b3JzRm9yS2V5LnJlbW92ZUVsZW1lbnQoZGVzY3JpcHRvcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvci5hbnlNYWluUmVzcG9uc2VSZWNlaXZlZCA9IFlFU1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZGVzY3JpcHRvci5jb21wbGV0aW9uUG9saWN5ID09IENCU29ja2V0Q2xpZW50LmNvbXBsZXRpb25Qb2xpY3kuYWxsRGlmZmVyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBDYWxsaW5nIGNvbXBsZXRpb25GdW5jdGlvbiBpZiBtZXNzYWdlRGF0YSBpcyBkaWZmZXJlbnQgZnJvbSBwcmV2aW91c1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVzY3JpcHRvci5yZXNwb25zZURhdGFIYXNoICE9IHJlc3BvbnNlRGF0YUhhc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbENvbXBsZXRpb25GdW5jdGlvbihkZXNjcmlwdG9yLCAhbWVzc2FnZS5rZWVwV2FpdGluZ0ZvclJlc3BvbnNlcylcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBNYXJraW5nIGRlc2NyaXB0b3IgYXMgaGF2aW5nIGJlZW4gcmVzcG9uZGVkIHRvXG4gICAgICAgICAgICAgICAgICAgIGlmICghbWVzc2FnZS5rZWVwV2FpdGluZ0ZvclJlc3BvbnNlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5pblJlc3BvbnNlVG9JZGVudGlmaWVyID09IGRlc2NyaXB0b3IubWVzc2FnZS5pZGVudGlmaWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlRnVuY3Rpb24ucmVzcG9uZGluZ1RvTWFpblJlc3BvbnNlID0gWUVTXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvci5tYWluUmVzcG9uc2VSZWNlaXZlZCA9IFlFU1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0b3JzRm9yS2V5LnJlbW92ZUVsZW1lbnQoZGVzY3JpcHRvcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvci5hbnlNYWluUmVzcG9uc2VSZWNlaXZlZCA9IFlFU1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGRlc2NyaXB0b3IuY29tcGxldGlvblBvbGljeSA9PSBDQlNvY2tldENsaWVudC5jb21wbGV0aW9uUG9saWN5Lmxhc3QgJiZcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvci5tZXNzYWdlLmlkZW50aWZpZXIgPT0gbWVzc2FnZS5pblJlc3BvbnNlVG9JZGVudGlmaWVyKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIW1lc3NhZ2Uua2VlcFdhaXRpbmdGb3JSZXNwb25zZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFya2luZyBkZXNjcmlwdG9yIGFzIGhhdmluZyBiZWVuIHJlc3BvbmRlZCB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvci5tYWluUmVzcG9uc2VSZWNlaXZlZCA9IFlFU1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvci5hbnlNYWluUmVzcG9uc2VSZWNlaXZlZCA9IFlFU1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5kUmVzcG9uc2VGdW5jdGlvbi5yZXNwb25kaW5nVG9NYWluUmVzcG9uc2UgPSBZRVNcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLmNvbXBsZXRpb25GdW5jdGlvbihtZXNzYWdlLm1lc3NhZ2VEYXRhLCBzZW5kUmVzcG9uc2VGdW5jdGlvbilcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChkZXNjcmlwdG9yLmNvbXBsZXRpb25Qb2xpY3kgPT0gQ0JTb2NrZXRDbGllbnQuY29tcGxldGlvblBvbGljeS5maXJzdEFuZExhc3QgfHxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvci5jb21wbGV0aW9uUG9saWN5ID09IENCU29ja2V0Q2xpZW50LmNvbXBsZXRpb25Qb2xpY3kuZmlyc3RBbmRMYXN0SWZEaWZmZXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICghbWVzc2FnZS5rZWVwV2FpdGluZ0ZvclJlc3BvbnNlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IGNhbGxpbmcgY29tcGxldGlvbkZ1bmN0aW9uIG9uY2UgYXMgYSBmaXJzdCByZXNwb25zZSBjYWxsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRlc2NyaXB0b3IuYW55TWFpblJlc3BvbnNlUmVjZWl2ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsQ29tcGxldGlvbkZ1bmN0aW9uKGRlc2NyaXB0b3IsICFtZXNzYWdlLmtlZXBXYWl0aW5nRm9yUmVzcG9uc2VzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXJraW5nIGRlc2NyaXB0b3IgYXMgaGF2aW5nIGJlZW4gcmVzcG9uZGVkIHRvXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVzY3JpcHRvci5tZXNzYWdlLmlkZW50aWZpZXIgPT0gbWVzc2FnZS5pblJlc3BvbnNlVG9JZGVudGlmaWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvci5tYWluUmVzcG9uc2VSZWNlaXZlZCA9IFlFU1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRSZXNwb25zZUZ1bmN0aW9uLnJlc3BvbmRpbmdUb01haW5SZXNwb25zZSA9IFlFU1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLmFueU1haW5SZXNwb25zZVJlY2VpdmVkID0gWUVTXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChkZXNjcmlwdG9yLm1lc3NhZ2UuaWRlbnRpZmllciA9PSBtZXNzYWdlLmluUmVzcG9uc2VUb0lkZW50aWZpZXIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uua2VlcFdhaXRpbmdGb3JSZXNwb25zZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvci5jb21wbGV0aW9uRnVuY3Rpb24obWVzc2FnZS5tZXNzYWdlRGF0YSwgc2VuZFJlc3BvbnNlRnVuY3Rpb24pXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gTGFzdCBtZXNzYWdlIGNvbXBsZXRpb24gcG9saWNpZXNcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgYWxsUmVzcG9uc2VzUmVjZWl2ZWQgPSBkZXNjcmlwdG9yc0ZvcktleS5hbGxNYXRjaChmdW5jdGlvbiAoZGVzY3JpcHRvck9iamVjdCwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3JPYmplY3QubWFpblJlc3BvbnNlUmVjZWl2ZWRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGRlc2NyaXB0b3JzRm9yS2V5LmNvcHkoKS5mb3JFYWNoKGZ1bmN0aW9uIChcbiAgICAgICAgICAgICAgICB0aGlzOiBDQlNvY2tldENhbGxiYWNrSG9sZGVyLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3I6IENCU29ja2V0Q2FsbGJhY2tIb2xkZXJNZXNzYWdlRGVzY3JpcHRvcixcbiAgICAgICAgICAgICAgICBpbmRleDogbnVtYmVyLFxuICAgICAgICAgICAgICAgIGFycmF5OiBDQlNvY2tldENhbGxiYWNrSG9sZGVyTWVzc2FnZURlc2NyaXB0b3JbXVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKChkZXNjcmlwdG9yLmNvbXBsZXRpb25Qb2xpY3kgPT0gQ0JTb2NrZXRDbGllbnQuY29tcGxldGlvblBvbGljeS5sYXN0IHx8XG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IuY29tcGxldGlvblBvbGljeSA9PSBDQlNvY2tldENsaWVudC5jb21wbGV0aW9uUG9saWN5LmZpcnN0QW5kTGFzdCkgJiZcbiAgICAgICAgICAgICAgICAgICAgYWxsUmVzcG9uc2VzUmVjZWl2ZWQgJiYgIW1lc3NhZ2Uua2VlcFdhaXRpbmdGb3JSZXNwb25zZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGxpbmcgY29tcGxldGlvbkZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgIGNhbGxDb21wbGV0aW9uRnVuY3Rpb24oZGVzY3JpcHRvciwgIW1lc3NhZ2Uua2VlcFdhaXRpbmdGb3JSZXNwb25zZXMpXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBDbGVhbmluZyB1cFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdG9yc0ZvcktleS5yZW1vdmVFbGVtZW50KGRlc2NyaXB0b3IpXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChkZXNjcmlwdG9yLmNvbXBsZXRpb25Qb2xpY3kgPT0gQ0JTb2NrZXRDbGllbnQuY29tcGxldGlvblBvbGljeS5maXJzdEFuZExhc3RJZkRpZmZlcmVudCAmJlxuICAgICAgICAgICAgICAgICAgICBhbGxSZXNwb25zZXNSZWNlaXZlZCAmJiAhbWVzc2FnZS5rZWVwV2FpdGluZ0ZvclJlc3BvbnNlcykge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsbGluZyBjb21wbGV0aW9uRnVuY3Rpb24gaWYgbmVlZGVkXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXNjcmlwdG9yLnJlc3BvbnNlRGF0YUhhc2ggIT0gcmVzcG9uc2VEYXRhSGFzaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsQ29tcGxldGlvbkZ1bmN0aW9uKGRlc2NyaXB0b3IsICFtZXNzYWdlLmtlZXBXYWl0aW5nRm9yUmVzcG9uc2VzKVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIENsZWFuaW5nIHVwXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0b3JzRm9yS2V5LnJlbW92ZUVsZW1lbnQoZGVzY3JpcHRvcilcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxufVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vc29ja2V0LmlvLWNsaWVudC5kZXYuZC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vVUlDb3JlL1VJT2JqZWN0LnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9VSUNvcmUvVUlDb3JlRXh0ZW5zaW9ucy50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vQ0JDb3JlLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL0NCU29ja2V0Q2FsbGJhY2tIb2xkZXIudHNcIiAvPlxuXG5cbmRlY2xhcmUgaW50ZXJmYWNlIENCU29ja2V0Q2xpZW50TWVzc2FnZVRvQmVTZW50IHtcbiAgICBcbiAgICBrZXk6IHN0cmluZztcbiAgICBtZXNzYWdlOiBhbnk7XG4gICAgXG4gICAgaW5SZXNwb25zZVRvTWVzc2FnZTogQ0JTb2NrZXRNZXNzYWdlPGFueT47XG4gICAga2VlcFdhaXRpbmdGb3JSZXNwb25zZXM6IGJvb2xlYW47XG4gICAgXG4gICAgaXNCb3VuZFRvVXNlcldpdGhJRDogc3RyaW5nO1xuICAgIFxuICAgIGNvbXBsZXRpb25Qb2xpY3k6IHN0cmluZztcbiAgICBcbiAgICBkaWRTZW5kRnVuY3Rpb24/OiAoKSA9PiB2b2lkO1xuICAgIFxuICAgIGNvbXBsZXRpb246IENCU29ja2V0TWVzc2FnZWNvbXBsZXRpb25GdW5jdGlvbjtcbiAgICBcbn1cblxuXG5kZWNsYXJlIGludGVyZmFjZSBDQlNvY2tldENsaWVudEVycm9yTWVzc2FnZSB7XG4gICAgXG4gICAgX2lzQ0JTb2NrZXRFcnJvck1lc3NhZ2U6IGJvb2xlYW47XG4gICAgXG4gICAgbWVzc2FnZURhdGE6IGFueTtcbiAgICBcbn1cblxuXG5cblxuXG5mdW5jdGlvbiBJU19TT0NLRVRfRVJST1Iob2JqZWN0OiBhbnkpOiBvYmplY3QgaXMgQ0JTb2NrZXRDbGllbnRFcnJvck1lc3NhZ2Uge1xuICAgIFxuICAgIGNvbnN0IHJlc3VsdCA9IChJUyhvYmplY3QpICYmIG9iamVjdC5faXNDQlNvY2tldEVycm9yTWVzc2FnZSlcbiAgICBcbiAgICByZXR1cm4gcmVzdWx0XG4gICAgXG59XG5cbmZ1bmN0aW9uIElTX05PVF9TT0NLRVRfRVJST1Iob2JqZWN0OiBhbnkpIHtcbiAgICBcbiAgICByZXR1cm4gIUlTX1NPQ0tFVF9FUlJPUihvYmplY3QpXG4gICAgXG59XG5cblxuXG5cblxuY2xhc3MgQ0JTb2NrZXRDbGllbnQgZXh0ZW5kcyBVSU9iamVjdCB7XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgX3NvY2tldCA9IGlvKClcbiAgICBfaXNDb25uZWN0aW9uRXN0YWJsaXNoZWQgPSBOT1xuICAgIFxuICAgIF9jb2xsZWN0TWVzc2FnZXNUb1NlbmRMYXRlciA9IE5PXG4gICAgXG4gICAgX21lc3NhZ2VzVG9CZVNlbnQ6IENCU29ja2V0Q2xpZW50TWVzc2FnZVRvQmVTZW50W10gPSBbXVxuICAgIFxuICAgIHN0YXRpYyBfc2hhcmVkSW5zdGFuY2U6IENCU29ja2V0Q2xpZW50XG4gICAgXG4gICAgX2NvcmU6IENCQ29yZVxuICAgIFxuICAgIF9zdWJzY3JpYmVkS2V5czoge1xuICAgICAgICBbeDogc3RyaW5nXTogYm9vbGVhblxuICAgIH0gPSB7fVxuICAgIFxuICAgIF9jYWxsYmFja0hvbGRlciA9IG5ldyBDQlNvY2tldENhbGxiYWNrSG9sZGVyKHRoaXMpXG4gICAgXG4gICAgc3RhdGljIHJlc3BvbnNlTWVzc2FnZUtleSA9IFwiQ0JTb2NrZXRSZXNwb25zZU1lc3NhZ2VcIlxuICAgIHN0YXRpYyBtdWx0aXBsZU1lc3NhZ2VLZXkgPSBcIkNCU29ja2V0TXVsdGlwbGVNZXNzYWdlXCJcbiAgICBcbiAgICBcbiAgICBzdGF0aWMgZGlzY29ubmVjdGlvbk1lc3NhZ2U6IENCU29ja2V0Q2xpZW50RXJyb3JNZXNzYWdlID0ge1xuICAgICAgICBcbiAgICAgICAgX2lzQ0JTb2NrZXRFcnJvck1lc3NhZ2U6IFlFUyxcbiAgICAgICAgXG4gICAgICAgIG1lc3NhZ2VEYXRhOiBcIlNlcnZlciBkaXNjb25uZWN0ZWRcIlxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgY29uc3RydWN0b3IoY29yZTogQ0JDb3JlKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlcigpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5fY2xhc3MgPSBDQlNvY2tldENsaWVudFxuICAgICAgICB0aGlzLnN1cGVyY2xhc3MgPSBVSU9iamVjdFxuICAgICAgICBcbiAgICAgICAgdGhpcy5fY29yZSA9IGNvcmVcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMuc29ja2V0Lm9uKFwiY29ubmVjdFwiLCBmdW5jdGlvbiAodGhpczogQ0JTb2NrZXRDbGllbnQsIHNvY2tldDogU29ja2V0SU8uU29ja2V0KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU29ja2V0LmlvIGNvbm5lY3RlZCB0byBzZXJ2ZXIuIGNsaWVudElEID0gXCIgKyBzb2NrZXQgKyBcIiwgc29ja2V0SUQgPSBcIiArIHNvY2tldClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGluc3RhbmNlSWRlbnRpZmllciA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiSW5zdGFuY2VJZGVudGlmaWVyXCIpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChJU19OT1QoaW5zdGFuY2VJZGVudGlmaWVyKSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGluc3RhbmNlSWRlbnRpZmllciA9IE1BS0VfSUQoKVxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiSW5zdGFuY2VJZGVudGlmaWVyXCIsIGluc3RhbmNlSWRlbnRpZmllcilcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgaGFuZHNoYWtlTWVzc2FnZTogQ0JTb2NrZXRIYW5kc2hha2VJbml0TWVzc2FnZSA9IHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBhY2Nlc3NUb2tlbjogbnVsbCxcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpbnN0YW5jZUlkZW50aWZpZXI6IGluc3RhbmNlSWRlbnRpZmllclxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnNvY2tldC5lbWl0KFwiQ0JTb2NrZXRIYW5kc2hha2VJbml0TWVzc2FnZVwiLCB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWRlbnRpZmllcjogTUFLRV9JRCgpLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VEYXRhOiBoYW5kc2hha2VNZXNzYWdlXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc29ja2V0Lm9uKFxuICAgICAgICAgICAgXCJDQlNvY2tldEhhbmRzaGFrZVJlc3BvbnNlTWVzc2FnZVwiLFxuICAgICAgICAgICAgZnVuY3Rpb24gKHRoaXM6IENCU29ja2V0Q2xpZW50LCBtZXNzYWdlOiBDQlNvY2tldE1lc3NhZ2U8Q0JTb2NrZXRIYW5kc2hha2VSZXNwb25zZU1lc3NhZ2U+KSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5faXNDb25uZWN0aW9uRXN0YWJsaXNoZWQgPSBtZXNzYWdlLm1lc3NhZ2VEYXRhLmFjY2VwdGVkXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKCFtZXNzYWdlLm1lc3NhZ2VEYXRhLmFjY2VwdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNvY2tldElPIGNvbm5lY3Rpb24gZmFpbGVkLlwiKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU29ja2V0SU8gY29ubmVjdGlvbiBoYW5kc2hha2UgY29tcGxldGVkLlwiKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tIb2xkZXIgPSBuZXcgQ0JTb2NrZXRDYWxsYmFja0hvbGRlcih0aGlzLCB0aGlzLl9jYWxsYmFja0hvbGRlcilcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRVbnNlbnRNZXNzYWdlcygpXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICApXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLnNvY2tldC5vbihcImRpc2Nvbm5lY3RcIiwgZnVuY3Rpb24gKHRoaXM6IENCU29ja2V0Q2xpZW50LCBzb2NrZXQ6IFNvY2tldElPLlNvY2tldCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNvY2tldC5pbyBkaXNjb25uZWN0ZWQgZnJvbSBzZXJ2ZXIuIGNsaWVudElEID0gXCIgKyBzb2NrZXQgKyBcIi5cIilcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5faXNDb25uZWN0aW9uRXN0YWJsaXNoZWQgPSBOT1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl9jYWxsYmFja0hvbGRlci5pc1ZhbGlkID0gTk9cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tIb2xkZXIudHJpZ2dlckRpc2Nvbm5lY3RIYW5kbGVycygpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5zb2NrZXQub24oXCJDQlBlcmZvcm1SZWNvbm5lY3RcIiwgZnVuY3Rpb24gKHRoaXM6IENCU29ja2V0Q2xpZW50LCBtZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUGVyZm9ybWluZyBzb2NrZXQgcmVjb25uZWN0aW9uLlwiKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb3JlLnJlbG9hZFNvY2tldENvbm5lY3Rpb24oKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAobWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGFsZXJ0KG1lc3NhZ2UpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9zb2NrZXQub24oXG4gICAgICAgICAgICBDQlNvY2tldENsaWVudC5yZXNwb25zZU1lc3NhZ2VLZXksXG4gICAgICAgICAgICBmdW5jdGlvbiAodGhpczogQ0JTb2NrZXRDbGllbnQsIG1lc3NhZ2U6IENCU29ja2V0TWVzc2FnZTxhbnk+KSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5kaWRSZWNlaXZlTWVzc2FnZUZvcktleShDQlNvY2tldENsaWVudC5yZXNwb25zZU1lc3NhZ2VLZXksIG1lc3NhZ2UpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fc29ja2V0Lm9uKFxuICAgICAgICAgICAgQ0JTb2NrZXRDbGllbnQubXVsdGlwbGVNZXNzYWdlS2V5LFxuICAgICAgICAgICAgKG1lc3NhZ2U6IENCU29ja2V0TWVzc2FnZTxDQlNvY2tldE11bHRpcGxlTWVzc2FnZU9iamVjdFtdPikgPT4ge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmVjZWl2ZWQgXCIgKyBtZXNzYWdlLm1lc3NhZ2VEYXRhLmxlbmd0aCArIFwiIG1lc3NhZ2VzLlwiKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuZGlkUmVjZWl2ZU1lc3NhZ2VGb3JLZXkoQ0JTb2NrZXRDbGllbnQubXVsdGlwbGVNZXNzYWdlS2V5LCBtZXNzYWdlKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICApXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBnZXQgc29ja2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc29ja2V0XG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGNhbmNlbFVuc2VudE1lc3NhZ2VzKG1lc3NhZ2VzVG9DYW5jZWw6IENCU29ja2V0Q2xpZW50TWVzc2FnZVRvQmVTZW50W10pIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX21lc3NhZ2VzVG9CZVNlbnQgPSB0aGlzLl9tZXNzYWdlc1RvQmVTZW50LmZpbHRlcihmdW5jdGlvbiAoXG4gICAgICAgICAgICB0aGlzOiBDQlNvY2tldENsaWVudCxcbiAgICAgICAgICAgIG1lc3NhZ2VPYmplY3Q6IENCU29ja2V0Q2xpZW50TWVzc2FnZVRvQmVTZW50LFxuICAgICAgICAgICAgaW5kZXg6IG51bWJlcixcbiAgICAgICAgICAgIGFycmF5OiBDQlNvY2tldENsaWVudE1lc3NhZ2VUb0JlU2VudFtdXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuICFtZXNzYWdlc1RvQ2FuY2VsLmNvbnRhaW5zKG1lc3NhZ2VPYmplY3QpXG4gICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIHNlbmRVbnNlbnRNZXNzYWdlcyhyZWNlaXZlUmVzcG9uc2VzVG9nZXRoZXIgPSBOTywgY29tcGxldGlvbj86IENCU29ja2V0TXVsdGlwbGVNZXNzYWdlY29tcGxldGlvbkZ1bmN0aW9uKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAoIXRoaXMuX2lzQ29ubmVjdGlvbkVzdGFibGlzaGVkIHx8IHRoaXMuX2NvbGxlY3RNZXNzYWdlc1RvU2VuZExhdGVyKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGdyb3VwZWRNZXNzYWdlczogQ0JTb2NrZXRNdWx0aXBsZU1lc3NhZ2VPYmplY3Q8YW55PltdID0gW11cbiAgICAgICAgY29uc3QgZGlkU2VuZEZ1bmN0aW9uczogKCgpID0+IHZvaWQpW10gPSBbXVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX21lc3NhZ2VzVG9CZVNlbnQuY29weSgpLmZvckVhY2goZnVuY3Rpb24gKFxuICAgICAgICAgICAgdGhpczogQ0JTb2NrZXRDbGllbnQsXG4gICAgICAgICAgICBtZXNzYWdlVG9CZVNlbnRPYmplY3Q6IENCU29ja2V0Q2xpZW50TWVzc2FnZVRvQmVTZW50LFxuICAgICAgICAgICAgaW5kZXg6IG51bWJlcixcbiAgICAgICAgICAgIGFycmF5OiBDQlNvY2tldENsaWVudE1lc3NhZ2VUb0JlU2VudFtdXG4gICAgICAgICkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodGhpcy5faXNDb25uZWN0aW9uRXN0YWJsaXNoZWQpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IG1lc3NhZ2VUb0JlU2VudE9iamVjdC5tZXNzYWdlXG4gICAgICAgICAgICAgICAgaWYgKElTX05PVChtZXNzYWdlKSkge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gXCJcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zdCBpZGVudGlmaWVyID0gTUFLRV9JRCgpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3QgY29tcGxldGlvbiA9IG1lc3NhZ2VUb0JlU2VudE9iamVjdC5jb21wbGV0aW9uXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZU9iamVjdDogQ0JTb2NrZXRNZXNzYWdlPGFueT4gPSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlRGF0YTogbWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgICAgICAgICAgICAga2VlcFdhaXRpbmdGb3JSZXNwb25zZXM6IG1lc3NhZ2VUb0JlU2VudE9iamVjdC5rZWVwV2FpdGluZ0ZvclJlc3BvbnNlcyxcbiAgICAgICAgICAgICAgICAgICAgaW5SZXNwb25zZVRvSWRlbnRpZmllcjogbWVzc2FnZVRvQmVTZW50T2JqZWN0LmluUmVzcG9uc2VUb01lc3NhZ2UuaWRlbnRpZmllclxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3Qgc2hvdWxkU2VuZE1lc3NhZ2UgPSB0aGlzLl9jYWxsYmFja0hvbGRlci5zb2NrZXRTaG91bGRTZW5kTWVzc2FnZShcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVRvQmVTZW50T2JqZWN0LmtleSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZU9iamVjdCxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVRvQmVTZW50T2JqZWN0LmNvbXBsZXRpb25Qb2xpY3ksXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRpb25cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZFNlbmRNZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBlZE1lc3NhZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IG1lc3NhZ2VUb0JlU2VudE9iamVjdC5rZXksXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlT2JqZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBkaWRTZW5kRnVuY3Rpb25zLnB1c2gobWVzc2FnZVRvQmVTZW50T2JqZWN0LmRpZFNlbmRGdW5jdGlvbilcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5fbWVzc2FnZXNUb0JlU2VudCA9IFtdXG4gICAgICAgIFxuICAgICAgICBpZiAoSVNfTk9UKGdyb3VwZWRNZXNzYWdlcy5sZW5ndGgpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChncm91cGVkTWVzc2FnZXMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJzZW5kaW5nIDEgdW5zZW50IG1lc3NhZ2UuXCIpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJTZW5kaW5nIFwiICsgZ3JvdXBlZE1lc3NhZ2VzLmxlbmd0aCArIFwiIHVuc2VudCBtZXNzYWdlcy5cIilcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG1lc3NhZ2VPYmplY3Q6IENCU29ja2V0TXVsdGlwbGVNZXNzYWdlID0ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBtZXNzYWdlRGF0YTogZ3JvdXBlZE1lc3NhZ2VzLFxuICAgICAgICAgICAgaWRlbnRpZmllcjogTUFLRV9JRCgpLFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBzaG91bGRHcm91cFJlc3BvbnNlczogcmVjZWl2ZVJlc3BvbnNlc1RvZ2V0aGVyXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy9pZiAocmVjZWl2ZVJlc3BvbnNlc1RvZ2V0aGVyKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLl9jYWxsYmFja0hvbGRlci5zb2NrZXRXaWxsU2VuZE11bHRpcGxlTWVzc2FnZShtZXNzYWdlT2JqZWN0LCBjb21wbGV0aW9uKVxuICAgICAgICBcbiAgICAgICAgLy99XG4gICAgICAgIFxuICAgICAgICB0aGlzLnNvY2tldC5lbWl0KENCU29ja2V0Q2xpZW50Lm11bHRpcGxlTWVzc2FnZUtleSwgbWVzc2FnZU9iamVjdClcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBkaWRTZW5kRnVuY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGRpZFNlbmRGdW5jdGlvbiwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICBkaWRTZW5kRnVuY3Rpb24oKVxuICAgICAgICB9KVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgc3RhdGljIGNvbXBsZXRpb25Qb2xpY3kgPSB7XG4gICAgICAgIFxuICAgICAgICBcImFsbFwiOiBcImFsbFwiLFxuICAgICAgICBcImFsbERpZmZlcmVudFwiOiBcImFsbERpZmZlcmVudFwiLFxuICAgICAgICBcImZpcnN0XCI6IFwiZmlyc3RcIixcbiAgICAgICAgXCJsYXN0XCI6IFwibGFzdFwiLFxuICAgICAgICBcImZpcnN0QW5kTGFzdFwiOiBcImZpcnN0QW5kTGFzdFwiLFxuICAgICAgICBcImZpcnN0QW5kTGFzdElmRGlmZmVyZW50XCI6IFwiZmlyc3RBbmRMYXN0SWZEaWZmZXJlbnRcIixcbiAgICAgICAgXCJkaXJlY3RPbmx5XCI6IFwiZGlyZWN0T25seVwiLFxuICAgICAgICBcImZpcnN0T25seVwiOiBcImZpcnN0T25seVwiLFxuICAgICAgICBcInN0b3JlZE9yRmlyc3RcIjogXCJzdG9yZWRPckZpcnN0XCJcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHNlbmRVc2VyQm91bmRNZXNzYWdlRm9yS2V5V2l0aFBvbGljeShcbiAgICAgICAga2V5OiBzdHJpbmcsXG4gICAgICAgIG1lc3NhZ2U6IGFueSxcbiAgICAgICAgY29tcGxldGlvblBvbGljeTogc3RyaW5nLFxuICAgICAgICBjb21wbGV0aW9uPzogQ0JTb2NrZXRNZXNzYWdlY29tcGxldGlvbkZ1bmN0aW9uXG4gICAgKSB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5fc2VuZE1lc3NhZ2VGb3JLZXkoa2V5LCBtZXNzYWdlLCB1bmRlZmluZWQsIE5PLCBjb21wbGV0aW9uUG9saWN5LCBZRVMsIG5pbCwgY29tcGxldGlvbilcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHNlbmRVc2VyQm91bmRNZXNzYWdlRm9yS2V5KGtleTogc3RyaW5nLCBtZXNzYWdlOiBhbnksIGNvbXBsZXRpb24/OiBDQlNvY2tldE1lc3NhZ2Vjb21wbGV0aW9uRnVuY3Rpb24pIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3NlbmRNZXNzYWdlRm9yS2V5KGtleSwgbWVzc2FnZSwgdW5kZWZpbmVkLCBOTywgdW5kZWZpbmVkLCBZRVMsIG5pbCwgY29tcGxldGlvbilcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHNlbmRNZXNzYWdlRm9yS2V5V2l0aFBvbGljeShcbiAgICAgICAga2V5OiBzdHJpbmcsXG4gICAgICAgIG1lc3NhZ2U6IGFueSxcbiAgICAgICAgY29tcGxldGlvblBvbGljeTogc3RyaW5nLFxuICAgICAgICBjb21wbGV0aW9uPzogQ0JTb2NrZXRNZXNzYWdlY29tcGxldGlvbkZ1bmN0aW9uXG4gICAgKSB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5fc2VuZE1lc3NhZ2VGb3JLZXkoa2V5LCBtZXNzYWdlLCB1bmRlZmluZWQsIE5PLCBjb21wbGV0aW9uUG9saWN5LCBOTywgbmlsLCBjb21wbGV0aW9uKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc2VuZE1lc3NhZ2VGb3JLZXkoa2V5OiBzdHJpbmcsIG1lc3NhZ2U6IGFueSwgY29tcGxldGlvbj86IENCU29ja2V0TWVzc2FnZWNvbXBsZXRpb25GdW5jdGlvbikge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5fc2VuZE1lc3NhZ2VGb3JLZXkoa2V5LCBtZXNzYWdlLCB1bmRlZmluZWQsIE5PLCB1bmRlZmluZWQsIE5PLCBuaWwsIGNvbXBsZXRpb24pXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICByZXN1bHRGb3JNZXNzYWdlRm9yS2V5KGtleTogc3RyaW5nLCBtZXNzYWdlOiBhbnksIGNvbXBsZXRpb25Qb2xpY3k/OiBzdHJpbmcsIGlzVXNlckJvdW5kID0gTk8sIGludGVybWVkaWF0ZVJlc3VsdE1lc3NhZ2VGdW5jdGlvbiA9IG5pbCkge1xuICAgICAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFByb21pc2U8e1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXNwb25zZU1lc3NhZ2U6IGFueSxcbiAgICAgICAgICAgIHJlc3VsdDogYW55LFxuICAgICAgICAgICAgZXJyb3JSZXN1bHQ6IGFueSxcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVzcG9uZFdpdGhNZXNzYWdlOiBDQlNvY2tldE1lc3NhZ2VTZW5kUmVzcG9uc2VGdW5jdGlvblxuICAgICAgICAgICAgXG4gICAgICAgIH0+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5fc2VuZE1lc3NhZ2VGb3JLZXkoXG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIE5PLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRpb25Qb2xpY3ksXG4gICAgICAgICAgICAgICAgaXNVc2VyQm91bmQsXG4gICAgICAgICAgICAgICAgbmlsLFxuICAgICAgICAgICAgICAgIChyZXNwb25zZU1lc3NhZ2UsIHJlc3BvbmRXaXRoTWVzc2FnZSkgPT4ge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uZFdpdGhNZXNzYWdlLnJlc3BvbmRpbmdUb01haW5SZXNwb25zZSkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlTWVzc2FnZTogcmVzcG9uc2VNZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogSUYoSVNfTk9UX1NPQ0tFVF9FUlJPUihyZXNwb25zZU1lc3NhZ2UpKSgoKSA9PiByZXNwb25zZU1lc3NhZ2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLkVMU0UoUkVUVVJORVIodW5kZWZpbmVkKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JSZXN1bHQ6IElGKElTX1NPQ0tFVF9FUlJPUihyZXNwb25zZU1lc3NhZ2UpKSgoKSA9PiByZXNwb25zZU1lc3NhZ2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLkVMU0UoUkVUVVJORVIodW5kZWZpbmVkKSksXG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbmRXaXRoTWVzc2FnZTogcmVzcG9uZFdpdGhNZXNzYWdlXG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJtZWRpYXRlUmVzdWx0TWVzc2FnZUZ1bmN0aW9uKHJlc3BvbnNlTWVzc2FnZSwgcmVzcG9uZFdpdGhNZXNzYWdlKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgICBcbiAgICAgICAgfSlcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIF9zZW5kTWVzc2FnZUZvcktleShcbiAgICAgICAga2V5OiBzdHJpbmcsXG4gICAgICAgIG1lc3NhZ2U6IGFueSxcbiAgICAgICAgaW5SZXNwb25zZVRvTWVzc2FnZTogQ0JTb2NrZXRNZXNzYWdlPGFueT4gPSB7fSBhcyBhbnksXG4gICAgICAgIGtlZXBNZXNzYWdlQ29ubmVjdGlvbk9wZW4gPSBOTyxcbiAgICAgICAgY29tcGxldGlvblBvbGljeSA9IENCU29ja2V0Q2xpZW50LmNvbXBsZXRpb25Qb2xpY3kuZGlyZWN0T25seSxcbiAgICAgICAgaXNVc2VyQm91bmQgPSBOTyxcbiAgICAgICAgZGlkU2VuZEZ1bmN0aW9uOiAoKSA9PiB2b2lkID0gbmlsLFxuICAgICAgICBjb21wbGV0aW9uOiBDQlNvY2tldE1lc3NhZ2Vjb21wbGV0aW9uRnVuY3Rpb24gPSBuaWxcbiAgICApIHtcbiAgICAgICAgXG4gICAgICAgIGlmIChJU19OSUwobWVzc2FnZSkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbWVzc2FnZSA9IFwiXCJcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5faXNDb25uZWN0aW9uRXN0YWJsaXNoZWQgJiYgIXRoaXMuX2NvbGxlY3RNZXNzYWdlc1RvU2VuZExhdGVyKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGlkZW50aWZpZXIgPSBNQUtFX0lEKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgbWVzc2FnZU9iamVjdDogQ0JTb2NrZXRNZXNzYWdlPGFueT4gPSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbWVzc2FnZURhdGE6IG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgICAgICAgICBrZWVwV2FpdGluZ0ZvclJlc3BvbnNlczoga2VlcE1lc3NhZ2VDb25uZWN0aW9uT3BlbixcbiAgICAgICAgICAgICAgICBpblJlc3BvbnNlVG9JZGVudGlmaWVyOiBpblJlc3BvbnNlVG9NZXNzYWdlLmlkZW50aWZpZXJcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3Qgc2hvdWxkU2VuZE1lc3NhZ2UgPSB0aGlzLl9jYWxsYmFja0hvbGRlci5zb2NrZXRTaG91bGRTZW5kTWVzc2FnZShcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgbWVzc2FnZU9iamVjdCxcbiAgICAgICAgICAgICAgICBjb21wbGV0aW9uUG9saWN5LFxuICAgICAgICAgICAgICAgIGNvbXBsZXRpb25cbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHNob3VsZFNlbmRNZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5zb2NrZXQuZW1pdChrZXksIG1lc3NhZ2VPYmplY3QpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGRpZFNlbmRGdW5jdGlvbigpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5fbWVzc2FnZXNUb0JlU2VudC5wdXNoKHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICAgICAgICAgIGluUmVzcG9uc2VUb01lc3NhZ2U6IGluUmVzcG9uc2VUb01lc3NhZ2UsXG4gICAgICAgICAgICAgICAga2VlcFdhaXRpbmdGb3JSZXNwb25zZXM6IGtlZXBNZXNzYWdlQ29ubmVjdGlvbk9wZW4sXG4gICAgICAgICAgICAgICAgY29tcGxldGlvblBvbGljeTogY29tcGxldGlvblBvbGljeSxcbiAgICAgICAgICAgICAgICBpc0JvdW5kVG9Vc2VyV2l0aElEOiBudWxsLFxuICAgICAgICAgICAgICAgIGRpZFNlbmRGdW5jdGlvbjogZGlkU2VuZEZ1bmN0aW9uLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRpb246IGNvbXBsZXRpb25cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tZXNzYWdlc1RvQmVTZW50Lmxhc3RFbGVtZW50XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgc2VuZE1lc3NhZ2VzQXNHcm91cChmdW5jdGlvblRvQ2FsbDogKCkgPT4gdm9pZCkge1xuICAgICAgICBcbiAgICAgICAgY29uc3QgY29sbGVjdE1lc3NhZ2VzVG9TZW5kTGF0ZXIgPSB0aGlzLl9jb2xsZWN0TWVzc2FnZXNUb1NlbmRMYXRlclxuICAgICAgICBcbiAgICAgICAgdGhpcy5fY29sbGVjdE1lc3NhZ2VzVG9TZW5kTGF0ZXIgPSBZRVNcbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uVG9DYWxsKClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2NvbGxlY3RNZXNzYWdlc1RvU2VuZExhdGVyID0gY29sbGVjdE1lc3NhZ2VzVG9TZW5kTGF0ZXJcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2VuZFVuc2VudE1lc3NhZ2VzKClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHNlbmRBbmRSZWNlaXZlTWVzc2FnZXNBc0dyb3VwKGZ1bmN0aW9uVG9DYWxsOiAoKSA9PiB2b2lkLCBjb21wbGV0aW9uPzogQ0JTb2NrZXRNdWx0aXBsZU1lc3NhZ2Vjb21wbGV0aW9uRnVuY3Rpb24pIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGNvbGxlY3RNZXNzYWdlc1RvU2VuZExhdGVyID0gdGhpcy5fY29sbGVjdE1lc3NhZ2VzVG9TZW5kTGF0ZXJcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2NvbGxlY3RNZXNzYWdlc1RvU2VuZExhdGVyID0gWUVTXG4gICAgICAgIFxuICAgICAgICBmdW5jdGlvblRvQ2FsbCgpXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9jb2xsZWN0TWVzc2FnZXNUb1NlbmRMYXRlciA9IGNvbGxlY3RNZXNzYWdlc1RvU2VuZExhdGVyXG4gICAgICAgIFxuICAgICAgICB0aGlzLnNlbmRVbnNlbnRNZXNzYWdlcyhZRVMsIGNvbXBsZXRpb24pXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBkaWRSZWNlaXZlTWVzc2FnZUZvcktleShrZXk6IHN0cmluZywgbWVzc2FnZTogQ0JTb2NrZXRNZXNzYWdlPGFueT4pIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBjb25zdCBzZW5kUmVzcG9uc2VGdW5jdGlvbjogQ0JTb2NrZXRNZXNzYWdlU2VuZFJlc3BvbnNlRnVuY3Rpb24gPSBmdW5jdGlvbiAoXG4gICAgICAgICAgICB0aGlzOiBDQlNvY2tldENsaWVudCxcbiAgICAgICAgICAgIHJlc3BvbnNlTWVzc2FnZTogYW55LFxuICAgICAgICAgICAgY29tcGxldGlvbjogQ0JTb2NrZXRNZXNzYWdlY29tcGxldGlvbkZ1bmN0aW9uXG4gICAgICAgICkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl9zZW5kTWVzc2FnZUZvcktleShcbiAgICAgICAgICAgICAgICBDQlNvY2tldENsaWVudC5yZXNwb25zZU1lc3NhZ2VLZXksXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VNZXNzYWdlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgTk8sXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIE5PLFxuICAgICAgICAgICAgICAgIG5pbCxcbiAgICAgICAgICAgICAgICBjb21wbGV0aW9uXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBcbiAgICAgICAgfS5iaW5kKHRoaXMpIGFzIGFueVxuICAgICAgICBcbiAgICAgICAgc2VuZFJlc3BvbnNlRnVuY3Rpb24uc2VuZEludGVybWVkaWF0ZVJlc3BvbnNlID0gZnVuY3Rpb24gKFxuICAgICAgICAgICAgdGhpczogQ0JTb2NrZXRDbGllbnQsXG4gICAgICAgICAgICB1cGRhdGVNZXNzYWdlOiBhbnksXG4gICAgICAgICAgICBjb21wbGV0aW9uOiBDQlNvY2tldE1lc3NhZ2Vjb21wbGV0aW9uRnVuY3Rpb25cbiAgICAgICAgKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX3NlbmRNZXNzYWdlRm9yS2V5KFxuICAgICAgICAgICAgICAgIENCU29ja2V0Q2xpZW50LnJlc3BvbnNlTWVzc2FnZUtleSxcbiAgICAgICAgICAgICAgICB1cGRhdGVNZXNzYWdlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgWUVTLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBOTyxcbiAgICAgICAgICAgICAgICBuaWwsXG4gICAgICAgICAgICAgICAgY29tcGxldGlvblxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgXG4gICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICBcbiAgICAgICAgY29uc3Qgc2VuZFVzZXJCb3VuZFJlc3BvbnNlRnVuY3Rpb246IENCU29ja2V0TWVzc2FnZVNlbmRSZXNwb25zZUZ1bmN0aW9uID0gZnVuY3Rpb24gKFxuICAgICAgICAgICAgdGhpczogQ0JTb2NrZXRDbGllbnQsXG4gICAgICAgICAgICByZXNwb25zZU1lc3NhZ2U6IGFueSxcbiAgICAgICAgICAgIGNvbXBsZXRpb246IENCU29ja2V0TWVzc2FnZWNvbXBsZXRpb25GdW5jdGlvblxuICAgICAgICApIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5fc2VuZE1lc3NhZ2VGb3JLZXkoXG4gICAgICAgICAgICAgICAgQ0JTb2NrZXRDbGllbnQucmVzcG9uc2VNZXNzYWdlS2V5LFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlTWVzc2FnZSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgICAgIE5PLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBZRVMsXG4gICAgICAgICAgICAgICAgbmlsLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRpb25cbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIFxuICAgICAgICB9LmJpbmQodGhpcykgYXMgYW55XG4gICAgICAgIFxuICAgICAgICBzZW5kVXNlckJvdW5kUmVzcG9uc2VGdW5jdGlvbi5zZW5kSW50ZXJtZWRpYXRlUmVzcG9uc2UgPSBmdW5jdGlvbiAoXG4gICAgICAgICAgICB0aGlzOiBDQlNvY2tldENsaWVudCxcbiAgICAgICAgICAgIHVwZGF0ZU1lc3NhZ2U6IGFueSxcbiAgICAgICAgICAgIGNvbXBsZXRpb246IENCU29ja2V0TWVzc2FnZWNvbXBsZXRpb25GdW5jdGlvblxuICAgICAgICApIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5fc2VuZE1lc3NhZ2VGb3JLZXkoXG4gICAgICAgICAgICAgICAgQ0JTb2NrZXRDbGllbnQucmVzcG9uc2VNZXNzYWdlS2V5LFxuICAgICAgICAgICAgICAgIHVwZGF0ZU1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgICAgICBZRVMsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIFlFUyxcbiAgICAgICAgICAgICAgICBuaWwsXG4gICAgICAgICAgICAgICAgY29tcGxldGlvblxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgXG4gICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICBcbiAgICAgICAgaWYgKElTX1NPQ0tFVF9FUlJPUihtZXNzYWdlLm1lc3NhZ2VEYXRhKSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNCU29ja2V0Q2xpZW50IGRpZCByZWNlaXZlIGVycm9yIG1lc3NhZ2UuXCIpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UubWVzc2FnZURhdGEpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9jYWxsYmFja0hvbGRlci5zb2NrZXREaWRSZWNlaXZlTWVzc2FnZUZvcktleShrZXksIG1lc3NhZ2UsIHNlbmRSZXNwb25zZUZ1bmN0aW9uKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgYWRkVGFyZ2V0Rm9yTWVzc2FnZXNGb3JLZXlzKGtleXM6IHN0cmluZ1tdLCBoYW5kbGVyRnVuY3Rpb246IENCU29ja2V0TWVzc2FnZUhhbmRsZXJGdW5jdGlvbikge1xuICAgICAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKHRoaXM6IENCU29ja2V0Q2xpZW50LCBrZXk6IHN0cmluZywgaW5kZXg6IG51bWJlciwgYXJyYXk6IHN0cmluZ1tdKSB7XG4gICAgICAgICAgICB0aGlzLmFkZFRhcmdldEZvck1lc3NhZ2VzRm9yS2V5KGtleSwgaGFuZGxlckZ1bmN0aW9uKVxuICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGFkZFRhcmdldEZvck1lc3NhZ2VzRm9yS2V5KGtleTogc3RyaW5nLCBoYW5kbGVyRnVuY3Rpb246IENCU29ja2V0TWVzc2FnZUhhbmRsZXJGdW5jdGlvbikge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5fY2FsbGJhY2tIb2xkZXIucmVnaXN0ZXJIYW5kbGVyKGtleSwgaGFuZGxlckZ1bmN0aW9uKVxuICAgICAgICBcbiAgICAgICAgaWYgKElTX05PVCh0aGlzLl9zdWJzY3JpYmVkS2V5c1trZXldKSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl9zb2NrZXQub24oa2V5LCBmdW5jdGlvbiAodGhpczogQ0JTb2NrZXRDbGllbnQsIG1lc3NhZ2U6IENCU29ja2V0TWVzc2FnZTxhbnk+KSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5kaWRSZWNlaXZlTWVzc2FnZUZvcktleShrZXksIG1lc3NhZ2UpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZWRLZXlzW2tleV0gPSB0cnVlXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBhZGRUYXJnZXRGb3JPbmVNZXNzYWdlRm9yS2V5KGtleTogc3RyaW5nLCBoYW5kbGVyRnVuY3Rpb246IENCU29ja2V0TWVzc2FnZUhhbmRsZXJGdW5jdGlvbikge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5fY2FsbGJhY2tIb2xkZXIucmVnaXN0ZXJPbmV0aW1lSGFuZGxlcihrZXksIGhhbmRsZXJGdW5jdGlvbilcbiAgICAgICAgXG4gICAgICAgIGlmIChJU19OT1QodGhpcy5fc3Vic2NyaWJlZEtleXNba2V5XSkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5fc29ja2V0Lm9uKGtleSwgZnVuY3Rpb24gKHRoaXM6IENCU29ja2V0Q2xpZW50LCBtZXNzYWdlOiBDQlNvY2tldE1lc3NhZ2U8YW55Pikge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuZGlkUmVjZWl2ZU1lc3NhZ2VGb3JLZXkoa2V5LCBtZXNzYWdlKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmVkS2V5c1trZXldID0gdHJ1ZVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG59XG5cblxuY29uc3QgU29ja2V0Q2xpZW50OiBTb2NrZXRDbGllbnQgPSBuZXcgUHJveHkoeyBcIm5hbWVcIjogXCJTb2NrZXRDbGllbnRcIiB9LCB7XG4gICAgXG4gICAgZ2V0KHRhcmdldCwga2V5KSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCByZXN1bHQgPSAoXG4gICAgICAgICAgICBtZXNzYWdlRGF0YSxcbiAgICAgICAgICAgIGNvbXBsZXRpb25Qb2xpY3ksXG4gICAgICAgICAgICBpc1VzZXJCb3VuZCxcbiAgICAgICAgICAgIGludGVybWVkaWF0ZVJlc3VsdEZ1bmN0aW9uXG4gICAgICAgICkgPT4gQ0JDb3JlLnNoYXJlZEluc3RhbmNlLnNvY2tldENsaWVudC5yZXN1bHRGb3JNZXNzYWdlRm9yS2V5KFxuICAgICAgICAgICAga2V5IGFzIHN0cmluZyxcbiAgICAgICAgICAgIG1lc3NhZ2VEYXRhLFxuICAgICAgICAgICAgY29tcGxldGlvblBvbGljeSxcbiAgICAgICAgICAgIGlzVXNlckJvdW5kLFxuICAgICAgICAgICAgaW50ZXJtZWRpYXRlUmVzdWx0RnVuY3Rpb25cbiAgICAgICAgKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbn0pIGFzIGFueVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiIsIlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vQ3VzdG9tIGNvbXBvbmVudHMvQ0JTb2NrZXRDbGllbnQudHNcIiAvPlxuXG5cblxuXG5cbmNsYXNzIENCQ29yZSBleHRlbmRzIFVJT2JqZWN0IHtcblxuXG5cblxuICAgIHByaXZhdGUgc3RhdGljIF9zaGFyZWRJbnN0YW5jZTogQ0JDb3JlXG5cbiAgICBfc29ja2V0Q2xpZW50OiBDQlNvY2tldENsaWVudCA9IG5ldyBDQlNvY2tldENsaWVudCh0aGlzKVxuXG5cbiAgICBfZnVuY3Rpb25zVG9DYWxsRm9yRWFjaFNvY2tldENsaWVudDogKCgpID0+IHZvaWQpW10gPSBbXVxuXG5cblxuXG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcblxuICAgICAgICBzdXBlcigpXG5cbiAgICAgICAgdGhpcy5fY2xhc3MgPSBDQkNvcmVcbiAgICAgICAgdGhpcy5zdXBlcmNsYXNzID0gVUlPYmplY3RcblxuXG5cblxuXG4gICAgfVxuXG5cblxuXG5cbiAgICBzdGF0aWMgZ2V0IHNoYXJlZEluc3RhbmNlKCkge1xuICAgICAgICBpZiAoIUNCQ29yZS5fc2hhcmVkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIENCQ29yZS5fc2hhcmVkSW5zdGFuY2UgPSBuZXcgQ0JDb3JlKClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gQ0JDb3JlLl9zaGFyZWRJbnN0YW5jZVxuICAgIH1cblxuXG5cblxuICAgIGJyb2FkY2FzdE1lc3NhZ2VJblJvb3RWaWV3VHJlZShtZXNzYWdlOiBVSVZpZXdCcm9hZGNhc3RFdmVudCkge1xuXG4gICAgICAgIChVSUNvcmUubWFpbi5yb290Vmlld0NvbnRyb2xsZXIgYXMgVUlWaWV3Q29udHJvbGxlcikudmlldy5icm9hZGNhc3RFdmVudEluU3VidHJlZShtZXNzYWdlKVxuXG4gICAgfVxuXG5cblxuXG4gICAgZ2V0IHNvY2tldENsaWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NvY2tldENsaWVudFxuICAgIH1cblxuXG5cblxuXG5cbiAgICBzZXQgbGFuZ3VhZ2VLZXkobGFuZ3VhZ2VLZXk6IHN0cmluZykge1xuXG4gICAgICAgIGlmIChJU19OT1QobGFuZ3VhZ2VLZXkpKSB7XG5cbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwiQ0JMYW5ndWFnZUtleVwiKVxuXG4gICAgICAgIH1cblxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcIkNCTGFuZ3VhZ2VLZXlcIiwgSlNPTi5zdHJpbmdpZnkobGFuZ3VhZ2VLZXkpKVxuXG4gICAgICAgIHRoaXMuZGlkU2V0TGFuZ3VhZ2VLZXkoKVxuXG4gICAgfVxuXG4gICAgZ2V0IGxhbmd1YWdlS2V5KCkge1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IEZJUlNUKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiQ0JMYW5ndWFnZUtleVwiKSwgTGFuZ3VhZ2VTZXJ2aWNlLmRlZmF1bHRMYW5ndWFnZUtleSkucmVwbGFjZShcbiAgICAgICAgICAgIFwiXFxcIlwiLFxuICAgICAgICAgICAgXCJcIlxuICAgICAgICApLnJlcGxhY2UoXCJcXFwiXCIsIFwiXCIpXG5cblxuICAgICAgICByZXR1cm4gcmVzdWx0XG5cbiAgICB9XG5cbiAgICBkaWRTZXRMYW5ndWFnZUtleSgpIHtcblxuICAgICAgICBVSVJvdXRlLmN1cnJlbnRSb3V0ZS5yb3V0ZVdpdGhDb21wb25lbnQoXG4gICAgICAgICAgICBcInNldHRpbmdzXCIsXG4gICAgICAgICAgICB7IFwibGFuZ3VhZ2VcIjogdGhpcy5sYW5ndWFnZUtleSB9LFxuICAgICAgICAgICAgWUVTXG4gICAgICAgICkuYXBwbHlCeVJlcGxhY2luZ0N1cnJlbnRSb3V0ZUluSGlzdG9yeSgpXG5cbiAgICB9XG4gICAgXG4gICAgXG4gICAgcmVhZFRleHRGaWxlRnJvbVVSTChmaWxlVVJMOiBzdHJpbmcpIHtcblxuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgICAgICAgIHZhciByYXdGaWxlID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICByYXdGaWxlLm9wZW4oXCJHRVRcIiwgZmlsZVVSTCwgZmFsc2UpO1xuICAgICAgICAgICAgcmF3RmlsZS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAocmF3RmlsZS5yZWFkeVN0YXRlID09PSA0KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhd0ZpbGUuc3RhdHVzID09PSAyMDAgfHwgcmF3RmlsZS5zdGF0dXMgPT0gMCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWxsVGV4dCA9IHJhd0ZpbGUucmVzcG9uc2VUZXh0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGFsbFRleHQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChyYXdGaWxlLnJlc3BvbnNlKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByYXdGaWxlLnNlbmQobnVsbCk7XG5cbiAgICAgICAgfSlcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICB9XG4gICAgXG4gICAgcmVsb2FkU29ja2V0Q29ubmVjdGlvbigpIHtcblxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMuc29ja2V0Q2xpZW50LnNvY2tldC5kaXNjb25uZWN0KClcblxuXG5cbiAgICAgICAgdGhpcy5fc29ja2V0Q2xpZW50ID0gbmV3IENCU29ja2V0Q2xpZW50KHRoaXMpXG4gICAgICAgIHRoaXMuX3NvY2tldENsaWVudC5fbWVzc2FnZXNUb0JlU2VudCA9IFtdXG5cbiAgICAgICAgdGhpcy5fZnVuY3Rpb25zVG9DYWxsRm9yRWFjaFNvY2tldENsaWVudC5mb3JFYWNoKGZ1bmN0aW9uIChmdW5jdGlvblRvQ2FsbCwgaW5kZXgsIGFycmF5KSB7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uVG9DYWxsKClcblxuICAgICAgICB9KVxuXG5cblxuICAgIH1cblxuXG4gICAgY2FsbEZ1bmN0aW9uRm9yRWFjaFNvY2tldENsaWVudChmdW5jdGlvblRvQ2FsbDogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9mdW5jdGlvbnNUb0NhbGxGb3JFYWNoU29ja2V0Q2xpZW50LnB1c2goZnVuY3Rpb25Ub0NhbGwpXG4gICAgICAgIGZ1bmN0aW9uVG9DYWxsKClcbiAgICB9XG5cblxuXG5cblxufVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL1VJVmlldy50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9VSU9iamVjdC50c1wiIC8+XG5cblxuXG5cblxuY2xhc3MgVUlWaWV3Q29udHJvbGxlciBleHRlbmRzIFVJT2JqZWN0IHtcbiAgICBcbiAgICBcbiAgICBwYXJlbnRWaWV3Q29udHJvbGxlcjogVUlWaWV3Q29udHJvbGxlclxuICAgIGNoaWxkVmlld0NvbnRyb2xsZXJzOiBVSVZpZXdDb250cm9sbGVyW11cbiAgICBfVUlWaWV3Q29udHJvbGxlcl9jb25zdHJ1Y3RvckFyZ3VtZW50czogeyBcInZpZXdcIjogVUlWaWV3OyB9XG4gICAgc3RhdGljIHJlYWRvbmx5IHJvdXRlQ29tcG9uZW50TmFtZTogc3RyaW5nO1xuICAgIHN0YXRpYyByZWFkb25seSBQYXJhbWV0ZXJJZGVudGlmaWVyTmFtZTogYW55O1xuICAgIFxuICAgIFxuICAgIFxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB2aWV3OiBVSVZpZXcpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLmxvYWRJbnRyb3NwZWN0aW9uVmFyaWFibGVzKClcbiAgICAgICAgdGhpcy5fVUlWaWV3Q29udHJvbGxlcl9jb25zdHJ1Y3RvckFyZ3VtZW50cyA9IHsgXCJ2aWV3XCI6IHZpZXcgfVxuICAgICAgICB0aGlzLl9pbml0SW5zdGFuY2VWYXJpYWJsZXMoKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5sb2FkU3Vidmlld3MoKVxuICAgICAgICB0aGlzLnVwZGF0ZVZpZXdDb25zdHJhaW50cygpXG4gICAgICAgIHRoaXMudXBkYXRlVmlld1N0eWxlcygpXG4gICAgICAgIHRoaXMuX2xheW91dFZpZXdTdWJ2aWV3cygpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIGxvYWRJbnRyb3NwZWN0aW9uVmFyaWFibGVzKCkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5fY2xhc3MgPSBVSVZpZXdDb250cm9sbGVyXG4gICAgICAgIHRoaXMuc3VwZXJjbGFzcyA9IFVJT2JqZWN0XG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgX2luaXRJbnN0YW5jZVZhcmlhYmxlcygpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy52aWV3ID0gdGhpcy5fVUlWaWV3Q29udHJvbGxlcl9jb25zdHJ1Y3RvckFyZ3VtZW50cy52aWV3XG4gICAgICAgIFxuICAgICAgICB0aGlzLnZpZXcuX3ZpZXdDb250cm9sbGVyTGF5b3V0RnVuY3Rpb24gPSB0aGlzLmxheW91dFZpZXdzTWFudWFsbHkuYmluZCh0aGlzKVxuICAgICAgICB0aGlzLnZpZXcuX2RpZExheW91dFN1YnZpZXdzRGVsZWdhdGVGdW5jdGlvbiA9IHRoaXMudmlld0RpZExheW91dFN1YnZpZXdzLmJpbmQodGhpcylcbiAgICAgICAgdGhpcy52aWV3Ll9kaWRSZWNlaXZlQnJvYWRjYXN0RXZlbnREZWxlZ2F0ZUZ1bmN0aW9uID0gdGhpcy52aWV3RGlkUmVjZWl2ZUJyb2FkY2FzdEV2ZW50LmJpbmQodGhpcylcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY2hpbGRWaWV3Q29udHJvbGxlcnMgPSBbXVxuICAgICAgICB0aGlzLnBhcmVudFZpZXdDb250cm9sbGVyID0gbmlsXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGhhbmRsZVJvdXRlUmVjdXJzaXZlbHkocm91dGU6IFVJUm91dGUpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuaGFuZGxlUm91dGUocm91dGUpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmNoaWxkVmlld0NvbnRyb2xsZXJzLmZvckVhY2goZnVuY3Rpb24gKGNvbnRyb2xsZXIsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIXJvdXRlLmlzSGFuZGxlZCkge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuaGFuZGxlUm91dGVSZWN1cnNpdmVseShyb3V0ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9KVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgaGFuZGxlUm91dGUocm91dGU6IFVJUm91dGUpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgbG9hZFN1YnZpZXdzKCkge1xuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIH1cbiAgICBcbiAgICBhc3luYyB2aWV3V2lsbEFwcGVhcigpIHtcbiAgICBcbiAgICBcbiAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgYXN5bmMgdmlld0RpZEFwcGVhcigpIHtcbiAgICBcbiAgICBcbiAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgYXN5bmMgdmlld1dpbGxEaXNhcHBlYXIoKSB7XG4gICAgXG4gICAgXG4gICAgXG4gICAgfVxuICAgIFxuICAgIGFzeW5jIHZpZXdEaWREaXNhcHBlYXIoKSB7XG4gICAgXG4gICAgXG4gICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHVwZGF0ZVZpZXdDb25zdHJhaW50cygpIHtcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICB9XG4gICAgXG4gICAgdXBkYXRlVmlld1N0eWxlcygpIHtcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICB9XG4gICAgXG4gICAgbGF5b3V0Vmlld3NNYW51YWxseSgpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgX2xheW91dFZpZXdTdWJ2aWV3cygpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudmlldy5sYXlvdXRTdWJ2aWV3cygpXG4gICAgICAgIFxuICAgICAgICB0aGlzLnZpZXdEaWRMYXlvdXRTdWJ2aWV3cygpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICB2aWV3RGlkTGF5b3V0U3Vidmlld3MoKSB7XG4gICAgICAgIFxuICAgICAgICAvLyB0aGlzLmNoaWxkVmlld0NvbnRyb2xsZXJzLmZvckVhY2goZnVuY3Rpb24gKGNvbnRyb2xsZXIsIGluZGV4LCBjb250cm9sbGVycykge1xuICAgICAgICBcbiAgICAgICAgLy8gICAgIGNvbnRyb2xsZXIuX2xheW91dFZpZXdTdWJ2aWV3cygpO1xuICAgICAgICBcbiAgICAgICAgLy8gfSlcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgdmlld0RpZFJlY2VpdmVCcm9hZGNhc3RFdmVudChldmVudDogVUlWaWV3QnJvYWRjYXN0RXZlbnQpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgaGFzQ2hpbGRWaWV3Q29udHJvbGxlcih2aWV3Q29udHJvbGxlcikge1xuICAgICAgICBcbiAgICAgICAgLy8gVGhpcyBpcyBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICAgICAgICBpZiAoIUlTKHZpZXdDb250cm9sbGVyKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5PXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jaGlsZFZpZXdDb250cm9sbGVycy5sZW5ndGg7IGkrKykge1xuICAgIFxuICAgICAgICAgICAgY29uc3QgY2hpbGRWaWV3Q29udHJvbGxlciA9IHRoaXMuY2hpbGRWaWV3Q29udHJvbGxlcnNbaV1cbiAgICBcbiAgICAgICAgICAgIGlmIChjaGlsZFZpZXdDb250cm9sbGVyID09IHZpZXdDb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFlFU1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBOT1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgYWRkQ2hpbGRWaWV3Q29udHJvbGxlcih2aWV3Q29udHJvbGxlcikge1xuICAgICAgICBpZiAoIXRoaXMuaGFzQ2hpbGRWaWV3Q29udHJvbGxlcih2aWV3Q29udHJvbGxlcikpIHtcbiAgICAgICAgICAgIHZpZXdDb250cm9sbGVyLndpbGxNb3ZlVG9QYXJlbnRWaWV3Q29udHJvbGxlcih0aGlzKVxuICAgICAgICAgICAgdGhpcy5jaGlsZFZpZXdDb250cm9sbGVycy5wdXNoKHZpZXdDb250cm9sbGVyKVxuICAgICAgICAgICAgLy90aGlzLnZpZXcuYWRkU3Vidmlldyh2aWV3Q29udHJvbGxlci52aWV3KTtcbiAgICAgICAgICAgIC8vdmlld0NvbnRyb2xsZXIuZGlkTW92ZVRvUGFyZW50Vmlld0NvbnRyb2xsZXIodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgXG4gICAgcmVtb3ZlRnJvbVBhcmVudFZpZXdDb250cm9sbGVyKCkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMucGFyZW50Vmlld0NvbnRyb2xsZXIuY2hpbGRWaWV3Q29udHJvbGxlcnMuaW5kZXhPZih0aGlzKVxuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnRWaWV3Q29udHJvbGxlci5jaGlsZFZpZXdDb250cm9sbGVycy5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICAgICAgICAvL3RoaXMudmlldy5yZW1vdmVGcm9tU3VwZXJ2aWV3KCk7XG4gICAgICAgICAgICB0aGlzLnBhcmVudFZpZXdDb250cm9sbGVyID0gbmlsXG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgd2lsbE1vdmVUb1BhcmVudFZpZXdDb250cm9sbGVyKHBhcmVudFZpZXdDb250cm9sbGVyKSB7XG4gICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGRpZE1vdmVUb1BhcmVudFZpZXdDb250cm9sbGVyKHBhcmVudFZpZXdDb250cm9sbGVyKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnBhcmVudFZpZXdDb250cm9sbGVyID0gcGFyZW50Vmlld0NvbnRyb2xsZXJcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHJlbW92ZUNoaWxkVmlld0NvbnRyb2xsZXIoY29udHJvbGxlcjogVUlWaWV3Q29udHJvbGxlcikge1xuICAgICAgICBcbiAgICAgICAgY29udHJvbGxlci52aWV3V2lsbERpc2FwcGVhcigpXG4gICAgICAgIGlmIChJUyhjb250cm9sbGVyLnBhcmVudFZpZXdDb250cm9sbGVyKSkge1xuICAgICAgICAgICAgY29udHJvbGxlci5yZW1vdmVGcm9tUGFyZW50Vmlld0NvbnRyb2xsZXIoKVxuICAgICAgICB9XG4gICAgICAgIGlmIChJUyhjb250cm9sbGVyLnZpZXcpKSB7XG4gICAgICAgICAgICBjb250cm9sbGVyLnZpZXcucmVtb3ZlRnJvbVN1cGVydmlldygpXG4gICAgICAgIH1cbiAgICAgICAgY29udHJvbGxlci52aWV3RGlkRGlzYXBwZWFyKClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGFkZENoaWxkVmlld0NvbnRyb2xsZXJJbkNvbnRhaW5lcihjb250cm9sbGVyOiBVSVZpZXdDb250cm9sbGVyLCBjb250YWluZXJWaWV3OiBVSVZpZXcpIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnRyb2xsZXIudmlld1dpbGxBcHBlYXIoKVxuICAgICAgICB0aGlzLmFkZENoaWxkVmlld0NvbnRyb2xsZXIoY29udHJvbGxlcilcbiAgICAgICAgY29udGFpbmVyVmlldy5hZGRTdWJ2aWV3KGNvbnRyb2xsZXIudmlldylcbiAgICAgICAgY29udHJvbGxlci5kaWRNb3ZlVG9QYXJlbnRWaWV3Q29udHJvbGxlcih0aGlzKVxuICAgICAgICBjb250cm9sbGVyLnZpZXdEaWRBcHBlYXIoKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgYWRkQ2hpbGRWaWV3Q29udHJvbGxlckluRGlhbG9nVmlldyhjb250cm9sbGVyOiBVSVZpZXdDb250cm9sbGVyLCBkaWFsb2dWaWV3OiBVSURpYWxvZ1ZpZXcpIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnRyb2xsZXIudmlld1dpbGxBcHBlYXIoKVxuICAgICAgICB0aGlzLmFkZENoaWxkVmlld0NvbnRyb2xsZXIoY29udHJvbGxlcilcbiAgICAgICAgZGlhbG9nVmlldy52aWV3ID0gY29udHJvbGxlci52aWV3XG4gICAgICAgIFxuICAgICAgICB2YXIgb3JpZ2luYWxEaXNtaXNzRnVuY3Rpb24gPSBkaWFsb2dWaWV3LmRpc21pc3MuYmluZChkaWFsb2dWaWV3KVxuICAgICAgICBcbiAgICAgICAgZGlhbG9nVmlldy5kaXNtaXNzID0gYW5pbWF0ZWQgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBvcmlnaW5hbERpc21pc3NGdW5jdGlvbihhbmltYXRlZClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5yZW1vdmVDaGlsZFZpZXdDb250cm9sbGVyKGNvbnRyb2xsZXIpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29udHJvbGxlci5kaWRNb3ZlVG9QYXJlbnRWaWV3Q29udHJvbGxlcih0aGlzKVxuICAgICAgICBjb250cm9sbGVyLnZpZXdEaWRBcHBlYXIoKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG59XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iLCIvLy88cmVmZXJlbmNlIHBhdGg9XCJVSVZpZXcudHNcIi8+XG5cblxuXG5cblxuY2xhc3MgVUlEaWFsb2dWaWV3PFZpZXdUeXBlIGV4dGVuZHMgVUlWaWV3ID0gVUlWaWV3PiBleHRlbmRzIFVJVmlldyB7XG4gICAgXG4gICAgXG4gICAgXG4gICAgX3ZpZXc6IFZpZXdUeXBlID0gbmlsXG4gICAgXG4gICAgX2FwcGVhcmVkQW5pbWF0ZWQ6IGJvb2xlYW5cbiAgICBcbiAgICBhbmltYXRpb25EdXJhdGlvbjogbnVtYmVyID0gMC4yNVxuICAgIFxuICAgIF96SW5kZXg6IG51bWJlciA9IDEwMFxuICAgIFxuICAgIGlzVmlzaWJsZTogYm9vbGVhbiA9IE5PXG4gICAgXG4gICAgZGlzbWlzc2VzT25UYXBPdXRzaWRlID0gWUVTXG4gICAgXG4gICAgY29uc3RydWN0b3IoZWxlbWVudElEPzogc3RyaW5nLCB2aWV3SFRNTEVsZW1lbnQ/OiBIVE1MRWxlbWVudCkge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHN1cGVyKGVsZW1lbnRJRCwgdmlld0hUTUxFbGVtZW50KVxuICAgICAgICBcbiAgICAgICAgdGhpcy5hZGRUYXJnZXRGb3JDb250cm9sRXZlbnQoXG4gICAgICAgICAgICBVSVZpZXcuY29udHJvbEV2ZW50LlBvaW50ZXJUYXAsXG4gICAgICAgICAgICBmdW5jdGlvbiAodGhpczogVUlEaWFsb2dWaWV3LCBzZW5kZXI6IFVJVmlldywgZXZlbnQ6IEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5kaWREZXRlY3RUYXBPdXRzaWRlKHNlbmRlciwgZXZlbnQpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSBVSUNvbG9yLmNvbG9yV2l0aFJHQkEoMCwgMTAsIDI1KS5jb2xvcldpdGhBbHBoYSgwLjc1KSAvL0NCQ29sb3IucHJpbWFyeUNvbnRlbnRDb2xvci5jb2xvcldpdGhBbHBoYSgwLjc1KVxuICAgICAgICBcbiAgICAgICAgdGhpcy56SW5kZXggPSB0aGlzLl96SW5kZXhcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIGRpZERldGVjdFRhcE91dHNpZGUoc2VuZGVyOiBVSVZpZXcsIGV2ZW50OiBFdmVudCkge1xuICAgICAgICBcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PSB0aGlzLnZpZXdIVE1MRWxlbWVudCAmJiB0aGlzLmRpc21pc3Nlc09uVGFwT3V0c2lkZSkge1xuICAgICAgICAgICAgdGhpcy5kaXNtaXNzKHRoaXMuX2FwcGVhcmVkQW5pbWF0ZWQpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHNldCB6SW5kZXgoekluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3pJbmRleCA9IHpJbmRleFxuICAgICAgICB0aGlzLnN0eWxlLnpJbmRleCA9IFwiXCIgKyB6SW5kZXhcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGdldCB6SW5kZXgoKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy5fekluZGV4XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBzZXQgdmlldyh2aWV3OiBWaWV3VHlwZSkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5fdmlldy5yZW1vdmVGcm9tU3VwZXJ2aWV3KClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3ZpZXcgPSB2aWV3XG4gICAgICAgIFxuICAgICAgICB0aGlzLmFkZFN1YnZpZXcodmlldylcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGdldCB2aWV3KCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZpZXdcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIHdpbGxBcHBlYXIoYW5pbWF0ZWQ6IGJvb2xlYW4gPSBOTykge1xuICAgICAgICBcbiAgICAgICAgaWYgKGFuaW1hdGVkKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuc3R5bGUub3BhY2l0eSA9IFwiMFwiXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5zdHlsZS5oZWlnaHQgPSBcIlwiXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9mcmFtZSA9IG51bGxcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGFuaW1hdGVBcHBlYXJpbmcoKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnN0eWxlLm9wYWNpdHkgPSBcIjFcIlxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgYW5pbWF0ZURpc2FwcGVhcmluZygpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc3R5bGUub3BhY2l0eSA9IFwiMFwiXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBzaG93SW5WaWV3KGNvbnRhaW5lclZpZXc6IFVJVmlldywgYW5pbWF0ZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBhbmltYXRlZCA9IChhbmltYXRlZCAmJiAhSVNfRklSRUZPWClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2FwcGVhcmVkQW5pbWF0ZWQgPSBhbmltYXRlZFxuICAgICAgICBcbiAgICAgICAgdGhpcy53aWxsQXBwZWFyKGFuaW1hdGVkKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGNvbnRhaW5lclZpZXcuYWRkU3Vidmlldyh0aGlzKVxuICAgICAgICBcbiAgICAgICAgaWYgKGFuaW1hdGVkKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMubGF5b3V0U3Vidmlld3MoKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBVSVZpZXcuYW5pbWF0ZVZpZXdPclZpZXdzV2l0aER1cmF0aW9uRGVsYXlBbmRGdW5jdGlvbihcbiAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uRHVyYXRpb24sXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZUFwcGVhcmluZygpXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9LmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgbmlsXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnNldE5lZWRzTGF5b3V0KClcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLmlzVmlzaWJsZSA9IFlFU1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgc2hvd0luUm9vdFZpZXcoYW5pbWF0ZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2hvd0luVmlldyhVSUNvcmUubWFpbi5yb290Vmlld0NvbnRyb2xsZXIudmlldywgYW5pbWF0ZWQpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBkaXNtaXNzKGFuaW1hdGVkPzogYm9vbGVhbikge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGFuaW1hdGVkID0gKGFuaW1hdGVkICYmICFJU19GSVJFRk9YKVxuICAgICAgICBcbiAgICAgICAgaWYgKGFuaW1hdGVkID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBhbmltYXRlZCA9IHRoaXMuX2FwcGVhcmVkQW5pbWF0ZWRcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoYW5pbWF0ZWQpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgVUlWaWV3LmFuaW1hdGVWaWV3T3JWaWV3c1dpdGhEdXJhdGlvbkRlbGF5QW5kRnVuY3Rpb24oXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkR1cmF0aW9uLFxuICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZURpc2FwcGVhcmluZygpXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1Zpc2libGUgPT0gTk8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVGcm9tU3VwZXJ2aWV3KClcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRnJvbVN1cGVydmlldygpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5pc1Zpc2libGUgPSBOT1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgZGlkUmVjZWl2ZUJyb2FkY2FzdEV2ZW50KGV2ZW50OiBVSVZpZXdCcm9hZGNhc3RFdmVudCkge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIuZGlkUmVjZWl2ZUJyb2FkY2FzdEV2ZW50KGV2ZW50KVxuICAgICAgICBcbiAgICAgICAgaWYgKGV2ZW50Lm5hbWUgPT0gVUlDb3JlLmJyb2FkY2FzdEV2ZW50TmFtZS5XaW5kb3dEaWRSZXNpemUpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zZXROZWVkc0xheW91dCgpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgbGF5b3V0U3Vidmlld3MoKSB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgaWYgKCFJUyh0aGlzLnZpZXcpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vdGhpcy5mcmFtZSA9IHRoaXMuc3VwZXJ2aWV3LmJvdW5kcztcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2V0UG9zaXRpb24oMCwgMCwgMCwgMCwgMCwgXCIxMDAlXCIpXG4gICAgICAgIHRoaXMuc2V0UG9zaXRpb24oMCwgMCwgMCwgMCwgVUlWaWV3LnBhZ2VIZWlnaHQsIFwiMTAwJVwiKVxuICAgICAgICBcbiAgICAgICAgY29uc3QgYm91bmRzID0gdGhpcy5ib3VuZHNcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG1hcmdpbiA9IDIwXG4gICAgICAgIFxuICAgICAgICAvL3RoaXMudmlldy5jZW50ZXJJbkNvbnRhaW5lcigpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy52aWV3LnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiXG4gICAgICAgIFxuICAgICAgICAvLyB0aGlzLnZpZXcuc3R5bGUubWF4SGVpZ2h0ID0gXCJcIiArIChib3VuZHMuaGVpZ2h0IC0gbWFyZ2luICogMikuaW50ZWdlclZhbHVlICsgXCJweFwiO1xuICAgICAgICAvLyB0aGlzLnZpZXcuc3R5bGUubWF4V2lkdGggPSBcIlwiICsgKGJvdW5kcy53aWR0aCAtIG1hcmdpbiAqIDIpLmludGVnZXJWYWx1ZSArIFwicHhcIjtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIC8vIHZhciB2aWV3SW50cmluc2ljUmVjdGFuZ2xlID0gdGhpcy52aWV3LmludHJpbnNpY0NvbnRlbnRTaXplKCk7XG4gICAgICAgIC8vIHRoaXMudmlldy5mcmFtZSA9IG5ldyBVSVJlY3RhbmdsZSgoYm91bmRzLndpZHRoIC0gdmlld0ludHJpbnNpY1JlY3RhbmdsZS53aWR0aCkqMC41LCAgKVxuICAgICAgICBcbiAgICAgICAgc3VwZXIubGF5b3V0U3Vidmlld3MoKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG59XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vVUlWaWV3LnRzXCIgLz5cblxuXG5cblxuXG5jbGFzcyBVSUJhc2VCdXR0b24gZXh0ZW5kcyBVSVZpZXcge1xuICAgIFxuICAgIF9zZWxlY3RlZDogYm9vbGVhbiA9IE5PXG4gICAgX2hpZ2hsaWdodGVkOiBib29sZWFuID0gTk9cbiAgICBcbiAgICBfaXNQb2ludGVySW5zaWRlOiBib29sZWFuXG4gICAgXG4gICAgXG4gICAgX2lzVG9nZ2xlYWJsZTogYm9vbGVhbiA9IE5PXG4gICAgX2hvdmVyZWQ6IGJvb2xlYW5cbiAgICBfZm9jdXNlZDogYm9vbGVhblxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRJRDogc3RyaW5nLCBlbGVtZW50VHlwZT86IHN0cmluZywgaW5pdFZpZXdEYXRhPzogYW55KSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlcihlbGVtZW50SUQsIG5pbCwgZWxlbWVudFR5cGUsIGluaXRWaWV3RGF0YSlcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2NsYXNzID0gVUlCdXR0b25cbiAgICAgICAgdGhpcy5zdXBlcmNsYXNzID0gVUlWaWV3XG4gICAgICAgIFxuICAgICAgICB0aGlzLmluaXRWaWV3U3RhdGVDb250cm9sKClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGluaXRWaWV3U3RhdGVDb250cm9sKCkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5jbGFzcy5zdXBlcmNsYXNzID0gVUlWaWV3XG4gICAgICAgIFxuICAgICAgICAvLyBJbnN0YW5jZSB2YXJpYWJsZXNcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9pc1BvaW50ZXJJbnNpZGUgPSBOT1xuICAgIFxuICAgIFxuICAgICAgICBjb25zdCBzZXRIb3ZlcmVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5ob3ZlcmVkID0gWUVTXG4gICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICB0aGlzLmFkZFRhcmdldEZvckNvbnRyb2xFdmVudChVSVZpZXcuY29udHJvbEV2ZW50LlBvaW50ZXJIb3Zlciwgc2V0SG92ZXJlZClcbiAgICBcbiAgICAgICAgY29uc3Qgc2V0Tm90SG92ZXJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmhvdmVyZWQgPSBOT1xuICAgICAgICBcbiAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgXG4gICAgICAgIHRoaXMuYWRkVGFyZ2V0Rm9yQ29udHJvbEV2ZW50cyhbXG4gICAgICAgICAgICBVSVZpZXcuY29udHJvbEV2ZW50LlBvaW50ZXJMZWF2ZSwgVUlWaWV3LmNvbnRyb2xFdmVudC5Qb2ludGVyQ2FuY2VsLCBVSVZpZXcuY29udHJvbEV2ZW50Lk11bHRpcGxlVG91Y2hlc1xuICAgICAgICBdLCBzZXROb3RIb3ZlcmVkKVxuICAgIFxuICAgIFxuICAgICAgICB2YXIgaGlnaGxpZ2h0aW5nVGltZVxuICAgICAgICBjb25zdCBzZXRIaWdobGlnaHRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWQgPSBZRVNcbiAgICAgICAgICAgIGhpZ2hsaWdodGluZ1RpbWUgPSBEYXRlLm5vdygpXG4gICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICB0aGlzLmFkZFRhcmdldEZvckNvbnRyb2xFdmVudChVSVZpZXcuY29udHJvbEV2ZW50LlBvaW50ZXJEb3duLCBzZXRIaWdobGlnaHRlZClcbiAgICAgICAgdGhpcy5hZGRUYXJnZXRGb3JDb250cm9sRXZlbnQoVUlWaWV3LmNvbnRyb2xFdmVudC5Qb2ludGVyRW50ZXIsIHNldEhpZ2hsaWdodGVkKVxuICAgIFxuICAgICAgICBjb25zdCBzZXROb3RIaWdobGlnaHRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWQgPSBOT1xuICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgY29uc3Qgc2V0Tm90SGlnaGxpZ2h0ZWRXaXRoTWluaW11bUR1cmF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc3QgbWluaW11bUR1cmF0aW9uSW5NaWxsaXNlY29uZHMgPSA1MFxuICAgICAgICAgICAgY29uc3QgZWxhcHNlZFRpbWUgPSBEYXRlLm5vdygpIC0gaGlnaGxpZ2h0aW5nVGltZVxuICAgICAgICAgICAgaWYgKG1pbmltdW1EdXJhdGlvbkluTWlsbGlzZWNvbmRzIDwgZWxhcHNlZFRpbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZ2hsaWdodGVkID0gTk9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZ2hsaWdodGVkID0gTk9cbiAgICAgICAgICAgICAgICB9LmJpbmQodGhpcyksIG1pbmltdW1EdXJhdGlvbkluTWlsbGlzZWNvbmRzIC0gZWxhcHNlZFRpbWUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICB0aGlzLmFkZFRhcmdldEZvckNvbnRyb2xFdmVudHMoW1xuICAgICAgICAgICAgVUlWaWV3LmNvbnRyb2xFdmVudC5Qb2ludGVyTGVhdmUsIFVJVmlldy5jb250cm9sRXZlbnQuUG9pbnRlckNhbmNlbCwgVUlWaWV3LmNvbnRyb2xFdmVudC5NdWx0aXBsZVRvdWNoZXNcbiAgICAgICAgXSwgc2V0Tm90SGlnaGxpZ2h0ZWQpXG4gICAgICAgIHRoaXMuYWRkVGFyZ2V0Rm9yQ29udHJvbEV2ZW50KFVJVmlldy5jb250cm9sRXZlbnQuUG9pbnRlclVwLCBzZXROb3RIaWdobGlnaHRlZFdpdGhNaW5pbXVtRHVyYXRpb24pXG4gICAgICAgIFxuICAgICAgICAvLyBIYW5kbGUgZW50ZXIga2V5IHByZXNzXG4gICAgICAgIHRoaXMuYWRkVGFyZ2V0Rm9yQ29udHJvbEV2ZW50KFVJVmlldy5jb250cm9sRXZlbnQuRW50ZXJEb3duLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHNldEhpZ2hsaWdodGVkKClcbiAgICAgICAgICAgIHNldE5vdEhpZ2hsaWdodGVkV2l0aE1pbmltdW1EdXJhdGlvbigpXG4gICAgICAgICAgICBcbiAgICAgICAgfSlcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLmFkZFRhcmdldEZvckNvbnRyb2xFdmVudChcbiAgICAgICAgICAgIFVJVmlldy5jb250cm9sRXZlbnQuRm9jdXMsXG4gICAgICAgICAgICBmdW5jdGlvbiAodGhpczogVUlCYXNlQnV0dG9uLCBzZW5kZXI6IFVJVmlldywgZXZlbnQ6IEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c2VkID0gWUVTXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5hZGRUYXJnZXRGb3JDb250cm9sRXZlbnQoXG4gICAgICAgICAgICBVSVZpZXcuY29udHJvbEV2ZW50LkJsdXIsXG4gICAgICAgICAgICBmdW5jdGlvbiAodGhpczogVUlCYXNlQnV0dG9uLCBzZW5kZXI6IFVJVmlldywgZXZlbnQ6IEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c2VkID0gTk9cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICApXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy51cGRhdGVDb250ZW50Rm9yQ3VycmVudFN0YXRlKClcbiAgICAgICAgXG4gICAgICAgIHRoaXMucGF1c2VzUG9pbnRlckV2ZW50cyA9IFlFU1xuICAgICAgICB0aGlzLnRhYkluZGV4ID0gMVxuICAgICAgICBcbiAgICAgICAgdGhpcy5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIlxuICAgICAgICBcbiAgICAgICAgLy90aGlzLnN0eWxlLm91dGxpbmUgPSBcIm5vbmVcIjtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLm5hdGl2ZVNlbGVjdGlvbkVuYWJsZWQgPSBOT1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuYWRkVGFyZ2V0Rm9yQ29udHJvbEV2ZW50cyhbXG4gICAgICAgICAgICBVSVZpZXcuY29udHJvbEV2ZW50LkVudGVyRG93biwgVUlWaWV3LmNvbnRyb2xFdmVudC5Qb2ludGVyVXBJbnNpZGVcbiAgICAgICAgXSwgZnVuY3Rpb24gKHRoaXM6IFVJQmFzZUJ1dHRvbiwgc2VuZGVyLCBldmVudCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodGhpcy5pc1RvZ2dsZWFibGUpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZVNlbGVjdGVkU3RhdGUoKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBwdWJsaWMgc2V0IGhvdmVyZWQoaG92ZXJlZDogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9ob3ZlcmVkID0gaG92ZXJlZFxuICAgICAgICB0aGlzLnVwZGF0ZUNvbnRlbnRGb3JDdXJyZW50U3RhdGUoKVxuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgZ2V0IGhvdmVyZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ob3ZlcmVkXG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBzZXQgaGlnaGxpZ2h0ZWQoaGlnaGxpZ2h0ZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5faGlnaGxpZ2h0ZWQgPSBoaWdobGlnaHRlZFxuICAgICAgICB0aGlzLnVwZGF0ZUNvbnRlbnRGb3JDdXJyZW50U3RhdGUoKVxuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgZ2V0IGhpZ2hsaWdodGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5faGlnaGxpZ2h0ZWRcbiAgICB9XG4gICAgXG4gICAgcHVibGljIHNldCBmb2N1c2VkKGZvY3VzZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5fZm9jdXNlZCA9IGZvY3VzZWRcbiAgICAgICAgaWYgKGZvY3VzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZm9jdXMoKVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5ibHVyKClcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZUNvbnRlbnRGb3JDdXJyZW50U3RhdGUoKVxuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgZ2V0IGZvY3VzZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mb2N1c2VkXG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBzZXQgc2VsZWN0ZWQoc2VsZWN0ZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5fc2VsZWN0ZWQgPSBzZWxlY3RlZFxuICAgICAgICB0aGlzLnVwZGF0ZUNvbnRlbnRGb3JDdXJyZW50U3RhdGUoKVxuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgZ2V0IHNlbGVjdGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0ZWRcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgdXBkYXRlQ29udGVudEZvckN1cnJlbnRTdGF0ZSgpIHtcbiAgICBcbiAgICAgICAgdmFyIHVwZGF0ZUZ1bmN0aW9uOiBGdW5jdGlvbiA9IHRoaXMudXBkYXRlQ29udGVudEZvck5vcm1hbFN0YXRlXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkICYmIHRoaXMuaGlnaGxpZ2h0ZWQpIHtcbiAgICAgICAgICAgIHVwZGF0ZUZ1bmN0aW9uID0gdGhpcy51cGRhdGVDb250ZW50Rm9yU2VsZWN0ZWRBbmRIaWdobGlnaHRlZFN0YXRlXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5zZWxlY3RlZCkge1xuICAgICAgICAgICAgdXBkYXRlRnVuY3Rpb24gPSB0aGlzLnVwZGF0ZUNvbnRlbnRGb3JTZWxlY3RlZFN0YXRlXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5mb2N1c2VkKSB7XG4gICAgICAgICAgICB1cGRhdGVGdW5jdGlvbiA9IHRoaXMudXBkYXRlQ29udGVudEZvckZvY3VzZWRTdGF0ZVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaGlnaGxpZ2h0ZWQpIHtcbiAgICAgICAgICAgIHVwZGF0ZUZ1bmN0aW9uID0gdGhpcy51cGRhdGVDb250ZW50Rm9ySGlnaGxpZ2h0ZWRTdGF0ZVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaG92ZXJlZCkge1xuICAgICAgICAgICAgdXBkYXRlRnVuY3Rpb24gPSB0aGlzLnVwZGF0ZUNvbnRlbnRGb3JIb3ZlcmVkU3RhdGVcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKCFJUyh1cGRhdGVGdW5jdGlvbikpIHtcbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gVUlDb2xvci5uaWxDb2xvclxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdXBkYXRlRnVuY3Rpb24uY2FsbCh0aGlzKVxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICB1cGRhdGVDb250ZW50Rm9yTm9ybWFsU3RhdGUoKSB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHVwZGF0ZUNvbnRlbnRGb3JIb3ZlcmVkU3RhdGUoKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnVwZGF0ZUNvbnRlbnRGb3JOb3JtYWxTdGF0ZSgpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICB1cGRhdGVDb250ZW50Rm9yRm9jdXNlZFN0YXRlKCkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy51cGRhdGVDb250ZW50Rm9ySG92ZXJlZFN0YXRlKClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHVwZGF0ZUNvbnRlbnRGb3JIaWdobGlnaHRlZFN0YXRlKCkge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICB1cGRhdGVDb250ZW50Rm9yU2VsZWN0ZWRTdGF0ZSgpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgdXBkYXRlQ29udGVudEZvclNlbGVjdGVkQW5kSGlnaGxpZ2h0ZWRTdGF0ZSgpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudXBkYXRlQ29udGVudEZvclNlbGVjdGVkU3RhdGUoKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgc2V0IGVuYWJsZWQoZW5hYmxlZDogYm9vbGVhbikge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIuZW5hYmxlZCA9IGVuYWJsZWRcbiAgICAgICAgXG4gICAgICAgIHRoaXMudXBkYXRlQ29udGVudEZvckN1cnJlbnRFbmFibGVkU3RhdGUoKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgZ2V0IGVuYWJsZWQoKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gc3VwZXIuZW5hYmxlZFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgdXBkYXRlQ29udGVudEZvckN1cnJlbnRFbmFibGVkU3RhdGUoKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5lbmFibGVkKSB7XG4gICAgICAgICAgICB0aGlzLmFscGhhID0gMVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hbHBoYSA9IDAuNVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLnVzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSB0aGlzLmVuYWJsZWRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIGFkZFN0eWxlQ2xhc3Moc3R5bGVDbGFzc05hbWU6IHN0cmluZykge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIuYWRkU3R5bGVDbGFzcyhzdHlsZUNsYXNzTmFtZSlcbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLnN0eWxlQ2xhc3NOYW1lICE9IHN0eWxlQ2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ29udGVudEZvckN1cnJlbnRTdGF0ZS5jYWxsKHRoaXMpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgZGlkUmVjZWl2ZUJyb2FkY2FzdEV2ZW50KGV2ZW50OiBVSVZpZXdCcm9hZGNhc3RFdmVudCkge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIuZGlkUmVjZWl2ZUJyb2FkY2FzdEV2ZW50KGV2ZW50KVxuICAgICAgICBcbiAgICAgICAgaWYgKGV2ZW50Lm5hbWUgPT0gVUlWaWV3LmJyb2FkY2FzdEV2ZW50TmFtZS5QYWdlRGlkU2Nyb2xsIHx8IGV2ZW50Lm5hbWUgPT1cbiAgICAgICAgICAgIFVJVmlldy5icm9hZGNhc3RFdmVudE5hbWUuQWRkZWRUb1ZpZXdUcmVlKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuaG92ZXJlZCA9IE5PXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWQgPSBOT1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIHRvZ2dsZVNlbGVjdGVkU3RhdGUoKSB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5zZWxlY3RlZCA9ICF0aGlzLnNlbGVjdGVkXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc2V0IGlzVG9nZ2xlYWJsZShpc1RvZ2dsZWFibGU6IGJvb2xlYW4pIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2lzVG9nZ2xlYWJsZSA9IGlzVG9nZ2xlYWJsZVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgZ2V0IGlzVG9nZ2xlYWJsZSgpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzLl9pc1RvZ2dsZWFibGVcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGxheW91dFN1YnZpZXdzKCkge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIubGF5b3V0U3Vidmlld3MoKVxuICAgIFxuICAgICAgICBjb25zdCBib3VuZHMgPSB0aGlzLmJvdW5kc1xuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBzZW5kQ29udHJvbEV2ZW50Rm9yS2V5KGV2ZW50S2V5OiBzdHJpbmcsIG5hdGl2ZUV2ZW50OiBFdmVudCkge1xuICAgICAgICBcbiAgICAgICAgaWYgKGV2ZW50S2V5ID09IFVJVmlldy5jb250cm9sRXZlbnQuUG9pbnRlclVwSW5zaWRlICYmICF0aGlzLmhpZ2hsaWdodGVkKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIERvIG5vdCBzZW5kIHRoZSBldmVudCBpbiB0aGlzIGNhc2VcbiAgICAgICAgICAgIC8vc3VwZXIuc2VuZENvbnRyb2xFdmVudEZvcktleShldmVudEtleSwgbmF0aXZlRXZlbnQpO1xuICAgIFxuICAgICAgICAgICAgY29uc3QgYXNkID0gMVxuICAgIFxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBzdXBlci5zZW5kQ29udHJvbEV2ZW50Rm9yS2V5KGV2ZW50S2V5LCBuYXRpdmVFdmVudClcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBzdGF0aWMgZ2V0RXZlbnRDb29yZGluYXRlc0luRG9jdW1lbnQodG91Y2hPck1vdXNlRXZlbnQpIHtcbiAgICAgICAgLy8gaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9qcy9ldmVudHNfcHJvcGVydGllcy5odG1sXG4gICAgICAgIHZhciBwb3N4ID0gMFxuICAgICAgICB2YXIgcG9zeSA9IDBcbiAgICAgICAgdmFyIGUgPSB0b3VjaE9yTW91c2VFdmVudFxuICAgICAgICBpZiAoIWUpIHtcbiAgICAgICAgICAgIGUgPSB3aW5kb3cuZXZlbnRcbiAgICAgICAgfVxuICAgICAgICBpZiAoZS5wYWdlWCB8fCBlLnBhZ2VZKSB7XG4gICAgICAgICAgICBwb3N4ID0gZS5wYWdlWFxuICAgICAgICAgICAgcG9zeSA9IGUucGFnZVlcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChlLmNsaWVudFggfHwgZS5jbGllbnRZKSB7XG4gICAgICAgICAgICBwb3N4ID0gZS5jbGllbnRYICsgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0XG4gICAgICAgICAgICAgICAgKyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdFxuICAgICAgICAgICAgcG9zeSA9IGUuY2xpZW50WSArIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wXG4gICAgICAgICAgICAgICAgKyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wXG4gICAgICAgIH1cbiAgICAgICAgLy8gcG9zeCBhbmQgcG9zeSBjb250YWluIHRoZSBtb3VzZSBwb3NpdGlvbiByZWxhdGl2ZSB0byB0aGUgZG9jdW1lbnRcbiAgICBcbiAgICAgICAgY29uc3QgY29vcmRpbmF0ZXMgPSB7IFwieFwiOiBwb3N4LCBcInlcIjogcG9zeSB9XG4gICAgXG4gICAgICAgIHJldHVybiBjb29yZGluYXRlc1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgc3RhdGljIGdldEVsZW1lbnRQb3NpdGlvbkluRG9jdW1lbnQoZWwpIHtcbiAgICAgICAgLy9odHRwczovL3d3dy5raXJ1cGEuY29tL2h0bWw1L2dldHRpbmdfbW91c2VfY2xpY2tfcG9zaXRpb24uaHRtXG4gICAgICAgIHZhciB4UG9zaXRpb24gPSAwXG4gICAgICAgIHZhciB5UG9zaXRpb24gPSAwXG4gICAgXG4gICAgICAgIHdoaWxlIChlbCkge1xuICAgICAgICAgICAgaWYgKGVsLnRhZ05hbWUgPT0gXCJCT0RZXCIpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBDb29yZGluYXRlcyBpbiBkb2N1bWVudCBhcmUgY29vcmRpbmF0ZXMgaW4gYm9keSwgdGhlcmVmb3JlIHN1YnRyYWN0aW5nIHRoZSBzY3JvbGwgcG9zaXRpb24gb2YgdGhlIGJvZHkgaXMgbm90IG5lZWRlZFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vICAgICAgLy8gZGVhbCB3aXRoIGJyb3dzZXIgcXVpcmtzIHdpdGggYm9keS93aW5kb3cvZG9jdW1lbnQgYW5kIHBhZ2Ugc2Nyb2xsXG4gICAgICAgICAgICAgICAgLy8gICAgICB2YXIgeFNjcm9sbFBvcyA9IGVsLnNjcm9sbExlZnQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQ7XG4gICAgICAgICAgICAgICAgLy8gICAgICB2YXIgeVNjcm9sbFBvcyA9IGVsLnNjcm9sbFRvcCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gICAgICB4UG9zaXRpb24gKz0gKGVsLm9mZnNldExlZnQgLSB4U2Nyb2xsUG9zICsgZWwuY2xpZW50TGVmdCk7XG4gICAgICAgICAgICAgICAgLy8gICAgICB5UG9zaXRpb24gKz0gKGVsLm9mZnNldFRvcCAtIHlTY3JvbGxQb3MgKyBlbC5jbGllbnRUb3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgeFBvc2l0aW9uICs9IChlbC5vZmZzZXRMZWZ0IC0gZWwuc2Nyb2xsTGVmdCArIGVsLmNsaWVudExlZnQpXG4gICAgICAgICAgICAgICAgeVBvc2l0aW9uICs9IChlbC5vZmZzZXRUb3AgLSBlbC5zY3JvbGxUb3AgKyBlbC5jbGllbnRUb3ApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGVsID0gZWwub2Zmc2V0UGFyZW50XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHhQb3NpdGlvbixcbiAgICAgICAgICAgIHk6IHlQb3NpdGlvblxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHN0YXRpYyBjb252ZXJ0Q29vcmRpbmF0ZXNGcm9tRG9jdW1lbnRUb0VsZW1lbnQoeCwgeSwgZWxlbWVudCkge1xuICAgICAgICBjb25zdCBlbGVtZW50UG9zaXRpb25JbkRvY3VtZW50ID0gdGhpcy5nZXRFbGVtZW50UG9zaXRpb25JbkRvY3VtZW50KGVsZW1lbnQpXG4gICAgICAgIGNvbnN0IGNvb3JkaW5hdGVzSW5FbGVtZW50ID0geyBcInhcIjogeCAtIGVsZW1lbnRQb3NpdGlvbkluRG9jdW1lbnQueCwgXCJ5XCI6IHkgLSBlbGVtZW50UG9zaXRpb25JbkRvY3VtZW50LnkgfVxuICAgICAgICByZXR1cm4gY29vcmRpbmF0ZXNJbkVsZW1lbnRcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIGdldEV2ZW50Q29vcmRpbmF0ZXNJbkVsZW1lbnQodG91Y2hPck1vdXNlRXZlbnQsIGVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgY29vcmRpbmF0ZXNJbkRvY3VtZW50ID0gdGhpcy5nZXRFdmVudENvb3JkaW5hdGVzSW5Eb2N1bWVudCh0b3VjaE9yTW91c2VFdmVudClcbiAgICAgICAgY29uc3QgY29vcmRpbmF0ZXNJbkVsZW1lbnQgPSB0aGlzLmNvbnZlcnRDb29yZGluYXRlc0Zyb21Eb2N1bWVudFRvRWxlbWVudChcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzSW5Eb2N1bWVudC54LFxuICAgICAgICAgICAgY29vcmRpbmF0ZXNJbkRvY3VtZW50LnksXG4gICAgICAgICAgICBlbGVtZW50XG4gICAgICAgIClcbiAgICAgICAgcmV0dXJuIGNvb3JkaW5hdGVzSW5FbGVtZW50XG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxufVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vVUlCYXNlQnV0dG9uLnRzXCIgLz5cblxuXG5cbmNsYXNzIFVJTGluayBleHRlbmRzIFVJQmFzZUJ1dHRvbiB7XG4gICAgXG4gICAgcHJpdmF0ZSBfY29sb3JzOiBVSUJ1dHRvbkNvbG9yU3BlY2lmaWVyXG4gICAgXG4gICAgXG4gICAgY29uc3RydWN0b3IoZWxlbWVudElEOiBzdHJpbmcsIGluaXRWaWV3RGF0YSA9IG5pbCkge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIoZWxlbWVudElELCBcImFcIiwgaW5pdFZpZXdEYXRhKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fY2xhc3MgPSBVSUxpbmtcbiAgICAgICAgdGhpcy5zdXBlcmNsYXNzID0gVUlCYXNlQnV0dG9uXG4gICAgICAgIFxuICAgICAgICB0aGlzLnN0b3BzUG9pbnRlckV2ZW50UHJvcGFnYXRpb24gPSBOT1xuICAgICAgICBcbiAgICAgICAgdGhpcy5wYXVzZXNQb2ludGVyRXZlbnRzID0gTk9cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgaW5pdFZpZXcoZWxlbWVudElELCB2aWV3SFRNTEVsZW1lbnQsIGluaXRWaWV3RGF0YTogeyB0aXRsZVR5cGU6IHN0cmluZyB9KSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci5pbml0VmlldyhlbGVtZW50SUQsIHZpZXdIVE1MRWxlbWVudCwgaW5pdFZpZXdEYXRhKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5jbGFzcy5zdXBlcmNsYXNzID0gVUlCYXNlQnV0dG9uXG4gICAgICAgIFxuICAgICAgICAvLyBJbnN0YW5jZSB2YXJpYWJsZXNcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAvL3RoaXMuc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCJcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB2aWV3SFRNTEVsZW1lbnQub25jbGljayA9IHRoaXMuYmx1ci5iaW5kKHRoaXMpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBnZXQgY29sb3JzKCk6IFVJQnV0dG9uQ29sb3JTcGVjaWZpZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29sb3JzXG4gICAgfVxuICAgIFxuICAgIHNldCBjb2xvcnModmFsdWU6IFVJQnV0dG9uQ29sb3JTcGVjaWZpZXIpIHtcbiAgICAgICAgdGhpcy5fY29sb3JzID0gdmFsdWVcbiAgICB9XG4gICAgXG4gICAgZ2V0IHZpZXdIVE1MRWxlbWVudCgpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBzdXBlci52aWV3SFRNTEVsZW1lbnQgYXMgSFRNTExpbmtFbGVtZW50XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBzZXQgdGV4dCh0ZXh0OiBzdHJpbmcpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudmlld0hUTUxFbGVtZW50LnRleHRDb250ZW50ID0gdGV4dFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgZ2V0IHRleHQoKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy52aWV3SFRNTEVsZW1lbnQudGV4dENvbnRlbnRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHNldCB0YXJnZXQodGFyZ2V0OiBzdHJpbmcpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudmlld0hUTUxFbGVtZW50LnNldEF0dHJpYnV0ZShcImhyZWZcIiwgdGFyZ2V0KVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgZ2V0IHRhcmdldCgpIHtcbiAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy52aWV3SFRNTEVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKVxuICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBzZXQgdGFyZ2V0Um91dGVGb3JDdXJyZW50U3RhdGUodGFyZ2V0Um91dGVGb3JDdXJyZW50U3RhdGU6ICgpID0+IChVSVJvdXRlIHwgc3RyaW5nKSkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5fdGFyZ2V0Um91dGVGb3JDdXJyZW50U3RhdGUgPSB0YXJnZXRSb3V0ZUZvckN1cnJlbnRTdGF0ZVxuICAgICAgICBcbiAgICAgICAgdGhpcy51cGRhdGVUYXJnZXQoKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgZ2V0IHRhcmdldFJvdXRlRm9yQ3VycmVudFN0YXRlKCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RhcmdldFJvdXRlRm9yQ3VycmVudFN0YXRlXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBfdGFyZ2V0Um91dGVGb3JDdXJyZW50U3RhdGUoKSB7XG4gICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFVJUm91dGUuY3VycmVudFJvdXRlLnJvdXRlQnlSZW1vdmluZ0NvbXBvbmVudHNPdGhlclRoYW5PbmVzTmFtZWQoW1wic2V0dGluZ3NcIl0pIGFzIChVSVJvdXRlIHwgc3RyaW5nKVxuICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBkaWRSZWNlaXZlQnJvYWRjYXN0RXZlbnQoZXZlbnQ6IFVJVmlld0Jyb2FkY2FzdEV2ZW50KSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci5kaWRSZWNlaXZlQnJvYWRjYXN0RXZlbnQoZXZlbnQpXG4gICAgICAgIFxuICAgICAgICBpZiAoZXZlbnQubmFtZSA9PSBVSUNvcmUuYnJvYWRjYXN0RXZlbnROYW1lLlJvdXRlRGlkQ2hhbmdlKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVGFyZ2V0KClcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICB3YXNBZGRlZFRvVmlld1RyZWUoKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci53YXNBZGRlZFRvVmlld1RyZWUoKVxuICAgICAgICBcbiAgICAgICAgdGhpcy51cGRhdGVUYXJnZXQoKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIHVwZGF0ZVRhcmdldCgpIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJvdXRlID0gdGhpcy50YXJnZXRSb3V0ZUZvckN1cnJlbnRTdGF0ZSgpXG4gICAgICAgIFxuICAgICAgICBpZiAocm91dGUgaW5zdGFuY2VvZiBVSVJvdXRlKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gcm91dGUubGlua1JlcHJlc2VudGF0aW9uXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMudGFyZ2V0ID0gcm91dGVcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGxheW91dFN1YnZpZXdzKCkge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIubGF5b3V0U3Vidmlld3MoKVxuICAgIFxuICAgICAgICBjb25zdCBib3VuZHMgPSB0aGlzLmJvdW5kc1xuICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbn1cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL1VJTGluay50c1wiIC8+XG5cblxuXG5jbGFzcyBVSUxpbmtCdXR0b24gZXh0ZW5kcyBVSUxpbmsge1xuICAgIFxuICAgIFxuICAgIGJ1dHRvbjogVUlCdXR0b25cbiAgICBcbiAgICAvL2xpbmsgPSBuZXcgVUlMaW5rKHRoaXMuZWxlbWVudElEICsgXCJMaW5rXCIpO1xuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRJRDogc3RyaW5nLCBlbGVtZW50VHlwZT86IHN0cmluZywgdGl0bGVUeXBlPzogc3RyaW5nKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlcihlbGVtZW50SUQsIHsgXCJlbGVtZW50VHlwZVwiOiBlbGVtZW50VHlwZSwgXCJ0aXRsZVR5cGVcIjogdGl0bGVUeXBlIH0pXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9jbGFzcyA9IFVJTGlua0J1dHRvblxuICAgICAgICB0aGlzLnN1cGVyY2xhc3MgPSBVSUxpbmtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLmJ1dHRvbi5hZGRUYXJnZXRGb3JDb250cm9sRXZlbnRzKFtcbiAgICAgICAgICAgIFVJQnV0dG9uLmNvbnRyb2xFdmVudC5FbnRlckRvd24sIFVJQnV0dG9uLmNvbnRyb2xFdmVudC5Qb2ludGVyVXBJbnNpZGVcbiAgICAgICAgXSwgZnVuY3Rpb24gKHRoaXM6IFVJTGlua0J1dHRvbiwgc2VuZGVyOiBVSUJ1dHRvbiwgZXZlbnQ6IEV2ZW50KSB7XG4gICAgXG4gICAgICAgICAgICBjb25zdCBhc2QgPSAxXG4gICAgXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSB0aGlzLnRhcmdldCBhcyBhbnlcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICAgICAgXG4gICAgICAgIC8vIHRoaXMubGluay5oaWRkZW4gPSBZRVM7XG4gICAgICAgIFxuICAgICAgICAvLyB0aGlzLmFkZFN1YnZpZXcodGhpcy5saW5rKTtcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBpbml0VmlldyhlbGVtZW50SUQsIHZpZXdIVE1MRWxlbWVudCwgaW5pdFZpZXdEYXRhOiB7IHRpdGxlVHlwZTogc3RyaW5nLCBlbGVtZW50VHlwZTogc3RyaW5nIH0pIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyLmluaXRWaWV3KGVsZW1lbnRJRCwgdmlld0hUTUxFbGVtZW50LCBpbml0Vmlld0RhdGEpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmNsYXNzLnN1cGVyY2xhc3MgPSBVSUxpbmtcbiAgICAgICAgXG4gICAgICAgIC8vIEluc3RhbmNlIHZhcmlhYmxlc1xuICAgICAgICBcbiAgICAgICAgdGhpcy5idXR0b24gPSBuZXcgVUlCdXR0b24odGhpcy5lbGVtZW50SUQgKyBcIkJ1dHRvblwiLCBpbml0Vmlld0RhdGEuZWxlbWVudFR5cGUsIGluaXRWaWV3RGF0YS50aXRsZVR5cGUpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmFkZFN1YnZpZXcodGhpcy5idXR0b24pXG4gICAgICAgIFxuICAgICAgICB0aGlzLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgZ2V0IHRpdGxlTGFiZWwoKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy5idXR0b24udGl0bGVMYWJlbFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgZ2V0IGltYWdlVmlldygpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzLmJ1dHRvbi5pbWFnZVZpZXdcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHNldCBjb2xvcnMoY29sb3JzOiBVSUJ1dHRvbkNvbG9yU3BlY2lmaWVyKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmJ1dHRvbi5jb2xvcnMgPSBjb2xvcnNcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGdldCBjb2xvcnMoKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy5idXR0b24uY29sb3JzXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBnZXQgdmlld0hUTUxFbGVtZW50KCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHN1cGVyLnZpZXdIVE1MRWxlbWVudCBhcyBIVE1MTGlua0VsZW1lbnRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHNldCB0YXJnZXQodGFyZ2V0OiBzdHJpbmcpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudmlld0hUTUxFbGVtZW50LnNldEF0dHJpYnV0ZShcImhyZWZcIiwgdGFyZ2V0KVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgZ2V0IHRhcmdldCgpIHtcbiAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy52aWV3SFRNTEVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKVxuICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBsYXlvdXRTdWJ2aWV3cygpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyLmxheW91dFN1YnZpZXdzKClcbiAgICBcbiAgICAgICAgY29uc3QgYm91bmRzID0gdGhpcy5ib3VuZHNcbiAgICBcbiAgICAgICAgdGhpcy5idXR0b24uZnJhbWUgPSBib3VuZHNcbiAgICAgICAgXG4gICAgICAgIHRoaXMuYnV0dG9uLmxheW91dFN1YnZpZXdzKClcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbn1cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL1VJQ29yZS9VSVZpZXdDb250cm9sbGVyLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL1VJQ29yZS9VSURpYWxvZ1ZpZXcudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vVUlDb3JlL1VJTGlua0J1dHRvbi50c1wiIC8+XG5cblxuXG5cblxuY2xhc3MgUm9vdFZpZXdDb250cm9sbGVyIGV4dGVuZHMgVUlWaWV3Q29udHJvbGxlciB7XG4gICAgXG4gICAgcHJpdmF0ZSB1c2VHRVRFTEVDVmlld0NvbnRyb2xsZXI6IEdFVEVMRUNWaWV3Q29udHJvbGxlclxuICAgIHByaXZhdGUgdXNlR0VURUxFQ1RhYmxlVmlld0NvbnRyb2xsZXI6IEdFVEVMRUNUYWJsZVZpZXdDb250cm9sbGVyXG4gICAgcHJpdmF0ZSBtYWluVmlld0NvbnRyb2xsZXI6IFVJVmlld0NvbnRyb2xsZXJcbiAgICBcbiAgICBwcml2YXRlIF9jb250ZW50Vmlld0NvbnRyb2xsZXI6IFVJVmlld0NvbnRyb2xsZXJcbiAgICBwcml2YXRlIHRvcEJhclZpZXc6IENlbGxWaWV3XG4gICAgXG4gICAgcHJpdmF0ZSBiYWNrVG9NYWluQnV0dG9uOiBDQkZsYXRCdXR0b25cbiAgICBcbiAgICBib3R0b21CYXJWaWV3OiBhbnlcbiAgICBcbiAgICBjb25zdHJ1Y3Rvcih2aWV3KSB7XG4gICAgICAgIFxuICAgICAgICAvLyBDYWxsaW5nIHN1cGVyXG4gICAgICAgIHN1cGVyKHZpZXcpXG4gICAgICAgIFxuICAgICAgICAvLyBIZXJlIGFyZSBzb21lIHN1Z2dlc3RlZCBjb252ZW50aW9ucyB0aGF0IGFyZSB1c2VkIGluIFVJQ29yZVxuICAgICAgICBcbiAgICAgICAgLy8gSW5zdGFuY2UgdmFyaWFibGVzLCBpdCBpcyBnb29kIHRvIGluaXRpYWxpemUgdG8gbmlsIG9yIGVtcHR5IGZ1bmN0aW9uLCBub3QgbGVhdmUgYXMgdW5kZWZpbmVkIHRvIGF2b2lkXG4gICAgICAgIC8vIGlmIGJsb2Nrc1xuICAgICAgICAvLyB0aGlzLl9maXJzdFZpZXcgPSBuaWw7XG4gICAgICAgIC8vIHRoaXMuX3NlY29uZFZpZXcgPSBuaWw7XG4gICAgICAgIC8vIHRoaXMuX3Rlc3RWaWV3ID0gbmlsO1xuICAgICAgICAvLyB0aGlzLl9idXR0b24gPSBuaWw7XG4gICAgICAgIFxuICAgICAgICAvLyBUaGUgbmlsIG9iamVjdCBhdm9pZHMgdW5uZWNjZXNzYXJ5IGNyYXNoZXMgYnkgYWxsb3dpbmcgeW91IHRvIGNhbGwgYW55IGZ1bmN0aW9uIG9yIGFjY2VzcyBhbnkgdmFyaWFibGUgb24gaXQsIHJldHVybmluZyBuaWxcbiAgICAgICAgXG4gICAgICAgIC8vIERlZmluZSBwcm9wZXJ0aWVzIHdpdGggZ2V0IGFuZCBzZXQgZnVuY3Rpb25zIHNvIHRoZXkgY2FuIGJlIGFjY2Vzc2VkIGFuZCBzZXQgbGlrZSB2YXJpYWJsZXNcbiAgICAgICAgXG4gICAgICAgIC8vIE5hbWUgdmFyaWFibGVzIHRoYXQgc2hvdWxkIGJlIHByaXZhdGUsIGxpa2UgcHJvcGVydHkgdmFyaWFibGVzLCB3aXRoIGEgXyBzaWduLCB0aGlzIGFsc28gaG9sZHMgZm9yIHByaXZhdGUgZnVuY3Rpb25zXG4gICAgICAgIC8vIEF2b2lkIGFjY2Vzc2luZyB2YXJpYWJsZXMgYW5kIGZ1bmN0aW9ucyBuYW1lZCB3aXRoIF8gZnJvbSBvdXRzaWRlIGFzIHRoaXMgY3JlYXRlcyBzdHJvbmcgY291cGxpbmcgYW5kIGhpbmRlcnMgc3RhYmlsaXR5XG4gICAgICAgIFxuICAgICAgICAvLyBDb2RlIGZvciBmdXJ0aGVyIHNldHVwIGlmIG5lY2Vzc2FyeVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgbG9hZEludHJvc3BlY3Rpb25WYXJpYWJsZXMoKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci5sb2FkSW50cm9zcGVjdGlvblZhcmlhYmxlcygpXG4gICAgICAgIHRoaXMuc3VwZXJjbGFzcyA9IFVJVmlld0NvbnRyb2xsZXJcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGxvYWRTdWJ2aWV3cygpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudmlldy5iYWNrZ3JvdW5kQ29sb3IgPSBVSUNvbG9yLmNvbG9yV2l0aFJHQkEoMjI1LCAyMjUsIDIyNSlcbiAgICAgICAgXG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gdGhpcy52aWV3LmJhY2tncm91bmRDb2xvci5zdHJpbmdWYWx1ZVxuICAgICAgICBcbiAgICAgICAgdGhpcy50b3BCYXJWaWV3ID0gbmV3IENlbGxWaWV3KFwiVG9wQmFyVmlld1wiKS5jb3B5VmFsdWVzUmVjdXJzaXZlbHlGcm9tT2JqZWN0KHtcbiAgICAgICAgICAgIHRpdGxlTGFiZWw6IHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkdFVEVMRUMgLSBHZW5lcmFsIFRvb2wgZm9yIEVsZWN0cm9uIEVtaXNzaW9uIENhbGN1bGF0aW9uc1wiLFxuICAgICAgICAgICAgICAgIHRleHRBbGlnbm1lbnQ6IFVJVGV4dFZpZXcudGV4dEFsaWdubWVudC5jZW50ZXJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb2xvcnM6IHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB7IG5vcm1hbDogbmV3IFVJQ29sb3IoXCIjMjgyYzExXCIpIH0sXG4gICAgICAgICAgICAgICAgdGl0bGVMYWJlbDogeyBub3JtYWw6IFVJQ29sb3Iud2hpdGVDb2xvciB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIHRoaXMudmlldy5hZGRTdWJ2aWV3KHRoaXMudG9wQmFyVmlldylcbiAgICAgICAgXG4gICAgICAgIC8vIEJvdHRvbSBiYXJcbiAgICAgICAgdGhpcy5ib3R0b21CYXJWaWV3ID0gbmV3IEJvdHRvbUJhclZpZXcoXCJCb3R0b21CYXJWaWV3XCIpLmNvcHlWYWx1ZXNSZWN1cnNpdmVseUZyb21PYmplY3Qoe1xuICAgICAgICAgICAgc3R5bGU6IHsgb3ZlcmZsb3c6IFwiaGlkZGVuXCIgfVxuICAgICAgICB9KVxuICAgICAgICB0aGlzLnZpZXcuYWRkU3Vidmlldyh0aGlzLmJvdHRvbUJhclZpZXcpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmJhY2tUb01haW5CdXR0b24gPSBuZXcgQ0JGbGF0QnV0dG9uKClcbiAgICAgICAgdGhpcy5iYWNrVG9NYWluQnV0dG9uLnRpdGxlTGFiZWwudGV4dCA9IFwiJiM4NTkyO1wiXG4gICAgICAgIHRoaXMuYmFja1RvTWFpbkJ1dHRvbi5jb2xvcnMgPSB7XG4gICAgICAgICAgICB0aXRsZUxhYmVsOiB7XG4gICAgICAgICAgICAgICAgbm9ybWFsOiBVSUNvbG9yLndoaXRlQ29sb3IsXG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0ZWQ6IFVJQ29sb3Iud2hpdGVDb2xvci5jb2xvcldpdGhBbHBoYSgwLjc1KSxcbiAgICAgICAgICAgICAgICBzZWxlY3RlZDogVUlDb2xvci53aGl0ZUNvbG9yLmNvbG9yV2l0aEFscGhhKDAuNSlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB7XG4gICAgICAgICAgICAgICAgbm9ybWFsOiBVSUNvbG9yLnRyYW5zcGFyZW50Q29sb3IsXG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0ZWQ6IFVJQ29sb3IudHJhbnNwYXJlbnRDb2xvcixcbiAgICAgICAgICAgICAgICBzZWxlY3RlZDogVUlDb2xvci50cmFuc3BhcmVudENvbG9yXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMuYmFja1RvTWFpbkJ1dHRvbi5jYWxjdWxhdGVBbmRTZXRWaWV3RnJhbWUgPSBmdW5jdGlvbiAodGhpczogQ0JGbGF0QnV0dG9uKSB7XG4gICAgICAgICAgICB0aGlzLnNldFBvc2l0aW9uKDAsIG5pbCwgMCwgMCwgbmlsLCA1MClcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy50b3BCYXJWaWV3LmFkZFN1YnZpZXcodGhpcy5iYWNrVG9NYWluQnV0dG9uKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5iYWNrVG9NYWluQnV0dG9uLmFkZENvbnRyb2xFdmVudFRhcmdldC5FbnRlckRvd24uUG9pbnRlclVwSW5zaWRlID0gKFxuICAgICAgICAgICAgc2VuZGVyLFxuICAgICAgICAgICAgZXZlbnRcbiAgICAgICAgKSA9PiBVSVJvdXRlLmN1cnJlbnRSb3V0ZS5yb3V0ZUJ5UmVtb3ZpbmdDb21wb25lbnRzT3RoZXJUaGFuT25lc05hbWVkKFtcInNldHRpbmdzXCJdKS5hcHBseSgpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBhc3luYyBoYW5kbGVSb3V0ZShyb3V0ZTogVUlSb3V0ZSkge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIuaGFuZGxlUm91dGUocm91dGUpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmJhY2tUb01haW5CdXR0b24uaGlkZGVuID0gTk9cbiAgICAgICAgXG4gICAgICAgIGlmIChJUyhyb3V0ZS5jb21wb25lbnRXaXRoTmFtZShHRVRFTEVDVmlld0NvbnRyb2xsZXIucm91dGVDb21wb25lbnROYW1lKSkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gU2hvdyBhcnRpY2xlIHZpZXdcbiAgICAgICAgICAgIGlmICghSVModGhpcy51c2VHRVRFTEVDVmlld0NvbnRyb2xsZXIpKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy51c2VHRVRFTEVDVmlld0NvbnRyb2xsZXIgPSBuZXcgR0VURUxFQ1ZpZXdDb250cm9sbGVyKG5ldyBVSVZpZXcoXCJHRVRFTEVDVmlld1wiKSlcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5jb250ZW50Vmlld0NvbnRyb2xsZXIgPSB0aGlzLnVzZUdFVEVMRUNWaWV3Q29udHJvbGxlclxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoSVMocm91dGUuY29tcG9uZW50V2l0aE5hbWUoR0VURUxFQ1RhYmxlVmlld0NvbnRyb2xsZXIucm91dGVDb21wb25lbnROYW1lKSkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gU2hvdyBhcnRpY2xlIHZpZXdcbiAgICAgICAgICAgIGlmICghSVModGhpcy51c2VHRVRFTEVDVmlld0NvbnRyb2xsZXIpKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy51c2VHRVRFTEVDVGFibGVWaWV3Q29udHJvbGxlciA9IG5ldyBHRVRFTEVDVGFibGVWaWV3Q29udHJvbGxlcihuZXcgVUlWaWV3KFwiR0VURUxFQ1RhYmxlVmlld1wiKSlcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5jb250ZW50Vmlld0NvbnRyb2xsZXIgPSB0aGlzLnVzZUdFVEVMRUNUYWJsZVZpZXdDb250cm9sbGVyXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gTWFpbiB2aWV3IGNvbnRyb2xsZXJcbiAgICAgICAgICAgIGlmICghSVModGhpcy5tYWluVmlld0NvbnRyb2xsZXIpKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5tYWluVmlld0NvbnRyb2xsZXIgPSBuZXcgVUlWaWV3Q29udHJvbGxlcihuZXcgVUlWaWV3KFwiTWFpblZpZXdcIikpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5tYWluVmlld0NvbnRyb2xsZXIudmlldy5iYWNrZ3JvdW5kQ29sb3IgPSBVSUNvbG9yLndoaXRlQ29sb3I7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5tYWluVmlld0NvbnRyb2xsZXIudmlldy52aWV3SFRNTEVsZW1lbnQuaW5uZXJIVE1MID0gYXdhaXQgQ0JDb3JlLnNoYXJlZEluc3RhbmNlLnJlYWRUZXh0RmlsZUZyb21VUkwoXCIvZnJvbnRwYWdlLmh0bWxcIik7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vICAgICBMYW5ndWFnZVNlcnZpY2Uuc3RyaW5nRm9yS2V5KFxuICAgICAgICAgICAgICAgIC8vICAgICBcImZyb250UGFnZUhUTUxcIixcbiAgICAgICAgICAgICAgICAvLyAgICAgTGFuZ3VhZ2VTZXJ2aWNlLmN1cnJlbnRMYW5ndWFnZUtleSxcbiAgICAgICAgICAgICAgICAvLyAgICAgXCJUaGlzIGlzIHRoZSBmcm9udCBwYWdlLlwiXG4gICAgICAgICAgICAgICAgLy8gKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuY29udGVudFZpZXdDb250cm9sbGVyID0gdGhpcy5tYWluVmlld0NvbnRyb2xsZXJcbiAgICAgICAgICAgIHRoaXMuYmFja1RvTWFpbkJ1dHRvbi5oaWRkZW4gPSBZRVNcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBzZXQgY29udGVudFZpZXdDb250cm9sbGVyKGNvbnRyb2xsZXI6IFVJVmlld0NvbnRyb2xsZXIpIHtcbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnRWaWV3Q29udHJvbGxlciA9PSBjb250cm9sbGVyKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuY29udGVudFZpZXdDb250cm9sbGVyKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUNoaWxkVmlld0NvbnRyb2xsZXIodGhpcy5jb250ZW50Vmlld0NvbnRyb2xsZXIpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2NvbnRlbnRWaWV3Q29udHJvbGxlciA9IGNvbnRyb2xsZXJcbiAgICAgICAgdGhpcy5hZGRDaGlsZFZpZXdDb250cm9sbGVySW5Db250YWluZXIoY29udHJvbGxlciwgdGhpcy52aWV3KVxuICAgICAgICB0aGlzLl9sYXlvdXRWaWV3U3Vidmlld3MoKVxuICAgICAgICBcbiAgICAgICAgdGhpcy52aWV3LnNldE5lZWRzTGF5b3V0KClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGdldCBjb250ZW50Vmlld0NvbnRyb2xsZXIoKTogVUlWaWV3Q29udHJvbGxlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50Vmlld0NvbnRyb2xsZXIgfHwgbmlsXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHN0YXRpYyBnZXQgcGFkZGluZ0xlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIDIwXG4gICAgfVxuICAgIFxuICAgIGdldCBwYWRkaW5nTGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGFzcy5wYWRkaW5nTGVuZ3RoXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGxheW91dFZpZXdzTWFudWFsbHkoKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci5sYXlvdXRWaWV3c01hbnVhbGx5KClcbiAgICAgICAgXG4gICAgICAgIC8vIFZpZXcgYm91bmRzXG4gICAgICAgIHZhciBib3VuZHMgPSB0aGlzLnZpZXcuYm91bmRzXG4gICAgICAgIFxuICAgICAgICB0aGlzLnRvcEJhclZpZXcuZnJhbWUgPSBib3VuZHMucmVjdGFuZ2xlV2l0aEhlaWdodCg1MClcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLmNvbnRlbnRWaWV3Q29udHJvbGxlci52aWV3LmZyYW1lID0gdGhpcy50b3BCYXJWaWV3LmZyYW1lLnJlY3RhbmdsZUZvck5leHRSb3coXG4gICAgICAgICAgICB0aGlzLnBhZGRpbmdMZW5ndGgsXG4gICAgICAgICAgICBGSVJTVF9PUl9OSUwoXG4gICAgICAgICAgICAgICAgd3JhcEluTmlsKHRoaXMuY29udGVudFZpZXdDb250cm9sbGVyIGFzIGFueSkuaW50cmluc2ljVmlld0NvbnRlbnRIZWlnaHQoW2JvdW5kcy53aWR0aCwgMTI1MF0ubWluKCkpLFxuICAgICAgICAgICAgICAgIHdyYXBJbk5pbCh0aGlzLmNvbnRlbnRWaWV3Q29udHJvbGxlcikudmlldy5pbnRyaW5zaWNDb250ZW50SGVpZ2h0KFtib3VuZHMud2lkdGgsIDEyNTBdLm1pbigpKVxuICAgICAgICAgICAgKVxuICAgICAgICApLnJlY3RhbmdsZVdpdGhXaWR0aChbYm91bmRzLndpZHRoLCAxMjUwXS5taW4oKSwgMC41KVxuICAgICAgICBcbiAgICAgICAgdGhpcy5jb250ZW50Vmlld0NvbnRyb2xsZXIudmlldy5zdHlsZS5ib3hTaGFkb3cgPSBcIjAgM3B4IDZweCAwIHJnYmEoMCwgMCwgMCwgMC4xKVwiXG4gICAgICAgIFxuICAgICAgICB0aGlzLmNvbnRlbnRWaWV3Q29udHJvbGxlci52aWV3LnNldE1hcmdpbnMoMCwgMCwgdGhpcy5wYWRkaW5nTGVuZ3RoLCAwKVxuICAgICAgICBcbiAgICAgICAgLy90aGlzLnZpZXcuc2V0UGFkZGluZ3MoMCwgMCwgdGhpcy5wYWRkaW5nTGVuZ3RoLCAwKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBib3R0b21CYXJIZWlnaHQgPSBNYXRoLm1heChcbiAgICAgICAgICAgIDEwMCxcbiAgICAgICAgICAgIHRoaXMuYm90dG9tQmFyVmlldy5pbnRyaW5zaWNDb250ZW50SGVpZ2h0KHRoaXMuY29udGVudFZpZXdDb250cm9sbGVyLnZpZXcuZnJhbWUud2lkdGgpXG4gICAgICAgIClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuYm90dG9tQmFyVmlldy5mcmFtZSA9IHRoaXMuY29udGVudFZpZXdDb250cm9sbGVyLnZpZXcuZnJhbWUucmVjdGFuZ2xlV2l0aFkoXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50Vmlld0NvbnRyb2xsZXIudmlldy5mcmFtZS5tYXgueSArIHRoaXMucGFkZGluZ0xlbmd0aCAqIDIsXG4gICAgICAgICAgICAgICAgVUlWaWV3LnBhZ2VIZWlnaHQgLSBib3R0b21CYXJIZWlnaHRcbiAgICAgICAgICAgIF0ubWF4KClcbiAgICAgICAgKS5yZWN0YW5nbGVXaXRoSGVpZ2h0KFxuICAgICAgICAgICAgYm90dG9tQmFySGVpZ2h0XG4gICAgICAgICkucmVjdGFuZ2xlV2l0aFdpZHRoKHRoaXMudmlldy5ib3VuZHMud2lkdGgpLnJlY3RhbmdsZVdpdGhYKDApXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbn1cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiIsInR5cGUgVmFsdWVPZjxUPiA9IFRba2V5b2YgVF07XG50eXBlIFByb3BUeXBlPFRPYmosIFRQcm9wIGV4dGVuZHMga2V5b2YgVE9iaj4gPSBUT2JqW1RQcm9wXTtcblxudHlwZSBVSVJvdXRlUGFyYW1ldGVyczxUID0gYW55PiA9IHtcbiAgICBcbiAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG4gICAgXG59IHwgVDtcblxuXG5pbnRlcmZhY2UgVUlSb3V0ZUNvbXBvbmVudDxUID0gYW55PiB7XG4gICAgXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHBhcmFtZXRlcnM6IFVJUm91dGVQYXJhbWV0ZXJzPFQ+O1xuICAgIFxufVxuXG5cbi8vIEB0cy1pZ25vcmVcbmNsYXNzIFVJUm91dGUgZXh0ZW5kcyBBcnJheTxVSVJvdXRlQ29tcG9uZW50PiB7XG4gICAgXG4gICAgX2lzSGFuZGxlZDogYm9vbGVhbiA9IE5PXG4gICAgY29tcGxldGVkQ29tcG9uZW50czogVUlSb3V0ZUNvbXBvbmVudFtdID0gW11cbiAgICBcbiAgICBwYXJlbnRSb3V0ZTogVUlSb3V0ZVxuICAgIFxuICAgIFxuICAgIGNvbnN0cnVjdG9yKGhhc2g/OiBzdHJpbmcpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgXG4gICAgICAgIGlmICghaGFzaCB8fCAhaGFzaC5zdGFydHNXaXRoKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChoYXNoLnN0YXJ0c1dpdGgoXCIjXCIpKSB7XG4gICAgICAgICAgICBoYXNoID0gaGFzaC5zbGljZSgxKVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBoYXNoID0gZGVjb2RlVVJJQ29tcG9uZW50KGhhc2gpXG4gICAgICAgIFxuICAgICAgICBjb25zdCBjb21wb25lbnRzID0gaGFzaC5zcGxpdChcIl1cIilcbiAgICAgICAgY29tcG9uZW50cy5mb3JFYWNoKGZ1bmN0aW9uICh0aGlzOiBVSVJvdXRlLCBjb21wb25lbnQ6IHN0cmluZywgaW5kZXg6IG51bWJlciwgYXJyYXk6IHN0cmluZ1tdKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQuc3BsaXQoXCJbXCIpWzBdXG4gICAgICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0ge31cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCFjb21wb25lbnROYW1lKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtZXRlcnNTdHJpbmcgPSBjb21wb25lbnQuc3BsaXQoXCJbXCIpWzFdIHx8IFwiXCJcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtZXRlclBhaXJTdHJpbmdzID0gcGFyYW1ldGVyc1N0cmluZy5zcGxpdChcIixcIikgfHwgW11cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcGFyYW1ldGVyUGFpclN0cmluZ3MuZm9yRWFjaChmdW5jdGlvbiAocGFpclN0cmluZywgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5QW5kVmFsdWVBcnJheSA9IHBhaXJTdHJpbmcuc3BsaXQoXCI6XCIpXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gZGVjb2RlVVJJQ29tcG9uZW50KGtleUFuZFZhbHVlQXJyYXlbMF0pXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQoa2V5QW5kVmFsdWVBcnJheVsxXSlcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzW2tleV0gPSB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBjb21wb25lbnROYW1lLFxuICAgICAgICAgICAgICAgIHBhcmFtZXRlcnM6IHBhcmFtZXRlcnNcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICB9LCB0aGlzKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIHN0YXRpYyBnZXQgY3VycmVudFJvdXRlKCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG5ldyBVSVJvdXRlKHdpbmRvdy5sb2NhdGlvbi5oYXNoKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgYXBwbHkoKSB7XG4gICAgICAgIFxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHRoaXMuc3RyaW5nUmVwcmVzZW50YXRpb25cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGFwcGx5QnlSZXBsYWNpbmdDdXJyZW50Um91dGVJbkhpc3RvcnkoKSB7XG4gICAgICAgIFxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSh0aGlzLmxpbmtSZXByZXNlbnRhdGlvbilcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIGNvcHkoKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgVUlSb3V0ZSgpXG4gICAgICAgIHJlc3VsdCA9IE9iamVjdC5hc3NpZ24ocmVzdWx0LCB0aGlzKVxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxuICAgIFxuICAgIFxuICAgIGNoaWxkUm91dGUoKSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5jb3B5KClcbiAgICAgICAgXG4gICAgICAgIHJlc3VsdC5jb21wbGV0ZWRDb21wb25lbnRzLmZvckVhY2goZnVuY3Rpb24gKGNvbXBvbmVudCwgaW5kZXgsIGNvbXBsZXRlZENvbXBvbmVudHMpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGluZGV4SW5SZXN1bHQgPSByZXN1bHQuaW5kZXhPZihjb21wb25lbnQpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChpbmRleEluUmVzdWx0ID4gLTEpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXN1bHQuc3BsaWNlKGluZGV4SW5SZXN1bHQsIDEpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfSlcbiAgICAgICAgXG4gICAgICAgIHJlc3VsdC5jb21wbGV0ZWRDb21wb25lbnRzID0gW11cbiAgICAgICAgXG4gICAgICAgIHJlc3VsdC5wYXJlbnRSb3V0ZSA9IHRoaXNcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgcm91dGVCeVJlbW92aW5nQ29tcG9uZW50c090aGVyVGhhbk9uZXNOYW1lZChjb21wb25lbnROYW1lczogc3RyaW5nW10pIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5jb3B5KClcbiAgICAgICAgY29uc3QgaW5kZXhlc1RvUmVtb3ZlOiBudW1iZXJbXSA9IFtdXG4gICAgICAgIHJlc3VsdC5mb3JFYWNoKGZ1bmN0aW9uIChjb21wb25lbnQsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgaWYgKCFjb21wb25lbnROYW1lcy5jb250YWlucyhjb21wb25lbnQubmFtZSkpIHtcbiAgICAgICAgICAgICAgICBpbmRleGVzVG9SZW1vdmUucHVzaChpbmRleClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgaW5kZXhlc1RvUmVtb3ZlLmZvckVhY2goZnVuY3Rpb24gKGluZGV4VG9SZW1vdmUsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgcmVzdWx0LnJlbW92ZUVsZW1lbnRBdEluZGV4KGluZGV4VG9SZW1vdmUpXG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgcm91dGVCeVJlbW92aW5nQ29tcG9uZW50TmFtZWQoY29tcG9uZW50TmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuY29weSgpXG4gICAgICAgIGNvbnN0IGNvbXBvbmVudEluZGV4ID0gcmVzdWx0LmZpbmRJbmRleChmdW5jdGlvbiAoY29tcG9uZW50LCBpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIChjb21wb25lbnQubmFtZSA9PSBjb21wb25lbnROYW1lKVxuICAgICAgICB9KVxuICAgICAgICBpZiAoY29tcG9uZW50SW5kZXggIT0gLTEpIHtcbiAgICAgICAgICAgIHJlc3VsdC5zcGxpY2UoY29tcG9uZW50SW5kZXgsIDEpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cbiAgICBcbiAgICBcbiAgICByb3V0ZUJ5UmVtb3ZpbmdQYXJhbWV0ZXJJbkNvbXBvbmVudChjb21wb25lbnROYW1lOiBzdHJpbmcsIHBhcmFtZXRlck5hbWU6IHN0cmluZywgcmVtb3ZlQ29tcG9uZW50SWZFbXB0eSA9IE5PKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmNvcHkoKVxuICAgICAgICB2YXIgcGFyYW1ldGVycyA9IHJlc3VsdC5jb21wb25lbnRXaXRoTmFtZShjb21wb25lbnROYW1lKS5wYXJhbWV0ZXJzXG4gICAgICAgIGlmIChJU19OT1QocGFyYW1ldGVycykpIHtcbiAgICAgICAgICAgIHBhcmFtZXRlcnMgPSB7fVxuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBwYXJhbWV0ZXJzW3BhcmFtZXRlck5hbWVdXG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5yb3V0ZVdpdGhDb21wb25lbnQoY29tcG9uZW50TmFtZSwgcGFyYW1ldGVycylcbiAgICAgICAgaWYgKHJlbW92ZUNvbXBvbmVudElmRW1wdHkgJiYgT2JqZWN0LmtleXMocGFyYW1ldGVycykubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5yb3V0ZUJ5UmVtb3ZpbmdDb21wb25lbnROYW1lZChjb21wb25lbnROYW1lKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gICAgXG4gICAgcm91dGVCeVNldHRpbmdQYXJhbWV0ZXJJbkNvbXBvbmVudChjb21wb25lbnROYW1lOiBzdHJpbmcsIHBhcmFtZXRlck5hbWU6IHN0cmluZywgdmFsdWVUb1NldDogc3RyaW5nKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmNvcHkoKVxuICAgICAgICBpZiAoSVNfTklMKHZhbHVlVG9TZXQpIHx8IElTX05JTChwYXJhbWV0ZXJOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICB9XG4gICAgICAgIHZhciBwYXJhbWV0ZXJzID0gcmVzdWx0LmNvbXBvbmVudFdpdGhOYW1lKGNvbXBvbmVudE5hbWUpLnBhcmFtZXRlcnNcbiAgICAgICAgaWYgKElTX05PVChwYXJhbWV0ZXJzKSkge1xuICAgICAgICAgICAgcGFyYW1ldGVycyA9IHt9XG4gICAgICAgIH1cbiAgICAgICAgcGFyYW1ldGVyc1twYXJhbWV0ZXJOYW1lXSA9IHZhbHVlVG9TZXRcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnJvdXRlV2l0aENvbXBvbmVudChjb21wb25lbnROYW1lLCBwYXJhbWV0ZXJzKVxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxuICAgIFxuICAgIFxuICAgIHJvdXRlV2l0aFZpZXdDb250cm9sbGVyQ29tcG9uZW50PFQgZXh0ZW5kcyB0eXBlb2YgVUlWaWV3Q29udHJvbGxlcj4oXG4gICAgICAgIHZpZXdDb250cm9sbGVyOiBULFxuICAgICAgICBwYXJhbWV0ZXJzOiBVSVJvdXRlUGFyYW1ldGVyczx7IFtQIGluIGtleW9mIFRbXCJQYXJhbWV0ZXJJZGVudGlmaWVyTmFtZVwiXV06IHN0cmluZyB9PixcbiAgICAgICAgZXh0ZW5kUGFyYW1ldGVyczogYm9vbGVhbiA9IE5PXG4gICAgKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy5yb3V0ZVdpdGhDb21wb25lbnQodmlld0NvbnRyb2xsZXIucm91dGVDb21wb25lbnROYW1lLCBwYXJhbWV0ZXJzLCBleHRlbmRQYXJhbWV0ZXJzKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgcm91dGVXaXRoQ29tcG9uZW50KG5hbWU6IHN0cmluZywgcGFyYW1ldGVyczogVUlSb3V0ZVBhcmFtZXRlcnMsIGV4dGVuZFBhcmFtZXRlcnM6IGJvb2xlYW4gPSBOTykge1xuICAgICAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5jb3B5KClcbiAgICAgICAgdmFyIGNvbXBvbmVudCA9IHJlc3VsdC5jb21wb25lbnRXaXRoTmFtZShuYW1lKVxuICAgICAgICBpZiAoSVNfTk9UKGNvbXBvbmVudCkpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudCA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgIHBhcmFtZXRlcnM6IHt9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQucHVzaChjb21wb25lbnQpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChJU19OT1QocGFyYW1ldGVycykpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcGFyYW1ldGVycyA9IHt9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKGV4dGVuZFBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudC5wYXJhbWV0ZXJzID0gT2JqZWN0LmFzc2lnbihjb21wb25lbnQucGFyYW1ldGVycywgcGFyYW1ldGVycylcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbXBvbmVudC5wYXJhbWV0ZXJzID0gcGFyYW1ldGVyc1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBuYXZpZ2F0ZUJ5U2V0dGluZ0NvbXBvbmVudChuYW1lOiBzdHJpbmcsIHBhcmFtZXRlcnM6IFVJUm91dGVQYXJhbWV0ZXJzLCBleHRlbmRQYXJhbWV0ZXJzOiBib29sZWFuID0gTk8pIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMucm91dGVXaXRoQ29tcG9uZW50KG5hbWUsIHBhcmFtZXRlcnMsIGV4dGVuZFBhcmFtZXRlcnMpLmFwcGx5KClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIGNvbXBvbmVudFdpdGhWaWV3Q29udHJvbGxlcjxUIGV4dGVuZHMgdHlwZW9mIFVJVmlld0NvbnRyb2xsZXI+KHZpZXdDb250cm9sbGVyOiBUKTogVUlSb3V0ZUNvbXBvbmVudDx7IFtQIGluIGtleW9mIFRbXCJQYXJhbWV0ZXJJZGVudGlmaWVyTmFtZVwiXV06IHN0cmluZyB9PiB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnRXaXRoTmFtZSh2aWV3Q29udHJvbGxlci5yb3V0ZUNvbXBvbmVudE5hbWUpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBjb21wb25lbnRXaXRoTmFtZShuYW1lOiBzdHJpbmcpOiBVSVJvdXRlQ29tcG9uZW50IHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5pbFxuICAgICAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24gKGNvbXBvbmVudCwgaW5kZXgsIHNlbGYpIHtcbiAgICAgICAgICAgIGlmIChjb21wb25lbnQubmFtZSA9PSBuYW1lKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gY29tcG9uZW50XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgZGlkY29tcGxldGVDb21wb25lbnQoY29tcG9uZW50OiBVSVJvdXRlQ29tcG9uZW50KSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBzZWxmOiBVSVJvdXRlID0gdGhpc1xuICAgICAgICBjb25zdCBpbmRleCA9IHNlbGYuaW5kZXhPZihjb21wb25lbnQsIDApXG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgc2VsZi5jb21wbGV0ZWRDb21wb25lbnRzLnB1c2goc2VsZi5zcGxpY2UoaW5kZXgsIDEpWzBdKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL3NlbGYuY29tcGxldGVkQ29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc2V0IGlzSGFuZGxlZChpc0hhbmRsZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2lzSGFuZGxlZCA9IGlzSGFuZGxlZFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgZ2V0IGlzSGFuZGxlZCgpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiAodGhpcy5faXNIYW5kbGVkIHx8ICh0aGlzLmxlbmd0aCA9PSAwICYmIHRoaXMuY29tcGxldGVkQ29tcG9uZW50cy5sZW5ndGggIT0gMCkpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBnZXQgbGlua1JlcHJlc2VudGF0aW9uKCkge1xuICAgICAgICByZXR1cm4gXCIjXCIgKyB0aGlzLnN0cmluZ1JlcHJlc2VudGF0aW9uXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGdldCBzdHJpbmdSZXByZXNlbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFwiXCJcbiAgICAgICAgdGhpcy5jb21wbGV0ZWRDb21wb25lbnRzLmZvckVhY2goZnVuY3Rpb24gKGNvbXBvbmVudCwgaW5kZXgsIHNlbGYpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCArIGNvbXBvbmVudC5uYW1lXG4gICAgICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0gY29tcG9uZW50LnBhcmFtZXRlcnNcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCArIFwiW1wiXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhwYXJhbWV0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXksIGluZGV4LCBrZXlzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCArIFwiLFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCArIGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgXCI6XCIgKyBlbmNvZGVVUklDb21wb25lbnQocGFyYW1ldGVyc1trZXldKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCArIFwiXVwiXG4gICAgICAgIH0pXG4gICAgICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAoY29tcG9uZW50LCBpbmRleCwgc2VsZikge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICsgY29tcG9uZW50Lm5hbWVcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSBjb21wb25lbnQucGFyYW1ldGVyc1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICsgXCJbXCJcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHBhcmFtZXRlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSwgaW5kZXgsIGtleXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICsgXCIsXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICsgZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyBcIjpcIiArIGVuY29kZVVSSUNvbXBvbmVudChwYXJhbWV0ZXJzW2tleV0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICsgXCJdXCJcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbn1cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIlVJVmlldy50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiVUlWaWV3Q29udHJvbGxlci50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vUm9vdFZpZXdDb250cm9sbGVyLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJVSVJvdXRlLnRzXCIgLz5cblxuXG5cblxuaW50ZXJmYWNlIFVJTGFuZ3VhZ2VTZXJ2aWNlIHtcbiAgICBcbiAgICBjdXJyZW50TGFuZ3VhZ2VLZXk6IHN0cmluZztcbiAgICBcbiAgICBzdHJpbmdGb3JLZXkoXG4gICAgICAgIGtleTogc3RyaW5nLFxuICAgICAgICBsYW5ndWFnZU5hbWU6IHN0cmluZyxcbiAgICAgICAgZGVmYXVsdFN0cmluZzogc3RyaW5nLFxuICAgICAgICBwYXJhbWV0ZXJzOiB7IFt4OiBzdHJpbmddOiBzdHJpbmcgfCBVSUxvY2FsaXplZFRleHRPYmplY3Q7IH1cbiAgICApOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgXG4gICAgc3RyaW5nRm9yQ3VycmVudExhbmd1YWdlKGxvY2FsaXplZFRleHRPYmplY3Q6IFVJTG9jYWxpemVkVGV4dE9iamVjdCk7XG4gICAgXG4gICAgXG4gICAgXG59XG5cblxuaW50ZXJmYWNlIFVJTG9jYWxpemVkVGV4dE9iamVjdCB7XG4gICAgXG4gICAgW2tleTogc3RyaW5nXTogc3RyaW5nO1xuICAgIFxufVxuXG5cblxuXG5cbmNsYXNzIFVJQ29yZSBleHRlbmRzIFVJT2JqZWN0IHtcbiAgICBcbiAgICByb290Vmlld0NvbnRyb2xsZXI6IFVJVmlld0NvbnRyb2xsZXIgPSBuaWxcbiAgICBzdGF0aWMgUm9vdFZpZXdDb250cm9sbGVyQ2xhc3M6IGFueVxuICAgIHN0YXRpYyBtYWluOiBVSUNvcmVcbiAgICBcbiAgICBzdGF0aWMgbGFuZ3VhZ2VTZXJ2aWNlOiBVSUxhbmd1YWdlU2VydmljZSA9IG5pbFxuICAgIFxuICAgIGNvbnN0cnVjdG9yKHJvb3REaXZFbGVtZW50SUQ6IHN0cmluZywgcm9vdFZpZXdDb250cm9sbGVyQ2xhc3M6IHR5cGVvZiBVSVZpZXdDb250cm9sbGVyKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlcigpXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9jbGFzcyA9IFVJQ29yZVxuICAgICAgICB0aGlzLnN1cGVyY2xhc3MgPSBVSU9iamVjdFxuICAgICAgICBcbiAgICAgICAgVUlDb3JlLlJvb3RWaWV3Q29udHJvbGxlckNsYXNzID0gcm9vdFZpZXdDb250cm9sbGVyQ2xhc3NcbiAgICAgICAgXG4gICAgICAgIFVJQ29yZS5tYWluID0gdGhpc1xuICAgIFxuICAgICAgICBjb25zdCByb290Vmlld0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChyb290RGl2RWxlbWVudElEKVxuICAgIFxuICAgICAgICBjb25zdCByb290VmlldyA9IG5ldyBVSVZpZXcocm9vdERpdkVsZW1lbnRJRCwgcm9vdFZpZXdFbGVtZW50KVxuICAgIFxuICAgICAgICByb290Vmlldy5wYXVzZXNQb2ludGVyRXZlbnRzID0gTk8gLy9ZRVM7XG4gICAgICAgIFxuICAgICAgICBpZiAoVUlDb3JlLlJvb3RWaWV3Q29udHJvbGxlckNsYXNzKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghKFVJQ29yZS5Sb290Vmlld0NvbnRyb2xsZXJDbGFzcy5wcm90b3R5cGUgaW5zdGFuY2VvZiBVSVZpZXdDb250cm9sbGVyKSB8fFxuICAgICAgICAgICAgICAgIChVSUNvcmUuUm9vdFZpZXdDb250cm9sbGVyQ2xhc3MgYXMgYW55KSA9PT0gVUlWaWV3Q29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgICAgICAgICBcIkVycm9yLCBVSUNvcmUuUm9vdFZpZXdDb250cm9sbGVyQ2xhc3MgbXVzdCBiZSBhIG9yIGEgc3ViY2xhc3Mgb2YgVUlWaWV3Q29udHJvbGxlciwgZmFsbGluZyBiYWNrIHRvIFVJVmlld0NvbnRyb2xsZXIuXCIpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgVUlDb3JlLlJvb3RWaWV3Q29udHJvbGxlckNsYXNzID0gVUlWaWV3Q29udHJvbGxlclxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnJvb3RWaWV3Q29udHJvbGxlciA9IG5ldyBVSUNvcmUuUm9vdFZpZXdDb250cm9sbGVyQ2xhc3Mocm9vdFZpZXcpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5yb290Vmlld0NvbnRyb2xsZXIgPSBuZXcgVUlWaWV3Q29udHJvbGxlcihyb290VmlldylcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLnJvb3RWaWV3Q29udHJvbGxlci52aWV3V2lsbEFwcGVhcigpXG4gICAgICAgIHRoaXMucm9vdFZpZXdDb250cm9sbGVyLnZpZXdEaWRBcHBlYXIoKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMucm9vdFZpZXdDb250cm9sbGVyLnZpZXcuYWRkVGFyZ2V0Rm9yQ29udHJvbEV2ZW50KFxuICAgICAgICAgICAgVUlWaWV3LmNvbnRyb2xFdmVudC5Qb2ludGVyVXBJbnNpZGUsXG4gICAgICAgICAgICBmdW5jdGlvbiAoc2VuZGVyLCBldmVudCkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIChkb2N1bWVudC5hY3RpdmVFbGVtZW50IGFzIEhUTUxFbGVtZW50KS5ibHVyKClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgIFxuICAgIFxuICAgIFxuICAgICAgICBjb25zdCB3aW5kb3dEaWRSZXNpemUgPSBmdW5jdGlvbiAodGhpczogVUlDb3JlKSB7XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gRG9pbmcgbGF5b3V0IHR3byB0aW1lcyB0byBwcmV2ZW50IHBhZ2Ugc2Nyb2xsYmFycyBmcm9tIGNvbmZ1c2luZyB0aGUgbGF5b3V0XG4gICAgICAgICAgICB0aGlzLnJvb3RWaWV3Q29udHJvbGxlci5fbGF5b3V0Vmlld1N1YnZpZXdzKClcbiAgICAgICAgICAgIFVJVmlldy5sYXlvdXRWaWV3c0lmTmVlZGVkKClcbiAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnJvb3RWaWV3Q29udHJvbGxlci5fbGF5b3V0Vmlld1N1YnZpZXdzKClcbiAgICAgICAgICAgIC8vVUlWaWV3LmxheW91dFZpZXdzSWZOZWVkZWQoKVxuICAgICAgICBcbiAgICAgICAgICAgIHRoaXMucm9vdFZpZXdDb250cm9sbGVyLnZpZXcuYnJvYWRjYXN0RXZlbnRJblN1YnRyZWUoe1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbmFtZTogVUlDb3JlLmJyb2FkY2FzdEV2ZW50TmFtZS5XaW5kb3dEaWRSZXNpemUsXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyczogbmlsXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIH0pXG4gICAgICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHdpbmRvd0RpZFJlc2l6ZS5iaW5kKHRoaXMpKVxuICAgIFxuICAgICAgICBjb25zdCBkaWRTY3JvbGwgPSBmdW5jdGlvbiAodGhpczogVUlDb3JlKSB7XG4gICAgICAgIFxuICAgICAgICAgICAgLy9jb2RlXG4gICAgICAgIFxuICAgICAgICAgICAgdGhpcy5yb290Vmlld0NvbnRyb2xsZXIudmlldy5icm9hZGNhc3RFdmVudEluU3VidHJlZSh7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBuYW1lOiBVSVZpZXcuYnJvYWRjYXN0RXZlbnROYW1lLlBhZ2VEaWRTY3JvbGwsXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyczogbmlsXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIH0pXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIH0uYmluZCh0aGlzKVxuICAgIFxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBkaWRTY3JvbGwsIGZhbHNlKVxuICAgIFxuICAgICAgICBjb25zdCBoYXNoRGlkQ2hhbmdlID0gZnVuY3Rpb24gKHRoaXM6IFVJQ29yZSkge1xuICAgICAgICBcbiAgICAgICAgICAgIC8vY29kZVxuICAgICAgICBcbiAgICAgICAgICAgIHRoaXMucm9vdFZpZXdDb250cm9sbGVyLmhhbmRsZVJvdXRlUmVjdXJzaXZlbHkoVUlSb3V0ZS5jdXJyZW50Um91dGUpXG4gICAgICAgIFxuICAgICAgICAgICAgdGhpcy5yb290Vmlld0NvbnRyb2xsZXIudmlldy5icm9hZGNhc3RFdmVudEluU3VidHJlZSh7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBuYW1lOiBVSUNvcmUuYnJvYWRjYXN0RXZlbnROYW1lLlJvdXRlRGlkQ2hhbmdlLFxuICAgICAgICAgICAgICAgIHBhcmFtZXRlcnM6IG5pbFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB9KVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIH0uYmluZCh0aGlzKVxuICAgIFxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImhhc2hjaGFuZ2VcIiwgaGFzaERpZENoYW5nZS5iaW5kKHRoaXMpLCBmYWxzZSlcbiAgICAgICAgXG4gICAgICAgIGhhc2hEaWRDaGFuZ2UoKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBzdGF0aWMgYnJvYWRjYXN0RXZlbnROYW1lID0ge1xuICAgICAgICBcbiAgICAgICAgXCJSb3V0ZURpZENoYW5nZVwiOiBcIlJvdXRlRGlkQ2hhbmdlXCIsXG4gICAgICAgIFwiV2luZG93RGlkUmVzaXplXCI6IFwiV2luZG93RGlkUmVzaXplXCJcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHN0YXRpYyBsb2FkQ2xhc3MoY2xhc3NOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgXG4gICAgICAgIGlmICh3aW5kb3dbY2xhc3NOYW1lXSkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGRvY3VtZW50LndyaXRlbG4oXCI8c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCcgc3JjPSdkaXN0L1VJQ29yZS9cIiArIGNsYXNzTmFtZSArIFwiLmpzJz48L3NjcmlwdD5cIilcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxufVxuXG5cblVJQ29yZS5Sb290Vmlld0NvbnRyb2xsZXJDbGFzcyA9IG5pbFxuXG5cbmNvbnN0IElTX0ZJUkVGT1ggPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcImZpcmVmb3hcIikgPiAtMVxuY29uc3QgSVNfU0FGQVJJID0gL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KVxuXG5cbkFycmF5LnByb3RvdHlwZS5pbmRleE9mIHx8IChBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIChkLCBlKSB7XG4gICAgdmFyIGFcbiAgICBpZiAobnVsbCA9PSB0aGlzKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJcXFwidGhpc1xcXCIgaXMgbnVsbCBvciBub3QgZGVmaW5lZFwiKVxuICAgIH1cbiAgICBjb25zdCBjID0gT2JqZWN0KHRoaXMpLFxuICAgICAgICBiID0gYy5sZW5ndGggPj4+IDBcbiAgICBpZiAoMCA9PT0gYikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgYSA9ICtlIHx8IDBcbiAgICBJbmZpbml0eSA9PT0gTWF0aC5hYnMoYSkgJiYgKGEgPSAwKVxuICAgIGlmIChhID49IGIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIGZvciAoYSA9IE1hdGgubWF4KDAgPD0gYSA/IGEgOiBiIC0gTWF0aC5hYnMoYSksIDApOyBhIDwgYjspIHtcbiAgICAgICAgaWYgKGEgaW4gYyAmJiBjW2FdID09PSBkKSB7XG4gICAgICAgICAgICByZXR1cm4gYVxuICAgICAgICB9XG4gICAgICAgIGErK1xuICAgIH1cbiAgICByZXR1cm4gLTFcbn0pXG5cblxuXG5cblxuXG5cblxuXG5cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJVSVZpZXcudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIlVJQ29yZS50c1wiIC8+XG5cblxuXG5cblxuY2xhc3MgVUlUZXh0VmlldyBleHRlbmRzIFVJVmlldyB7XG4gICAgXG4gICAgXG4gICAgX3RleHRDb2xvcjogVUlDb2xvciA9IFVJVGV4dFZpZXcuZGVmYXVsdFRleHRDb2xvclxuICAgIF90ZXh0QWxpZ25tZW50OiBzdHJpbmdcbiAgICBcbiAgICBfaXNTaW5nbGVMaW5lID0gWUVTXG4gICAgXG4gICAgdGV4dFByZWZpeCA9IFwiXCJcbiAgICB0ZXh0U3VmZml4ID0gXCJcIlxuICAgIFxuICAgIF9ub3RpZmljYXRpb25BbW91bnQgPSAwXG4gICAgXG4gICAgX21pbkZvbnRTaXplOiBudW1iZXIgPSBuaWxcbiAgICBfbWF4Rm9udFNpemU6IG51bWJlciA9IG5pbFxuICAgIFxuICAgIF9hdXRvbWF0aWNGb250U2l6ZVNlbGVjdGlvbiA9IE5PXG4gICAgXG4gICAgY2hhbmdlc09mdGVuID0gTk9cbiAgICBcbiAgICBcbiAgICBzdGF0aWMgZGVmYXVsdFRleHRDb2xvciA9IFVJQ29sb3IuYmxhY2tDb2xvclxuICAgIHN0YXRpYyBub3RpZmljYXRpb25UZXh0Q29sb3IgPSBVSUNvbG9yLnJlZENvbG9yXG4gICAgXG4gICAgc3RhdGljIF9pbnRyaW5zaWNIZWlnaHRDYWNoZTogeyBbeDogc3RyaW5nXTogeyBbeDogc3RyaW5nXTogbnVtYmVyOyB9OyB9ICYgVUlPYmplY3QgPSBuZXcgVUlPYmplY3QoKSBhcyBhbnlcbiAgICBzdGF0aWMgX2ludHJpbnNpY1dpZHRoQ2FjaGU6IHsgW3g6IHN0cmluZ106IHsgW3g6IHN0cmluZ106IG51bWJlcjsgfTsgfSAmIFVJT2JqZWN0ID0gbmV3IFVJT2JqZWN0KCkgYXMgYW55XG4gICAgXG4gICAgXG4gICAgc3RhdGljIF9wdFRvUHg6IG51bWJlclxuICAgIHN0YXRpYyBfcHhUb1B0OiBudW1iZXJcbiAgICBfdGV4dDogc3RyaW5nXG4gICAgXG4gICAgXG4gICAgY29uc3RydWN0b3IoZWxlbWVudElEPzogc3RyaW5nLCB0ZXh0Vmlld1R5cGUgPSBVSVRleHRWaWV3LnR5cGUucGFyYWdyYXBoLCB2aWV3SFRNTEVsZW1lbnQgPSBudWxsKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlcihlbGVtZW50SUQsIHZpZXdIVE1MRWxlbWVudCwgdGV4dFZpZXdUeXBlKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fY2xhc3MgPSBVSVRleHRWaWV3XG4gICAgICAgIHRoaXMuc3VwZXJjbGFzcyA9IFVJVmlld1xuICAgICAgICBcbiAgICAgICAgdGhpcy50ZXh0ID0gXCJcIlxuICAgICAgICBcbiAgICAgICAgdGhpcy5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCJcbiAgICAgICAgdGhpcy5zdHlsZS50ZXh0T3ZlcmZsb3cgPSBcImVsbGlwc2lzXCJcbiAgICAgICAgdGhpcy5pc1NpbmdsZUxpbmUgPSBZRVNcbiAgICAgICAgXG4gICAgICAgIHRoaXMudGV4dENvbG9yID0gdGhpcy50ZXh0Q29sb3JcbiAgICAgICAgXG4gICAgICAgIHRoaXMudXNlckludGVyYWN0aW9uRW5hYmxlZCA9IFlFU1xuICAgICAgICBcbiAgICAgICAgaWYgKHRleHRWaWV3VHlwZSA9PSBVSVRleHRWaWV3LnR5cGUudGV4dEFyZWEpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5wYXVzZXNQb2ludGVyRXZlbnRzID0gWUVTXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuYWRkVGFyZ2V0Rm9yQ29udHJvbEV2ZW50KFVJVmlldy5jb250cm9sRXZlbnQuUG9pbnRlclVwSW5zaWRlLCBmdW5jdGlvbiAoc2VuZGVyLCBldmVudCkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHNlbmRlci5mb2N1cygpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIHN0YXRpYyBfZGV0ZXJtaW5lUFhBbmRQVFJhdGlvcygpIHtcbiAgICBcbiAgICAgICAgY29uc3QgbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcbiAgICAgICAgby5zdHlsZS53aWR0aCA9IFwiMTAwMHB0XCJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChvKVxuICAgICAgICBVSVRleHRWaWV3Ll9wdFRvUHggPSBvLmNsaWVudFdpZHRoIC8gMTAwMFxuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKG8pXG4gICAgICAgIFVJVGV4dFZpZXcuX3B4VG9QdCA9IDEgLyBVSVRleHRWaWV3Ll9wdFRvUHhcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIHN0YXRpYyB0eXBlID0ge1xuICAgICAgICBcbiAgICAgICAgXCJwYXJhZ3JhcGhcIjogXCJwXCIsXG4gICAgICAgIFwiaGVhZGVyMVwiOiBcImgxXCIsXG4gICAgICAgIFwiaGVhZGVyMlwiOiBcImgyXCIsXG4gICAgICAgIFwiaGVhZGVyM1wiOiBcImgzXCIsXG4gICAgICAgIFwiaGVhZGVyNFwiOiBcImg0XCIsXG4gICAgICAgIFwiaGVhZGVyNVwiOiBcImg1XCIsXG4gICAgICAgIFwiaGVhZGVyNlwiOiBcImg2XCIsXG4gICAgICAgIFwidGV4dEFyZWFcIjogXCJ0ZXh0YXJlYVwiLFxuICAgICAgICBcInRleHRGaWVsZFwiOiBcImlucHV0XCIsXG4gICAgICAgIFwic3BhblwiOiBcInNwYW5cIixcbiAgICAgICAgXCJsYWJlbFwiOiBcImxhYmVsXCJcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIHN0YXRpYyB0ZXh0QWxpZ25tZW50ID0ge1xuICAgICAgICBcbiAgICAgICAgXCJsZWZ0XCI6IFwibGVmdFwiLFxuICAgICAgICBcImNlbnRlclwiOiBcImNlbnRlclwiLFxuICAgICAgICBcInJpZ2h0XCI6IFwicmlnaHRcIixcbiAgICAgICAgXCJqdXN0aWZ5XCI6IFwianVzdGlmeVwiXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBnZXQgdGV4dEFsaWdubWVudCgpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5zdHlsZS50ZXh0QWxpZ25cbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cbiAgICBcbiAgICBzZXQgdGV4dEFsaWdubWVudCh0ZXh0QWxpZ25tZW50OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fdGV4dEFsaWdubWVudCA9IHRleHRBbGlnbm1lbnRcbiAgICAgICAgdGhpcy5zdHlsZS50ZXh0QWxpZ24gPSB0ZXh0QWxpZ25tZW50XG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIGdldCB0ZXh0Q29sb3IoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX3RleHRDb2xvclxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxuICAgIFxuICAgIHNldCB0ZXh0Q29sb3IoY29sb3I6IFVJQ29sb3IpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3RleHRDb2xvciA9IGNvbG9yIHx8IFVJVGV4dFZpZXcuZGVmYXVsdFRleHRDb2xvclxuICAgICAgICB0aGlzLnN0eWxlLmNvbG9yID0gdGhpcy5fdGV4dENvbG9yLnN0cmluZ1ZhbHVlXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBnZXQgaXNTaW5nbGVMaW5lKCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzU2luZ2xlTGluZVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc2V0IGlzU2luZ2xlTGluZShpc1NpbmdsZUxpbmU6IGJvb2xlYW4pIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2lzU2luZ2xlTGluZSA9IGlzU2luZ2xlTGluZVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGlmIChpc1NpbmdsZUxpbmUpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zdHlsZS53aGl0ZVNwYWNlID0gXCJwcmVcIlxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLnN0eWxlLndoaXRlU3BhY2UgPSBcInByZS13cmFwXCJcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGdldCBub3RpZmljYXRpb25BbW91bnQoKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy5fbm90aWZpY2F0aW9uQW1vdW50XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBzZXQgbm90aWZpY2F0aW9uQW1vdW50KG5vdGlmaWNhdGlvbkFtb3VudDogbnVtYmVyKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5fbm90aWZpY2F0aW9uQW1vdW50ID09IG5vdGlmaWNhdGlvbkFtb3VudCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLl9ub3RpZmljYXRpb25BbW91bnQgPSBub3RpZmljYXRpb25BbW91bnRcbiAgICAgICAgXG4gICAgICAgIHRoaXMudGV4dCA9IHRoaXMudGV4dFxuICAgICAgICBcbiAgICAgICAgdGhpcy5zZXROZWVkc0xheW91dFVwVG9Sb290VmlldygpXG4gICAgICAgIFxuICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbkFtb3VudERpZENoYW5nZShub3RpZmljYXRpb25BbW91bnQpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBub3RpZmljYXRpb25BbW91bnREaWRDaGFuZ2Uobm90aWZpY2F0aW9uQW1vdW50OiBudW1iZXIpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBnZXQgdGV4dCgpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiAodGhpcy5fdGV4dCB8fCB0aGlzLnZpZXdIVE1MRWxlbWVudC5pbm5lckhUTUwpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBzZXQgdGV4dCh0ZXh0KSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLl90ZXh0ID0gdGV4dFxuICAgIFxuICAgICAgICB2YXIgbm90aWZpY2F0aW9uVGV4dCA9IFwiXCJcbiAgICBcbiAgICAgICAgaWYgKHRoaXMubm90aWZpY2F0aW9uQW1vdW50KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvblRleHQgPSBcIjxzcGFuIHN0eWxlPVxcXCJjb2xvcjogXCIgKyBVSVRleHRWaWV3Lm5vdGlmaWNhdGlvblRleHRDb2xvci5zdHJpbmdWYWx1ZSArIFwiO1xcXCI+XCIgK1xuICAgICAgICAgICAgICAgIChcIiAoXCIgKyB0aGlzLm5vdGlmaWNhdGlvbkFtb3VudCArIFwiKVwiKS5ib2xkKCkgKyBcIjwvc3Bhbj5cIlxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLnZpZXdIVE1MRWxlbWVudC5pbm5lckhUTUwgIT0gdGhpcy50ZXh0UHJlZml4ICsgdGV4dCArIHRoaXMudGV4dFN1ZmZpeCArIG5vdGlmaWNhdGlvblRleHQpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy52aWV3SFRNTEVsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy50ZXh0UHJlZml4ICsgRklSU1QodGV4dCwgXCJcIikgKyB0aGlzLnRleHRTdWZmaXggKyBub3RpZmljYXRpb25UZXh0XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5zZXROZWVkc0xheW91dCgpO1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc2V0IGlubmVySFRNTChpbm5lckhUTUw6IHN0cmluZykge1xuICAgICAgICBcbiAgICAgICAgdGhpcy50ZXh0ID0gaW5uZXJIVE1MXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBnZXQgaW5uZXJIVE1MKCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld0hUTUxFbGVtZW50LmlubmVySFRNTFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgc2V0VGV4dChrZXk6IHN0cmluZywgZGVmYXVsdFN0cmluZzogc3RyaW5nLCBwYXJhbWV0ZXJzPzogeyBbeDogc3RyaW5nXTogc3RyaW5nIHwgVUlMb2NhbGl6ZWRUZXh0T2JqZWN0IH0pIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2V0SW5uZXJIVE1MKGtleSwgZGVmYXVsdFN0cmluZywgcGFyYW1ldGVycylcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGdldCBmb250U2l6ZSgpIHtcbiAgICBcbiAgICAgICAgY29uc3Qgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLnZpZXdIVE1MRWxlbWVudCwgbnVsbCkuZm9udFNpemVcbiAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gKHBhcnNlRmxvYXQoc3R5bGUpICogVUlUZXh0Vmlldy5fcHhUb1B0KVxuICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBzZXQgZm9udFNpemUoZm9udFNpemU6IG51bWJlcikge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc3R5bGUuZm9udFNpemUgPSBcIlwiICsgZm9udFNpemUgKyBcInB0XCJcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICB1c2VBdXRvbWF0aWNGb250U2l6ZShtaW5Gb250U2l6ZTogbnVtYmVyID0gbmlsLCBtYXhGb250U2l6ZTogbnVtYmVyID0gbmlsKSB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5fYXV0b21hdGljRm9udFNpemVTZWxlY3Rpb24gPSBZRVNcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9taW5Gb250U2l6ZSA9IG1pbkZvbnRTaXplXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9tYXhGb250U2l6ZSA9IG1heEZvbnRTaXplXG4gICAgICAgIFxuICAgICAgICB0aGlzLnNldE5lZWRzTGF5b3V0KClcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBzdGF0aWMgYXV0b21hdGljYWxseUNhbGN1bGF0ZWRGb250U2l6ZShcbiAgICAgICAgYm91bmRzOiBVSVJlY3RhbmdsZSxcbiAgICAgICAgY3VycmVudFNpemU6IFVJUmVjdGFuZ2xlLFxuICAgICAgICBjdXJyZW50Rm9udFNpemU6IG51bWJlcixcbiAgICAgICAgbWluRm9udFNpemU/OiBudW1iZXIsXG4gICAgICAgIG1heEZvbnRTaXplPzogbnVtYmVyXG4gICAgKSB7XG4gICAgICAgIFxuICAgICAgICBtaW5Gb250U2l6ZSA9IEZJUlNUKG1pbkZvbnRTaXplLCAxKVxuICAgICAgICBcbiAgICAgICAgbWF4Rm9udFNpemUgPSBGSVJTVChtYXhGb250U2l6ZSwgMTAwMDAwMDAwMDAwKVxuICAgIFxuICAgIFxuICAgICAgICBjb25zdCBoZWlnaHRNdWx0aXBsaWVyID0gYm91bmRzLmhlaWdodCAvIChjdXJyZW50U2l6ZS5oZWlnaHQgKyAxKVxuICAgIFxuICAgICAgICBjb25zdCB3aWR0aE11bHRpcGxpZXIgPSBib3VuZHMud2lkdGggLyAoY3VycmVudFNpemUud2lkdGggKyAxKVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgICAgICB2YXIgbXVsdGlwbGllciA9IGhlaWdodE11bHRpcGxpZXJcbiAgICBcbiAgICAgICAgaWYgKGhlaWdodE11bHRpcGxpZXIgPiB3aWR0aE11bHRpcGxpZXIpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbXVsdGlwbGllciA9IHdpZHRoTXVsdGlwbGllclxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgICAgIGNvbnN0IG1heEZpdHRpbmdGb250U2l6ZSA9IGN1cnJlbnRGb250U2l6ZSAqIG11bHRpcGxpZXJcbiAgICBcbiAgICBcbiAgICAgICAgaWYgKG1heEZpdHRpbmdGb250U2l6ZSA+IG1heEZvbnRTaXplKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBtYXhGb250U2l6ZVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChtaW5Gb250U2l6ZSA+IG1heEZpdHRpbmdGb250U2l6ZSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gbWluRm9udFNpemVcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG1heEZpdHRpbmdGb250U2l6ZVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBkaWRSZWNlaXZlQnJvYWRjYXN0RXZlbnQoZXZlbnQ6IFVJVmlld0Jyb2FkY2FzdEV2ZW50KSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci5kaWRSZWNlaXZlQnJvYWRjYXN0RXZlbnQoZXZlbnQpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICB3aWxsTW92ZVRvU3VwZXJ2aWV3KHN1cGVydmlldzogVUlWaWV3KSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci53aWxsTW92ZVRvU3VwZXJ2aWV3KHN1cGVydmlldylcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGxheW91dFN1YnZpZXdzKCkge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIubGF5b3V0U3Vidmlld3MoKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLl9hdXRvbWF0aWNGb250U2l6ZVNlbGVjdGlvbikge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmZvbnRTaXplID0gVUlUZXh0Vmlldy5hdXRvbWF0aWNhbGx5Q2FsY3VsYXRlZEZvbnRTaXplKFxuICAgICAgICAgICAgICAgIG5ldyBVSVJlY3RhbmdsZSgwLCAwLCAxICpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3SFRNTEVsZW1lbnQub2Zmc2V0SGVpZ2h0LCAxICpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3SFRNTEVsZW1lbnQub2Zmc2V0V2lkdGgpLFxuICAgICAgICAgICAgICAgIHRoaXMuaW50cmluc2ljQ29udGVudFNpemUoKSxcbiAgICAgICAgICAgICAgICB0aGlzLmZvbnRTaXplLFxuICAgICAgICAgICAgICAgIHRoaXMuX21pbkZvbnRTaXplLFxuICAgICAgICAgICAgICAgIHRoaXMuX21heEZvbnRTaXplXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGludHJpbnNpY0NvbnRlbnRIZWlnaHQoY29uc3RyYWluaW5nV2lkdGggPSAwKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5jaGFuZ2VzT2Z0ZW4pIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLmludHJpbnNpY0NvbnRlbnRIZWlnaHQoY29uc3RyYWluaW5nV2lkdGgpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBjb25zdCBrZXlQYXRoID0gKHRoaXMudmlld0hUTUxFbGVtZW50LmlubmVySFRNTCArIFwiX2NzZl9cIiArIHRoaXMuY29tcHV0ZWRTdHlsZS5mb250KS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJcXFxcLlwiLCBcImdcIiksIFwiX1wiKSArIFwiLlwiICtcbiAgICAgICAgICAgIChcIlwiICsgY29uc3RyYWluaW5nV2lkdGgpLnJlcGxhY2UobmV3IFJlZ0V4cChcIlxcXFwuXCIsIFwiZ1wiKSwgXCJfXCIpXG4gICAgXG4gICAgICAgIHZhciByZXN1bHQgPSBVSVRleHRWaWV3Ll9pbnRyaW5zaWNIZWlnaHRDYWNoZS52YWx1ZUZvcktleVBhdGgoa2V5UGF0aClcbiAgICBcbiAgICAgICAgaWYgKElTX0xJS0VfTlVMTChyZXN1bHQpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJlc3VsdCA9IHN1cGVyLmludHJpbnNpY0NvbnRlbnRIZWlnaHQoY29uc3RyYWluaW5nV2lkdGgpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFVJVGV4dFZpZXcuX2ludHJpbnNpY0hlaWdodENhY2hlLnNldFZhbHVlRm9yS2V5UGF0aChrZXlQYXRoLCByZXN1bHQpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGludHJpbnNpY0NvbnRlbnRXaWR0aChjb25zdHJhaW5pbmdIZWlnaHQgPSAwKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5jaGFuZ2VzT2Z0ZW4pIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLmludHJpbnNpY0NvbnRlbnRXaWR0aChjb25zdHJhaW5pbmdIZWlnaHQpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBjb25zdCBrZXlQYXRoID0gKHRoaXMudmlld0hUTUxFbGVtZW50LmlubmVySFRNTCArIFwiX2NzZl9cIiArIHRoaXMuY29tcHV0ZWRTdHlsZS5mb250KS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJcXFxcLlwiLCBcImdcIiksIFwiX1wiKSArIFwiLlwiICtcbiAgICAgICAgICAgIChcIlwiICsgY29uc3RyYWluaW5nSGVpZ2h0KS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJcXFxcLlwiLCBcImdcIiksIFwiX1wiKVxuICAgIFxuICAgICAgICB2YXIgcmVzdWx0ID0gVUlUZXh0Vmlldy5faW50cmluc2ljV2lkdGhDYWNoZS52YWx1ZUZvcktleVBhdGgoa2V5UGF0aClcbiAgICBcbiAgICAgICAgaWYgKElTX0xJS0VfTlVMTChyZXN1bHQpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJlc3VsdCA9IHN1cGVyLmludHJpbnNpY0NvbnRlbnRXaWR0aChjb25zdHJhaW5pbmdIZWlnaHQpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFVJVGV4dFZpZXcuX2ludHJpbnNpY1dpZHRoQ2FjaGUuc2V0VmFsdWVGb3JLZXlQYXRoKGtleVBhdGgsIHJlc3VsdClcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgaW50cmluc2ljQ29udGVudFNpemUoKSB7XG4gICAgICAgIFxuICAgICAgICAvLyBUaGlzIHdvcmtzIGJ1dCBpcyBzbG93XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuaW50cmluc2ljQ29udGVudFNpemVXaXRoQ29uc3RyYWludHMobmlsLCBuaWwpXG4gICAgXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxufVxuXG5cblxuXG5cblVJVGV4dFZpZXcuX2RldGVybWluZVBYQW5kUFRSYXRpb3MoKVxuXG5cblxuXG5cbi8vIC8qKlxuLy8gICogVXNlcyBjYW52YXMubWVhc3VyZVRleHQgdG8gY29tcHV0ZSBhbmQgcmV0dXJuIHRoZSB3aWR0aCBvZiB0aGUgZ2l2ZW4gdGV4dCBvZiBnaXZlbiBmb250IGluIHBpeGVscy5cbi8vICAqIFxuLy8gICogQHBhcmFtIHtTdHJpbmd9IHRleHQgVGhlIHRleHQgdG8gYmUgcmVuZGVyZWQuXG4vLyAgKiBAcGFyYW0ge1N0cmluZ30gZm9udCBUaGUgY3NzIGZvbnQgZGVzY3JpcHRvciB0aGF0IHRleHQgaXMgdG8gYmUgcmVuZGVyZWQgd2l0aCAoZS5nLiBcImJvbGQgMTRweCB2ZXJkYW5hXCIpLlxuLy8gICogXG4vLyAgKiBAc2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzExODI0MS9jYWxjdWxhdGUtdGV4dC13aWR0aC13aXRoLWphdmFzY3JpcHQvMjEwMTUzOTMjMjEwMTUzOTNcbi8vICAqL1xuLy8gZnVuY3Rpb24gZ2V0VGV4dE1ldHJpY3ModGV4dCwgZm9udCkge1xuLy8gICAgIC8vIHJlLXVzZSBjYW52YXMgb2JqZWN0IGZvciBiZXR0ZXIgcGVyZm9ybWFuY2Vcbi8vICAgICB2YXIgY2FudmFzID0gZ2V0VGV4dE1ldHJpY3MuY2FudmFzIHx8IChnZXRUZXh0TWV0cmljcy5jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpKTtcbi8vICAgICB2YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4vLyAgICAgY29udGV4dC5mb250ID0gZm9udDtcbi8vICAgICB2YXIgbWV0cmljcyA9IGNvbnRleHQubWVhc3VyZVRleHQodGV4dCk7XG4vLyAgICAgcmV0dXJuIG1ldHJpY3M7XG4vLyB9XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vVUlDb3JlL1VJVmlld0NvbnRyb2xsZXIudHNcIiAvPlxuLy8vPHJlZmVyZW5jZSBwYXRoPVwiVUlDb3JlL1VJVGV4dFZpZXcudHNcIi8+XG5cblxuXG5cblxuY2xhc3MgR0VURUxFQ1RhYmxlVmlld0NvbnRyb2xsZXIgZXh0ZW5kcyBVSVZpZXdDb250cm9sbGVyIHtcbiAgICBcbiAgICBcbiAgICBwcml2YXRlIHRpdGxlTGFiZWw6IFVJVGV4dFZpZXdcbiAgICBwcml2YXRlIGlucHV0VGV4dEFyZWE6IFVJVGV4dEFyZWFcbiAgICBcbiAgICBcbiAgICBwcml2YXRlIGxvYWREYXRhQnV0dG9uOiBDQkJ1dHRvblxuICAgIGNoYXJ0VmlldzogVUlWaWV3XG4gICAgY2hhcnQ6IGFueVxuICAgIHByaXZhdGUgcmVzdWx0c0xhYmVsOiBVSVZpZXdcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBjb25zdHJ1Y3Rvcih2aWV3KSB7XG4gICAgICAgIFxuICAgICAgICAvLyBDYWxsaW5nIHN1cGVyXG4gICAgICAgIHN1cGVyKHZpZXcpXG4gICAgICAgIFxuICAgICAgICAvLyBDb2RlIGZvciBmdXJ0aGVyIHNldHVwIGlmIG5lY2Vzc2FyeVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgbG9hZEludHJvc3BlY3Rpb25WYXJpYWJsZXMoKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci5sb2FkSW50cm9zcGVjdGlvblZhcmlhYmxlcygpXG4gICAgICAgIHRoaXMuc3VwZXJjbGFzcyA9IFVJVmlld0NvbnRyb2xsZXJcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHN0YXRpYyByZWFkb25seSByb3V0ZUNvbXBvbmVudE5hbWUgPSBcImZpdF9mdW5hc2Rhc2RcIlxuICAgIFxuICAgIHN0YXRpYyByZWFkb25seSBQYXJhbWV0ZXJJZGVudGlmaWVyTmFtZSA9IHsgXCJJRFwiOiBcIklEXCIgfVxuICAgIFxuICAgIFxuICAgIGxvYWRTdWJ2aWV3cygpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudmlldy5iYWNrZ3JvdW5kQ29sb3IgPSBVSUNvbG9yLndoaXRlQ29sb3JcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLnRpdGxlTGFiZWwgPSBuZXcgVUlUZXh0Vmlldyh0aGlzLnZpZXcuZWxlbWVudElEICsgXCJUaXRsZUxhYmVsXCIsIFVJVGV4dFZpZXcudHlwZS5oZWFkZXIzKVxuICAgICAgICB0aGlzLnRpdGxlTGFiZWwudGV4dEFsaWdubWVudCA9IFVJVGV4dFZpZXcudGV4dEFsaWdubWVudC5sZWZ0XG4gICAgICAgIHRoaXMudGl0bGVMYWJlbC5uYXRpdmVTZWxlY3Rpb25FbmFibGVkID0gTk9cbiAgICAgICAgdGhpcy50aXRsZUxhYmVsLmlzU2luZ2xlTGluZSA9IE5PXG4gICAgICAgIHRoaXMudmlldy5hZGRTdWJ2aWV3KHRoaXMudGl0bGVMYWJlbClcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLmlucHV0VGV4dEFyZWEgPSBuZXcgVUlUZXh0QXJlYSh0aGlzLnZpZXcuZWxlbWVudElEICsgXCJJbnB1dFRleHRBcmVhXCIpXG4gICAgICAgIHRoaXMuaW5wdXRUZXh0QXJlYS5wbGFjZWhvbGRlclRleHQgPSBcIklucHV0IHlvdXIgZGF0YSBoZXJlLlwiXG4gICAgICAgIHRoaXMuaW5wdXRUZXh0QXJlYS5jaGFuZ2VzT2Z0ZW4gPSBZRVNcbiAgICAgICAgdGhpcy52aWV3LmFkZFN1YnZpZXcodGhpcy5pbnB1dFRleHRBcmVhKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMubG9hZERhdGFCdXR0b24gPSBuZXcgQ0JCdXR0b24oKVxuICAgICAgICB0aGlzLmxvYWREYXRhQnV0dG9uLnRpdGxlTGFiZWwudGV4dCA9IFwiTG9hZCBkYXRhXCJcbiAgICAgICAgdGhpcy52aWV3LmFkZFN1YnZpZXcodGhpcy5sb2FkRGF0YUJ1dHRvbilcbiAgICAgICAgXG4gICAgICAgIHRoaXMubG9hZERhdGFCdXR0b24uZW5hYmxlZCA9IE5PO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLnJlc3VsdHNMYWJlbCA9IG5ldyBVSVZpZXcoKVxuICAgICAgICB0aGlzLnJlc3VsdHNMYWJlbC5pbm5lckhUTUwgPSBcIlJlc3VsdHNcIlxuICAgICAgICB0aGlzLnJlc3VsdHNMYWJlbC5oaWRkZW4gPSBZRVNcbiAgICAgICAgdGhpcy52aWV3LmFkZFN1YnZpZXcodGhpcy5yZXN1bHRzTGFiZWwpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5jaGFydFZpZXcgPSBuZXcgVUlWaWV3KFwiUmVzdWx0RGF0YUNoYXJ0XCIsIG5pbCwgXCJjYW52YXNcIilcbiAgICAgICAgdGhpcy5jaGFydFZpZXcuaGlkZGVuID0gWUVTXG4gICAgICAgIHRoaXMudmlldy5hZGRTdWJ2aWV3KHRoaXMuY2hhcnRWaWV3KVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuaW5wdXRUZXh0QXJlYS5hZGRDb250cm9sRXZlbnRUYXJnZXQuVGV4dENoYW5nZSA9IChzZW5kZXIsIGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coc2VuZGVyKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy52aWV3LnNldE5lZWRzTGF5b3V0VXBUb1Jvb3RWaWV3KClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5sb2FkRGF0YUJ1dHRvbi5lbmFibGVkID0gSVModGhpcy5pbnB1dFRleHRBcmVhLnRleHQpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jaGFydFZpZXcudmlld0hUTUxFbGVtZW50LmdldENvbnRleHQoXCIyZFwiKVxuICAgICAgICBcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLmNoYXJ0ID0gbmV3IENoYXJ0KGN0eCwge1xuICAgICAgICAgICAgLy8gVGhlIHR5cGUgb2YgY2hhcnQgd2Ugd2FudCB0byBjcmVhdGVcbiAgICAgICAgICAgIC8vdHlwZTogXCJsaW5lXCIsXG4gICAgICAgICAgICB0eXBlOiBcInNjYXR0ZXJcIixcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVGhlIGRhdGEgZm9yIG91ciBkYXRhc2V0XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgLy9sYWJlbHM6IFsnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuZSddLFxuICAgICAgICAgICAgICAgIGRhdGFzZXRzOiBbXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJSZXN1bHQgcG9pbnRzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVUZW5zaW9uOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy9iYWNrZ3JvdW5kQ29sb3I6IFVJQ29sb3IudHJhbnNwYXJlbnRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBcInJnYigxMjUsIDExNSwgMjUyKVwiIC8vLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy9kYXRhOiBbeyB4OiAwLCB5OiAwIH0sIHsgeDogMiwgeTogMTAgfSwgeyB4OiA1LCB5OiA1IH0sIHsgeDogNywgeTogMiB9LCB7IHg6IDgsIHk6IDIwIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHg6IDExLCB5OiA0NSB9XVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJSZXN1bHQgbGluZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lVGVuc2lvbjogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJyZ2IoMjU1LCA5OSwgMTMyKVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IFwicmdiKDI1NSwgOTksIDEzMilcIiAvLyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZGF0YTogW3sgeDogMCwgeTogMCB9LCB7IHg6IDIsIHk6IDEwIH0sIHsgeDogNSwgeTogNSB9LCB7IHg6IDcsIHk6IDIgfSwgeyB4OiA4LCB5OiAyMCB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB4OiAxMSwgeTogNDUgfV1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBnbyBoZXJlXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZmlsbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgbGluZVRlbnNpb246IDAsXG4gICAgICAgICAgICAgICAgc2NhbGVzOiB7XG4gICAgICAgICAgICAgICAgICAgIHg6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibGluZWFyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogXCJib3R0b21cIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImxvZ2FyaXRobWljXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogXCJib3R0b21cIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB5QXhlczogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdsb2dhcml0aG1pYycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbjogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXg6IDEwMDAwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIHZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IDEwMDAwMDApIHJldHVybiBcIjFNXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gMTAwMDAwKSByZXR1cm4gXCIxMDBLXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gMTAwMDApIHJldHVybiBcIjEwS1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IDEwMDApIHJldHVybiBcIjFLXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gMTAwKSByZXR1cm4gXCIxMDBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSAxMCkgcmV0dXJuIFwiMTBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSAxKSByZXR1cm4gXCIxXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRvb2x0aXBzOiB7XG4gICAgICAgICAgICAgICAgICAgIG1vZGU6IFwiaW50ZXJwb2xhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0OiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwbHVnaW5zOiB7XG4gICAgICAgICAgICAgICAgICAgIGNyb3NzaGFpcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcIiNGNjZcIiwgIC8vIGNyb3NzaGFpciBsaW5lIGNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEgICAgICAgIC8vIGNyb3NzaGFpciBsaW5lIHdpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgc3luYzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsICAgICAgICAgICAgLy8gZW5hYmxlIHRyYWNlIGxpbmUgc3luY2luZyB3aXRoIG90aGVyIGNoYXJ0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwOiAxLCAgICAgICAgICAgICAgICAgLy8gY2hhcnQgZ3JvdXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXBwcmVzc1Rvb2x0aXBzOiBmYWxzZSAgIC8vIHN1cHByZXNzIHRvb2x0aXBzIHdoZW4gc2hvd2luZyBhIHN5bmNlZCB0cmFjZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB6b29tOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogTk8sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlbmFibGUgem9vbWluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvb21ib3hCYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSg2NiwxMzMsMjQ0LDAuMilcIiwgICAgIC8vIGJhY2tncm91bmQgY29sb3Igb2Ygem9vbSBib3hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB6b29tYm94Qm9yZGVyQ29sb3I6IFwiIzQ4RlwiLCAgICAgICAgICAgICAgICAgICAgICAgICAvLyBib3JkZXIgY29sb3Igb2Ygem9vbSBib3hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB6b29tQnV0dG9uVGV4dDogXCJSZXNldCBab29tXCIsICAgICAgICAgICAgICAgICAgICAgICAvLyByZXNldCB6b29tIGJ1dHRvbiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgem9vbUJ1dHRvbkNsYXNzOiBcInJlc2V0LXpvb21cIiAgICAgICAgICAgICAgICAgICAgICAvLyByZXNldCB6b29tIGJ1dHRvbiBjbGFzc1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZVpvb206IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7ICAgICAgICAgICAgICAgICAgLy8gY2FsbGVkIGJlZm9yZSB6b29tLCByZXR1cm4gZmFsc2UgdG8gcHJldmVudCB6b29tXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZnRlclpvb206IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7ICAgICAgICAgICAgICAgICAgIC8vIGNhbGxlZCBhZnRlciB6b29tXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHJlc3BvbnNpdmU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIC8vIG1haW50YWluQXNwZWN0UmF0aW86IGZhbHNlLFxuICAgICAgICAgICAgICAgIC8vIHNob3dTY2FsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5sb2FkRGF0YUJ1dHRvbi5hZGRDb250cm9sRXZlbnRUYXJnZXQuRW50ZXJEb3duLlBvaW50ZXJVcEluc2lkZSA9IGFzeW5jIChzZW5kZXIsIGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coc2VuZGVyKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgQ0JEaWFsb2dWaWV3U2hvd2VyLnNob3dBY3Rpb25JbmRpY2F0b3JEaWFsb2coXCJMb2FkaW5nLlwiKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IHN0cmluZ1NvY2tldENsaWVudFJlc3VsdCA9IGF3YWl0IFNvY2tldENsaWVudC5QZXJmb3JtRml0RnVuKHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXREYXRhOiB0aGlzLmlucHV0VGV4dEFyZWEudGV4dFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKElTKHN0cmluZ1NvY2tldENsaWVudFJlc3VsdC5lcnJvclJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHN0cmluZ1NvY2tldENsaWVudFJlc3VsdC5lcnJvclJlc3VsdClcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIENCRGlhbG9nVmlld1Nob3dlci5hbGVydChcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiRmFpbGVkIHRvIGFuYWx5emUgZGF0YS4gXCIgKyBKU09OLnN0cmluZ2lmeShzdHJpbmdTb2NrZXRDbGllbnRSZXN1bHQuZXJyb3JSZXN1bHQpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gSlNPTi5wYXJzZShzdHJpbmdTb2NrZXRDbGllbnRSZXN1bHQucmVzdWx0KVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2cocmVzdWx0KVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0c0xhYmVsLmlubmVySFRNTCA9IEZJUlNUKHJlc3VsdC5yZXN1bHRIVE1MU3RyaW5nLCBcIlwiKVxuICAgICAgICAgICAgICAgICAgICArIElGKElTX05PVChyZXN1bHQucmVzdWx0SFRNTFN0cmluZykpKFJFVFVSTkVSKFxuICAgICAgICAgICAgICAgICAgICAgICAgYFJhZGl1czogJHsgcmVzdWx0LlJhZGl1cyB9IGJldGE6ICR7IHJlc3VsdC5iZXRhIH0gc2lnbWFfQWVmZjogJHsgcmVzdWx0LnNpZ21hX0FlZmYgfWBcbiAgICAgICAgICAgICAgICAgICAgKSkoKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IHBvaW50UG9pbnRzID0gdGhpcy5wb2ludE9iamVjdHNGcm9tVmFsdWVzKHJlc3VsdC54cGxvdF9tcmssIHJlc3VsdC55cGxvdF9tcmspXG4gICAgICAgICAgICAgICAgY29uc3QgbGluZVBvaW50cyA9IHRoaXMucG9pbnRPYmplY3RzRnJvbVZhbHVlcyhyZXN1bHQueHBsb3RfbGluZSwgcmVzdWx0LnlwbG90X2xpbmUpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzWzBdLmRhdGEgPSBwb2ludFBvaW50c1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1swXS5zaG93TGluZSA9IE5PXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzWzFdLmRhdGEgPSBsaW5lUG9pbnRzXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzWzFdLnNob3dMaW5lID0gWUVTXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzWzFdLnBvaW50UmFkaXVzID0gMFxuICAgICAgICAgICAgICAgIHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1sxXS5pbnRlcnBvbGF0ZSA9IFlFU1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuY2hhcnQub3B0aW9ucy5zY2FsZXMueEF4ZXNbMF0uc2NhbGVMYWJlbC5kaXNwbGF5ID0gdHJ1ZVxuICAgICAgICAgICAgICAgIHRoaXMuY2hhcnQub3B0aW9ucy5zY2FsZXMueEF4ZXNbMF0uc2NhbGVMYWJlbC5sYWJlbFN0cmluZyA9IFwiXCIgKyBGSVJTVChyZXN1bHQueEF4aXNVbml0LCBcIlwiKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuY2hhcnQub3B0aW9ucy5zY2FsZXMueUF4ZXNbMF0uc2NhbGVMYWJlbC5kaXNwbGF5ID0gdHJ1ZVxuICAgICAgICAgICAgICAgIHRoaXMuY2hhcnQub3B0aW9ucy5zY2FsZXMueUF4ZXNbMF0uc2NhbGVMYWJlbC5sYWJlbFN0cmluZyA9IFwiXCIgKyBGSVJTVChyZXN1bHQueUF4aXNVbml0LCBcIlwiKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0c0xhYmVsLmhpZGRlbiA9IE5PXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFydFZpZXcuaGlkZGVuID0gTk9cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJ0LnVwZGF0ZSgpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LnNldE5lZWRzTGF5b3V0VXBUb1Jvb3RWaWV3KClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGV4Y2VwdGlvbilcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBDQkRpYWxvZ1ZpZXdTaG93ZXIuYWxlcnQoXCJGYWlsZWQgdG8gZGlzcGxheSByZXN1bHRzLiBcIiArIEpTT04uc3RyaW5naWZ5KGV4Y2VwdGlvbikpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIENCRGlhbG9nVmlld1Nob3dlci5oaWRlQWN0aW9uSW5kaWNhdG9yRGlhbG9nKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBwcml2YXRlIHBvaW50T2JqZWN0c0Zyb21WYWx1ZXMoeFZhbHVlcywgeVZhbHVlcykge1xuICAgICAgICBcbiAgICAgICAgdmFyIHJlc3VsdFBvaW50czogYW55W10gPSBbXVxuICAgICAgICBcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4VmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciB4ID0geFZhbHVlc1tpXVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgeSA9IHlWYWx1ZXNbaV1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVzdWx0UG9pbnRzLnB1c2goeyB4OiB4LCB5OiB5IH0pXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFBvaW50c1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgYXN5bmMgaGFuZGxlUm91dGUocm91dGU6IFVJUm91dGUpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyLmhhbmRsZVJvdXRlKHJvdXRlKVxuICAgICAgICBcbiAgICAgICAgY29uc3QgaW5xdWlyeUNvbXBvbmVudCA9IHJvdXRlLmNvbXBvbmVudFdpdGhWaWV3Q29udHJvbGxlcihHRVRFTEVDVGFibGVWaWV3Q29udHJvbGxlcilcbiAgICAgICAgXG4gICAgICAgIHRoaXMudGl0bGVMYWJlbC50ZXh0ID0gXCJFbnRlciB5b3VyIGRhdGEgYW5kIHByZXNzIHRoZSBsb2FkIGJ1dHRvbi4gVEFCTEUgVklFV1wiXG4gICAgICAgIFxuICAgICAgICByb3V0ZS5kaWRjb21wbGV0ZUNvbXBvbmVudChpbnF1aXJ5Q29tcG9uZW50KVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgbGF5b3V0Vmlld3NNYW51YWxseSgpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyLmxheW91dFZpZXdzTWFudWFsbHkoKVxuICAgICAgICBcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IFJvb3RWaWV3Q29udHJvbGxlci5wYWRkaW5nTGVuZ3RoXG4gICAgICAgIGNvbnN0IGxhYmVsSGVpZ2h0ID0gcGFkZGluZyAqIDEuMjVcbiAgICAgICAgXG4gICAgICAgIC8vIFZpZXcgYm91bmRzXG4gICAgICAgIHZhciBib3VuZHMgPSB0aGlzLnZpZXcuYm91bmRzXG4gICAgICAgIFxuICAgICAgICB0aGlzLnZpZXcuc2V0UGFkZGluZ3MoMCwgMCwgcGFkZGluZywgMClcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy50aXRsZUxhYmVsLmZyYW1lID0gYm91bmRzLnJlY3RhbmdsZVdpdGhJbnNldHMocGFkZGluZywgcGFkZGluZywgMCwgcGFkZGluZylcbiAgICAgICAgLnJlY3RhbmdsZVdpdGhIZWlnaHQodGhpcy50aXRsZUxhYmVsLmludHJpbnNpY0NvbnRlbnRIZWlnaHQoYm91bmRzLndpZHRoKSlcbiAgICAgICAgXG4gICAgICAgIHRoaXMuaW5wdXRUZXh0QXJlYS5mcmFtZSA9IHRoaXMudGl0bGVMYWJlbC5mcmFtZS5yZWN0YW5nbGVGb3JOZXh0Um93KFxuICAgICAgICAgICAgcGFkZGluZyAqIDAuMjUsXG4gICAgICAgICAgICB0aGlzLmlucHV0VGV4dEFyZWEuaW50cmluc2ljQ29udGVudEhlaWdodCh0aGlzLnRpdGxlTGFiZWwuZnJhbWUud2lkdGgpICsgNVxuICAgICAgICApXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5sb2FkRGF0YUJ1dHRvbi5mcmFtZSA9IHRoaXMuaW5wdXRUZXh0QXJlYS5mcmFtZS5yZWN0YW5nbGVGb3JOZXh0Um93KHBhZGRpbmcsIGxhYmVsSGVpZ2h0ICogMilcbiAgICAgICAgXG4gICAgICAgIHRoaXMubG9hZERhdGFCdXR0b24uc2V0TWFyZ2lucygwLCAwLCBwYWRkaW5nLCAwKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMucmVzdWx0c0xhYmVsLmZyYW1lID0gdGhpcy5sb2FkRGF0YUJ1dHRvbi5mcmFtZS5yZWN0YW5nbGVGb3JOZXh0Um93KHBhZGRpbmcpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5jaGFydFZpZXcuZnJhbWUgPSB0aGlzLnJlc3VsdHNMYWJlbC5mcmFtZS5yZWN0YW5nbGVGb3JOZXh0Um93KFxuICAgICAgICAgICAgcGFkZGluZyxcbiAgICAgICAgICAgIHRoaXMubG9hZERhdGFCdXR0b24uZnJhbWUud2lkdGggKiAwLjVcbiAgICAgICAgKVxuICAgICAgICAvLy5yZWN0YW5nbGVXaXRoSW5zZXRzKHBhZGRpbmcgKiA1ICogMCwgcGFkZGluZyAqIDUsIDAsIDApXG4gICAgICAgIC8vLnJlY3RhbmdsZUJ5QWRkaW5nWCgtcGFkZGluZylcbiAgICAgICAgXG4gICAgICAgIC8vdGhpcy5jaGFydFZpZXcuc2V0UGFkZGluZyhwYWRkaW5nKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY2hhcnRWaWV3LnNldE1heFNpemVzKHRoaXMuY2hhcnRWaWV3LmZyYW1lLmhlaWdodCwgdGhpcy5jaGFydFZpZXcuZnJhbWUud2lkdGgpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGludHJpbnNpY1ZpZXdDb250ZW50SGVpZ2h0KGNvbnN0cmFpbmluZ1dpZHRoOiBudW1iZXIgPSAwKTogbnVtYmVyIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSBSb290Vmlld0NvbnRyb2xsZXIucGFkZGluZ0xlbmd0aFxuICAgICAgICBjb25zdCBsYWJlbEhlaWdodCA9IHBhZGRpbmcgKiAxLjVcbiAgICAgICAgXG4gICAgICAgIHZhciByZXN1bHQgPSBwYWRkaW5nICsgdGhpcy50aXRsZUxhYmVsLmludHJpbnNpY0NvbnRlbnRIZWlnaHQoY29uc3RyYWluaW5nV2lkdGgpICsgcGFkZGluZyAqIDAuMjUgK1xuICAgICAgICAgICAgbGFiZWxIZWlnaHQgKiAyICsgcGFkZGluZyAqIDAuNSArIHBhZGRpbmcgK1xuICAgICAgICAgICAgdGhpcy5pbnB1dFRleHRBcmVhLmludHJpbnNpY0NvbnRlbnRIZWlnaHQoY29uc3RyYWluaW5nV2lkdGgpXG4gICAgICAgIFxuICAgICAgICBpZiAoSVNfTk9UKHRoaXMuY2hhcnRWaWV3LmhpZGRlbikpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICsgcGFkZGluZyArIChjb25zdHJhaW5pbmdXaWR0aCAtIHBhZGRpbmcgKiAyKSAqIDAuNSArIHBhZGRpbmcgKyBsYWJlbEhlaWdodCAqIDJcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG59XG5cblxuLy8gQHRzLWlnbm9yZVxuQ2hhcnQuSW50ZXJhY3Rpb24ubW9kZXNbXCJpbnRlcnBvbGF0ZVwiXSA9IGZ1bmN0aW9uIChjaGFydCwgZSwgb3B0aW9ucykge1xuICAgIFxuICAgIC8vIFRoaXMgZnVuY3Rpb24gaGFzIGEgc2VwYXJhdGUgbGljZW5zZVxuICAgIFxuICAgIC8vIE1JVCBMaWNlbnNlXG4gICAgLy9cbiAgICAvLyBDb3B5cmlnaHQgKGMpIDIwMTggQWJlbCBIZWluc2Jyb2VrXG4gICAgLy9cbiAgICAvLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gICAgLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICAgIC8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAgICAvLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gICAgLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gICAgLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAgICAvL1xuICAgIC8vICAgICBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbiAgICAvLyBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICAgIC8vXG4gICAgLy8gICAgIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAgICAvLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAgICAvLyAgICAgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gICAgLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICAgIC8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gICAgLy8gICAgIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4gICAgLy8gU09GVFdBUkUuXG4gICAgXG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICBcbiAgICBmb3IgKHZhciBkYXRhc2V0SW5kZXggPSAwOyBkYXRhc2V0SW5kZXggPCBjaGFydC5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgZGF0YXNldEluZGV4KyspIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAvLyBjaGVjayBmb3IgaW50ZXJwb2xhdGUgc2V0dGluZ1xuICAgICAgICBpZiAoIWNoYXJ0LmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS5pbnRlcnBvbGF0ZSkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpXG4gICAgICAgIC8vIGRvIG5vdCBpbnRlcnBvbGF0ZSBoaWRkZW4gY2hhcnRzXG4gICAgICAgIGlmIChtZXRhLmhpZGRlbikge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHZhciB4U2NhbGUgPSBjaGFydC5zY2FsZXNbbWV0YS54QXhpc0lEXVxuICAgICAgICB2YXIgeVNjYWxlID0gY2hhcnQuc2NhbGVzW21ldGEueUF4aXNJRF1cbiAgICAgICAgXG4gICAgICAgIHZhciB4VmFsdWUgPSB4U2NhbGUuZ2V0VmFsdWVGb3JQaXhlbChlLngpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdmFyIGRhdGEgPSBjaGFydC5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0uZGF0YVxuICAgICAgICBcbiAgICAgICAgdmFyIGluZGV4ID0gZGF0YS5maW5kSW5kZXgoZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgIHJldHVybiBvLnggPj0geFZhbHVlXG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgLy8gbGluZWFyIGludGVycG9sYXRlIHZhbHVlXG4gICAgICAgIHZhciBwcmV2ID0gZGF0YVtpbmRleCAtIDFdXG4gICAgICAgIHZhciBuZXh0ID0gZGF0YVtpbmRleF1cbiAgICAgICAgXG4gICAgICAgIGlmIChwcmV2ICYmIG5leHQpIHtcbiAgICAgICAgICAgIHZhciBzbG9wZSA9IChuZXh0LnkgLSBwcmV2LnkpIC8gKG5leHQueCAtIHByZXYueClcbiAgICAgICAgICAgIHZhciBpbnRlcnBvbGF0ZWRWYWx1ZSA9IHByZXYueSArICh4VmFsdWUgLSBwcmV2LngpICogc2xvcGVcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKGNoYXJ0LmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS5zdGVwcGVkTGluZSAmJiBwcmV2KSB7XG4gICAgICAgICAgICBpbnRlcnBvbGF0ZWRWYWx1ZSA9IHByZXYueVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoaXNOYU4oaW50ZXJwb2xhdGVkVmFsdWUpKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgeVBvc2l0aW9uID0geVNjYWxlLmdldFBpeGVsRm9yVmFsdWUoaW50ZXJwb2xhdGVkVmFsdWUpXG4gICAgICAgIFxuICAgICAgICAvLyBkbyBub3QgaW50ZXJwb2xhdGUgdmFsdWVzIG91dHNpZGUgb2YgdGhlIGF4aXMgbGltaXRzXG4gICAgICAgIGlmIChpc05hTih5UG9zaXRpb24pKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBjcmVhdGUgYSAnZmFrZScgZXZlbnQgcG9pbnRcbiAgICAgICAgXG4gICAgICAgIHZhciBmYWtlUG9pbnQgPSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhbHVlOiBpbnRlcnBvbGF0ZWRWYWx1ZSxcbiAgICAgICAgICAgIHhWYWx1ZTogeFZhbHVlLFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0b29sdGlwUG9zaXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9kZWxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXNWYWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX21vZGVsOiB7XG4gICAgICAgICAgICAgICAgeDogZS54LFxuICAgICAgICAgICAgICAgIHk6IHlQb3NpdGlvblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9kYXRhc2V0SW5kZXg6IGRhdGFzZXRJbmRleCxcbiAgICAgICAgICAgIF9pbmRleDogaXRlbXMubGVuZ3RoLFxuICAgICAgICAgICAgX3hTY2FsZToge1xuICAgICAgICAgICAgICAgIGdldExhYmVsRm9ySW5kZXg6IGZ1bmN0aW9uIChpbmR4KSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBsZXQgeFZhbHVlOiBudW1iZXIgPSBpdGVtc1tpbmR4XS54VmFsdWVcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHhWYWx1ZSA9IHhWYWx1ZS50b1ByZWNpc2lvbig1KSBhcyBhbnlcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB4VmFsdWVcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF95U2NhbGU6IHtcbiAgICAgICAgICAgICAgICBnZXRMYWJlbEZvckluZGV4OiBmdW5jdGlvbiAoaW5keCkge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gaXRlbXNbaW5keF0udmFsdWUudG9QcmVjaXNpb24oNSlcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2NoYXJ0OiBjaGFydFxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGl0ZW1zLnB1c2goZmFrZVBvaW50KVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgLy8gYWRkIG90aGVyLCBub3QgaW50ZXJwb2xhdGVkLCBpdGVtc1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgeEl0ZW1zID0gQ2hhcnQuSW50ZXJhY3Rpb24ubW9kZXMueChjaGFydCwgZSwgb3B0aW9ucylcbiAgICBcbiAgICB4SXRlbXMuZm9yRWFjaCgoaXRlbSwgaW5kZXgsIGFycmF5KSA9PiB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgaWYgKCFjaGFydC5kYXRhLmRhdGFzZXRzW2l0ZW0uX2RhdGFzZXRJbmRleF0uaW50ZXJwb2xhdGUpIHtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goaXRlbSlcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9KVxuICAgIFxuICAgIFxuICAgIFxuICAgIHJldHVybiBpdGVtc1xufVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL1VJQ29yZS9VSVZpZXdDb250cm9sbGVyLnRzXCIgLz5cbi8vLzxyZWZlcmVuY2UgcGF0aD1cIlVJQ29yZS9VSVRleHRWaWV3LnRzXCIvPlxuXG5cblxuXG5cbmNsYXNzIEdFVEVMRUNWaWV3Q29udHJvbGxlciBleHRlbmRzIFVJVmlld0NvbnRyb2xsZXIge1xuICAgIFxuICAgIFxuICAgIHByaXZhdGUgdGl0bGVMYWJlbDogVUlUZXh0Vmlld1xuICAgIHByaXZhdGUgaW5wdXRUZXh0QXJlYTogVUlUZXh0QXJlYVxuICAgIFxuICAgIFxuICAgIHByaXZhdGUgbG9hZERhdGFCdXR0b246IENCQnV0dG9uXG4gICAgY2hhcnRWaWV3OiBVSVZpZXdcbiAgICBjaGFydDogYW55XG4gICAgcHJpdmF0ZSByZXN1bHRzTGFiZWw6IFVJVmlld1xuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGNvbnN0cnVjdG9yKHZpZXcpIHtcbiAgICAgICAgXG4gICAgICAgIC8vIENhbGxpbmcgc3VwZXJcbiAgICAgICAgc3VwZXIodmlldylcbiAgICAgICAgXG4gICAgICAgIC8vIENvZGUgZm9yIGZ1cnRoZXIgc2V0dXAgaWYgbmVjZXNzYXJ5XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBsb2FkSW50cm9zcGVjdGlvblZhcmlhYmxlcygpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyLmxvYWRJbnRyb3NwZWN0aW9uVmFyaWFibGVzKClcbiAgICAgICAgdGhpcy5zdXBlcmNsYXNzID0gVUlWaWV3Q29udHJvbGxlclxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgc3RhdGljIHJlYWRvbmx5IHJvdXRlQ29tcG9uZW50TmFtZSA9IFwiZml0X2Z1blwiXG4gICAgXG4gICAgc3RhdGljIHJlYWRvbmx5IFBhcmFtZXRlcklkZW50aWZpZXJOYW1lID0geyBcIklEXCI6IFwiSURcIiB9XG4gICAgXG4gICAgXG4gICAgbG9hZFN1YnZpZXdzKCkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy52aWV3LmJhY2tncm91bmRDb2xvciA9IFVJQ29sb3Iud2hpdGVDb2xvclxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMudGl0bGVMYWJlbCA9IG5ldyBVSVRleHRWaWV3KHRoaXMudmlldy5lbGVtZW50SUQgKyBcIlRpdGxlTGFiZWxcIiwgVUlUZXh0Vmlldy50eXBlLmhlYWRlcjMpXG4gICAgICAgIHRoaXMudGl0bGVMYWJlbC50ZXh0QWxpZ25tZW50ID0gVUlUZXh0Vmlldy50ZXh0QWxpZ25tZW50LmxlZnRcbiAgICAgICAgdGhpcy50aXRsZUxhYmVsLm5hdGl2ZVNlbGVjdGlvbkVuYWJsZWQgPSBOT1xuICAgICAgICB0aGlzLnRpdGxlTGFiZWwuaXNTaW5nbGVMaW5lID0gTk9cbiAgICAgICAgdGhpcy52aWV3LmFkZFN1YnZpZXcodGhpcy50aXRsZUxhYmVsKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuaW5wdXRUZXh0QXJlYSA9IG5ldyBVSVRleHRBcmVhKHRoaXMudmlldy5lbGVtZW50SUQgKyBcIklucHV0VGV4dEFyZWFcIilcbiAgICAgICAgdGhpcy5pbnB1dFRleHRBcmVhLnBsYWNlaG9sZGVyVGV4dCA9IFwiSW5wdXQgeW91ciBkYXRhIGhlcmUuXCJcbiAgICAgICAgdGhpcy5pbnB1dFRleHRBcmVhLmNoYW5nZXNPZnRlbiA9IFlFU1xuICAgICAgICB0aGlzLnZpZXcuYWRkU3Vidmlldyh0aGlzLmlucHV0VGV4dEFyZWEpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5sb2FkRGF0YUJ1dHRvbiA9IG5ldyBDQkJ1dHRvbigpXG4gICAgICAgIHRoaXMubG9hZERhdGFCdXR0b24udGl0bGVMYWJlbC50ZXh0ID0gXCJMb2FkIGRhdGFcIlxuICAgICAgICB0aGlzLnZpZXcuYWRkU3Vidmlldyh0aGlzLmxvYWREYXRhQnV0dG9uKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5sb2FkRGF0YUJ1dHRvbi5lbmFibGVkID0gTk9cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5yZXN1bHRzTGFiZWwgPSBuZXcgVUlWaWV3KClcbiAgICAgICAgdGhpcy5yZXN1bHRzTGFiZWwuaW5uZXJIVE1MID0gXCJSZXN1bHRzXCJcbiAgICAgICAgdGhpcy5yZXN1bHRzTGFiZWwuaGlkZGVuID0gWUVTXG4gICAgICAgIHRoaXMudmlldy5hZGRTdWJ2aWV3KHRoaXMucmVzdWx0c0xhYmVsKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY2hhcnRWaWV3ID0gbmV3IFVJVmlldyhcIlJlc3VsdERhdGFDaGFydFwiLCBuaWwsIFwiY2FudmFzXCIpXG4gICAgICAgIHRoaXMuY2hhcnRWaWV3LmhpZGRlbiA9IFlFU1xuICAgICAgICB0aGlzLnZpZXcuYWRkU3Vidmlldyh0aGlzLmNoYXJ0VmlldylcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLmlucHV0VGV4dEFyZWEuYWRkQ29udHJvbEV2ZW50VGFyZ2V0LlRleHRDaGFuZ2UgPSAoc2VuZGVyLCBldmVudCkgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKHNlbmRlcik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMudmlldy5zZXROZWVkc0xheW91dFVwVG9Sb290VmlldygpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMubG9hZERhdGFCdXR0b24uZW5hYmxlZCA9IElTKHRoaXMuaW5wdXRUZXh0QXJlYS50ZXh0KVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY2hhcnRWaWV3LnZpZXdIVE1MRWxlbWVudC5nZXRDb250ZXh0KFwiMmRcIilcbiAgICAgICAgXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy5jaGFydCA9IG5ldyBDaGFydChjdHgsIHtcbiAgICAgICAgICAgIC8vIFRoZSB0eXBlIG9mIGNoYXJ0IHdlIHdhbnQgdG8gY3JlYXRlXG4gICAgICAgICAgICAvL3R5cGU6IFwibGluZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJzY2F0dGVyXCIsXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFRoZSBkYXRhIGZvciBvdXIgZGF0YXNldFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIC8vbGFiZWxzOiBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnXSxcbiAgICAgICAgICAgICAgICBkYXRhc2V0czogW1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiUmVzdWx0IHBvaW50c1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lVGVuc2lvbjogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYmFja2dyb3VuZENvbG9yOiBVSUNvbG9yLnRyYW5zcGFyZW50Q29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogXCJyZ2IoMTI1LCAxMTUsIDI1MilcIiAvLyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZGF0YTogW3sgeDogMCwgeTogMCB9LCB7IHg6IDIsIHk6IDEwIH0sIHsgeDogNSwgeTogNSB9LCB7IHg6IDcsIHk6IDIgfSwgeyB4OiA4LCB5OiAyMCB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB4OiAxMSwgeTogNDUgfV1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiUmVzdWx0IGxpbmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZVRlbnNpb246IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiKDI1NSwgOTksIDEzMilcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBcInJnYigyNTUsIDk5LCAxMzIpXCIgLy8sXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2RhdGE6IFt7IHg6IDAsIHk6IDAgfSwgeyB4OiAyLCB5OiAxMCB9LCB7IHg6IDUsIHk6IDUgfSwgeyB4OiA3LCB5OiAyIH0sIHsgeDogOCwgeTogMjAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8geDogMTEsIHk6IDQ1IH1dXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDb25maWd1cmF0aW9uIG9wdGlvbnMgZ28gaGVyZVxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGZpbGw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGxpbmVUZW5zaW9uOiAwLFxuICAgICAgICAgICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgICAgICAgICB4OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImxpbmVhclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IFwiYm90dG9tXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJsb2dhcml0aG1pY1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IFwiYm90dG9tXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgeUF4ZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImxvZ2FyaXRobWljXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXg6IDEwMDAwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUsIGluZGV4LCB2YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gMTAwMDAwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIjFNXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gMTAwMDAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiMTAwS1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IDEwMDAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiMTBLXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gMTAwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIjFLXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gMTAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiMTAwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIxMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIxXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIjBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcHM6IHtcbiAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJpbnRlcnBvbGF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY3Q6IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBsdWdpbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgY3Jvc3NoYWlyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwiI0Y2NlwiLCAgLy8gY3Jvc3NoYWlyIGxpbmUgY29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSAgICAgICAgLy8gY3Jvc3NoYWlyIGxpbmUgd2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzeW5jOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSwgICAgICAgICAgICAvLyBlbmFibGUgdHJhY2UgbGluZSBzeW5jaW5nIHdpdGggb3RoZXIgY2hhcnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXA6IDEsICAgICAgICAgICAgICAgICAvLyBjaGFydCBncm91cFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1cHByZXNzVG9vbHRpcHM6IGZhbHNlICAgLy8gc3VwcHJlc3MgdG9vbHRpcHMgd2hlbiBzaG93aW5nIGEgc3luY2VkIHRyYWNlclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHpvb206IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBOTywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVuYWJsZSB6b29taW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgem9vbWJveEJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDY2LDEzMywyNDQsMC4yKVwiLCAgICAgLy8gYmFja2dyb3VuZCBjb2xvciBvZiB6b29tIGJveFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvb21ib3hCb3JkZXJDb2xvcjogXCIjNDhGXCIsICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJvcmRlciBjb2xvciBvZiB6b29tIGJveFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvb21CdXR0b25UZXh0OiBcIlJlc2V0IFpvb21cIiwgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlc2V0IHpvb20gYnV0dG9uIHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB6b29tQnV0dG9uQ2xhc3M6IFwicmVzZXQtem9vbVwiICAgICAgICAgICAgICAgICAgICAgIC8vIHJlc2V0IHpvb20gYnV0dG9uIGNsYXNzXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlWm9vbTogZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHsgICAgICAgICAgICAgICAgICAvLyBjYWxsZWQgYmVmb3JlIHpvb20sIHJldHVybiBmYWxzZSB0byBwcmV2ZW50IHpvb21cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyWm9vbTogZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHsgICAgICAgICAgICAgICAgICAgLy8gY2FsbGVkIGFmdGVyIHpvb21cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gcmVzcG9uc2l2ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgLy8gbWFpbnRhaW5Bc3BlY3RSYXRpbzogZmFsc2UsXG4gICAgICAgICAgICAgICAgLy8gc2hvd1NjYWxlOiB0cnVlXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfSlcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLmxvYWREYXRhQnV0dG9uLmFkZENvbnRyb2xFdmVudFRhcmdldC5FbnRlckRvd24uUG9pbnRlclVwSW5zaWRlID0gYXN5bmMgKHNlbmRlciwgZXZlbnQpID0+IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhzZW5kZXIpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBDQkRpYWxvZ1ZpZXdTaG93ZXIuc2hvd0FjdGlvbkluZGljYXRvckRpYWxvZyhcIkxvYWRpbmcuXCIpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RyaW5nU29ja2V0Q2xpZW50UmVzdWx0ID0gYXdhaXQgU29ja2V0Q2xpZW50LlBlcmZvcm1GaXRGdW4oe1xuICAgICAgICAgICAgICAgICAgICBpbnB1dERhdGE6IHRoaXMuaW5wdXRUZXh0QXJlYS50ZXh0XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoSVMoc3RyaW5nU29ja2V0Q2xpZW50UmVzdWx0LmVycm9yUmVzdWx0KSkge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coc3RyaW5nU29ja2V0Q2xpZW50UmVzdWx0LmVycm9yUmVzdWx0KVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgQ0JEaWFsb2dWaWV3U2hvd2VyLmFsZXJ0KFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJGYWlsZWQgdG8gYW5hbHl6ZSBkYXRhLiBcIiArIEpTT04uc3RyaW5naWZ5KHN0cmluZ1NvY2tldENsaWVudFJlc3VsdC5lcnJvclJlc3VsdClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgQ0JEaWFsb2dWaWV3U2hvd2VyLmhpZGVBY3Rpb25JbmRpY2F0b3JEaWFsb2coKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBKU09OLnBhcnNlKHN0cmluZ1NvY2tldENsaWVudFJlc3VsdC5yZXN1bHQpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhyZXN1bHQpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bHRzTGFiZWwuaW5uZXJIVE1MID0gRklSU1QocmVzdWx0LnJlc3VsdEhUTUxTdHJpbmcsIFwiXCIpICtcbiAgICAgICAgICAgICAgICAgICAgSUYoSVNfTk9UKHJlc3VsdC5yZXN1bHRIVE1MU3RyaW5nKSkoUkVUVVJORVIoXG4gICAgICAgICAgICAgICAgICAgICAgICBgUmFkaXVzOiAkeyByZXN1bHQuUmFkaXVzIH0gYmV0YTogJHsgcmVzdWx0LmJldGEgfSBzaWdtYV9BZWZmOiAkeyByZXN1bHQuc2lnbWFfQWVmZiB9YFxuICAgICAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgICAgICAgICAuRUxTRShSRVRVUk5FUihcIlwiKSlcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zdCBwb2ludFBvaW50cyA9IHRoaXMucG9pbnRPYmplY3RzRnJvbVZhbHVlcyhyZXN1bHQueHBsb3RfbXJrLCByZXN1bHQueXBsb3RfbXJrKVxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVQb2ludHMgPSB0aGlzLnBvaW50T2JqZWN0c0Zyb21WYWx1ZXMocmVzdWx0LnhwbG90X2xpbmUsIHJlc3VsdC55cGxvdF9saW5lKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1swXS5kYXRhID0gcG9pbnRQb2ludHNcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbMF0uc2hvd0xpbmUgPSBOT1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1sxXS5kYXRhID0gbGluZVBvaW50c1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1sxXS5zaG93TGluZSA9IFlFU1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1sxXS5wb2ludFJhZGl1cyA9IDBcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbMV0uaW50ZXJwb2xhdGUgPSBZRVNcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJ0Lm9wdGlvbnMuc2NhbGVzLnhBeGVzWzBdLnNjYWxlTGFiZWwuZGlzcGxheSA9IHRydWVcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJ0Lm9wdGlvbnMuc2NhbGVzLnhBeGVzWzBdLnNjYWxlTGFiZWwubGFiZWxTdHJpbmcgPSBcIlwiICsgRklSU1QocmVzdWx0LnhBeGlzVW5pdCwgXCJcIilcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJ0Lm9wdGlvbnMuc2NhbGVzLnlBeGVzWzBdLnNjYWxlTGFiZWwuZGlzcGxheSA9IHRydWVcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJ0Lm9wdGlvbnMuc2NhbGVzLnlBeGVzWzBdLnNjYWxlTGFiZWwubGFiZWxTdHJpbmcgPSBcIlwiICsgRklSU1QocmVzdWx0LnlBeGlzVW5pdCwgXCJcIilcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdHNMYWJlbC5oaWRkZW4gPSBOT1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhcnRWaWV3LmhpZGRlbiA9IE5PXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFydC51cGRhdGUoKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXROZWVkc0xheW91dFVwVG9Sb290VmlldygpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhleGNlcHRpb24pXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgQ0JEaWFsb2dWaWV3U2hvd2VyLmFsZXJ0KFwiRmFpbGVkIHRvIGRpc3BsYXkgcmVzdWx0cy4gXCIgKyBKU09OLnN0cmluZ2lmeShleGNlcHRpb24pKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBDQkRpYWxvZ1ZpZXdTaG93ZXIuaGlkZUFjdGlvbkluZGljYXRvckRpYWxvZygpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgcHJpdmF0ZSBwb2ludE9iamVjdHNGcm9tVmFsdWVzKHhWYWx1ZXMsIHlWYWx1ZXMpIHtcbiAgICAgICAgXG4gICAgICAgIHZhciByZXN1bHRQb2ludHM6IGFueVtdID0gW11cbiAgICAgICAgXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeFZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgeCA9IHhWYWx1ZXNbaV1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIHkgPSB5VmFsdWVzW2ldXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJlc3VsdFBvaW50cy5wdXNoKHsgeDogeCwgeTogeSB9KVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHRQb2ludHNcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGFzeW5jIGhhbmRsZVJvdXRlKHJvdXRlOiBVSVJvdXRlKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci5oYW5kbGVSb3V0ZShyb3V0ZSlcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGlucXVpcnlDb21wb25lbnQgPSByb3V0ZS5jb21wb25lbnRXaXRoVmlld0NvbnRyb2xsZXIoR0VURUxFQ1ZpZXdDb250cm9sbGVyKVxuICAgICAgICBcbiAgICAgICAgdGhpcy50aXRsZUxhYmVsLnRleHQgPSBcIkVudGVyIHlvdXIgZGF0YSBhbmQgcHJlc3MgdGhlIGxvYWQgYnV0dG9uLlwiXG4gICAgICAgIFxuICAgICAgICByb3V0ZS5kaWRjb21wbGV0ZUNvbXBvbmVudChpbnF1aXJ5Q29tcG9uZW50KVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgbGF5b3V0Vmlld3NNYW51YWxseSgpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyLmxheW91dFZpZXdzTWFudWFsbHkoKVxuICAgICAgICBcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IFJvb3RWaWV3Q29udHJvbGxlci5wYWRkaW5nTGVuZ3RoXG4gICAgICAgIGNvbnN0IGxhYmVsSGVpZ2h0ID0gcGFkZGluZyAqIDEuMjVcbiAgICAgICAgXG4gICAgICAgIC8vIFZpZXcgYm91bmRzXG4gICAgICAgIHZhciBib3VuZHMgPSB0aGlzLnZpZXcuYm91bmRzXG4gICAgICAgIFxuICAgICAgICB0aGlzLnZpZXcuc2V0UGFkZGluZ3MoMCwgMCwgcGFkZGluZywgMClcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy50aXRsZUxhYmVsLmZyYW1lID0gYm91bmRzLnJlY3RhbmdsZVdpdGhJbnNldHMocGFkZGluZywgcGFkZGluZywgMCwgcGFkZGluZylcbiAgICAgICAgLnJlY3RhbmdsZVdpdGhIZWlnaHQodGhpcy50aXRsZUxhYmVsLmludHJpbnNpY0NvbnRlbnRIZWlnaHQoYm91bmRzLndpZHRoIC0gcGFkZGluZyAqIDIpKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5pbnB1dFRleHRBcmVhLmZyYW1lID0gdGhpcy50aXRsZUxhYmVsLmZyYW1lLnJlY3RhbmdsZUZvck5leHRSb3coXG4gICAgICAgICAgICBwYWRkaW5nICogMC4yNSxcbiAgICAgICAgICAgIHRoaXMuaW5wdXRUZXh0QXJlYS5pbnRyaW5zaWNDb250ZW50SGVpZ2h0KHRoaXMudGl0bGVMYWJlbC5mcmFtZS53aWR0aCkgKyA1XG4gICAgICAgIClcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLmxvYWREYXRhQnV0dG9uLmZyYW1lID0gdGhpcy5pbnB1dFRleHRBcmVhLmZyYW1lLnJlY3RhbmdsZUZvck5leHRSb3cocGFkZGluZywgbGFiZWxIZWlnaHQgKiAyKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5sb2FkRGF0YUJ1dHRvbi5zZXRNYXJnaW5zKDAsIDAsIHBhZGRpbmcsIDApXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5yZXN1bHRzTGFiZWwuZnJhbWUgPSB0aGlzLmxvYWREYXRhQnV0dG9uLmZyYW1lLnJlY3RhbmdsZUZvck5leHRSb3cocGFkZGluZylcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLmNoYXJ0Vmlldy5mcmFtZSA9IHRoaXMucmVzdWx0c0xhYmVsLmZyYW1lLnJlY3RhbmdsZUZvck5leHRSb3coXG4gICAgICAgICAgICBwYWRkaW5nLFxuICAgICAgICAgICAgdGhpcy5sb2FkRGF0YUJ1dHRvbi5mcmFtZS53aWR0aCAqIDAuNVxuICAgICAgICApXG4gICAgICAgIC8vLnJlY3RhbmdsZVdpdGhJbnNldHMocGFkZGluZyAqIDUgKiAwLCBwYWRkaW5nICogNSwgMCwgMClcbiAgICAgICAgLy8ucmVjdGFuZ2xlQnlBZGRpbmdYKC1wYWRkaW5nKVxuICAgICAgICBcbiAgICAgICAgLy90aGlzLmNoYXJ0Vmlldy5zZXRQYWRkaW5nKHBhZGRpbmcpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5jaGFydFZpZXcuc2V0TWF4U2l6ZXModGhpcy5jaGFydFZpZXcuZnJhbWUuaGVpZ2h0LCB0aGlzLmNoYXJ0Vmlldy5mcmFtZS53aWR0aClcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgaW50cmluc2ljVmlld0NvbnRlbnRIZWlnaHQoY29uc3RyYWluaW5nV2lkdGg6IG51bWJlciA9IDApOiBudW1iZXIge1xuICAgICAgICBcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IFJvb3RWaWV3Q29udHJvbGxlci5wYWRkaW5nTGVuZ3RoXG4gICAgICAgIGNvbnN0IGxhYmVsSGVpZ2h0ID0gcGFkZGluZyAqIDEuNVxuICAgICAgICBcbiAgICAgICAgdmFyIHJlc3VsdCA9IHBhZGRpbmcgKyB0aGlzLnRpdGxlTGFiZWwuaW50cmluc2ljQ29udGVudEhlaWdodChjb25zdHJhaW5pbmdXaWR0aCkgKyBwYWRkaW5nICogMC4yNSArXG4gICAgICAgICAgICBsYWJlbEhlaWdodCAqIDIgKyBwYWRkaW5nICogMC41ICsgcGFkZGluZyArXG4gICAgICAgICAgICB0aGlzLmlucHV0VGV4dEFyZWEuaW50cmluc2ljQ29udGVudEhlaWdodChjb25zdHJhaW5pbmdXaWR0aClcbiAgICAgICAgXG4gICAgICAgIGlmIChJU19OT1QodGhpcy5jaGFydFZpZXcuaGlkZGVuKSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgKyBwYWRkaW5nICsgKGNvbnN0cmFpbmluZ1dpZHRoIC0gcGFkZGluZyAqIDIpICogMC41ICsgcGFkZGluZyArIGxhYmVsSGVpZ2h0ICogMlxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbn1cblxuXG4vLyBAdHMtaWdub3JlXG5DaGFydC5JbnRlcmFjdGlvbi5tb2Rlc1tcImludGVycG9sYXRlXCJdID0gZnVuY3Rpb24gKGNoYXJ0LCBlLCBvcHRpb25zKSB7XG4gICAgXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBoYXMgYSBzZXBhcmF0ZSBsaWNlbnNlXG4gICAgXG4gICAgLy8gTUlUIExpY2Vuc2VcbiAgICAvL1xuICAgIC8vIENvcHlyaWdodCAoYykgMjAxOCBBYmVsIEhlaW5zYnJvZWtcbiAgICAvL1xuICAgIC8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAgICAvLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gICAgLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICAgIC8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAgICAvLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAgICAvLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICAgIC8vXG4gICAgLy8gICAgIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuICAgIC8vIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gICAgLy9cbiAgICAvLyAgICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICAgIC8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICAgIC8vICAgICBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAgICAvLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gICAgLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAgICAvLyAgICAgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAgICAvLyBTT0ZUV0FSRS5cbiAgICBcbiAgICB2YXIgaXRlbXMgPSBbXVxuICAgIFxuICAgIGZvciAodmFyIGRhdGFzZXRJbmRleCA9IDA7IGRhdGFzZXRJbmRleCA8IGNoYXJ0LmRhdGEuZGF0YXNldHMubGVuZ3RoOyBkYXRhc2V0SW5kZXgrKykge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIC8vIGNoZWNrIGZvciBpbnRlcnBvbGF0ZSBzZXR0aW5nXG4gICAgICAgIGlmICghY2hhcnQuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLmludGVycG9sYXRlKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleClcbiAgICAgICAgLy8gZG8gbm90IGludGVycG9sYXRlIGhpZGRlbiBjaGFydHNcbiAgICAgICAgaWYgKG1ldGEuaGlkZGVuKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdmFyIHhTY2FsZSA9IGNoYXJ0LnNjYWxlc1ttZXRhLnhBeGlzSURdXG4gICAgICAgIHZhciB5U2NhbGUgPSBjaGFydC5zY2FsZXNbbWV0YS55QXhpc0lEXVxuICAgICAgICBcbiAgICAgICAgdmFyIHhWYWx1ZSA9IHhTY2FsZS5nZXRWYWx1ZUZvclBpeGVsKGUueClcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB2YXIgZGF0YSA9IGNoYXJ0LmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS5kYXRhXG4gICAgICAgIFxuICAgICAgICB2YXIgaW5kZXggPSBkYXRhLmZpbmRJbmRleChmdW5jdGlvbiAobykge1xuICAgICAgICAgICAgcmV0dXJuIG8ueCA+PSB4VmFsdWVcbiAgICAgICAgfSlcbiAgICAgICAgXG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAvLyBsaW5lYXIgaW50ZXJwb2xhdGUgdmFsdWVcbiAgICAgICAgdmFyIHByZXYgPSBkYXRhW2luZGV4IC0gMV1cbiAgICAgICAgdmFyIG5leHQgPSBkYXRhW2luZGV4XVxuICAgICAgICBcbiAgICAgICAgaWYgKHByZXYgJiYgbmV4dCkge1xuICAgICAgICAgICAgdmFyIHNsb3BlID0gKG5leHQueSAtIHByZXYueSkgLyAobmV4dC54IC0gcHJldi54KVxuICAgICAgICAgICAgdmFyIGludGVycG9sYXRlZFZhbHVlID0gcHJldi55ICsgKHhWYWx1ZSAtIHByZXYueCkgKiBzbG9wZVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoY2hhcnQuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLnN0ZXBwZWRMaW5lICYmIHByZXYpIHtcbiAgICAgICAgICAgIGludGVycG9sYXRlZFZhbHVlID0gcHJldi55XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChpc05hTihpbnRlcnBvbGF0ZWRWYWx1ZSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciB5UG9zaXRpb24gPSB5U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShpbnRlcnBvbGF0ZWRWYWx1ZSlcbiAgICAgICAgXG4gICAgICAgIC8vIGRvIG5vdCBpbnRlcnBvbGF0ZSB2YWx1ZXMgb3V0c2lkZSBvZiB0aGUgYXhpcyBsaW1pdHNcbiAgICAgICAgaWYgKGlzTmFOKHlQb3NpdGlvbikpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIGNyZWF0ZSBhICdmYWtlJyBldmVudCBwb2ludFxuICAgICAgICBcbiAgICAgICAgdmFyIGZha2VQb2ludCA9IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFsdWU6IGludGVycG9sYXRlZFZhbHVlLFxuICAgICAgICAgICAgeFZhbHVlOiB4VmFsdWUsXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRvb2x0aXBQb3NpdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb2RlbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhhc1ZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfbW9kZWw6IHtcbiAgICAgICAgICAgICAgICB4OiBlLngsXG4gICAgICAgICAgICAgICAgeTogeVBvc2l0aW9uXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2RhdGFzZXRJbmRleDogZGF0YXNldEluZGV4LFxuICAgICAgICAgICAgX2luZGV4OiBpdGVtcy5sZW5ndGgsXG4gICAgICAgICAgICBfeFNjYWxlOiB7XG4gICAgICAgICAgICAgICAgZ2V0TGFiZWxGb3JJbmRleDogZnVuY3Rpb24gKGluZHgpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGxldCB4VmFsdWU6IG51bWJlciA9IGl0ZW1zW2luZHhdLnhWYWx1ZVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgeFZhbHVlID0geFZhbHVlLnRvUHJlY2lzaW9uKDUpIGFzIGFueVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHhWYWx1ZVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3lTY2FsZToge1xuICAgICAgICAgICAgICAgIGdldExhYmVsRm9ySW5kZXg6IGZ1bmN0aW9uIChpbmR4KSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBpdGVtc1tpbmR4XS52YWx1ZS50b1ByZWNpc2lvbig1KVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY2hhcnQ6IGNoYXJ0XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaXRlbXMucHVzaChmYWtlUG9pbnQpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICAvLyBhZGQgb3RoZXIsIG5vdCBpbnRlcnBvbGF0ZWQsIGl0ZW1zXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciB4SXRlbXMgPSBDaGFydC5JbnRlcmFjdGlvbi5tb2Rlcy54KGNoYXJ0LCBlLCBvcHRpb25zKVxuICAgIFxuICAgIHhJdGVtcy5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyYXkpID0+IHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpZiAoIWNoYXJ0LmRhdGEuZGF0YXNldHNbaXRlbS5fZGF0YXNldEluZGV4XS5pbnRlcnBvbGF0ZSkge1xuICAgICAgICAgICAgaXRlbXMucHVzaChpdGVtKVxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH0pXG4gICAgXG4gICAgXG4gICAgXG4gICAgcmV0dXJuIGl0ZW1zXG59XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vVUlCYXNlQnV0dG9uLnRzXCIgLz5cblxuXG5cbmludGVyZmFjZSBVSUJ1dHRvbkNvbG9yU3BlY2lmaWVyIHtcbiAgICBcbiAgICB0aXRsZUxhYmVsOiBVSUJ1dHRvbkVsZW1lbnRDb2xvclNwZWNpZmllcjtcbiAgICBiYWNrZ3JvdW5kOiBVSUJ1dHRvbkVsZW1lbnRDb2xvclNwZWNpZmllcjtcbiAgICBcbn1cblxuXG5pbnRlcmZhY2UgVUlCdXR0b25FbGVtZW50Q29sb3JTcGVjaWZpZXIge1xuICAgIFxuICAgIG5vcm1hbDogVUlDb2xvcjtcbiAgICBob3ZlcmVkPzogVUlDb2xvcjtcbiAgICBoaWdobGlnaHRlZDogVUlDb2xvcjtcbiAgICBmb2N1c2VkPzogVUlDb2xvcjtcbiAgICBzZWxlY3RlZDogVUlDb2xvcjtcbiAgICBzZWxlY3RlZEFuZEhpZ2hsaWdodGVkPzogVUlDb2xvcjtcbiAgICBcbn1cblxuXG5cbmNsYXNzIFVJQnV0dG9uIGV4dGVuZHMgVUlCYXNlQnV0dG9uIHtcbiAgICBcbiAgICBfY29udGVudFBhZGRpbmc6IGFueVxuICAgIF90aXRsZUxhYmVsOiBVSVRleHRWaWV3XG4gICAgX2ltYWdlVmlldzogVUlJbWFnZVZpZXdcbiAgICBcbiAgICB1c2VzQXV0b21hdGljVGl0bGVGb250U2l6ZSA9IE5PXG4gICAgbWluQXV0b21hdGljRm9udFNpemU6IG51bWJlciA9IG5pbFxuICAgIG1heEF1dG9tYXRpY0ZvbnRTaXplOiBudW1iZXIgPSAyNVxuICAgIFxuICAgIGNvbG9yczogVUlCdXR0b25Db2xvclNwZWNpZmllclxuICAgIFxuICAgIFxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRJRDogc3RyaW5nLCBlbGVtZW50VHlwZT86IHN0cmluZywgdGl0bGVUeXBlID0gVUlUZXh0Vmlldy50eXBlLnNwYW4pIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyKGVsZW1lbnRJRCwgZWxlbWVudFR5cGUsIHsgXCJ0aXRsZVR5cGVcIjogdGl0bGVUeXBlIH0pXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9jbGFzcyA9IFVJQnV0dG9uXG4gICAgICAgIHRoaXMuc3VwZXJjbGFzcyA9IFVJQmFzZUJ1dHRvblxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGluaXRWaWV3KGVsZW1lbnRJRCwgdmlld0hUTUxFbGVtZW50LCBpbml0Vmlld0RhdGE6IHsgdGl0bGVUeXBlOiBzdHJpbmcgfSkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5jbGFzcy5zdXBlcmNsYXNzID0gVUlCYXNlQnV0dG9uXG4gICAgICAgIFxuICAgICAgICAvLyBJbnN0YW5jZSB2YXJpYWJsZXNcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY29sb3JzID0ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aXRsZUxhYmVsOiB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbm9ybWFsOiBVSUNvbG9yLndoaXRlQ29sb3IsXG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0ZWQ6IFVJQ29sb3Iud2hpdGVDb2xvcixcbiAgICAgICAgICAgICAgICBzZWxlY3RlZDogVUlDb2xvci53aGl0ZUNvbG9yXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbm9ybWFsOiBVSUNvbG9yLmJsdWVDb2xvcixcbiAgICAgICAgICAgICAgICBoaWdobGlnaHRlZDogVUlDb2xvci5ncmVlbkNvbG9yLFxuICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBVSUNvbG9yLnJlZENvbG9yXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2ltYWdlVmlldyA9IG5ldyBVSUltYWdlVmlldyhlbGVtZW50SUQgKyBcIkltYWdlVmlld1wiKVxuICAgICAgICB0aGlzLl9pbWFnZVZpZXcuaGlkZGVuID0gWUVTXG4gICAgICAgIHRoaXMuYWRkU3Vidmlldyh0aGlzLmltYWdlVmlldylcbiAgICAgICAgXG4gICAgICAgIHRoaXMuaW1hZ2VWaWV3LmZpbGxNb2RlID0gVUlJbWFnZVZpZXcuZmlsbE1vZGUuYXNwZWN0Rml0SWZMYXJnZXJcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpZiAoSVNfTk9UX05JTChpbml0Vmlld0RhdGEudGl0bGVUeXBlKSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl90aXRsZUxhYmVsID0gbmV3IFVJVGV4dFZpZXcoZWxlbWVudElEICsgXCJUaXRsZUxhYmVsXCIsIGluaXRWaWV3RGF0YS50aXRsZVR5cGUpXG4gICAgICAgICAgICB0aGlzLnRpdGxlTGFiZWwuc3R5bGUud2hpdGVTcGFjZSA9IFwibm93cmFwXCJcbiAgICAgICAgICAgIHRoaXMuYWRkU3Vidmlldyh0aGlzLnRpdGxlTGFiZWwpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC51c2VySW50ZXJhY3Rpb25FbmFibGVkID0gTk9cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLmNvbnRlbnRQYWRkaW5nID0gMTBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuaW1hZ2VWaWV3LnVzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBOT1xuICAgICAgICB0aGlzLnRpdGxlTGFiZWwudGV4dEFsaWdubWVudCA9IFVJVGV4dFZpZXcudGV4dEFsaWdubWVudC5jZW50ZXJcbiAgICAgICAgdGhpcy50aXRsZUxhYmVsLm5hdGl2ZVNlbGVjdGlvbkVuYWJsZWQgPSBOT1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgZ2V0IGNvbnRlbnRQYWRkaW5nKCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnRQYWRkaW5nLmludGVnZXJWYWx1ZVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc2V0IGNvbnRlbnRQYWRkaW5nKGNvbnRlbnRQYWRkaW5nKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLl9jb250ZW50UGFkZGluZyA9IGNvbnRlbnRQYWRkaW5nXG4gICAgICAgIFxuICAgICAgICB0aGlzLnNldE5lZWRzTGF5b3V0KClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIHB1YmxpYyBzZXQgaG92ZXJlZChob3ZlcmVkOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuX2hvdmVyZWQgPSBob3ZlcmVkXG4gICAgICAgIHRoaXMudXBkYXRlQ29udGVudEZvckN1cnJlbnRTdGF0ZSgpXG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBnZXQgaG92ZXJlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hvdmVyZWRcbiAgICB9XG4gICAgXG4gICAgcHVibGljIHNldCBoaWdobGlnaHRlZChoaWdobGlnaHRlZDogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9oaWdobGlnaHRlZCA9IGhpZ2hsaWdodGVkXG4gICAgICAgIHRoaXMudXBkYXRlQ29udGVudEZvckN1cnJlbnRTdGF0ZSgpXG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBnZXQgaGlnaGxpZ2h0ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oaWdobGlnaHRlZFxuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgc2V0IGZvY3VzZWQoZm9jdXNlZDogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9mb2N1c2VkID0gZm9jdXNlZFxuICAgICAgICBpZiAoZm9jdXNlZCkge1xuICAgICAgICAgICAgdGhpcy5mb2N1cygpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJsdXIoKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlQ29udGVudEZvckN1cnJlbnRTdGF0ZSgpXG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBnZXQgZm9jdXNlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZvY3VzZWRcbiAgICB9XG4gICAgXG4gICAgcHVibGljIHNldCBzZWxlY3RlZChzZWxlY3RlZDogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9zZWxlY3RlZCA9IHNlbGVjdGVkXG4gICAgICAgIHRoaXMudXBkYXRlQ29udGVudEZvckN1cnJlbnRTdGF0ZSgpXG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBnZXQgc2VsZWN0ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3RlZFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICB1cGRhdGVDb250ZW50Rm9yQ3VycmVudFN0YXRlKCkge1xuICAgIFxuICAgICAgICB2YXIgdXBkYXRlRnVuY3Rpb246IEZ1bmN0aW9uID0gdGhpcy51cGRhdGVDb250ZW50Rm9yTm9ybWFsU3RhdGVcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWQgJiYgdGhpcy5oaWdobGlnaHRlZCkge1xuICAgICAgICAgICAgdXBkYXRlRnVuY3Rpb24gPSB0aGlzLnVwZGF0ZUNvbnRlbnRGb3JTZWxlY3RlZEFuZEhpZ2hsaWdodGVkU3RhdGVcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICB1cGRhdGVGdW5jdGlvbiA9IHRoaXMudXBkYXRlQ29udGVudEZvclNlbGVjdGVkU3RhdGVcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmZvY3VzZWQpIHtcbiAgICAgICAgICAgIHVwZGF0ZUZ1bmN0aW9uID0gdGhpcy51cGRhdGVDb250ZW50Rm9yRm9jdXNlZFN0YXRlXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5oaWdobGlnaHRlZCkge1xuICAgICAgICAgICAgdXBkYXRlRnVuY3Rpb24gPSB0aGlzLnVwZGF0ZUNvbnRlbnRGb3JIaWdobGlnaHRlZFN0YXRlXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5ob3ZlcmVkKSB7XG4gICAgICAgICAgICB1cGRhdGVGdW5jdGlvbiA9IHRoaXMudXBkYXRlQ29udGVudEZvckhvdmVyZWRTdGF0ZVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoIUlTKHVwZGF0ZUZ1bmN0aW9uKSkge1xuICAgICAgICAgICAgdGhpcy50aXRsZUxhYmVsLnRleHRDb2xvciA9IFVJQ29sb3IubmlsQ29sb3JcbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gVUlDb2xvci5uaWxDb2xvclxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdXBkYXRlRnVuY3Rpb24uY2FsbCh0aGlzKVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLnVwZGF0ZUNvbnRlbnRGb3JDdXJyZW50RW5hYmxlZFN0YXRlKCk7XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICB1cGRhdGVDb250ZW50Rm9yTm9ybWFsU3RhdGUoKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmJhY2tncm91bmRDb2xvciA9IHRoaXMuY29sb3JzLmJhY2tncm91bmQubm9ybWFsXG4gICAgICAgIHRoaXMudGl0bGVMYWJlbC50ZXh0Q29sb3IgPSB0aGlzLmNvbG9ycy50aXRsZUxhYmVsLm5vcm1hbFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgdXBkYXRlQ29udGVudEZvckhvdmVyZWRTdGF0ZSgpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudXBkYXRlQ29udGVudEZvck5vcm1hbFN0YXRlKClcbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLmNvbG9ycy5iYWNrZ3JvdW5kLmhvdmVyZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gdGhpcy5jb2xvcnMuYmFja2dyb3VuZC5ob3ZlcmVkXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLmNvbG9ycy50aXRsZUxhYmVsLmhvdmVyZWQpIHtcbiAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC50ZXh0Q29sb3IgPSB0aGlzLmNvbG9ycy50aXRsZUxhYmVsLmhvdmVyZWRcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgdXBkYXRlQ29udGVudEZvckZvY3VzZWRTdGF0ZSgpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudXBkYXRlQ29udGVudEZvckhvdmVyZWRTdGF0ZSgpXG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5jb2xvcnMuYmFja2dyb3VuZC5mb2N1c2VkKSB7XG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRDb2xvciA9IHRoaXMuY29sb3JzLmJhY2tncm91bmQuZm9jdXNlZFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5jb2xvcnMudGl0bGVMYWJlbC5mb2N1c2VkKSB7XG4gICAgICAgICAgICB0aGlzLnRpdGxlTGFiZWwudGV4dENvbG9yID0gdGhpcy5jb2xvcnMudGl0bGVMYWJlbC5mb2N1c2VkXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHVwZGF0ZUNvbnRlbnRGb3JIaWdobGlnaHRlZFN0YXRlKCkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSB0aGlzLmNvbG9ycy5iYWNrZ3JvdW5kLmhpZ2hsaWdodGVkXG4gICAgICAgIHRoaXMudGl0bGVMYWJlbC50ZXh0Q29sb3IgPSB0aGlzLmNvbG9ycy50aXRsZUxhYmVsLmhpZ2hsaWdodGVkXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICB1cGRhdGVDb250ZW50Rm9yU2VsZWN0ZWRTdGF0ZSgpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gdGhpcy5jb2xvcnMuYmFja2dyb3VuZC5zZWxlY3RlZFxuICAgICAgICB0aGlzLnRpdGxlTGFiZWwudGV4dENvbG9yID0gdGhpcy5jb2xvcnMudGl0bGVMYWJlbC5zZWxlY3RlZFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgdXBkYXRlQ29udGVudEZvclNlbGVjdGVkQW5kSGlnaGxpZ2h0ZWRTdGF0ZSgpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudXBkYXRlQ29udGVudEZvclNlbGVjdGVkU3RhdGUoKVxuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuY29sb3JzLmJhY2tncm91bmQuc2VsZWN0ZWRBbmRIaWdobGlnaHRlZCkge1xuICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSB0aGlzLmNvbG9ycy5iYWNrZ3JvdW5kLnNlbGVjdGVkQW5kSGlnaGxpZ2h0ZWRcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuY29sb3JzLnRpdGxlTGFiZWwuc2VsZWN0ZWRBbmRIaWdobGlnaHRlZCkge1xuICAgICAgICAgICAgdGhpcy50aXRsZUxhYmVsLnRleHRDb2xvciA9IHRoaXMuY29sb3JzLnRpdGxlTGFiZWwuc2VsZWN0ZWRBbmRIaWdobGlnaHRlZFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBzZXQgZW5hYmxlZChlbmFibGVkOiBib29sZWFuKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci5lbmFibGVkID0gZW5hYmxlZFxuICAgICAgICBcbiAgICAgICAgdGhpcy51cGRhdGVDb250ZW50Rm9yQ3VycmVudFN0YXRlKClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGdldCBlbmFibGVkKCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHN1cGVyLmVuYWJsZWRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHVwZGF0ZUNvbnRlbnRGb3JDdXJyZW50RW5hYmxlZFN0YXRlKCkge1xuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuZW5hYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5hbHBoYSA9IDFcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWxwaGEgPSAwLjVcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy51c2VySW50ZXJhY3Rpb25FbmFibGVkID0gdGhpcy5lbmFibGVkXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBhZGRTdHlsZUNsYXNzKHN0eWxlQ2xhc3NOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyLmFkZFN0eWxlQ2xhc3Moc3R5bGVDbGFzc05hbWUpXG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5zdHlsZUNsYXNzTmFtZSAhPSBzdHlsZUNsYXNzTmFtZSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbnRlbnRGb3JDdXJyZW50U3RhdGUuY2FsbCh0aGlzKVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGdldCB0aXRsZUxhYmVsKCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpdGxlTGFiZWxcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGdldCBpbWFnZVZpZXcoKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy5faW1hZ2VWaWV3XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBsYXlvdXRTdWJ2aWV3cygpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyLmxheW91dFN1YnZpZXdzKClcbiAgICBcbiAgICAgICAgdmFyIGJvdW5kcyA9IHRoaXMuYm91bmRzXG4gICAgXG4gICAgICAgIHRoaXMuaG92ZXJUZXh0ID0gdGhpcy50aXRsZUxhYmVsLnRleHRcbiAgICAgICAgXG4gICAgICAgIC8vIEltYWdlIG9ubHkgaWYgdGV4dCBpcyBub3QgcHJlc2VudFxuICAgICAgICBpZiAoSVNfTk9UKHRoaXMuaW1hZ2VWaWV3LmhpZGRlbikgJiYgIUlTKHRoaXMudGl0bGVMYWJlbC50ZXh0KSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VWaWV3LmZyYW1lID0gYm91bmRzXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBUZXh0IG9ubHkgaWYgaW1hZ2UgaXMgbm90IHByZXNlbnRcbiAgICAgICAgaWYgKElTKHRoaXMuaW1hZ2VWaWV3LmhpZGRlbikgJiYgSVModGhpcy50aXRsZUxhYmVsLnRleHQpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciB0aXRsZUVsZW1lbnQgPSB0aGlzLnRpdGxlTGFiZWwudmlld0hUTUxFbGVtZW50XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy50aXRsZUxhYmVsLnN0eWxlLmxlZnQgPSB0aGlzLmNvbnRlbnRQYWRkaW5nXG4gICAgICAgICAgICB0aGlzLnRpdGxlTGFiZWwuc3R5bGUucmlnaHQgPSB0aGlzLmNvbnRlbnRQYWRkaW5nXG4gICAgICAgICAgICAvLyB0aGlzLnRpdGxlTGFiZWwuc3R5bGUubWFyZ2luTGVmdCA9IFwiXCJcbiAgICAgICAgICAgIC8vIHRoaXMudGl0bGVMYWJlbC5zdHlsZS5yaWdodCA9IHRoaXMuY29udGVudFBhZGRpbmdcbiAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC5zdHlsZS50b3AgPSBcIjUwJVwiXG4gICAgICAgICAgICB0aGlzLnRpdGxlTGFiZWwuc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGVZKC01MCUpXCJcbiAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC5mcmFtZSA9IG5ldyBVSVJlY3RhbmdsZShuaWwsIG5pbCwgbmlsLCBuaWwpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICh0aGlzLnVzZXNBdXRvbWF0aWNUaXRsZUZvbnRTaXplKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIGhpZGRlbiA9IHRoaXMudGl0bGVMYWJlbC5oaWRkZW5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLnRpdGxlTGFiZWwuaGlkZGVuID0gWUVTXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy50aXRsZUxhYmVsLmZvbnRTaXplID0gMTVcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLnRpdGxlTGFiZWwuZm9udFNpemUgPSBVSVRleHRWaWV3LmF1dG9tYXRpY2FsbHlDYWxjdWxhdGVkRm9udFNpemUoXG4gICAgICAgICAgICAgICAgICAgIG5ldyBVSVJlY3RhbmdsZShcbiAgICAgICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ib3VuZHMuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgMSAqXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRpdGxlTGFiZWwudmlld0hUTUxFbGVtZW50Lm9mZnNldFdpZHRoXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC5pbnRyaW5zaWNDb250ZW50U2l6ZSgpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRpdGxlTGFiZWwuZm9udFNpemUsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWluQXV0b21hdGljRm9udFNpemUsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWF4QXV0b21hdGljRm9udFNpemVcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy50aXRsZUxhYmVsLmhpZGRlbiA9IGhpZGRlblxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gSW1hZ2UgYW5kIHRleHQgYm90aCBwcmVzZW50XG4gICAgICAgIGlmIChJU19OT1QodGhpcy5pbWFnZVZpZXcuaGlkZGVuKSAmJiBJUyh0aGlzLnRpdGxlTGFiZWwudGV4dCkpIHtcbiAgICBcbiAgICAgICAgICAgIGNvbnN0IGltYWdlU2hhcmVPZldpZHRoID0gMC4yNVxuICAgIFxuICAgICAgICAgICAgYm91bmRzID0gYm91bmRzLnJlY3RhbmdsZVdpdGhJbnNldCh0aGlzLmNvbnRlbnRQYWRkaW5nKVxuICAgIFxuICAgICAgICAgICAgY29uc3QgaW1hZ2VGcmFtZSA9IGJvdW5kcy5jb3B5KClcbiAgICAgICAgICAgIGltYWdlRnJhbWUud2lkdGggPSBib3VuZHMuaGVpZ2h0IC0gdGhpcy5jb250ZW50UGFkZGluZyAqIDAuNVxuICAgICAgICAgICAgdGhpcy5pbWFnZVZpZXcuZnJhbWUgPSBpbWFnZUZyYW1lXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciB0aXRsZUVsZW1lbnQgPSB0aGlzLnRpdGxlTGFiZWwudmlld0hUTUxFbGVtZW50XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC5zdHlsZS5sZWZ0ID0gaW1hZ2VGcmFtZS5tYXgueCArIHRoaXMuY29udGVudFBhZGRpbmdcbiAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC5zdHlsZS5yaWdodCA9IHRoaXMuY29udGVudFBhZGRpbmdcbiAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC5zdHlsZS50b3AgPSBcIjUwJVwiXG4gICAgICAgICAgICB0aGlzLnRpdGxlTGFiZWwuc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGVZKC01MCUpXCJcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHRoaXMudXNlc0F1dG9tYXRpY1RpdGxlRm9udFNpemUpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgaGlkZGVuID0gdGhpcy50aXRsZUxhYmVsLmhpZGRlblxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC5oaWRkZW4gPSBZRVNcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLnRpdGxlTGFiZWwuZm9udFNpemUgPSAxNVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC5mb250U2l6ZSA9IFVJVGV4dFZpZXcuYXV0b21hdGljYWxseUNhbGN1bGF0ZWRGb250U2l6ZShcbiAgICAgICAgICAgICAgICAgICAgbmV3IFVJUmVjdGFuZ2xlKFxuICAgICAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJvdW5kcy5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAxICpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC52aWV3SFRNTEVsZW1lbnQub2Zmc2V0V2lkdGhcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50aXRsZUxhYmVsLmludHJpbnNpY0NvbnRlbnRTaXplKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC5mb250U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5taW5BdXRvbWF0aWNGb250U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXhBdXRvbWF0aWNGb250U2l6ZVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLnRpdGxlTGFiZWwuaGlkZGVuID0gaGlkZGVuXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5hcHBseUNsYXNzZXNBbmRTdHlsZXMoKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgaW5pdFZpZXdTdHlsZVNlbGVjdG9ycygpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuaW5pdFN0eWxlU2VsZWN0b3IoXCIuXCIgKyB0aGlzLnN0eWxlQ2xhc3NOYW1lLCBcImJhY2tncm91bmQtY29sb3I6IGxpZ2h0Ymx1ZTtcIilcbiAgICAgICAgXG4gICAgICAgIC8vIHZhciBzZWxlY3RvcldpdGhvdXRJbWFnZSA9IFwiLlwiICsgdGhpcy5zdHlsZUNsYXNzTmFtZSArIFwiIC5cIiArIHRoaXMuaW1hZ2VWaWV3LnN0eWxlQ2xhc3NOYW1lICsgXCIgKyAuXCIgKyB0aGlzLnRpdGxlTGFiZWwuc3R5bGVDbGFzc05hbWU7XG4gICAgICAgIFxuICAgICAgICAvLyB0aGlzLmluaXRTdHlsZVNlbGVjdG9yKFxuICAgICAgICAvLyAgICAgc2VsZWN0b3JXaXRob3V0SW1hZ2UsXG4gICAgICAgIC8vICAgICBcImxlZnQ6IFwiICsgdGhpcy5jb250ZW50UGFkZGluZyArIFwiO1wiICtcbiAgICAgICAgLy8gICAgIFwicmlnaHQ6IFwiICsgdGhpcy5jb250ZW50UGFkZGluZyArIFwiO1wiICtcbiAgICAgICAgLy8gICAgIFwidG9wOiA1MCU7XCIgK1xuICAgICAgICAvLyAgICAgXCJ0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XCIpO1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG59XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vVUlDb3JlL1VJQnV0dG9uLnRzXCIgLz5cblxuXG5cblxuXG5jbGFzcyBDQkJ1dHRvbiBleHRlbmRzIFVJQnV0dG9uIHtcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50SUQ/OiBzdHJpbmcsIGVsZW1lbnRUeXBlPzogc3RyaW5nKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlcihlbGVtZW50SUQsIGVsZW1lbnRUeXBlKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fY2xhc3MgPSBDQkJ1dHRvblxuICAgICAgICB0aGlzLnN1cGVyY2xhc3MgPSBVSUJ1dHRvblxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgaW5pdFZpZXcoZWxlbWVudElEOiBzdHJpbmcsIHZpZXdIVE1MRWxlbWVudDogSFRNTEVsZW1lbnQsIGluaXRWaWV3RGF0YSkge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIuaW5pdFZpZXcoZWxlbWVudElELCB2aWV3SFRNTEVsZW1lbnQsIGluaXRWaWV3RGF0YSlcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAvL3RoaXMuc3R5bGUuYm9yZGVyUmFkaXVzID0gXCIycHhcIlxuICAgICAgICBcbiAgICAgICAgdGhpcy5zdHlsZS5vdXRsaW5lID0gXCJub25lXCJcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLmNvbG9ycy50aXRsZUxhYmVsLm5vcm1hbCA9IFVJQ29sb3Iud2hpdGVDb2xvclxuICAgICAgICB0aGlzLnNldEJhY2tncm91bmRDb2xvcnNXaXRoTm9ybWFsQ29sb3IoVUlDb2xvci5ibHVlQ29sb3IpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmNvbG9ycy50aXRsZUxhYmVsLnNlbGVjdGVkID0gVUlDb2xvci5ibHVlQ29sb3JcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBzZXRCYWNrZ3JvdW5kQ29sb3JzV2l0aE5vcm1hbENvbG9yKG5vcm1hbEJhY2tncm91bmRDb2xvcjogVUlDb2xvcikge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5jb2xvcnMuYmFja2dyb3VuZC5ub3JtYWwgPSBub3JtYWxCYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY29sb3JzLmJhY2tncm91bmQuaG92ZXJlZCA9IFVJQ29sb3IuY29sb3JXaXRoUkdCQSg0MCwgMTY4LCAxODMpIC8vIG5vcm1hbEJhY2tncm91bmRDb2xvci5jb2xvckJ5TXVsdGlwbHlpbmdSR0IoMC44NSlcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY29sb3JzLmJhY2tncm91bmQuZm9jdXNlZCA9IG5vcm1hbEJhY2tncm91bmRDb2xvciAvLyBub3JtYWxCYWNrZ3JvdW5kQ29sb3IuY29sb3JCeU11bHRpcGx5aW5nUkdCKDAuNSlcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY29sb3JzLmJhY2tncm91bmQuaGlnaGxpZ2h0ZWQgPSBVSUNvbG9yLmNvbG9yV2l0aFJHQkEoNDgsIDE5NiwgMjEyKSAvLyBub3JtYWxCYWNrZ3JvdW5kQ29sb3IuY29sb3JCeU11bHRpcGx5aW5nUkdCKDAuNylcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY29sb3JzLmJhY2tncm91bmQuc2VsZWN0ZWQgPSBVSUNvbG9yLndoaXRlQ29sb3JcbiAgICAgICAgXG4gICAgICAgIHRoaXMudXBkYXRlQ29udGVudEZvckN1cnJlbnRTdGF0ZSgpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICB1cGRhdGVDb250ZW50Rm9yTm9ybWFsU3RhdGUoKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci51cGRhdGVDb250ZW50Rm9yTm9ybWFsU3RhdGUoKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5zZXRCb3JkZXIoMCwgMClcbiAgICAgICAgXG4gICAgICAgIC8vdGhpcy5zdHlsZS5ib3hTaGFkb3cgPSBcIjAgMnB4IDJweCAwIHJnYmEoMCwwLDAsMC4yNClcIlxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgdXBkYXRlQ29udGVudEZvckhvdmVyZWRTdGF0ZSgpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyLnVwZGF0ZUNvbnRlbnRGb3JIb3ZlcmVkU3RhdGUoKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5zZXRCb3JkZXIoMCwgMClcbiAgICAgICAgXG4gICAgICAgIC8vdGhpcy50aXRsZUxhYmVsLnRleHRDb2xvciA9IFVJQ29sb3Iud2hpdGVDb2xvci5jb2xvckJ5TXVsdGlwbHlpbmdSR0IoMC44NSk7XG4gICAgICAgIFxuICAgICAgICAvL3RoaXMuc3R5bGUuYm94U2hhZG93ID0gXCIwIDJweCAycHggMCByZ2JhKDAsMCwwLDAuMTgpXCJcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHVwZGF0ZUNvbnRlbnRGb3JGb2N1c2VkU3RhdGUoKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci51cGRhdGVDb250ZW50Rm9yRm9jdXNlZFN0YXRlKClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2V0Qm9yZGVyKDAsIDEsIFVJQ29sb3IuYmx1ZUNvbG9yKVxuICAgICAgICBcbiAgICAgICAgLy90aGlzLnRpdGxlTGFiZWwudGV4dENvbG9yID0gVUlDb2xvci53aGl0ZUNvbG9yLmNvbG9yQnlNdWx0aXBseWluZ1JHQigwLjg1KTtcbiAgICAgICAgXG4gICAgICAgIC8vdGhpcy5zdHlsZS5ib3hTaGFkb3cgPSBcIjAgMnB4IDJweCAwIHJnYmEoMCwwLDAsMC4xOClcIlxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgdXBkYXRlQ29udGVudEZvckhpZ2hsaWdodGVkU3RhdGUoKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci51cGRhdGVDb250ZW50Rm9ySGlnaGxpZ2h0ZWRTdGF0ZSgpXG4gICAgICAgIFxuICAgICAgICB0aGlzLnNldEJvcmRlcigwLCAwKVxuICAgICAgICBcbiAgICAgICAgLy90aGlzLnRpdGxlTGFiZWwudGV4dENvbG9yID0gVUlDb2xvci53aGl0ZUNvbG9yLmNvbG9yQnlNdWx0aXBseWluZ1JHQigwLjcpO1xuICAgICAgICBcbiAgICAgICAgLy90aGlzLnN0eWxlLmJveFNoYWRvdyA9IFwiMCAycHggMnB4IDAgcmdiYSgwLDAsMCwwLjEyKVwiXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICB1cGRhdGVDb250ZW50Rm9yQ3VycmVudEVuYWJsZWRTdGF0ZSgpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyLnVwZGF0ZUNvbnRlbnRGb3JDdXJyZW50RW5hYmxlZFN0YXRlKClcbiAgICAgICAgXG4gICAgICAgIGlmIChJU19OT1QodGhpcy5lbmFibGVkKSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnRpdGxlTGFiZWwudGV4dENvbG9yID0gbmV3IFVJQ29sb3IoXCIjYWRhZGFkXCIpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gbmV3IFVJQ29sb3IoXCIjZTVlNWU1XCIpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuYWxwaGEgPSAxXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG59XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iLCIvLy88cmVmZXJlbmNlIHBhdGg9XCIuLi9VSUNvcmUvVUlCdXR0b24udHNcIi8+XG5cblxuY2xhc3MgQ0JDaGVja2JveCBleHRlbmRzIFVJVmlldyB7XG4gICAgXG4gICAgXG4gICAgY2hlY2tib3g6IFVJVmlld1xuICAgIHRpdGxlTGFiZWw6IFVJVGV4dFZpZXdcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50SUQ6IHN0cmluZykge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIoZWxlbWVudElELCBuaWwsIFwibGFiZWxcIilcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9jbGFzcyA9IENCQ2hlY2tib3hcbiAgICAgICAgdGhpcy5zdXBlcmNsYXNzID0gVUlWaWV3XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBpbml0VmlldyhlbGVtZW50SUQ6IHN0cmluZywgdmlld0hUTUxFbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIuaW5pdFZpZXcoZWxlbWVudElELCB2aWV3SFRNTEVsZW1lbnQpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5jaGVja2JveCA9IG5ldyBVSVZpZXcoZWxlbWVudElEICsgXCJDaGVja2JveFwiLCBuaWwsIFwiaW5wdXRcIilcbiAgICAgICAgdGhpcy5jaGVja2JveC52aWV3SFRNTEVsZW1lbnQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImNoZWNrYm94XCIpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmFkZFN1YnZpZXcodGhpcy5jaGVja2JveClcbiAgICAgICAgXG4gICAgICAgIHRoaXMudGl0bGVMYWJlbCA9IG5ldyBVSVRleHRWaWV3KGVsZW1lbnRJRCArIFwiVGl0bGVMYWJlbFwiLCBVSVRleHRWaWV3LnR5cGUuc3BhbilcbiAgICAgICAgXG4gICAgICAgIHRoaXMuYWRkU3Vidmlldyh0aGlzLnRpdGxlTGFiZWwpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5jaGVja2JveC51c2VySW50ZXJhY3Rpb25FbmFibGVkID0gTk9cbiAgICAgICAgdGhpcy50aXRsZUxhYmVsLnVzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBOT1xuICAgICAgICBcbiAgICAgICAgdGhpcy50aXRsZUxhYmVsLnN0eWxlLm92ZXJmbG93ID0gXCJ2aXNpYmxlXCJcbiAgICAgICAgdGhpcy50aXRsZUxhYmVsLnN0eWxlLmxpbmVIZWlnaHQgPSBcIjEuNVwiXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIlxuICAgICAgICBcbiAgICAgICAgdGhpcy52aWV3SFRNTEVsZW1lbnQub25jaGFuZ2UgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2VuZENvbnRyb2xFdmVudEZvcktleShDQkNoZWNrYm94LmNvbnRyb2xFdmVudC5TZWxlY3Rpb25DaGFuZ2UsIGV2ZW50KVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgc3RhdGljIGNvbnRyb2xFdmVudCA9IE9iamVjdC5hc3NpZ24oe30sIFVJVmlldy5jb250cm9sRXZlbnQsIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcIlNlbGVjdGlvbkNoYW5nZVwiOiBcIlNlbGVjdGlvbkNoYW5nZVwiXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9KVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGdldCBpc1N0YXRpYygpIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuY2hlY2tib3gudmlld0hUTUxFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcInN0YXRpY0NoZWNrYm94XCIpXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBzZXQgaXNTdGF0aWMoaXNTdGF0aWM6IGJvb2xlYW4pIHtcbiAgICAgICAgXG4gICAgICAgIGlmIChpc1N0YXRpYykge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmNoZWNrYm94LnZpZXdIVE1MRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwic3RhdGljQ2hlY2tib3hcIilcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmNoZWNrYm94LnZpZXdIVE1MRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwic3RhdGljQ2hlY2tib3hcIilcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIGdldCBzZWxlY3RlZCgpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiAodGhpcy5jaGVja2JveC52aWV3SFRNTEVsZW1lbnQgYXMgSFRNTElucHV0RWxlbWVudCkuY2hlY2tlZFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc2V0IHNlbGVjdGVkKHNlbGVjdGVkOiBib29sZWFuKSB7XG4gICAgICAgIFxuICAgICAgICAodGhpcy5jaGVja2JveC52aWV3SFRNTEVsZW1lbnQgYXMgSFRNTElucHV0RWxlbWVudCkuY2hlY2tlZCA9IHNlbGVjdGVkXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBsYXlvdXRTdWJ2aWV3cygpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyLmxheW91dFN1YnZpZXdzKClcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHRpdGxlV2lkdGggPSB0aGlzLmJvdW5kcy53aWR0aCAtIDM1XG4gICAgICAgIHRoaXMudGl0bGVMYWJlbC5zZXRNYXhTaXplcyhuaWwsIHRpdGxlV2lkdGgpXG4gICAgICAgIFxuICAgICAgICB0aGlzLnRpdGxlTGFiZWwudGV4dFByZWZpeCA9IFwiPHNwYW4gc3R5bGU9XFxcInBvc2l0aW9uOiBhYnNvbHV0ZTsgb3ZlcmZsb3c6IGhpZGRlbjsgbGVmdDogMDsgdG9wOiAwO3RleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOyB3aGl0ZS1zcGFjZTogcHJlOyBwYWRkaW5nLWxlZnQ6IDM1cHg7IHdpZHRoOiBcIiArXG4gICAgICAgICAgICB0aXRsZVdpZHRoICsgXCJweDtcXFwiPlwiXG4gICAgICAgIFxuICAgICAgICB0aGlzLnRpdGxlTGFiZWwudGV4dFN1ZmZpeCA9IFwiPC9zcGFuPlwiXG4gICAgICAgIFxuICAgICAgICB0aGlzLmhvdmVyVGV4dCA9IHRoaXMudGl0bGVMYWJlbC50ZXh0LnJlcGxhY2UoXG4gICAgICAgICAgICB0aGlzLnRpdGxlTGFiZWwudGV4dFByZWZpeCxcbiAgICAgICAgICAgIFwiXCJcbiAgICAgICAgKS5yZXBsYWNlKHRoaXMudGl0bGVMYWJlbC50ZXh0U3VmZml4LCBcIlwiKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxufVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9VSUNvcmUvVUlDb2xvci50c1wiIC8+XG5cblxuXG5cblxuY2xhc3MgQ0JDb2xvciBleHRlbmRzIFVJQ29sb3Ige1xuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGNvbnN0cnVjdG9yKHN0cmluZ1ZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyKHN0cmluZ1ZhbHVlKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2NsYXNzID0gQ0JDb2xvclxuICAgICAgICB0aGlzLnN1cGVyY2xhc3MgPSBVSUNvbG9yXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIHN0YXRpYyBnZXQgcHJpbWFyeVRpbnRDb2xvcigpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBuZXcgQ0JDb2xvcihcInJnYmEoNTIsIDEyNywgMjMwLCAxKVwiKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIGdldCBzZWNvbmRhcnlUaW50Q29sb3IoKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbmV3IENCQ29sb3IoXCJyZ2JhKDAsIDE5NiwgMjEyLCAxKVwiKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgc3RhdGljIGdldCBwcmltYXJ5Q29udGVudENvbG9yKCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG5ldyBDQkNvbG9yKFwicmdiKDM1LCAzNSwgMzUpXCIpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBzdGF0aWMgZ2V0IGdyZWVuVGludENvbG9yKCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG5ldyBDQkNvbG9yKFwicmdiYSg1MSwgMTg4LCAxMjUsIDEpXCIpO1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIGdldCByZWRUaW50Q29sb3IoKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbmV3IENCQ29sb3IoXCJyZ2JhKDIzNiwgODgsIDExMSwgMSlcIik7XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbn1cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL0NCQnV0dG9uLnRzXCIgLz5cblxuXG5cbmNsYXNzIENCRmxhdEJ1dHRvbiBleHRlbmRzIENCQnV0dG9uIHtcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBzdGF0aWMgY29sb3JzID0ge1xuICAgICAgICBcbiAgICAgICAgdGl0bGVMYWJlbDoge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBub3JtYWw6IFVJQ29sb3IuYmx1ZUNvbG9yLFxuICAgICAgICAgICAgaGlnaGxpZ2h0ZWQ6IFVJQ29sb3IuYmx1ZUNvbG9yLFxuICAgICAgICAgICAgc2VsZWN0ZWQ6IFVJQ29sb3IuYmx1ZUNvbG9yXG4gICAgICAgICAgICBcbiAgICAgICAgfSxcbiAgICAgICAgYmFja2dyb3VuZDoge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBub3JtYWw6IFVJQ29sb3IudHJhbnNwYXJlbnRDb2xvcixcbiAgICAgICAgICAgIGhvdmVyZWQ6IG5ldyBVSUNvbG9yKFwiI0Y4RjhGOFwiKSxcbiAgICAgICAgICAgIGhpZ2hsaWdodGVkOiBuZXcgVUlDb2xvcihcIiNlYmViZWJcIiksXG4gICAgICAgICAgICBzZWxlY3RlZDogbmV3IFVJQ29sb3IoXCIjZWJlYmViXCIpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgY29uc3RydWN0b3IoZWxlbWVudElEPzogc3RyaW5nLCBlbGVtZW50VHlwZT86IHN0cmluZykge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIoZWxlbWVudElELCBlbGVtZW50VHlwZSlcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2NsYXNzID0gQ0JGbGF0QnV0dG9uXG4gICAgICAgIHRoaXMuc3VwZXJjbGFzcyA9IENCQnV0dG9uXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBpbml0VmlldyhlbGVtZW50SUQ6IHN0cmluZywgdmlld0hUTUxFbGVtZW50OiBIVE1MRWxlbWVudCwgaW5pdFZpZXdEYXRhKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci5pbml0VmlldyhlbGVtZW50SUQsIHZpZXdIVE1MRWxlbWVudCwgaW5pdFZpZXdEYXRhKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5jb2xvcnMgPSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRpdGxlTGFiZWw6IHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBub3JtYWw6IFVJQ29sb3IuYmx1ZUNvbG9yLFxuICAgICAgICAgICAgICAgIGhpZ2hsaWdodGVkOiBVSUNvbG9yLmJsdWVDb2xvcixcbiAgICAgICAgICAgICAgICBzZWxlY3RlZDogVUlDb2xvci5ibHVlQ29sb3JcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbm9ybWFsOiBVSUNvbG9yLnRyYW5zcGFyZW50Q29sb3IsXG4gICAgICAgICAgICAgICAgaG92ZXJlZDogbmV3IFVJQ29sb3IoXCIjRjhGOEY4XCIpLFxuICAgICAgICAgICAgICAgIGhpZ2hsaWdodGVkOiBuZXcgVUlDb2xvcihcIiNlYmViZWJcIiksXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQ6IG5ldyBVSUNvbG9yKFwiI2ViZWJlYlwiKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgc2V0IHRpdGxlTGFiZWxDb2xvcih0aXRsZUxhYmVsQ29sb3I6IFVJQ29sb3IpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLmNvbG9ycy50aXRsZUxhYmVsLm5vcm1hbCA9IHRpdGxlTGFiZWxDb2xvclxuICAgICAgICB0aGlzLmNvbG9ycy50aXRsZUxhYmVsLmhpZ2hsaWdodGVkID0gdGl0bGVMYWJlbENvbG9yXG4gICAgICAgIHRoaXMuY29sb3JzLnRpdGxlTGFiZWwuc2VsZWN0ZWQgPSB0aXRsZUxhYmVsQ29sb3JcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLnVwZGF0ZUNvbnRlbnRGb3JDdXJyZW50U3RhdGUoKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgZ2V0IHRpdGxlTGFiZWxDb2xvcigpIHtcbiAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5jb2xvcnMudGl0bGVMYWJlbC5ub3JtYWxcbiAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgdXBkYXRlQ29udGVudEZvck5vcm1hbFN0YXRlKCkge1xuICAgICAgICBcbiAgICAgICAgVUlCdXR0b24ucHJvdG90eXBlLnVwZGF0ZUNvbnRlbnRGb3JOb3JtYWxTdGF0ZS5jYWxsKHRoaXMpXG4gICAgICAgIFxuICAgICAgICAvL3RoaXMuc3R5bGUuYm94U2hhZG93ID0gXCIwIDJweCAycHggMCByZ2JhKDAsMCwwLDAuMjQpXCJcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHVwZGF0ZUNvbnRlbnRGb3JIb3ZlcmVkU3RhdGUoKSB7XG4gICAgICAgIFxuICAgICAgICBVSUJ1dHRvbi5wcm90b3R5cGUudXBkYXRlQ29udGVudEZvckhvdmVyZWRTdGF0ZS5jYWxsKHRoaXMpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIC8vdGhpcy50aXRsZUxhYmVsLnRleHRDb2xvciA9IFVJQ29sb3Iud2hpdGVDb2xvci5jb2xvckJ5TXVsdGlwbHlpbmdSR0IoMC44NSk7XG4gICAgICAgIFxuICAgICAgICAvL3RoaXMuc3R5bGUuYm94U2hhZG93ID0gXCIwIDJweCAycHggMCByZ2JhKDAsMCwwLDAuMTgpXCI7XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICB1cGRhdGVDb250ZW50Rm9yRm9jdXNlZFN0YXRlKCkge1xuICAgICAgICBcbiAgICAgICAgVUlCdXR0b24ucHJvdG90eXBlLnVwZGF0ZUNvbnRlbnRGb3JGb2N1c2VkU3RhdGUuY2FsbCh0aGlzKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAvL3RoaXMudGl0bGVMYWJlbC50ZXh0Q29sb3IgPSBVSUNvbG9yLndoaXRlQ29sb3IuY29sb3JCeU11bHRpcGx5aW5nUkdCKDAuODUpO1xuICAgICAgICBcbiAgICAgICAgLy90aGlzLnN0eWxlLmJveFNoYWRvdyA9IFwiMCAycHggMnB4IDAgcmdiYSgwLDAsMCwwLjE4KVwiXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICB1cGRhdGVDb250ZW50Rm9ySGlnaGxpZ2h0ZWRTdGF0ZSgpIHtcbiAgICAgICAgXG4gICAgICAgIFVJQnV0dG9uLnByb3RvdHlwZS51cGRhdGVDb250ZW50Rm9ySGlnaGxpZ2h0ZWRTdGF0ZS5jYWxsKHRoaXMpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIC8vdGhpcy50aXRsZUxhYmVsLnRleHRDb2xvciA9IFVJQ29sb3Iud2hpdGVDb2xvci5jb2xvckJ5TXVsdGlwbHlpbmdSR0IoMC43KTtcbiAgICAgICAgXG4gICAgICAgIC8vdGhpcy5zdHlsZS5ib3hTaGFkb3cgPSBcIjAgMnB4IDJweCAwIHJnYmEoMCwwLDAsMC4xMilcIlxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG59XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vVUlDb3JlL1VJVmlldy50c1wiIC8+XG5cblxuXG5cblxuY2xhc3MgUm93VmlldzxDZWxsVHlwZSBleHRlbmRzIFVJVmlldyA9IFVJVmlldz4gZXh0ZW5kcyBVSVZpZXcge1xuICAgIFxuICAgIFxuICAgIF9wcmV2aW91c0xheW91dEJvdW5kczogVUlSZWN0YW5nbGVcbiAgICBfY2VsbHM6IENlbGxUeXBlW11cbiAgICBfY2VsbFdlaWdodHM6IG51bWJlcltdXG4gICAgXG4gICAgcGFkZGluZyA9IDBcbiAgICBfY2VsbFdpZHRoczogbnVtYmVyW11cbiAgICBfcm93SGVpZ2h0ID0gNTBcbiAgICBcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50SUQ/OiBzdHJpbmcsIGNlbGxzOiBDZWxsVHlwZVtdID0gW10sIGNlbGxXaWR0aHM6IG51bWJlcltdID0gW10pIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyKGVsZW1lbnRJRClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2NsYXNzID0gUm93Vmlld1xuICAgICAgICB0aGlzLnN1cGVyY2xhc3MgPSBVSVZpZXdcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2NlbGxzID0gY2VsbHNcbiAgICAgICAgdGhpcy5fY2VsbFdlaWdodHMgPSBjZWxsV2lkdGhzXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBnZXQgY2VsbHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jZWxsc1xuICAgIH1cbiAgICBcbiAgICBcbiAgICBzZXQgY2VsbHMoY2VsbHM6IENlbGxUeXBlW10pIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHByZXZpb3VzQ2VsbHMgPSB0aGlzLmNlbGxzXG4gICAgICAgIFxuICAgICAgICAvLyBUaGUgY2VsbHMgYXJlIGFkZGVkIHRvIHRoaXMuX2NlbGxzIGluIHRoaXMuYWRkQ2VsbCgpXG4gICAgICAgIFxuICAgICAgICBwcmV2aW91c0NlbGxzLmNvcHkoKS5mb3JFYWNoKGZ1bmN0aW9uICh0aGlzOiBSb3dWaWV3LCBjZWxsOiBDZWxsVHlwZSwgaW5kZXg6IG51bWJlciwgYXJyYXk6IENlbGxUeXBlW10pIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCFjZWxscy5jb250YWlucyhjZWxsKSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNlbGwucmVtb3ZlRnJvbVN1cGVydmlldygpXG4gICAgICAgICAgICAgICAgdGhpcy5fY2VsbHMucmVtb3ZlRWxlbWVudChjZWxsKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICAgICAgXG4gICAgICAgIGNlbGxzLmNvcHkoKS5mb3JFYWNoKGZ1bmN0aW9uICh0aGlzOiBSb3dWaWV3LCBjZWxsOiBDZWxsVHlwZSwgaW5kZXg6IG51bWJlciwgYXJyYXk6IENlbGxUeXBlW10pIHtcbiAgICAgICAgICAgIGlmICghSVMoY2VsbC5zdXBlcnZpZXcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRDZWxsKGNlbGwsIDEsIGluZGV4KVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0aGlzKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fcHJldmlvdXNMYXlvdXRCb3VuZHMgPSBuaWxcbiAgICAgICAgdGhpcy5zZXROZWVkc0xheW91dCgpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICByZW1vdmVDZWxsQXRJbmRleChpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHJlbWFpbmluZ0NlbGxzID0gdGhpcy5jZWxscy5jb3B5KClcbiAgICAgICAgcmVtYWluaW5nQ2VsbHMucmVtb3ZlRWxlbWVudEF0SW5kZXgoaW5kZXgpXG4gICAgICAgIHRoaXMuY2VsbFdlaWdodHMucmVtb3ZlRWxlbWVudEF0SW5kZXgoaW5kZXgpXG4gICAgICAgIHRoaXMuY2VsbHMgPSByZW1haW5pbmdDZWxsc1xuICAgIH1cbiAgICBcbiAgICByZW1vdmVGaXJzdENlbGwoKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlQ2VsbEF0SW5kZXgoMClcbiAgICB9XG4gICAgXG4gICAgcmVtb3ZlTGFzdENlbGwoKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlQ2VsbEF0SW5kZXgodGhpcy5jZWxscy5sZW5ndGggLSAxKVxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBhZGRDZWxsKGNlbGw6IENlbGxUeXBlLCB3ZWlnaHQ6IG51bWJlciA9IDEsIGluZGV4ID0gdGhpcy5jZWxscy5sZW5ndGgpIHtcbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLmNlbGxzLmNvbnRhaW5zKGNlbGwpICYmIElTX05PVF9OSUwoY2VsbCkpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLmNlbGxzLmluc2VydEVsZW1lbnRBdEluZGV4KGluZGV4LCBjZWxsKVxuICAgICAgICB0aGlzLmNlbGxXZWlnaHRzLmluc2VydEVsZW1lbnRBdEluZGV4KGluZGV4LCB3ZWlnaHQpXG4gICAgICAgIHRoaXMuYWRkU3VidmlldyhjZWxsKVxuICAgICAgICB0aGlzLnNldE5lZWRzTGF5b3V0KClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGdldCBjZWxsV2VpZ2h0cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NlbGxXZWlnaHRzXG4gICAgfVxuICAgIFxuICAgIHNldCBjZWxsV2VpZ2h0cyh3aWR0aHM6IG51bWJlcltdKSB7XG4gICAgICAgIHRoaXMuX2NlbGxXZWlnaHRzID0gd2lkdGhzXG4gICAgICAgIHRoaXMuX3ByZXZpb3VzTGF5b3V0Qm91bmRzID0gbmlsXG4gICAgICAgIHRoaXMuc2V0TmVlZHNMYXlvdXQoKVxuICAgIH1cbiAgICBcbiAgICBnZXQgY2VsbFdpZHRocygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NlbGxXaWR0aHNcbiAgICB9XG4gICAgXG4gICAgc2V0IGNlbGxXaWR0aHMod2lkdGhzOiBudW1iZXJbXSkge1xuICAgICAgICB0aGlzLl9jZWxsV2lkdGhzID0gd2lkdGhzXG4gICAgICAgIHRoaXMuX3ByZXZpb3VzTGF5b3V0Qm91bmRzID0gbmlsXG4gICAgICAgIHRoaXMuc2V0TmVlZHNMYXlvdXQoKVxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBnZXQgcm93SGVpZ2h0KCkge1xuICAgICAgICBcbiAgICAgICAgdmFyIHJlc3VsdCA9IElGKHRoaXMuX3Jvd0hlaWdodCkoKCkgPT4gdGhpcy5fcm93SGVpZ2h0KVxuICAgICAgICAuRUxTRSgoKSA9PiB0aGlzLmNlbGxzLm1hcCgodmFsdWUsIGluZGV4LCBhcnJheSkgPT4gdmFsdWUuaW50cmluc2ljQ29udGVudEhlaWdodCh0aGlzLmJvdW5kcy53aWR0aCkpLm1heCgpKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdCAvL3RoaXMuYm91bmRzLmhlaWdodFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgbGF5b3V0U3Vidmlld3MoKSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBib3VuZHMgPSB0aGlzLmJvdW5kc1xuICAgICAgICBcbiAgICAgICAgaWYgKGJvdW5kcy5pc0VxdWFsVG8odGhpcy5fcHJldmlvdXNMYXlvdXRCb3VuZHMpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHN1cGVyLmxheW91dFN1YnZpZXdzKClcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9wcmV2aW91c0xheW91dEJvdW5kcyA9IGJvdW5kc1xuICAgICAgICBcbiAgICAgICAgYm91bmRzLmRpc3RyaWJ1dGVWaWV3c0Fsb25nV2lkdGgodGhpcy5fY2VsbHMsIHRoaXMuX2NlbGxXZWlnaHRzLCB0aGlzLnBhZGRpbmcsIHRoaXMuX2NlbGxXaWR0aHMpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmNlbGxzLmZvckVhY2goZnVuY3Rpb24gKHRoaXM6IFJvd1ZpZXcsIGNlbGw6IFVJVmlldywgaW5kZXg6IG51bWJlciwgYXJyYXk6IFVJVmlld1tdKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNlbGwuZnJhbWUgPSBjZWxsLmZyYW1lLnJlY3RhbmdsZVdpdGhIZWlnaHQodGhpcy5yb3dIZWlnaHQpXG4gICAgICAgICAgICBcbiAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG59XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9DQkZsYXRCdXR0b24udHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vUm93Vmlldy50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vVUlDb3JlL1VJQ29yZUV4dGVuc2lvbnMudHNcIiAvPlxuXG5cblxuY2xhc3MgQ0JEaWFsb2dWaWV3IGV4dGVuZHMgVUlWaWV3IHtcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICB0aXRsZUxhYmVsOiBVSVRleHRWaWV3ID0gbmlsXG4gICAgdGl0bGVSb3c6IFJvd1ZpZXcgPSBuaWxcbiAgICBwbGFjZWhvbGRlckxhYmVsOiBVSVRleHRWaWV3ID0gbmlsXG4gICAgXG4gICAgX3ZpZXc6IFVJVmlldyA9IG5pbFxuICAgIFxuICAgIHF1ZXN0aW9uTGFiZWw6IFVJVGV4dFZpZXcgPSBuaWxcbiAgICB5ZXNCdXR0b246IENCRmxhdEJ1dHRvbiA9IG5pbFxuICAgIG5vQnV0dG9uOiBDQkZsYXRCdXR0b24gPSBuaWxcbiAgICBjYW5jZWxCdXR0b246IENCRmxhdEJ1dHRvbiA9IG5pbFxuICAgIFxuICAgIFxuICAgIG5vQnV0dG9uRGlzbWlzc2VzRGlhbG9nID0gWUVTXG4gICAgXG4gICAgXG4gICAgY29uc3RydWN0b3IoZWxlbWVudElEPzogc3RyaW5nKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlcihlbGVtZW50SUQpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5fY2xhc3MgPSBDQkRpYWxvZ1ZpZXdcbiAgICAgICAgdGhpcy5zdXBlcmNsYXNzID0gVUlWaWV3XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy51cGRhdGVDb250ZW50KClcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgaW5pdFZpZXcoZWxlbWVudElEOiBzdHJpbmcsIHZpZXdIVE1MRWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBzdXBlci5pbml0VmlldyhlbGVtZW50SUQsIHZpZXdIVE1MRWxlbWVudClcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgLy8gdGhpcy5pbml0UGxhY2Vob2xkZXJMYWJlbElmTmVlZGVkKClcbiAgICAgICAgXG4gICAgICAgIC8vIHRoaXMuaW5pdFRpdGxlTGFiZWxJZk5lZWRlZCgpXG4gICAgICAgIFxuICAgICAgICAvLyB0aGlzLmluaXRUaXRsZVJvdygpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgLy8gdGhpcy50aXRsZVJvdy5jZWxsV2VpZ2h0cyA9IFsxLCAwLjc1LCAxLjIsIDFdXG4gICAgICAgIFxuICAgICAgICAvLyB2YXIgY2VsbHMgPSB0aGlzLnRpdGxlUm93LmNlbGxzIGFzIENlbGxWaWV3W107XG4gICAgICAgIFxuICAgICAgICAvLyB2YXIgY2VsbFRpdGxlcyA9IFtcIlRJTUU6XCIsIFwiQ09NUEFOWTpcIiwgXCJDT01NRU5UUzpcIiwgXCJQUklDRTpcIl1cbiAgICAgICAgXG4gICAgICAgIC8vIGNlbGxzLmZvckVhY2goZnVuY3Rpb24gKGNlbGwsIGluZGV4LCBhcnJheSkge1xuICAgICAgICBcbiAgICAgICAgLy8gICAgIGNlbGwudGl0bGVMYWJlbC50ZXh0ID0gY2VsbFRpdGxlc1tpbmRleF07XG4gICAgICAgIC8vICAgICBjZWxsLnRpdGxlTGFiZWwudXNlU2FpcmFGb250KClcbiAgICAgICAgXG4gICAgICAgIC8vIH0pXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgLy8gdGhpcy5pbml0UXVlc3Rpb25MYWJlbElmTmVlZGVkKClcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAvLyB0aGlzLmluaXRZZXNOb0J1dHRvbnNJZk5lZWRlZCgpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5zdHlsZS5ib3JkZXJSYWRpdXMgPSBcIjVweFwiXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIHNldCB2aWV3KHZpZXc6IFVJVmlldykge1xuICAgICAgICBcbiAgICAgICAgdGhpcy52aWV3LnJlbW92ZUZyb21TdXBlcnZpZXcoKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fdmlldyA9IHZpZXdcbiAgICAgICAgXG4gICAgICAgIHRoaXMuYWRkU3Vidmlldyh2aWV3KVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgZ2V0IHZpZXcoKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy5fdmlld1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgaW5pdENhbmNlbEJ1dHRvbklmTmVlZGVkKCkge1xuICAgICAgICBcbiAgICAgICAgaWYgKElTX05PVCh0aGlzLmNhbmNlbEJ1dHRvbikpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5jYW5jZWxCdXR0b24gPSBuZXcgQ0JGbGF0QnV0dG9uKHRoaXMuZWxlbWVudElEICsgXCJDYW5jZWxCdXR0b25cIilcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsQnV0dG9uLnRpdGxlTGFiZWwudGV4dCA9IFwiT0tcIlxuICAgICAgICAgICAgdGhpcy5jYW5jZWxCdXR0b24udGl0bGVMYWJlbENvbG9yID0gVUlDb2xvci5ncmVlbkNvbG9yXG4gICAgICAgICAgICB0aGlzLmNhbmNlbEJ1dHRvbi50aXRsZUxhYmVsLnN0eWxlLmZvbnRXZWlnaHQgPSBcIjYwMFwiXG4gICAgICAgICAgICB0aGlzLmFkZFN1YnZpZXcodGhpcy5jYW5jZWxCdXR0b24pXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsQnV0dG9uLmFkZFRhcmdldEZvckNvbnRyb2xFdmVudHMoW1xuICAgICAgICAgICAgICAgIFVJQnV0dG9uLmNvbnRyb2xFdmVudC5Qb2ludGVyVXBJbnNpZGUsIFVJQnV0dG9uLmNvbnRyb2xFdmVudC5FbnRlckRvd25cbiAgICAgICAgICAgIF0sIGZ1bmN0aW9uICh0aGlzOiBDQkRpYWxvZ1ZpZXcsIHNlbmRlcjogVUlCdXR0b24sIGV2ZW50OiBFdmVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nVmlldy5kaXNtaXNzKClcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBpbml0WWVzTm9CdXR0b25zSWZOZWVkZWQoKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAoSVNfTk9UKHRoaXMueWVzQnV0dG9uKSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnllc0J1dHRvbiA9IG5ldyBDQkZsYXRCdXR0b24odGhpcy5lbGVtZW50SUQgKyBcIlllc0J1dHRvblwiKVxuICAgICAgICAgICAgdGhpcy55ZXNCdXR0b24udGl0bGVMYWJlbC5zZXRUZXh0KFwiY0JERGlhbG9nVmlld1lFU1wiLCBcIllFU1wiKVxuICAgICAgICAgICAgdGhpcy55ZXNCdXR0b24udGl0bGVMYWJlbENvbG9yID0gVUlDb2xvci5ncmVlbkNvbG9yXG4gICAgICAgICAgICB0aGlzLnllc0J1dHRvbi50aXRsZUxhYmVsLnN0eWxlLmZvbnRXZWlnaHQgPSBcIjYwMFwiXG4gICAgICAgICAgICB0aGlzLmFkZFN1YnZpZXcodGhpcy55ZXNCdXR0b24pXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMubm9CdXR0b24gPSBuZXcgQ0JGbGF0QnV0dG9uKHRoaXMuZWxlbWVudElEICsgXCJOb0J1dHRvblwiKVxuICAgICAgICAgICAgdGhpcy5ub0J1dHRvbi50aXRsZUxhYmVsLnNldFRleHQoXCJjQkREaWFsb2dWaWV3Tk9cIiwgXCJOT1wiKVxuICAgICAgICAgICAgdGhpcy5ub0J1dHRvbi50aXRsZUxhYmVsQ29sb3IgPSBVSUNvbG9yLnJlZENvbG9yXG4gICAgICAgICAgICB0aGlzLm5vQnV0dG9uLnRpdGxlTGFiZWwuc3R5bGUuZm9udFdlaWdodCA9IFwiNjAwXCJcbiAgICAgICAgICAgIHRoaXMuYWRkU3Vidmlldyh0aGlzLm5vQnV0dG9uKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyB0aGlzLnllc0J1dHRvbi5hZGRUYXJnZXRGb3JDb250cm9sRXZlbnRzKFtVSUJ1dHRvbi5jb250cm9sRXZlbnQuUG9pbnRlclVwSW5zaWRlLCBVSUJ1dHRvbi5jb250cm9sRXZlbnQuRW50ZXJEb3duXSwgZnVuY3Rpb24gKHRoaXM6IENCRGlhbG9nVmlldywgc2VuZGVyOiBVSUJ1dHRvbiwgZXZlbnQ6IEV2ZW50KSB7XG4gICAgICAgICAgICAvLyAgICAgdGhpcy5kaWFsb2dWaWV3LmRpc21pc3MoKVxuICAgICAgICAgICAgLy8gfS5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLm5vQnV0dG9uLmFkZFRhcmdldEZvckNvbnRyb2xFdmVudHMoW1xuICAgICAgICAgICAgICAgIFVJQnV0dG9uLmNvbnRyb2xFdmVudC5Qb2ludGVyVXBJbnNpZGUsIFVJQnV0dG9uLmNvbnRyb2xFdmVudC5FbnRlckRvd25cbiAgICAgICAgICAgIF0sIGZ1bmN0aW9uICh0aGlzOiBDQkRpYWxvZ1ZpZXcsIHNlbmRlcjogVUlCdXR0b24sIGV2ZW50OiBFdmVudCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm5vQnV0dG9uRGlzbWlzc2VzRGlhbG9nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nVmlldy5kaXNtaXNzKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBpbml0UXVlc3Rpb25MYWJlbElmTmVlZGVkKCkge1xuICAgICAgICBcbiAgICAgICAgaWYgKElTX05PVCh0aGlzLnF1ZXN0aW9uTGFiZWwpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMucXVlc3Rpb25MYWJlbCA9IG5ldyBVSVRleHRWaWV3KHRoaXMuZWxlbWVudElEICsgXCJRdWVzdGlvbkxhYmVsXCIsIFVJVGV4dFZpZXcudHlwZS5oZWFkZXIzKVxuICAgICAgICAgICAgdGhpcy5xdWVzdGlvbkxhYmVsLnRleHQgPSBMYW5ndWFnZVNlcnZpY2Uuc3RyaW5nRm9yS2V5KFxuICAgICAgICAgICAgICAgIFwiY0JERGlhbG9nVmlld0FyZVlvdVN1cmVcIixcbiAgICAgICAgICAgICAgICBMYW5ndWFnZVNlcnZpY2UuY3VycmVudExhbmd1YWdlS2V5LFxuICAgICAgICAgICAgICAgIFwiQXJlIHlvdSBzdXJlP1wiXG4gICAgICAgICAgICApXG4gICAgICAgICAgICB0aGlzLnF1ZXN0aW9uTGFiZWwudGV4dEFsaWdubWVudCA9IFVJVGV4dFZpZXcudGV4dEFsaWdubWVudC5jZW50ZXJcbiAgICAgICAgICAgIHRoaXMuYWRkU3Vidmlldyh0aGlzLnF1ZXN0aW9uTGFiZWwpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgaW5pdFRpdGxlUm93KCkge1xuICAgICAgICBcbiAgICAgICAgaWYgKElTX05PVCh0aGlzLnRpdGxlUm93KSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnRpdGxlUm93ID0gbmV3IFJvd1ZpZXcodGhpcy5lbGVtZW50SUQgKyBcIlRpdGxlUm93XCIpXG4gICAgICAgICAgICB0aGlzLmFkZFN1YnZpZXcodGhpcy50aXRsZVJvdylcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBpbml0VGl0bGVMYWJlbElmTmVlZGVkKCkge1xuICAgICAgICBcbiAgICAgICAgaWYgKElTX05PVCh0aGlzLnRpdGxlTGFiZWwpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbCA9IG5ldyBVSVRleHRWaWV3KHRoaXMuZWxlbWVudElEICsgXCJUaXRsZUxhYmVsXCIsIFVJVGV4dFZpZXcudHlwZS5oZWFkZXI0KVxuICAgICAgICAgICAgdGhpcy50aXRsZUxhYmVsLnRleHQgPSBcIkFjY2VwdCBvZmZlclwiXG4gICAgICAgICAgICB0aGlzLnRpdGxlTGFiZWwuc3R5bGUuZm9udFNpemUgPSBcIjI0XCJcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5hZGRTdWJ2aWV3KHRoaXMudGl0bGVMYWJlbClcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBpbml0UGxhY2Vob2xkZXJMYWJlbElmTmVlZGVkKCkge1xuICAgICAgICBcbiAgICAgICAgaWYgKElTX05PVCh0aGlzLnBsYWNlaG9sZGVyTGFiZWwpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMucGxhY2Vob2xkZXJMYWJlbCA9IG5ldyBVSVRleHRWaWV3KHRoaXMuZWxlbWVudElEICsgXCJQbGFjZWhvbGRlckxhYmVsXCIsIFVJVGV4dFZpZXcudHlwZS5oZWFkZXI0KVxuICAgICAgICAgICAgdGhpcy5wbGFjZWhvbGRlckxhYmVsLnRleHQgPSBcIk5vIG9mZmVycyBoYXZlIGJlZW4gbWFkZSB5ZXQuXCJcbiAgICAgICAgICAgIHRoaXMuYWRkU3Vidmlldyh0aGlzLnBsYWNlaG9sZGVyTGFiZWwpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgdXBkYXRlQ29udGVudCgpIHtcbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIHN0cmluZ0Zyb21WYWx1ZSh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKElTKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFwiLVwiXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5sYXlvdXRTdWJ2aWV3cygpXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgbGF5b3V0U3Vidmlld3MoKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci5sYXlvdXRTdWJ2aWV3cygpXG4gICAgXG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSBSb290Vmlld0NvbnRyb2xsZXIucGFkZGluZ0xlbmd0aFxuICAgICAgICBjb25zdCBsYWJlbEhlaWdodCA9IHBhZGRpbmcgKiAwLjc1XG4gICAgXG4gICAgICAgIGNvbnN0IGJvdW5kcyA9IHRoaXMuYm91bmRzLnJlY3RhbmdsZVdpdGhJbnNldHMocGFkZGluZyAqIDAuNSwgcGFkZGluZyAqIDAuNSwgMCwgMClcbiAgICBcbiAgICAgICAgY29uc3QgdG9wT2JqZWN0ID0geyBmcmFtZTogYm91bmRzLnJlY3RhbmdsZVdpdGhIZWlnaHQoMCkgfVxuICAgIFxuICAgIFxuICAgICAgICB0aGlzLnRpdGxlTGFiZWwuZnJhbWUgPSBib3VuZHMucmVjdGFuZ2xlV2l0aEhlaWdodCh0aGlzLnRpdGxlTGFiZWwuaW50cmluc2ljQ29udGVudEhlaWdodChib3VuZHMud2lkdGgpKS5yZWN0YW5nbGVXaXRoWShcbiAgICAgICAgICAgIGJvdW5kcy55ICtcbiAgICAgICAgICAgIHBhZGRpbmcgKiAwLjUpXG4gICAgICAgIHRoaXMudGl0bGVMYWJlbC5zdHlsZS5tYXJnaW5MZWZ0ID0gXCJcIiArIChwYWRkaW5nICogMC41KSArIFwicHhcIlxuICAgICAgICBcbiAgICAgICAgdGhpcy50aXRsZVJvdy5mcmFtZSA9IEZJUlNUX09SX05JTCh0aGlzLnRpdGxlTGFiZWwsIHRvcE9iamVjdCkuZnJhbWUucmVjdGFuZ2xlRm9yTmV4dFJvdyhcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICB0aGlzLnRpdGxlUm93LmludHJpbnNpY0NvbnRlbnRIZWlnaHQoYm91bmRzLndpZHRoKVxuICAgICAgICApXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy52aWV3LmZyYW1lID0gRklSU1RfT1JfTklMKHRoaXMudGl0bGVSb3csIHRoaXMudGl0bGVMYWJlbCwgdG9wT2JqZWN0KS5mcmFtZS5yZWN0YW5nbGVGb3JOZXh0Um93KFxuICAgICAgICAgICAgcGFkZGluZyxcbiAgICAgICAgICAgIHRoaXMudmlldy5pbnRyaW5zaWNDb250ZW50SGVpZ2h0KGJvdW5kcy53aWR0aClcbiAgICAgICAgKS5yZWN0YW5nbGVXaXRoV2lkdGgoYm91bmRzLndpZHRoKS5yZWN0YW5nbGVXaXRoWChib3VuZHMueClcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5xdWVzdGlvbkxhYmVsLmZyYW1lID0gRklSU1RfT1JfTklMKFxuICAgICAgICAgICAgdGhpcy52aWV3LFxuICAgICAgICAgICAgdGhpcy50aXRsZVJvdyxcbiAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbCxcbiAgICAgICAgICAgIHRvcE9iamVjdFxuICAgICAgICApLmZyYW1lLnJlY3RhbmdsZUZvck5leHRSb3coXG4gICAgICAgICAgICBwYWRkaW5nLFxuICAgICAgICAgICAgdGhpcy5xdWVzdGlvbkxhYmVsLmludHJpbnNpY0NvbnRlbnRIZWlnaHQoYm91bmRzLndpZHRoKVxuICAgICAgICApLnJlY3RhbmdsZVdpdGhXaWR0aChib3VuZHMud2lkdGgpLnJlY3RhbmdsZVdpdGhYKGJvdW5kcy54KVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgICAgICBjb25zdCBidXR0b25zID0gW3RoaXMueWVzQnV0dG9uLCB0aGlzLm5vQnV0dG9uXVxuICAgIFxuICAgICAgICBjb25zdCBidXR0b25zRnJhbWUgPSBGSVJTVF9PUl9OSUwoXG4gICAgICAgICAgICB0aGlzLnF1ZXN0aW9uTGFiZWwsXG4gICAgICAgICAgICB0aGlzLnZpZXcsXG4gICAgICAgICAgICB0aGlzLnRpdGxlUm93LFxuICAgICAgICAgICAgdGhpcy50aXRsZUxhYmVsLFxuICAgICAgICAgICAgdG9wT2JqZWN0XG4gICAgICAgICkuZnJhbWUucmVjdGFuZ2xlRm9yTmV4dFJvdyhwYWRkaW5nLCBsYWJlbEhlaWdodCAqXG4gICAgICAgICAgICAyKVxuICAgICAgICAgICAgLnJlY3RhbmdsZVdpdGhXaWR0aChbKGJ1dHRvbnMuZXZlcnlFbGVtZW50LnRpdGxlTGFiZWwuaW50cmluc2ljQ29udGVudFdpZHRoKCkgYXMgYW55IGFzIG51bWJlcltdKS5tYXgoKSwgMTIwXS5tYXgoKSAqIDIgKyBwYWRkaW5nICogMywgMC41KVxuICAgICAgICBcbiAgICAgICAgYnV0dG9uc0ZyYW1lLmRpc3RyaWJ1dGVWaWV3c0Fsb25nV2lkdGgoYnV0dG9ucylcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY2FuY2VsQnV0dG9uLmZyYW1lID0gYnV0dG9uc0ZyYW1lLnJlY3RhbmdsZVdpdGhXaWR0aCgxNTAsIDAuNSlcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMucGxhY2Vob2xkZXJMYWJlbC5mcmFtZSA9IGJvdW5kcy5yZWN0YW5nbGVXaXRoSW5zZXRzKHBhZGRpbmcgKiAwLjUsIHBhZGRpbmcgKiAwLjUsIDAsIDApXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGlmIChJUyh0aGlzLnZpZXcpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMucGxhY2Vob2xkZXJMYWJlbC5oaWRkZW4gPSBZRVNcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gdGhpcy50aXRsZUxhYmVsLmhpZGRlbiA9IE5PXG4gICAgICAgICAgICAvLyB0aGlzLnRpdGxlUm93LmhpZGRlbiA9IE5PXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnBsYWNlaG9sZGVyTGFiZWwuaGlkZGVuID0gTk9cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gdGhpcy50aXRsZUxhYmVsLmhpZGRlbiA9IFlFU1xuICAgICAgICAgICAgLy8gdGhpcy50aXRsZVJvdy5oaWRkZW4gPSBZRVNcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIGludHJpbnNpY0NvbnRlbnRIZWlnaHQoY29uc3RyYWluaW5nV2lkdGg6IG51bWJlciA9IDApIHtcbiAgICBcbiAgICBcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IFJvb3RWaWV3Q29udHJvbGxlci5wYWRkaW5nTGVuZ3RoXG4gICAgICAgIGNvbnN0IGxhYmVsSGVpZ2h0ID0gcGFkZGluZyAqIDAuNzVcbiAgICBcbiAgICAgICAgZnVuY3Rpb24gYWRkUGFkZGluZ0lmTmVlZGVkKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIElGPG51bWJlcj4odmFsdWUpKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgKyBwYWRkaW5nXG4gICAgICAgICAgICB9KSgpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICB2YXIgcmVzdWx0ID0gcGFkZGluZ1xuICAgIFxuICAgICAgICByZXN1bHQgPSByZXN1bHQgKyBhZGRQYWRkaW5nSWZOZWVkZWQodGhpcy50aXRsZUxhYmVsLmludHJpbnNpY0NvbnRlbnRIZWlnaHQoY29uc3RyYWluaW5nV2lkdGgpKVxuICAgICAgICBcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICsgYWRkUGFkZGluZ0lmTmVlZGVkKHRoaXMudGl0bGVSb3cuaW50cmluc2ljQ29udGVudEhlaWdodChjb25zdHJhaW5pbmdXaWR0aCkpXG4gICAgICAgIFxuICAgICAgICByZXN1bHQgPSByZXN1bHQgKyBhZGRQYWRkaW5nSWZOZWVkZWQodGhpcy52aWV3LmludHJpbnNpY0NvbnRlbnRIZWlnaHQoY29uc3RyYWluaW5nV2lkdGgpICsgcGFkZGluZylcbiAgICAgICAgXG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCArIGFkZFBhZGRpbmdJZk5lZWRlZCh0aGlzLnF1ZXN0aW9uTGFiZWwuaW50cmluc2ljQ29udGVudEhlaWdodChjb25zdHJhaW5pbmdXaWR0aCkpXG4gICAgICAgIFxuICAgICAgICByZXN1bHQgPSByZXN1bHQgKyBJRjxudW1iZXI+KEZJUlNUX09SX05JTCh0aGlzLnllc0J1dHRvbiwgdGhpcy5jYW5jZWxCdXR0b24pKShSRVRVUk5FUihsYWJlbEhlaWdodCkpKClcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxufVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vVUlDb3JlL1VJQ29yZS50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vVUlDb3JlL1VJUm91dGUudHNcIiAvPlxuXG5cblxuXG5cbmNsYXNzIExhbmd1YWdlU2VydmljZSBpbXBsZW1lbnRzIFVJTGFuZ3VhZ2VTZXJ2aWNlIHtcbiAgICBcbiAgICBcbiAgICBzdGF0aWMgX2N1cnJlbnRMYW5ndWFnZUtleTogc3RyaW5nXG4gICAgXG4gICAgXG4gICAgc3RhdGljIGxhbmd1YWdlVmFsdWVzID0ge1xuICAgICAgICBcbiAgICAgICAgXCJlblwiOiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFwibGFuZ3VhZ2VOYW1lXCI6IFwiRW5nbGlzaFwiLFxuICAgICAgICAgICAgXCJsYW5ndWFnZU5hbWVTaG9ydFwiOiBcIkVOR1wiLFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcInRvcEJhclRpdGxlXCI6IFwiQ2FycnVtXCIsXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFwiZnJvbnRQYWdlSFRNTFwiOiBcIkFzZGFzZFwiLFxuICAgICAgICAgICAgXCJib3R0b21CYXJDb250ZW50XCI6IFwiUFVUIEJPVFRPTSBCQVIgU1RVRkYgSU4gSEVSRVwiXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICB9LFxuICAgICAgICBcImVzdFwiOiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFwibGFuZ3VhZ2VOYW1lXCI6IFwiRWVzdGkga2VlbFwiLFxuICAgICAgICAgICAgXCJsYW5ndWFnZU5hbWVTaG9ydFwiOiBcIkVTVFwiLFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcInRvcEJhclRpdGxlXCI6IFwiQ2FycnVtXCJcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHN0YXRpYyBsYW5ndWFnZXMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KExhbmd1YWdlU2VydmljZS5sYW5ndWFnZVZhbHVlcykpXG4gICAgXG4gICAgc3RhdGljIHVzZVN0b3JlZExhbmd1YWdlVmFsdWVzKHZhbHVlcyA9IHt9KSB7XG4gICAgICAgIFxuICAgICAgICBMYW5ndWFnZVNlcnZpY2UubGFuZ3VhZ2VzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShMYW5ndWFnZVNlcnZpY2UubGFuZ3VhZ2VWYWx1ZXMpKS5vYmplY3RCeUNvcHlpbmdWYWx1ZXNSZWN1cnNpdmVseUZyb21PYmplY3QoXG4gICAgICAgICAgICB2YWx1ZXMpIGFzIGFueVxuICAgICAgICBcbiAgICAgICAgTGFuZ3VhZ2VTZXJ2aWNlLmJyb2FkY2FzdExhbmd1YWdlQ2hhbmdlRXZlbnQoKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgc3RhdGljIGJyb2FkY2FzdExhbmd1YWdlQ2hhbmdlRXZlbnQoKSB7XG4gICAgICAgIFxuICAgICAgICBVSUNvcmUubWFpbi5yb290Vmlld0NvbnRyb2xsZXIudmlldy5icm9hZGNhc3RFdmVudEluU3VidHJlZSh7XG4gICAgICAgICAgICBuYW1lOiBVSVZpZXcuYnJvYWRjYXN0RXZlbnROYW1lLkxhbmd1YWdlQ2hhbmdlZCxcbiAgICAgICAgICAgIHBhcmFtZXRlcnM6IHt9XG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBzdGF0aWMgZ2V0IGRlZmF1bHRMYW5ndWFnZUtleSgpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBcImVuXCI7XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBzdGF0aWMgZ2V0IGN1cnJlbnRMYW5ndWFnZUtleSgpIHtcbiAgICAgICAgXG4gICAgICAgIGlmICghTGFuZ3VhZ2VTZXJ2aWNlLl9jdXJyZW50TGFuZ3VhZ2VLZXkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgTGFuZ3VhZ2VTZXJ2aWNlLnVwZGF0ZUN1cnJlbnRMYW5ndWFnZUtleSgpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlU2VydmljZS5fY3VycmVudExhbmd1YWdlS2V5XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBzdGF0aWMgdXBkYXRlQ3VycmVudExhbmd1YWdlS2V5KHJvdXRlID0gVUlSb3V0ZS5jdXJyZW50Um91dGUpIHtcbiAgICBcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJvdXRlLmNvbXBvbmVudFdpdGhOYW1lKFwic2V0dGluZ3NcIikucGFyYW1ldGVycy5sYW5ndWFnZVxuICAgIFxuICAgICAgICBpZiAoSVNfTk9UKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVzdWx0ID0gTGFuZ3VhZ2VTZXJ2aWNlLmRlZmF1bHRMYW5ndWFnZUtleVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIExhbmd1YWdlU2VydmljZS5fY3VycmVudExhbmd1YWdlS2V5ID0gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBnZXQgY3VycmVudExhbmd1YWdlS2V5KCkge1xuICAgIFxuICAgICAgICBjb25zdCByZXN1bHQgPSBMYW5ndWFnZVNlcnZpY2UuY3VycmVudExhbmd1YWdlS2V5XG4gICAgXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIHN0YXRpYyBzdHJpbmdGb3JLZXkoXG4gICAgICAgIGtleTogc3RyaW5nLFxuICAgICAgICBsYW5ndWFnZUtleTogc3RyaW5nLFxuICAgICAgICBkZWZhdWx0U3RyaW5nOiBzdHJpbmcsXG4gICAgICAgIHBhcmFtZXRlcnM/OiB7IFt4OiBzdHJpbmddOiBzdHJpbmcgfCBVSUxvY2FsaXplZFRleHRPYmplY3Q7IH1cbiAgICApIHtcbiAgICBcbiAgICAgICAgdmFyIHJlc3VsdFxuICAgIFxuICAgICAgICBpZiAoSVMoa2V5KSAmJiBMYW5ndWFnZVNlcnZpY2UubGFuZ3VhZ2VzW2xhbmd1YWdlS2V5XSAmJlxuICAgICAgICAgICAgSVNfREVGSU5FRChMYW5ndWFnZVNlcnZpY2UubGFuZ3VhZ2VzW2xhbmd1YWdlS2V5XVtrZXldKSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXN1bHQgPSBMYW5ndWFnZVNlcnZpY2UubGFuZ3VhZ2VzW2xhbmd1YWdlS2V5XVtrZXldXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVzdWx0ID0gZGVmYXVsdFN0cmluZ1xuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChJUyhwYXJhbWV0ZXJzKSkge1xuICAgIFxuICAgICAgICAgICAgY29uc3QgcGFyYW1ldGVyS2V5cyA9IE9iamVjdC5rZXlzKHBhcmFtZXRlcnMpXG4gICAgXG4gICAgICAgICAgICBwYXJhbWV0ZXJLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSwgaW5kZXgsIGFycmF5KSB7XG4gICAgXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5U3RyaW5nID0gXCIlXCIgKyBrZXkgKyBcIiVcIlxuICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtZXRlciA9IHBhcmFtZXRlcnNba2V5XVxuICAgIFxuICAgICAgICAgICAgICAgIHZhciBwYXJhbWV0ZXJTdHJpbmdcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1ldGVyIGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJTdHJpbmcgPSBVSUNvcmUubGFuZ3VhZ2VTZXJ2aWNlLnN0cmluZ0ZvckN1cnJlbnRMYW5ndWFnZShwYXJhbWV0ZXIgYXMgVUlMb2NhbGl6ZWRUZXh0T2JqZWN0KVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJTdHJpbmcgPSBwYXJhbWV0ZXJcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5yZXBsYWNlKG5ldyBSZWdFeHAoa2V5U3RyaW5nLCBcImdcIiksIHBhcmFtZXRlclN0cmluZylcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc3RyaW5nRm9yS2V5KFxuICAgICAgICBrZXk6IHN0cmluZyxcbiAgICAgICAgbGFuZ3VhZ2VLZXk6IHN0cmluZyxcbiAgICAgICAgZGVmYXVsdFN0cmluZzogc3RyaW5nLFxuICAgICAgICBwYXJhbWV0ZXJzPzogeyBbeDogc3RyaW5nXTogc3RyaW5nIHwgVUlMb2NhbGl6ZWRUZXh0T2JqZWN0OyB9XG4gICAgKSB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlU2VydmljZS5zdHJpbmdGb3JLZXkoa2V5LCBsYW5ndWFnZUtleSwgZGVmYXVsdFN0cmluZywgcGFyYW1ldGVycylcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBzdGF0aWMgbG9jYWxpemVkVGV4dE9iamVjdEZvcktleShcbiAgICAgICAga2V5OiBzdHJpbmcsXG4gICAgICAgIGRlZmF1bHRTdHJpbmcgPSBrZXksXG4gICAgICAgIHBhcmFtZXRlcnM/OiB7IFt4OiBzdHJpbmddOiBzdHJpbmcgfCBVSUxvY2FsaXplZFRleHRPYmplY3Q7IH1cbiAgICApIHtcbiAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge31cbiAgICBcbiAgICAgICAgTGFuZ3VhZ2VTZXJ2aWNlLmxhbmd1YWdlcy5mb3JFYWNoKGZ1bmN0aW9uIChsYW5ndWFnZU9iamVjdCwgbGFuZ3VhZ2VLZXkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVzdWx0W2xhbmd1YWdlS2V5XSA9IExhbmd1YWdlU2VydmljZS5zdHJpbmdGb3JLZXkoa2V5LCBsYW5ndWFnZUtleSwgZGVmYXVsdFN0cmluZywgcGFyYW1ldGVycylcbiAgICAgICAgICAgIFxuICAgICAgICB9KVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgbG9jYWxpemVkVGV4dE9iamVjdEZvcktleShcbiAgICAgICAga2V5OiBzdHJpbmcsXG4gICAgICAgIGRlZmF1bHRTdHJpbmc/OiBzdHJpbmcsXG4gICAgICAgIHBhcmFtZXRlcnM/OiB7IFt4OiBzdHJpbmddOiBzdHJpbmcgfCBVSUxvY2FsaXplZFRleHRPYmplY3Q7IH1cbiAgICApIHtcbiAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gTGFuZ3VhZ2VTZXJ2aWNlLmxvY2FsaXplZFRleHRPYmplY3RGb3JLZXkoa2V5LCBkZWZhdWx0U3RyaW5nLCBwYXJhbWV0ZXJzKVxuICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBzdGF0aWMgbG9jYWxpemVkVGV4dE9iamVjdEZvclRleHQodGV4dDogc3RyaW5nKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAoSVNfTk9UKHRleHQpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBuaWxcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgXG4gICAgICAgICAgICBbTGFuZ3VhZ2VTZXJ2aWNlLmRlZmF1bHRMYW5ndWFnZUtleV06IHRleHRcbiAgICAgICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgbG9jYWxpemVkVGV4dE9iamVjdEZvclRleHQodGV4dDogc3RyaW5nKSB7XG4gICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IExhbmd1YWdlU2VydmljZS5sb2NhbGl6ZWRUZXh0T2JqZWN0Rm9yVGV4dCh0ZXh0KVxuICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBzdGF0aWMgc3RyaW5nRm9yQ3VycmVudExhbmd1YWdlKGxvY2FsaXplZFRleHRPYmplY3Q6IENCTG9jYWxpemVkVGV4dE9iamVjdCkge1xuICAgICAgICBcbiAgICAgICAgaWYgKCFMYW5ndWFnZVNlcnZpY2UgfHwgIWxvY2FsaXplZFRleHRPYmplY3QpIHtcbiAgICBcbiAgICAgICAgICAgIGNvbnN0IGFzZCA9IDFcbiAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbG9jYWxpemVkVGV4dE9iamVjdCA9IEZJUlNUX09SX05JTChsb2NhbGl6ZWRUZXh0T2JqZWN0KVxuICAgIFxuICAgICAgICB2YXIgcmVzdWx0ID0gbG9jYWxpemVkVGV4dE9iamVjdFtMYW5ndWFnZVNlcnZpY2UuY3VycmVudExhbmd1YWdlS2V5XVxuICAgIFxuICAgICAgICBpZiAoSVNfTk9UKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVzdWx0ID0gbG9jYWxpemVkVGV4dE9iamVjdFtMYW5ndWFnZVNlcnZpY2UuZGVmYXVsdExhbmd1YWdlS2V5XVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChJU19OT1QocmVzdWx0KSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXN1bHQgPSBsb2NhbGl6ZWRUZXh0T2JqZWN0W1wiZW5cIl1cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoSVNfTk9UKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVzdWx0ID0gXCJcIlxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHN0cmluZ0ZvckN1cnJlbnRMYW5ndWFnZShsb2NhbGl6ZWRUZXh0T2JqZWN0OiBDQkxvY2FsaXplZFRleHRPYmplY3QpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBMYW5ndWFnZVNlcnZpY2Uuc3RyaW5nRm9yQ3VycmVudExhbmd1YWdlKGxvY2FsaXplZFRleHRPYmplY3QpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbn1cblxuXG5cblxuXG5VSUNvcmUubGFuZ3VhZ2VTZXJ2aWNlID0gTGFuZ3VhZ2VTZXJ2aWNlXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vVUlDb3JlL1VJQ29yZUV4dGVuc2lvbnMudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL1VJQ29yZS9VSUNvcmUudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL1VJQ29yZS9VSUNvbG9yLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL0NCRGlhbG9nVmlldy50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vQ3VzdG9tIGNvbXBvbmVudHMvTGFuZ3VhZ2VTZXJ2aWNlLnRzXCIgLz5cblxuXG5cblxuXG5jbGFzcyBDQkRpYWxvZ1ZpZXdTaG93ZXIgZXh0ZW5kcyBVSU9iamVjdCB7XG4gICAgXG4gICAgZGlhbG9nVmlldzogVUlEaWFsb2dWaWV3PENCRGlhbG9nVmlldz5cbiAgICBzdGF0aWMgY3VycmVudERpYWxvZ1ZpZXdTaG93ZXI6IENCRGlhbG9nVmlld1Nob3dlclxuICAgIHN0YXRpYyBuZXh0U2hvd0RpYWxvZ0Z1bmN0aW9uczogRnVuY3Rpb25bXSA9IFtdXG4gICAgc3RhdGljIGN1cnJlbnRBY3Rpb25JbmRpY2F0b3JEaWFsb2dWaWV3U2hvd2VyOiBDQkRpYWxvZ1ZpZXdTaG93ZXIgPSBuaWxcbiAgICBcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50SUQ/OiBzdHJpbmcpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2NsYXNzID0gQ0JEaWFsb2dWaWV3U2hvd2VyXG4gICAgICAgIHRoaXMuc3VwZXJjbGFzcyA9IFVJT2JqZWN0XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5kaWFsb2dWaWV3ID0gbmV3IFVJRGlhbG9nVmlldzxDQkRpYWxvZ1ZpZXc+KClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZGlhbG9nVmlldy52aWV3ID0gbmV3IENCRGlhbG9nVmlldyhlbGVtZW50SUQpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmRpYWxvZ1ZpZXcudmlldy5iYWNrZ3JvdW5kQ29sb3IgPSBVSUNvbG9yLndoaXRlQ29sb3JcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGRpYWxvZ0xheW91dEZ1bmN0aW9uID0gdGhpcy5kaWFsb2dWaWV3LmxheW91dFN1YnZpZXdzLmJpbmQodGhpcy5kaWFsb2dWaWV3KVxuICAgICAgICBcbiAgICAgICAgdGhpcy5kaWFsb2dWaWV3LmxheW91dFN1YnZpZXdzID0gZnVuY3Rpb24gKHRoaXM6IENCRGlhbG9nVmlld1Nob3dlcikge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBkaWFsb2dMYXlvdXRGdW5jdGlvbigpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuZGlhbG9nVmlldy52aWV3LmZyYW1lID0gbmV3IFVJUmVjdGFuZ2xlKFxuICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICB3aW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgICAgICAgICAgICAgd2luZG93LmlubmVyV2lkdGhcbiAgICAgICAgICAgICkucmVjdGFuZ2xlV2l0aEhlaWdodChcbiAgICAgICAgICAgICAgICB0aGlzLmRpYWxvZ1ZpZXcudmlldy5pbnRyaW5zaWNDb250ZW50SGVpZ2h0KHRoaXMuZ2V0RGlhbG9nV2lkdGgoKSksXG4gICAgICAgICAgICAgICAgMC41XG4gICAgICAgICAgICApLnJlY3RhbmdsZVdpdGhXaWR0aCh0aGlzLmdldERpYWxvZ1dpZHRoKCksIDAuNSlcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5kaWFsb2dWaWV3LmZyYW1lID0gVUlDb3JlLm1haW4ucm9vdFZpZXdDb250cm9sbGVyLnZpZXcuYm91bmRzXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLmRpYWxvZ1ZpZXcudmlldy55ZXNCdXR0b24uYWRkVGFyZ2V0Rm9yQ29udHJvbEV2ZW50cyhbXG4gICAgICAgICAgICBVSUJ1dHRvbi5jb250cm9sRXZlbnQuUG9pbnRlclVwSW5zaWRlLCBVSUJ1dHRvbi5jb250cm9sRXZlbnQuRW50ZXJEb3duXG4gICAgICAgIF0sIGZ1bmN0aW9uICh0aGlzOiBDQkRpYWxvZ1ZpZXdTaG93ZXIsIHNlbmRlcjogVUlCdXR0b24sIGV2ZW50OiBFdmVudCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnllc0J1dHRvbldhc1ByZXNzZWQoKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5kaWFsb2dWaWV3LnZpZXcubm9CdXR0b24uYWRkVGFyZ2V0Rm9yQ29udHJvbEV2ZW50cyhbXG4gICAgICAgICAgICBVSUJ1dHRvbi5jb250cm9sRXZlbnQuUG9pbnRlclVwSW5zaWRlLCBVSUJ1dHRvbi5jb250cm9sRXZlbnQuRW50ZXJEb3duXG4gICAgICAgIF0sIGZ1bmN0aW9uICh0aGlzOiBDQkRpYWxvZ1ZpZXdTaG93ZXIsIHNlbmRlcjogVUlCdXR0b24sIGV2ZW50OiBFdmVudCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLm5vQnV0dG9uV2FzUHJlc3NlZCgpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgZ2V0RGlhbG9nV2lkdGgoKSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBwYWRkaW5nID0gUm9vdFZpZXdDb250cm9sbGVyLnBhZGRpbmdMZW5ndGhcbiAgICAgICAgY29uc3QgbGFiZWxIZWlnaHQgPSBwYWRkaW5nICogMC43NVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHZhciByZXN1bHQgPSAyNTBcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy5kaWFsb2dWaWV3LnZpZXcudGl0bGVMYWJlbC5pbnRyaW5zaWNDb250ZW50V2lkdGgoKSArIHBhZGRpbmcgKiAyXG4gICAgICAgIFxuICAgICAgICByZXN1bHQgPSBNYXRoLm1heChyZXN1bHQsIHRoaXMuZGlhbG9nVmlldy52aWV3LnZpZXcuaW50cmluc2ljQ29udGVudFdpZHRoKHRoaXMuZGlhbG9nVmlldy52aWV3LnZpZXcudmlld0hUTUxFbGVtZW50Lm5hdHVyYWxIZWlnaHQgfHwgMTAwMDAwMDAwMCkpXG4gICAgICAgIFxuICAgICAgICByZXN1bHQgPSBNYXRoLm1heChyZXN1bHQsIHdpZHRoKVxuICAgICAgICBcbiAgICAgICAgcmVzdWx0ID0gTWF0aC5taW4ocmVzdWx0LCAxMDAwKVxuICAgICAgICBcbiAgICAgICAgY29uc3QgZGlhbG9nTWF4V2lkdGggPSAodGhpcy5kaWFsb2dWaWV3LnN1cGVydmlldyB8fFxuICAgICAgICAgICAgeyBcImJvdW5kc1wiOiBuZXcgVUlSZWN0YW5nbGUoMCwgMCwgMCwgcmVzdWx0KSB9KS5ib3VuZHMud2lkdGhcbiAgICAgICAgXG4gICAgICAgIHJlc3VsdCA9IE1hdGgubWluKHJlc3VsdCwgZGlhbG9nTWF4V2lkdGgpXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHllc0J1dHRvbldhc1ByZXNzZWQoKSB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIG5vQnV0dG9uV2FzUHJlc3NlZCgpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgY2FuY2VsQnV0dG9uV2FzUHJlc3NlZCgpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgc2hvd1F1ZXN0aW9uRGlhbG9nSW5Sb290Vmlldyh0aXRsZVRleHRPYmplY3Q/OiBDQkxvY2FsaXplZFRleHRPYmplY3QsIHF1ZXN0aW9uVGV4dE9iamVjdD86IENCTG9jYWxpemVkVGV4dE9iamVjdCkge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZGlhbG9nVmlldy52aWV3LmluaXRUaXRsZUxhYmVsSWZOZWVkZWQoKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5kaWFsb2dWaWV3LnZpZXcudGl0bGVMYWJlbC5sb2NhbGl6ZWRUZXh0T2JqZWN0ID0gdGl0bGVUZXh0T2JqZWN0XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZGlhbG9nVmlldy52aWV3LmluaXRRdWVzdGlvbkxhYmVsSWZOZWVkZWQoKVxuICAgICAgICBcbiAgICAgICAgaWYgKElTKHF1ZXN0aW9uVGV4dE9iamVjdCkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5kaWFsb2dWaWV3LnZpZXcucXVlc3Rpb25MYWJlbC5sb2NhbGl6ZWRUZXh0T2JqZWN0ID0gcXVlc3Rpb25UZXh0T2JqZWN0XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZGlhbG9nVmlldy52aWV3LmluaXRZZXNOb0J1dHRvbnNJZk5lZWRlZCgpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5kaWFsb2dWaWV3LnZpZXcubm9CdXR0b24uYWRkVGFyZ2V0Rm9yQ29udHJvbEV2ZW50cyhbXG4gICAgICAgICAgICBVSUJ1dHRvbi5jb250cm9sRXZlbnQuRW50ZXJEb3duLCBVSUJ1dHRvbi5jb250cm9sRXZlbnQuUG9pbnRlclVwSW5zaWRlXG4gICAgICAgIF0sIGZ1bmN0aW9uICh0aGlzOiBDQkRpYWxvZ1ZpZXdTaG93ZXIsIHNlbmRlcjogVUlCdXR0b24sIGV2ZW50OiBFdmVudCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLm5vQnV0dG9uV2FzUHJlc3NlZCgpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmRpYWxvZ1ZpZXcudmlldy55ZXNCdXR0b24uYWRkVGFyZ2V0Rm9yQ29udHJvbEV2ZW50cyhbXG4gICAgICAgICAgICBVSUJ1dHRvbi5jb250cm9sRXZlbnQuRW50ZXJEb3duLCBVSUJ1dHRvbi5jb250cm9sRXZlbnQuUG9pbnRlclVwSW5zaWRlXG4gICAgICAgIF0sIGZ1bmN0aW9uICh0aGlzOiBDQkRpYWxvZ1ZpZXdTaG93ZXIsIHNlbmRlcjogVUlCdXR0b24sIGV2ZW50OiBFdmVudCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnllc0J1dHRvbldhc1ByZXNzZWQoKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZGlhbG9nVmlldy5zaG93SW5Sb290VmlldyhZRVMpXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc2hvd01lc3NhZ2VEaWFsb2dJblJvb3RWaWV3KHRpdGxlVGV4dE9iamVjdD86IENCTG9jYWxpemVkVGV4dE9iamVjdCkge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZGlhbG9nVmlldy52aWV3LmluaXRUaXRsZUxhYmVsSWZOZWVkZWQoKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5kaWFsb2dWaWV3LnZpZXcudGl0bGVMYWJlbC5sb2NhbGl6ZWRUZXh0T2JqZWN0ID0gdGl0bGVUZXh0T2JqZWN0XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5kaWFsb2dWaWV3LnZpZXcuaW5pdENhbmNlbEJ1dHRvbklmTmVlZGVkKClcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLmRpYWxvZ1ZpZXcudmlldy5jYW5jZWxCdXR0b24uYWRkVGFyZ2V0Rm9yQ29udHJvbEV2ZW50cyhbXG4gICAgICAgICAgICBVSUJ1dHRvbi5jb250cm9sRXZlbnQuRW50ZXJEb3duLCBVSUJ1dHRvbi5jb250cm9sRXZlbnQuUG9pbnRlclVwSW5zaWRlXG4gICAgICAgIF0sIGZ1bmN0aW9uICh0aGlzOiBDQkRpYWxvZ1ZpZXdTaG93ZXIsIHNlbmRlcjogVUlCdXR0b24sIGV2ZW50OiBFdmVudCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmNhbmNlbEJ1dHRvbldhc1ByZXNzZWQoKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZGlhbG9nVmlldy5zaG93SW5Sb290VmlldyhZRVMpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmRpYWxvZ1ZpZXcudmlldy5jYW5jZWxCdXR0b24uZm9jdXMoKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHNob3dEaWFsb2dJblJvb3RWaWV3KHZpZXc6IFVJVmlldykge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZGlhbG9nVmlldy52aWV3LnZpZXcgPSB2aWV3XG4gICAgICAgIFxuICAgICAgICB0aGlzLmRpYWxvZ1ZpZXcudmlldy5pbml0Q2FuY2VsQnV0dG9uSWZOZWVkZWQoKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZGlhbG9nVmlldy52aWV3LmNhbmNlbEJ1dHRvbi5hZGRUYXJnZXRGb3JDb250cm9sRXZlbnRzKFtcbiAgICAgICAgICAgIFVJQnV0dG9uLmNvbnRyb2xFdmVudC5FbnRlckRvd24sIFVJQnV0dG9uLmNvbnRyb2xFdmVudC5Qb2ludGVyVXBJbnNpZGVcbiAgICAgICAgXSwgZnVuY3Rpb24gKHRoaXM6IENCRGlhbG9nVmlld1Nob3dlciwgc2VuZGVyOiBVSUJ1dHRvbiwgZXZlbnQ6IEV2ZW50KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsQnV0dG9uV2FzUHJlc3NlZCgpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5kaWFsb2dWaWV3LnNob3dJblJvb3RWaWV3KFlFUylcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZGlhbG9nVmlldy52aWV3LmNhbmNlbEJ1dHRvbi5mb2N1cygpXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgc2hvd0ltYWdlRGlhbG9nSW5Sb290VmlldyhpbWFnZVVSTDogc3RyaW5nLCBkZWxldGVJbWFnZUNhbGxiYWNrPzogRnVuY3Rpb24pIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB2YXIgbG9hZGluZ0xhYmVsID0gbmV3IFVJVGV4dFZpZXcoKVxuICAgICAgICBcbiAgICAgICAgbG9hZGluZ0xhYmVsLnRleHQgPSBcIkxvYWRpbmcgaW1hZ2UuXCJcbiAgICAgICAgXG4gICAgICAgIGxvYWRpbmdMYWJlbC50ZXh0QWxpZ25tZW50ID0gVUlUZXh0Vmlldy50ZXh0QWxpZ25tZW50LmNlbnRlclxuICAgICAgICBcbiAgICAgICAgdGhpcy5kaWFsb2dWaWV3LnZpZXcudmlldyA9IGxvYWRpbmdMYWJlbFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGltYWdlVmlldyA9IG5ldyBVSUltYWdlVmlldygpXG4gICAgICAgIFxuICAgICAgICBpbWFnZVZpZXcuaW1hZ2VTb3VyY2UgPSBpbWFnZVVSTFxuICAgICAgICBcbiAgICAgICAgaW1hZ2VWaWV3LnZpZXdIVE1MRWxlbWVudC5vbmxvYWQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGlhbG9nVmlldy52aWV3LnZpZXcgPSBpbWFnZVZpZXdcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaW1hZ2VWaWV3LnNldE5lZWRzTGF5b3V0VXBUb1Jvb3RWaWV3KClcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaW1hZ2VWaWV3LmZpbGxNb2RlID0gVUlJbWFnZVZpZXcuZmlsbE1vZGUuYXNwZWN0Rml0SWZMYXJnZXJcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpZiAoSVMoZGVsZXRlSW1hZ2VDYWxsYmFjaykpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5kaWFsb2dWaWV3LnZpZXcuaW5pdFllc05vQnV0dG9uc0lmTmVlZGVkKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5kaWFsb2dWaWV3LnZpZXcueWVzQnV0dG9uLnRpdGxlTGFiZWwudGV4dCA9IFwiQ2xvc2VcIlxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmRpYWxvZ1ZpZXcudmlldy5ub0J1dHRvbi50aXRsZUxhYmVsLnRleHQgPSBcIkRlbGV0ZVwiXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuZGlhbG9nVmlldy52aWV3Lm5vQnV0dG9uRGlzbWlzc2VzRGlhbG9nID0gTk9cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5kaWFsb2dWaWV3LnZpZXcubm9CdXR0b24uYWRkVGFyZ2V0Rm9yQ29udHJvbEV2ZW50cyhbXG4gICAgICAgICAgICAgICAgVUlCdXR0b24uY29udHJvbEV2ZW50LkVudGVyRG93biwgVUlCdXR0b24uY29udHJvbEV2ZW50LlBvaW50ZXJVcEluc2lkZVxuICAgICAgICAgICAgXSwgZnVuY3Rpb24gKHRoaXM6IENCRGlhbG9nVmlld1Nob3dlciwgc2VuZGVyOiBVSUJ1dHRvbiwgZXZlbnQ6IEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3QgZGlhbG9nU2hvd2VyID0gQ0JEaWFsb2dWaWV3U2hvd2VyLl9kaWFsb2dTaG93ZXJXaXRoRGlzbWlzc0NhbGxiYWNrKGZ1bmN0aW9uICh0aGlzOiBDQkRpYWxvZ1ZpZXdTaG93ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vdGhpcy5kaWFsb2dWaWV3LmRpc21pc3MoKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIHRleHRPYmplY3QgPSBMYW5ndWFnZVNlcnZpY2UubG9jYWxpemVkVGV4dE9iamVjdEZvclRleHQoXCJEZWxldGUgdGhpcyBpbWFnZS5cIilcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBkaWFsb2dTaG93ZXIuc2hvd1F1ZXN0aW9uRGlhbG9nSW5Sb290Vmlldyh0ZXh0T2JqZWN0KVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGRpYWxvZ1Nob3dlci55ZXNCdXR0b25XYXNQcmVzc2VkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlSW1hZ2VDYWxsYmFjaygpXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBkaWFsb2dTaG93ZXIuZGlhbG9nVmlldy5kaXNtaXNzKClcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuZGlhbG9nVmlldy52aWV3Lnllc0J1dHRvbi5hZGRUYXJnZXRGb3JDb250cm9sRXZlbnRzKFtcbiAgICAgICAgICAgICAgICBVSUJ1dHRvbi5jb250cm9sRXZlbnQuRW50ZXJEb3duLCBVSUJ1dHRvbi5jb250cm9sRXZlbnQuUG9pbnRlclVwSW5zaWRlXG4gICAgICAgICAgICBdLCBmdW5jdGlvbiAodGhpczogQ0JEaWFsb2dWaWV3U2hvd2VyLCBzZW5kZXI6IFVJQnV0dG9uLCBldmVudDogRXZlbnQpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLmRpYWxvZ1ZpZXcuZGlzbWlzcygpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5kaWFsb2dWaWV3LnZpZXcuaW5pdENhbmNlbEJ1dHRvbklmTmVlZGVkKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5kaWFsb2dWaWV3LnZpZXcuY2FuY2VsQnV0dG9uLnRpdGxlTGFiZWwudGV4dCA9IFwiQ2xvc2VcIlxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZGlhbG9nVmlldy5zaG93SW5Sb290VmlldyhZRVMpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmRpYWxvZ1ZpZXcudmlldy5jYW5jZWxCdXR0b24uZm9jdXMoKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHNob3dBY3Rpb25JbmRpY2F0b3JEaWFsb2dJblJvb3RWaWV3KG1lc3NhZ2U6IHN0cmluZykge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBjb25zdCBhY3Rpb25JbmRpY2F0b3IgPSBuZXcgVUlBY3Rpb25JbmRpY2F0b3IoKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZGlhbG9nVmlldy56SW5kZXggPSAxNTBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZGlhbG9nVmlldy52aWV3LnZpZXcgPSBhY3Rpb25JbmRpY2F0b3JcbiAgICAgICAgXG4gICAgICAgIGFjdGlvbkluZGljYXRvci5zdHlsZS5taW5IZWlnaHQgPSBcIjEwMHB4XCJcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZGlhbG9nVmlldy52aWV3LmluaXRRdWVzdGlvbkxhYmVsSWZOZWVkZWQoKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5kaWFsb2dWaWV3LnZpZXcucXVlc3Rpb25MYWJlbC50ZXh0ID0gbWVzc2FnZVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGFjdGlvbkluZGljYXRvci5zdGFydCgpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmRpYWxvZ1ZpZXcudmlldy5iYWNrZ3JvdW5kQ29sb3IgPSBDQkNvbG9yLnByaW1hcnlDb250ZW50Q29sb3IuY29sb3JXaXRoQWxwaGEoMC41KVxuICAgICAgICBcbiAgICAgICAgdGhpcy5kaWFsb2dWaWV3LnZpZXcucXVlc3Rpb25MYWJlbC50ZXh0Q29sb3IgPSBVSUNvbG9yLndoaXRlQ29sb3JcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5kaWFsb2dWaWV3LmRpc21pc3Nlc09uVGFwT3V0c2lkZSA9IE5PXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgQ0JEaWFsb2dWaWV3U2hvd2VyLmN1cnJlbnRBY3Rpb25JbmRpY2F0b3JEaWFsb2dWaWV3U2hvd2VyID0gdGhpc1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZGlhbG9nVmlldy5zaG93SW5Sb290VmlldyhOTylcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZGlhbG9nVmlldy52aWV3LmNhbmNlbEJ1dHRvbi5mb2N1cygpXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgc3RhdGljIHNob3dOZXh0RGlhbG9nKCkge1xuICAgICAgICBcbiAgICAgICAgKENCRGlhbG9nVmlld1Nob3dlci5uZXh0U2hvd0RpYWxvZ0Z1bmN0aW9ucy5maXJzdEVsZW1lbnQgfHwgbmlsKSgpXG4gICAgICAgIENCRGlhbG9nVmlld1Nob3dlci5uZXh0U2hvd0RpYWxvZ0Z1bmN0aW9ucy5yZW1vdmVFbGVtZW50QXRJbmRleCgwKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgc3RhdGljIGFsZXJ0KHRleHQ6IHN0cmluZywgZGlzbWlzc0NhbGxiYWNrOiBGdW5jdGlvbiA9IG5pbCkge1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZGlhbG9nU2hvd2VyID0gQ0JEaWFsb2dWaWV3U2hvd2VyLl9kaWFsb2dTaG93ZXJXaXRoRGlzbWlzc0NhbGxiYWNrKGRpc21pc3NDYWxsYmFjaylcbiAgICAgICAgY29uc3QgdGV4dE9iamVjdCA9IExhbmd1YWdlU2VydmljZS5sb2NhbGl6ZWRUZXh0T2JqZWN0Rm9yVGV4dCh0ZXh0KVxuICAgICAgICBjb25zdCBzaG93RGlhbG9nRnVuY3Rpb24gPSBkaWFsb2dTaG93ZXIuc2hvd01lc3NhZ2VEaWFsb2dJblJvb3RWaWV3LmJpbmQoZGlhbG9nU2hvd2VyLCB0ZXh0T2JqZWN0KVxuICAgICAgICBDQkRpYWxvZ1ZpZXdTaG93ZXIuX3Nob3dEaWFsb2dXaXRoRnVuY3Rpb24oc2hvd0RpYWxvZ0Z1bmN0aW9uLCBkaWFsb2dTaG93ZXIpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBzdGF0aWMgbG9jYWxpemVkQWxlcnQodGV4dE9iamVjdDogQ0JMb2NhbGl6ZWRUZXh0T2JqZWN0LCBkaXNtaXNzQ2FsbGJhY2s6IEZ1bmN0aW9uID0gbmlsKSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBkaWFsb2dTaG93ZXIgPSBDQkRpYWxvZ1ZpZXdTaG93ZXIuX2RpYWxvZ1Nob3dlcldpdGhEaXNtaXNzQ2FsbGJhY2soZGlzbWlzc0NhbGxiYWNrKVxuICAgICAgICBjb25zdCBzaG93RGlhbG9nRnVuY3Rpb24gPSBkaWFsb2dTaG93ZXIuc2hvd01lc3NhZ2VEaWFsb2dJblJvb3RWaWV3LmJpbmQoZGlhbG9nU2hvd2VyLCB0ZXh0T2JqZWN0KVxuICAgICAgICBDQkRpYWxvZ1ZpZXdTaG93ZXIuX3Nob3dEaWFsb2dXaXRoRnVuY3Rpb24oc2hvd0RpYWxvZ0Z1bmN0aW9uLCBkaWFsb2dTaG93ZXIpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBzdGF0aWMgc2hvd1F1ZXN0aW9uRGlhbG9nKHF1ZXN0aW9uVGV4dDogc3RyaW5nLCBkaXNtaXNzQ2FsbGJhY2s6IEZ1bmN0aW9uID0gbmlsKSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBkaWFsb2dTaG93ZXIgPSBDQkRpYWxvZ1ZpZXdTaG93ZXIuX2RpYWxvZ1Nob3dlcldpdGhEaXNtaXNzQ2FsbGJhY2soZGlzbWlzc0NhbGxiYWNrKVxuICAgICAgICBjb25zdCB0ZXh0T2JqZWN0ID0gTGFuZ3VhZ2VTZXJ2aWNlLmxvY2FsaXplZFRleHRPYmplY3RGb3JUZXh0KHF1ZXN0aW9uVGV4dClcbiAgICAgICAgY29uc3Qgc2hvd0RpYWxvZ0Z1bmN0aW9uID0gZGlhbG9nU2hvd2VyLnNob3dRdWVzdGlvbkRpYWxvZ0luUm9vdFZpZXcuYmluZChkaWFsb2dTaG93ZXIsIHRleHRPYmplY3QpXG4gICAgICAgIENCRGlhbG9nVmlld1Nob3dlci5fc2hvd0RpYWxvZ1dpdGhGdW5jdGlvbihzaG93RGlhbG9nRnVuY3Rpb24sIGRpYWxvZ1Nob3dlcilcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBkaWFsb2dTaG93ZXJcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHN0YXRpYyBzaG93SW1hZ2VEaWFsb2coaW1hZ2VVUkw6IHN0cmluZywgZGVsZXRlSW1hZ2VDYWxsYmFjazogRnVuY3Rpb24gPSBuaWwsIGRpc21pc3NDYWxsYmFjazogRnVuY3Rpb24gPSBuaWwpIHtcbiAgICAgICAgXG4gICAgICAgIHZhciBkaWFsb2dTaG93ZXIgPSBDQkRpYWxvZ1ZpZXdTaG93ZXIuX2RpYWxvZ1Nob3dlcldpdGhEaXNtaXNzQ2FsbGJhY2soZGlzbWlzc0NhbGxiYWNrKVxuICAgICAgICBcbiAgICAgICAgdmFyIHNob3dEaWFsb2dGdW5jdGlvbiA9IGRpYWxvZ1Nob3dlci5zaG93SW1hZ2VEaWFsb2dJblJvb3RWaWV3LmJpbmQoXG4gICAgICAgICAgICBkaWFsb2dTaG93ZXIsXG4gICAgICAgICAgICBpbWFnZVVSTCxcbiAgICAgICAgICAgIGRlbGV0ZUltYWdlQ2FsbGJhY2tcbiAgICAgICAgKVxuICAgICAgICBDQkRpYWxvZ1ZpZXdTaG93ZXIuX3Nob3dEaWFsb2dXaXRoRnVuY3Rpb24oc2hvd0RpYWxvZ0Z1bmN0aW9uLCBkaWFsb2dTaG93ZXIpXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZGlhbG9nU2hvd2VyXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIHNob3dEaWFsb2codmlldzogVUlWaWV3LCBkaXNtaXNzQ2FsbGJhY2s6IEZ1bmN0aW9uID0gbmlsKSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBkaWFsb2dTaG93ZXIgPSBDQkRpYWxvZ1ZpZXdTaG93ZXIuX2RpYWxvZ1Nob3dlcldpdGhEaXNtaXNzQ2FsbGJhY2soZGlzbWlzc0NhbGxiYWNrKVxuICAgICAgICBjb25zdCBzaG93RGlhbG9nRnVuY3Rpb24gPSBkaWFsb2dTaG93ZXIuc2hvd0RpYWxvZ0luUm9vdFZpZXcuYmluZChkaWFsb2dTaG93ZXIsIHZpZXcpXG4gICAgICAgIENCRGlhbG9nVmlld1Nob3dlci5fc2hvd0RpYWxvZ1dpdGhGdW5jdGlvbihzaG93RGlhbG9nRnVuY3Rpb24sIGRpYWxvZ1Nob3dlcilcbiAgICBcbiAgICAgICAgcmV0dXJuIGRpYWxvZ1Nob3dlcjtcbiAgICBcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIHNob3dBY3Rpb25JbmRpY2F0b3JEaWFsb2cobWVzc2FnZTogc3RyaW5nLCBkaXNtaXNzQ2FsbGJhY2s6IEZ1bmN0aW9uID0gbmlsKSB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgaWYgKElTKENCRGlhbG9nVmlld1Nob3dlci5jdXJyZW50QWN0aW9uSW5kaWNhdG9yRGlhbG9nVmlld1Nob3dlcikpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBDQkRpYWxvZ1ZpZXdTaG93ZXIuY3VycmVudEFjdGlvbkluZGljYXRvckRpYWxvZ1ZpZXdTaG93ZXIuZGlhbG9nVmlldy52aWV3LnF1ZXN0aW9uTGFiZWwudGV4dCA9IG1lc3NhZ2VcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgQ0JEaWFsb2dWaWV3U2hvd2VyLmN1cnJlbnRBY3Rpb25JbmRpY2F0b3JEaWFsb2dWaWV3U2hvd2VyLmRpYWxvZ1ZpZXcudmlldy5zZXROZWVkc0xheW91dFVwVG9Sb290VmlldygpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBjb25zdCBkaWFsb2dTaG93ZXIgPSBDQkRpYWxvZ1ZpZXdTaG93ZXIuX2RpYWxvZ1Nob3dlcldpdGhEaXNtaXNzQ2FsbGJhY2soZGlzbWlzc0NhbGxiYWNrKVxuICAgICAgICBcbiAgICAgICAgZGlhbG9nU2hvd2VyLnNob3dBY3Rpb25JbmRpY2F0b3JEaWFsb2dJblJvb3RWaWV3KG1lc3NhZ2UpXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZGlhbG9nU2hvd2VyXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgc3RhdGljIGhpZGVBY3Rpb25JbmRpY2F0b3JEaWFsb2coKSB7XG4gICAgICAgIFxuICAgICAgICBDQkRpYWxvZ1ZpZXdTaG93ZXIuY3VycmVudEFjdGlvbkluZGljYXRvckRpYWxvZ1ZpZXdTaG93ZXIuZGlhbG9nVmlldy5kaXNtaXNzKClcbiAgICAgICAgXG4gICAgICAgIENCRGlhbG9nVmlld1Nob3dlci5jdXJyZW50QWN0aW9uSW5kaWNhdG9yRGlhbG9nVmlld1Nob3dlciA9IG5pbFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgcHJpdmF0ZSBzdGF0aWMgX2RpYWxvZ1Nob3dlcldpdGhEaXNtaXNzQ2FsbGJhY2soZGlzbWlzc0NhbGxiYWNrOiBGdW5jdGlvbikge1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZGlhbG9nU2hvd2VyID0gbmV3IENCRGlhbG9nVmlld1Nob3dlcigpXG4gICAgICAgIGNvbnN0IGRpc21pc3NGdW5jdGlvbiA9IGRpYWxvZ1Nob3dlci5kaWFsb2dWaWV3LmRpc21pc3MuYmluZChkaWFsb2dTaG93ZXIuZGlhbG9nVmlldylcbiAgICAgICAgXG4gICAgICAgIGRpYWxvZ1Nob3dlci5kaWFsb2dWaWV3LmRpc21pc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkaXNtaXNzRnVuY3Rpb24oKVxuICAgICAgICAgICAgZGlzbWlzc0NhbGxiYWNrKClcbiAgICAgICAgICAgIENCRGlhbG9nVmlld1Nob3dlci5jdXJyZW50RGlhbG9nVmlld1Nob3dlciA9IG51bGxcbiAgICAgICAgICAgIENCRGlhbG9nVmlld1Nob3dlci5zaG93TmV4dERpYWxvZygpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBkaWFsb2dTaG93ZXJcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHByaXZhdGUgc3RhdGljIF9zaG93RGlhbG9nV2l0aEZ1bmN0aW9uKHNob3dEaWFsb2dGdW5jdGlvbjogYW55LCBkaWFsb2dTaG93ZXI6IENCRGlhbG9nVmlld1Nob3dlcikge1xuICAgICAgICBcbiAgICAgICAgaWYgKElTKENCRGlhbG9nVmlld1Nob3dlci5jdXJyZW50RGlhbG9nVmlld1Nob3dlcikpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgQ0JEaWFsb2dWaWV3U2hvd2VyLm5leHRTaG93RGlhbG9nRnVuY3Rpb25zLnB1c2goc2hvd0RpYWxvZ0Z1bmN0aW9uKVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIENCRGlhbG9nVmlld1Nob3dlci5jdXJyZW50RGlhbG9nVmlld1Nob3dlciA9IGRpYWxvZ1Nob3dlclxuICAgICAgICAgICAgc2hvd0RpYWxvZ0Z1bmN0aW9uKClcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbn1cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vVUlDb3JlL1VJTGlua0J1dHRvbi50c1wiIC8+XG5cblxuXG5cblxuY2xhc3MgQ0JMaW5rQnV0dG9uIGV4dGVuZHMgVUlMaW5rQnV0dG9uIHtcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50SUQ/OiBzdHJpbmcsIGVsZW1lbnRUeXBlPzogc3RyaW5nKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlcihlbGVtZW50SUQsIGVsZW1lbnRUeXBlKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fY2xhc3MgPSBDQkxpbmtCdXR0b25cbiAgICAgICAgdGhpcy5zdXBlcmNsYXNzID0gVUlMaW5rQnV0dG9uXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBpbml0VmlldyhlbGVtZW50SUQ6IHN0cmluZywgdmlld0hUTUxFbGVtZW50OiBIVE1MRWxlbWVudCwgaW5pdFZpZXdEYXRhKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci5pbml0VmlldyhlbGVtZW50SUQsIHZpZXdIVE1MRWxlbWVudCwgaW5pdFZpZXdEYXRhKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5idXR0b24ucmVtb3ZlRnJvbVN1cGVydmlldygpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmJ1dHRvbiA9IG5ldyBDQkJ1dHRvbih0aGlzLmVsZW1lbnRJRCArIFwiQnV0dG9uXCIsIGluaXRWaWV3RGF0YS5lbGVtZW50VHlwZSlcbiAgICAgICAgXG4gICAgICAgIHRoaXMuYWRkU3Vidmlldyh0aGlzLmJ1dHRvbilcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxufVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL1VJQ29yZS9VSVZpZXcudHNcIiAvPlxuXG5cblxuXG5cbmNsYXNzIENlbGxWaWV3IGV4dGVuZHMgVUlCdXR0b24ge1xuICAgIFxuICAgIFxuICAgIF9pc0FCdXR0b24gPSBOT1xuICAgIF9yaWdodEltYWdlVmlldzogVUlJbWFnZVZpZXdcbiAgICBcbiAgICBsZWZ0SW5zZXQgPSAwXG4gICAgcmlnaHRJbnNldCA9IDBcbiAgICBcbiAgICAvL3RpdGxlTGFiZWw6IFVJVGV4dFZpZXc7XG4gICAgXG4gICAgY29uc3RydWN0b3IoZWxlbWVudElEPzogc3RyaW5nLCB0aXRsZUxhYmVsVHlwZTogc3RyaW5nID0gVUlUZXh0Vmlldy50eXBlLnNwYW4pIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyKGVsZW1lbnRJRCwgdW5kZWZpbmVkLCB0aXRsZUxhYmVsVHlwZSlcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2NsYXNzID0gQ2VsbFZpZXdcbiAgICAgICAgdGhpcy5zdXBlcmNsYXNzID0gVUlWaWV3XG4gICAgICAgIFxuICAgICAgICAvLyB0aGlzLnRpdGxlTGFiZWwgPSBuZXcgVUlUZXh0Vmlldyh0aGlzLmVsZW1lbnRJRCArIFwiVGl0bGVMYWJlbFwiLCB0aXRsZUxhYmVsVHlwZSk7XG4gICAgICAgIC8vIHRoaXMuYWRkU3Vidmlldyh0aGlzLnRpdGxlTGFiZWwpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy51cGRhdGVGb3JDdXJyZW50SXNBQnV0dG9uU3RhdGUoKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIHNldCBpc0FCdXR0b24oaXNBQnV0dG9uOiBib29sZWFuKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLl9pc0FCdXR0b24gPSBpc0FCdXR0b25cbiAgICAgICAgXG4gICAgICAgIHRoaXMudXBkYXRlRm9yQ3VycmVudElzQUJ1dHRvblN0YXRlKClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGdldCBpc0FCdXR0b24oKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy5faXNBQnV0dG9uXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICB1cGRhdGVGb3JDdXJyZW50SXNBQnV0dG9uU3RhdGUoKSB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuX2lzQUJ1dHRvbikge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC51c2VySW50ZXJhY3Rpb25FbmFibGVkID0gTk9cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy50aXRsZUxhYmVsLm5hdGl2ZVNlbGVjdGlvbkVuYWJsZWQgPSBOT1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnRpdGxlTGFiZWwudGV4dEFsaWdubWVudCA9IFVJVGV4dFZpZXcudGV4dEFsaWdubWVudC5jZW50ZXJcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5uYXRpdmVTZWxlY3Rpb25FbmFibGVkID0gTk9cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zdHlsZS5vdXRsaW5lID0gXCJcIlxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmNvbG9ycyA9IHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aXRsZUxhYmVsOiB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBub3JtYWw6IFVJQ29sb3IuYmx1ZUNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHRlZDogVUlDb2xvci5ibHVlQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBVSUNvbG9yLmJsdWVDb2xvclxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbDogVUlDb2xvci50cmFuc3BhcmVudENvbG9yLFxuICAgICAgICAgICAgICAgICAgICBob3ZlcmVkOiBuZXcgVUlDb2xvcihcIiNGOEY4RjhcIiksXG4gICAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodGVkOiBuZXcgVUlDb2xvcihcIiNlYmViZWJcIiksXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBuZXcgVUlDb2xvcihcIiNlYmViZWJcIilcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zdHlsZS5jdXJzb3IgPSBcIlwiXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC51c2VySW50ZXJhY3Rpb25FbmFibGVkID0gWUVTXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC5uYXRpdmVTZWxlY3Rpb25FbmFibGVkID0gWUVTXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC50ZXh0QWxpZ25tZW50ID0gVUlUZXh0Vmlldy50ZXh0QWxpZ25tZW50LmxlZnRcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5uYXRpdmVTZWxlY3Rpb25FbmFibGVkID0gWUVTXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuc3R5bGUub3V0bGluZSA9IFwibm9uZVwiXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuY29sb3JzID0ge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRpdGxlTGFiZWw6IHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbDogVUlDb2xvci5ibGFja0NvbG9yLFxuICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHRlZDogVUlDb2xvci5ibGFja0NvbG9yLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZDogVUlDb2xvci5ibGFja0NvbG9yXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDoge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsOiBVSUNvbG9yLnRyYW5zcGFyZW50Q29sb3IsXG4gICAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodGVkOiBVSUNvbG9yLnRyYW5zcGFyZW50Q29sb3IsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBVSUNvbG9yLnRyYW5zcGFyZW50Q29sb3JcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy51cGRhdGVDb250ZW50Rm9yQ3VycmVudFN0YXRlKClcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgaW5pdFJpZ2h0SW1hZ2VWaWV3SWZOZWVkZWQoKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5fcmlnaHRJbWFnZVZpZXcpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3JpZ2h0SW1hZ2VWaWV3ID0gbmV3IFVJSW1hZ2VWaWV3KHRoaXMuZWxlbWVudElEICsgXCJSaWdodEltYWdlVmlld1wiKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fcmlnaHRJbWFnZVZpZXcudXNlckludGVyYWN0aW9uRW5hYmxlZCA9IE5PXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBzZXQgcmlnaHRJbWFnZVNvdXJjZShpbWFnZVNvdXJjZTogc3RyaW5nKSB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGlmIChJUyhpbWFnZVNvdXJjZSkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5pbml0UmlnaHRJbWFnZVZpZXdJZk5lZWRlZCgpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX3JpZ2h0SW1hZ2VWaWV3LmltYWdlU291cmNlID0gaW1hZ2VTb3VyY2VcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5hZGRTdWJ2aWV3KHRoaXMuX3JpZ2h0SW1hZ2VWaWV3KVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX3JpZ2h0SW1hZ2VWaWV3LnJlbW92ZUZyb21TdXBlcnZpZXcoKVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBnZXQgcmlnaHRJbWFnZVNvdXJjZSgpIHtcbiAgICBcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5pbFxuICAgIFxuICAgICAgICBpZiAodGhpcy5fcmlnaHRJbWFnZVZpZXcpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fcmlnaHRJbWFnZVZpZXcuaW1hZ2VTb3VyY2VcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBsYXlvdXRTdWJ2aWV3cygpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyLmxheW91dFN1YnZpZXdzKClcbiAgICBcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IFJvb3RWaWV3Q29udHJvbGxlci5wYWRkaW5nTGVuZ3RoXG4gICAgICAgIGNvbnN0IGxhYmVsSGVpZ2h0ID0gcGFkZGluZ1xuICAgIFxuICAgICAgICBjb25zdCBib3VuZHMgPSB0aGlzLmJvdW5kc1xuICAgIFxuICAgIFxuICAgICAgICB0aGlzLnRpdGxlTGFiZWwuY2VudGVyWUluQ29udGFpbmVyKClcbiAgICAgICAgXG4gICAgICAgIHRoaXMudGl0bGVMYWJlbC5zdHlsZS5sZWZ0ID0gXCJcIiArIChwYWRkaW5nICogMC41ICsgdGhpcy5sZWZ0SW5zZXQpLmludGVnZXJWYWx1ZSArIFwicHhcIlxuICAgICAgICB0aGlzLnRpdGxlTGFiZWwuc3R5bGUucmlnaHQgPSBcIlwiICsgKHBhZGRpbmcgKiAwLjUgKyB0aGlzLnJpZ2h0SW5zZXQpLmludGVnZXJWYWx1ZSArIFwicHhcIlxuICAgICAgICBcbiAgICAgICAgdGhpcy50aXRsZUxhYmVsLnN0eWxlLm1heEhlaWdodCA9IFwiMTAwJVwiXG4gICAgICAgIFxuICAgICAgICB0aGlzLnRpdGxlTGFiZWwuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiXG4gICAgICAgIFxuICAgICAgICAvL3RoaXMudGl0bGVMYWJlbC5zdHlsZS53aGl0ZVNwYWNlID0gXCJub3dyYXBcIjtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5fcmlnaHRJbWFnZVZpZXcgJiYgdGhpcy5fcmlnaHRJbWFnZVZpZXcuc3VwZXJ2aWV3ID09IHRoaXMpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gdmFyIGltYWdlSGVpZ2h0ID0gYm91bmRzLmhlaWdodCAtIHBhZGRpbmc7XG4gICAgICAgICAgICAvLyB0aGlzLl9yaWdodEltYWdlVmlldy5mcmFtZSA9IG5ldyBVSVJlY3RhbmdsZShib3VuZHMud2lkdGggLSBpbWFnZUhlaWdodCAtIHBhZGRpbmcgKiAwLjUsIHBhZGRpbmcgKiAwLjUsIGltYWdlSGVpZ2h0LCBpbWFnZUhlaWdodCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX3JpZ2h0SW1hZ2VWaWV3LmZyYW1lID0gYm91bmRzLnJlY3RhbmdsZVdpdGhJbnNldHModGhpcy5sZWZ0SW5zZXQsIHBhZGRpbmcgKiAwLjUgK1xuICAgICAgICAgICAgICAgIHRoaXMucmlnaHRJbnNldCwgMCwgMCkucmVjdGFuZ2xlV2l0aFdpZHRoKDI0LCAxKS5yZWN0YW5nbGVXaXRoSGVpZ2h0KDI0LCAwLjUpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC5zdHlsZS5yaWdodCA9IFwiXCIgK1xuICAgICAgICAgICAgICAgIChwYWRkaW5nICogMC41ICsgdGhpcy5yaWdodEluc2V0ICsgdGhpcy5fcmlnaHRJbWFnZVZpZXcuZnJhbWUud2lkdGgpLmludGVnZXJWYWx1ZSArIFwicHhcIlxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbn1cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuIiwiLy8vPHJlZmVyZW5jZSBwYXRoPVwiLi4vVUlDb3JlL1VJVmlldy50c1wiLz5cblxuXG5cblxuXG5jbGFzcyBTZWFyY2hUZXh0RmllbGQgZXh0ZW5kcyBVSVZpZXcge1xuICAgIFxuICAgIF90ZXh0RmllbGQ6IFVJVmlld1xuICAgIF9zZWFyY2hCdXR0b246IFVJVmlld1xuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRJRDogc3RyaW5nKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlcihlbGVtZW50SUQpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5fY2xhc3MgPSBTZWFyY2hUZXh0RmllbGRcbiAgICAgICAgdGhpcy5zdXBlcmNsYXNzID0gVUlWaWV3XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBpbml0VmlldyhlbGVtZW50SUQ6IHN0cmluZywgdmlld0hUTUxFbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIuaW5pdFZpZXcoZWxlbWVudElELCB2aWV3SFRNTEVsZW1lbnQpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdmlld0hUTUxFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJpbnB1dFwiLCBcImlucHV0LS1zZWFyY2hcIilcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB2aWV3SFRNTEVsZW1lbnQuaW5uZXJIVE1MID0gXCJcXFxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJpbnB1dF9fYnV0dG9uXFxcIj5cXFxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJtYXRlcmlhbC1pY29uc1xcXCI+c2VhcmNoPC9pPlxcXG4gICAgICAgICAgICA8L2J1dHRvbj5cXFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInNlYXJjaFxcXCIgY2xhc3M9XFxcImlucHV0X19maWVsZFxcXCIgcGxhY2Vob2xkZXI9XFxcIlNlYXJjaFxcXCI+XCJcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3RleHRGaWVsZCA9IG5ldyBVSVZpZXcobmlsLCB0aGlzLnRleHRGaWVsZEVsZW1lbnQpXG4gICAgICAgIHRoaXMuX3NlYXJjaEJ1dHRvbiA9IG5ldyBVSVZpZXcobmlsLCB0aGlzLnNlYXJjaEJ1dHRvbkVsZW1lbnQpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3NlYXJjaEJ1dHRvbi5hZGRUYXJnZXRGb3JDb250cm9sRXZlbnRzKFtcbiAgICAgICAgICAgIFVJVmlldy5jb250cm9sRXZlbnQuRW50ZXJEb3duLCBVSVZpZXcuY29udHJvbEV2ZW50LlBvaW50ZXJVcEluc2lkZVxuICAgICAgICBdLCBmdW5jdGlvbiAodGhpczogU2VhcmNoVGV4dEZpZWxkLCBzZW5kZXI6IFVJVmlldywgZXZlbnQ6IEV2ZW50KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMucGVyZm9ybVNlYXJjaCgpXG4gICAgICAgICAgICBcbiAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fdGV4dEZpZWxkLmFkZFRhcmdldEZvckNvbnRyb2xFdmVudChcbiAgICAgICAgICAgIFVJVmlldy5jb250cm9sRXZlbnQuRW50ZXJEb3duLFxuICAgICAgICAgICAgZnVuY3Rpb24gKHRoaXM6IFNlYXJjaFRleHRGaWVsZCwgc2VuZGVyOiBVSVZpZXcsIGV2ZW50OiBFdmVudCkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMucGVyZm9ybVNlYXJjaCgpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLl90ZXh0RmllbGQudmlld0hUTUxFbGVtZW50Lm9uaW5wdXQgPSBmdW5jdGlvbiAodGhpczogU2VhcmNoVGV4dEZpZWxkLCBldmVudCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX3RleHRGaWVsZC5zZW5kQ29udHJvbEV2ZW50Rm9yS2V5KFVJVGV4dEZpZWxkLmNvbnRyb2xFdmVudC5UZXh0Q2hhbmdlLCBldmVudClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGdldCBzZWFyY2hCdXR0b25FbGVtZW50KCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld0hUTUxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJidXR0b25cIikgYXMgSFRNTEJ1dHRvbkVsZW1lbnRcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBnZXQgdGV4dEZpZWxkRWxlbWVudCgpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdIVE1MRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXRcIikgYXMgSFRNTElucHV0RWxlbWVudFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIHNldCBwbGFjZWhvbGRlclRleHQocGxhY2Vob2xkZXJUZXh0OiBzdHJpbmcpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudGV4dEZpZWxkRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJwbGFjZWhvbGRlclwiLCBwbGFjZWhvbGRlclRleHQpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBnZXQgcGxhY2Vob2xkZXJUZXh0KCkge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzLnRleHRGaWVsZEVsZW1lbnQuZ2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIilcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBnZXQgdGV4dCgpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzLnRleHRGaWVsZEVsZW1lbnQudmFsdWVcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHNldCB0ZXh0KHRleHQ6IHN0cmluZykge1xuICAgICAgICBcbiAgICAgICAgdGhpcy50ZXh0RmllbGRFbGVtZW50LnZhbHVlID0gdGV4dFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgZm9jdXMoKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnRleHRGaWVsZEVsZW1lbnQuZm9jdXMoKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgYmx1cigpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudGV4dEZpZWxkRWxlbWVudC5ibHVyKClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIHBlcmZvcm1TZWFyY2goKTogYW55IHtcbiAgICBcbiAgICBcbiAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgbGF5b3V0U3Vidmlld3MoKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci5sYXlvdXRTdWJ2aWV3cygpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG59XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuIiwiLy8vPHJlZmVyZW5jZSBwYXRoPVwiVUlPYmplY3QudHNcIi8+XG5cblxuXG5cblxuXG5cblxuY2xhc3MgVUlLZXlWYWx1ZVN0cmluZ0ZpbHRlciBleHRlbmRzIFVJT2JqZWN0IHtcbiAgICBcbiAgICBcbiAgICBzdGF0aWMgX3NoYXJlZFdlYldvcmtlciA9IG5ldyBXb3JrZXIoXCJjb21waWxlZFNjcmlwdHMvVUlLZXlWYWx1ZVN0cmluZ0ZpbHRlcldlYldvcmtlci5qc1wiKVxuICAgIFxuICAgIHN0YXRpYyBfaW5zdGFuY2VOdW1iZXIgPSAtMVxuICAgIFxuICAgIFxuICAgIF9pbnN0YW5jZU51bWJlcjogbnVtYmVyXG4gICAgXG4gICAgX2lzVGhyZWFkQ2xvc2VkID0gTk9cbiAgICBcbiAgICBfd2ViV29ya2VyID0gVUlLZXlWYWx1ZVN0cmluZ0ZpbHRlci5fc2hhcmVkV2ViV29ya2VyXG4gICAgXG4gICAgY29uc3RydWN0b3IodXNlU2VwYXJhdGVXZWJXb3JrZXIgPSBOTykge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2NsYXNzID0gVUlLZXlWYWx1ZVN0cmluZ0ZpbHRlclxuICAgICAgICB0aGlzLnN1cGVyY2xhc3MgPSBVSU9iamVjdFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGlmICh1c2VTZXBhcmF0ZVdlYldvcmtlcikge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl93ZWJXb3JrZXIgPSBuZXcgV29ya2VyKFwiY29tcGlsZWRTY3JpcHRzL1VJS2V5VmFsdWVTdHJpbmdGaWx0ZXJXZWJXb3JrZXIuanNcIilcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBVSUtleVZhbHVlU3RyaW5nRmlsdGVyLl9pbnN0YW5jZU51bWJlciA9IFVJS2V5VmFsdWVTdHJpbmdGaWx0ZXIuX2luc3RhbmNlTnVtYmVyICsgMVxuICAgICAgICB0aGlzLl9pbnN0YW5jZU51bWJlciA9IFVJS2V5VmFsdWVTdHJpbmdGaWx0ZXIuX2luc3RhbmNlTnVtYmVyXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgZ2V0IGluc3RhbmNlSWRlbnRpZmllcigpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZU51bWJlclxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgZmlsdGVyRGF0YShcbiAgICAgICAgZmlsdGVyaW5nU3RyaW5nOiBzdHJpbmcsXG4gICAgICAgIGRhdGE6IGFueVtdLFxuICAgICAgICBleGNsdWRlZERhdGE6IHN0cmluZ1tdLFxuICAgICAgICBkYXRhS2V5UGF0aDogc3RyaW5nLFxuICAgICAgICBpZGVudGlmaWVyOiBhbnksXG4gICAgICAgIGNvbXBsZXRpb246IChmaWx0ZXJlZERhdGE6IHN0cmluZ1tdLCBmaWx0ZXJlZEluZGV4ZXM6IHN0cmluZ1tdLCBpZGVudGlmaWVyOiBhbnkpID0+IHZvaWRcbiAgICApIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5faXNUaHJlYWRDbG9zZWQpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpXG4gICAgXG4gICAgICAgIGNvbnN0IGluc3RhbmNlSWRlbnRpZmllciA9IHRoaXMuaW5zdGFuY2VJZGVudGlmaWVyXG4gICAgXG4gICAgICAgIHRoaXMuX3dlYldvcmtlci5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAobWVzc2FnZS5kYXRhLmluc3RhbmNlSWRlbnRpZmllciA9PSBpbnN0YW5jZUlkZW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkZpbHRlcmluZyB0b29rIFwiICsgKERhdGUubm93KCkgLSBzdGFydFRpbWUpICsgXCIgbXMuXCIpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29tcGxldGlvbihtZXNzYWdlLmRhdGEuZmlsdGVyZWREYXRhLCBtZXNzYWdlLmRhdGEuZmlsdGVyZWRJbmRleGVzLCBtZXNzYWdlLmRhdGEuaWRlbnRpZmllcilcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5fd2ViV29ya2VyLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcImZpbHRlcmluZ1N0cmluZ1wiOiBmaWx0ZXJpbmdTdHJpbmcsXG4gICAgICAgICAgICAgICAgXCJkYXRhXCI6IGRhdGEsXG4gICAgICAgICAgICAgICAgXCJleGNsdWRlZERhdGFcIjogZXhjbHVkZWREYXRhLFxuICAgICAgICAgICAgICAgIFwiZGF0YUtleVBhdGhcIjogZGF0YUtleVBhdGgsXG4gICAgICAgICAgICAgICAgXCJpZGVudGlmaWVyXCI6IGlkZW50aWZpZXIsXG4gICAgICAgICAgICAgICAgXCJpbnN0YW5jZUlkZW50aWZpZXJcIjogaW5zdGFuY2VJZGVudGlmaWVyXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgXG4gICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb21wbGV0aW9uKFtdLCBbXSwgaWRlbnRpZmllcilcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgY2xvc2VUaHJlYWQoKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLl9pc1RocmVhZENsb3NlZCA9IFlFU1xuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuX3dlYldvcmtlciAhPSBVSUtleVZhbHVlU3RyaW5nRmlsdGVyLl9zaGFyZWRXZWJXb3JrZXIpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5fd2ViV29ya2VyLnRlcm1pbmF0ZSgpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbn1cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vVUlWaWV3LnRzXCIgLz5cblxuXG5cblxuXG5jbGFzcyBVSU5hdGl2ZVNjcm9sbFZpZXcgZXh0ZW5kcyBVSVZpZXcge1xuICAgIFxuICAgIFxuICAgIGFuaW1hdGlvbkR1cmF0aW9uID0gMFxuICAgIFxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRJRCwgdmlld0hUTUxFbGVtZW50Pykge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIoZWxlbWVudElELCB2aWV3SFRNTEVsZW1lbnQpXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9jbGFzcyA9IFVJTmF0aXZlU2Nyb2xsVmlld1xuICAgICAgICB0aGlzLnN1cGVyY2xhc3MgPSBVSVZpZXdcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLnN0eWxlLmNzc1RleHQgPSB0aGlzLnN0eWxlLmNzc1RleHQgKyBcIi13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDtcIlxuICAgICAgICBcbiAgICAgICAgdGhpcy5zdHlsZS5vdmVyZmxvdyA9IFwiYXV0b1wiXG4gICAgICAgIFxuICAgICAgICAvLyB0aGlzLnNjcm9sbHNYID0gWUVTO1xuICAgICAgICAvLyB0aGlzLnNjcm9sbHNZID0gWUVTO1xuICAgICAgICBcbiAgICAgICAgdGhpcy52aWV3SFRNTEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBmdW5jdGlvbiAodGhpczogVUlOYXRpdmVTY3JvbGxWaWV3LCBldmVudDogVUlFdmVudCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuZGlkU2Nyb2xsVG9Qb3NpdGlvbihuZXcgVUlQb2ludCh0aGlzLnZpZXdIVE1MRWxlbWVudC5zY3JvbGxMZWZ0LCB0aGlzLnZpZXdIVE1MRWxlbWVudC5zY3JvbGxUb3ApKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmJyb2FkY2FzdEV2ZW50SW5TdWJ0cmVlKHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBuYW1lOiBVSVZpZXcuYnJvYWRjYXN0RXZlbnROYW1lLlBhZ2VEaWRTY3JvbGwsXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyczogbmlsXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGRpZFNjcm9sbFRvUG9zaXRpb24ob2Zmc2V0UG9zaXRpb246IFVJUG9pbnQpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgZ2V0IHNjcm9sbHNYKCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSAodGhpcy5zdHlsZS5vdmVyZmxvd1ggPT0gXCJzY3JvbGxcIilcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cbiAgICBcbiAgICBzZXQgc2Nyb2xsc1goc2Nyb2xsczogYm9vbGVhbikge1xuICAgICAgICBpZiAoc2Nyb2xscykge1xuICAgICAgICAgICAgdGhpcy5zdHlsZS5vdmVyZmxvd1ggPSBcInNjcm9sbFwiXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0eWxlLm92ZXJmbG93WCA9IFwiaGlkZGVuXCJcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBnZXQgc2Nyb2xsc1koKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9ICh0aGlzLnN0eWxlLm92ZXJmbG93WSA9PSBcInNjcm9sbFwiKVxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxuICAgIFxuICAgIHNldCBzY3JvbGxzWShzY3JvbGxzOiBib29sZWFuKSB7XG4gICAgICAgIGlmIChzY3JvbGxzKSB7XG4gICAgICAgICAgICB0aGlzLnN0eWxlLm92ZXJmbG93WSA9IFwic2Nyb2xsXCJcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3R5bGUub3ZlcmZsb3dZID0gXCJoaWRkZW5cIlxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIGdldCBjb250ZW50T2Zmc2V0KCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgVUlQb2ludCh0aGlzLnZpZXdIVE1MRWxlbWVudC5zY3JvbGxMZWZ0LCB0aGlzLnZpZXdIVE1MRWxlbWVudC5zY3JvbGxUb3ApXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gICAgXG4gICAgXG4gICAgc2V0IGNvbnRlbnRPZmZzZXQob2Zmc2V0UG9pbnQ6IFVJUG9pbnQpIHtcbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLmFuaW1hdGlvbkR1cmF0aW9uKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsWFRvKHRoaXMudmlld0hUTUxFbGVtZW50LCBvZmZzZXRQb2ludC54LCB0aGlzLmFuaW1hdGlvbkR1cmF0aW9uKVxuICAgICAgICAgICAgdGhpcy5zY3JvbGxZVG8odGhpcy52aWV3SFRNTEVsZW1lbnQsIG9mZnNldFBvaW50LnksIHRoaXMuYW5pbWF0aW9uRHVyYXRpb24pXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLnZpZXdIVE1MRWxlbWVudC5zY3JvbGxMZWZ0ID0gb2Zmc2V0UG9pbnQueFxuICAgICAgICB0aGlzLnZpZXdIVE1MRWxlbWVudC5zY3JvbGxUb3AgPSBvZmZzZXRQb2ludC55XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBzY3JvbGxUb0JvdHRvbSgpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY29udGVudE9mZnNldCA9IG5ldyBVSVBvaW50KHRoaXMuY29udGVudE9mZnNldC54LCB0aGlzLnNjcm9sbFNpemUuaGVpZ2h0IC0gdGhpcy5mcmFtZS5oZWlnaHQpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBzY3JvbGxUb1RvcCgpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY29udGVudE9mZnNldCA9IG5ldyBVSVBvaW50KHRoaXMuY29udGVudE9mZnNldC54LCAwKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgZ2V0IGlzU2Nyb2xsZWRUb0JvdHRvbSgpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRPZmZzZXQuaXNFcXVhbFRvKG5ldyBVSVBvaW50KHRoaXMuY29udGVudE9mZnNldC54LCB0aGlzLnNjcm9sbFNpemUuaGVpZ2h0IC1cbiAgICAgICAgICAgIHRoaXMuZnJhbWUuaGVpZ2h0KSlcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGdldCBpc1Njcm9sbGVkVG9Ub3AoKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50T2Zmc2V0LmlzRXF1YWxUbyhuZXcgVUlQb2ludCh0aGlzLmNvbnRlbnRPZmZzZXQueCwgMCkpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBzY3JvbGxZVG8oZWxlbWVudCwgdG8sIGR1cmF0aW9uKSB7XG4gICAgICAgIFxuICAgICAgICBkdXJhdGlvbiA9IGR1cmF0aW9uICogMTAwMFxuICAgIFxuICAgICAgICBjb25zdCBzdGFydCA9IGVsZW1lbnQuc2Nyb2xsVG9wXG4gICAgICAgIGNvbnN0IGNoYW5nZSA9IHRvIC0gc3RhcnRcbiAgICAgICAgY29uc3QgaW5jcmVtZW50ID0gMTBcbiAgICBcbiAgICAgICAgY29uc3QgYW5pbWF0ZVNjcm9sbCA9IGZ1bmN0aW9uIChlbGFwc2VkVGltZSkge1xuICAgICAgICAgICAgZWxhcHNlZFRpbWUgKz0gaW5jcmVtZW50XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuZWFzZUluT3V0KGVsYXBzZWRUaW1lLCBzdGFydCwgY2hhbmdlLCBkdXJhdGlvbilcbiAgICAgICAgICAgIGVsZW1lbnQuc2Nyb2xsVG9wID0gcG9zaXRpb25cbiAgICAgICAgICAgIGlmIChlbGFwc2VkVGltZSA8IGR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGVTY3JvbGwoZWxhcHNlZFRpbWUpXG4gICAgICAgICAgICAgICAgfSwgaW5jcmVtZW50KVxuICAgICAgICAgICAgfVxuICAgICAgICB9LmJpbmQodGhpcylcbiAgICBcbiAgICAgICAgYW5pbWF0ZVNjcm9sbCgwKVxuICAgIH1cbiAgICBcbiAgICBzY3JvbGxYVG8oZWxlbWVudCwgdG8sIGR1cmF0aW9uKSB7XG4gICAgICAgIFxuICAgICAgICBkdXJhdGlvbiA9IGR1cmF0aW9uICogMTAwMFxuICAgIFxuICAgICAgICBjb25zdCBzdGFydCA9IGVsZW1lbnQuc2Nyb2xsVG9wXG4gICAgICAgIGNvbnN0IGNoYW5nZSA9IHRvIC0gc3RhcnRcbiAgICAgICAgY29uc3QgaW5jcmVtZW50ID0gMTBcbiAgICBcbiAgICAgICAgY29uc3QgYW5pbWF0ZVNjcm9sbCA9IGZ1bmN0aW9uIChlbGFwc2VkVGltZSkge1xuICAgICAgICAgICAgZWxhcHNlZFRpbWUgKz0gaW5jcmVtZW50XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuZWFzZUluT3V0KGVsYXBzZWRUaW1lLCBzdGFydCwgY2hhbmdlLCBkdXJhdGlvbilcbiAgICAgICAgICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCA9IHBvc2l0aW9uXG4gICAgICAgICAgICBpZiAoZWxhcHNlZFRpbWUgPCBkdXJhdGlvbikge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRlU2Nyb2xsKGVsYXBzZWRUaW1lKVxuICAgICAgICAgICAgICAgIH0sIGluY3JlbWVudClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgXG4gICAgICAgIGFuaW1hdGVTY3JvbGwoMClcbiAgICB9XG4gICAgXG4gICAgZWFzZUluT3V0KGN1cnJlbnRUaW1lLCBzdGFydCwgY2hhbmdlLCBkdXJhdGlvbikge1xuICAgICAgICBjdXJyZW50VGltZSAvPSBkdXJhdGlvbiAvIDJcbiAgICAgICAgaWYgKGN1cnJlbnRUaW1lIDwgMSkge1xuICAgICAgICAgICAgcmV0dXJuIGNoYW5nZSAvIDIgKiBjdXJyZW50VGltZSAqIGN1cnJlbnRUaW1lICsgc3RhcnRcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50VGltZSAtPSAxXG4gICAgICAgIHJldHVybiAtY2hhbmdlIC8gMiAqIChjdXJyZW50VGltZSAqIChjdXJyZW50VGltZSAtIDIpIC0gMSkgKyBzdGFydFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbn1cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9VSU5hdGl2ZVNjcm9sbFZpZXcudHNcIiAvPlxuXG5cblxuaW50ZXJmYWNlIFVJVGFibGVWaWV3UmV1c2FibGVWaWV3c0NvbnRhaW5lck9iamVjdCB7XG4gICAgXG4gICAgW2tleTogc3RyaW5nXTogVUlWaWV3W107XG4gICAgXG59XG5cblxuaW50ZXJmYWNlIFVJVGFibGVWaWV3UmV1c2FibGVWaWV3UG9zaXRpb25PYmplY3Qge1xuICAgIFxuICAgIGJvdHRvbVk6IG51bWJlcjtcbiAgICB0b3BZOiBudW1iZXI7XG4gICAgXG4gICAgaXNWYWxpZDogYm9vbGVhbjtcbiAgICBcbn1cblxuXG5cblxuXG5jbGFzcyBVSVRhYmxlVmlldyBleHRlbmRzIFVJTmF0aXZlU2Nyb2xsVmlldyB7XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgYWxsUm93c0hhdmVFcXVhbEhlaWdodDogYm9vbGVhbiA9IE5PXG4gICAgX3Zpc2libGVSb3dzOiBVSVZpZXdbXSA9IFtdXG4gICAgX2ZpcnN0TGF5b3V0VmlzaWJsZVJvd3M6IFVJVmlld1tdID0gW11cbiAgICBcbiAgICBfcm93UG9zaXRpb25zOiBVSVRhYmxlVmlld1JldXNhYmxlVmlld1Bvc2l0aW9uT2JqZWN0W10gPSBbXVxuICAgIFxuICAgIF9oaWdoZXN0VmFsaWRSb3dQb3NpdGlvbkluZGV4OiBudW1iZXIgPSAwXG4gICAgXG4gICAgX3JldXNhYmxlVmlld3M6IFVJVGFibGVWaWV3UmV1c2FibGVWaWV3c0NvbnRhaW5lck9iamVjdCA9IHt9XG4gICAgXG4gICAgX3JlbW92ZWRSZXVzYWJsZVZpZXdzOiBVSVRhYmxlVmlld1JldXNhYmxlVmlld3NDb250YWluZXJPYmplY3QgPSB7fVxuICAgIFxuICAgIF9mdWxsSGVpZ2h0VmlldzogVUlWaWV3XG4gICAgXG4gICAgX3Jvd0lESW5kZXg6IG51bWJlciA9IDBcbiAgICBcbiAgICByZWxvYWRzT25MYW5ndWFnZUNoYW5nZSA9IFlFU1xuICAgIFxuICAgIHNpZGVQYWRkaW5nID0gMFxuICAgIFxuICAgIF9wZXJzaXN0ZWREYXRhOiBhbnlbXSA9IFtdXG4gICAgX25lZWRzRHJhd2luZ09mVmlzaWJsZVJvd3NCZWZvcmVMYXlvdXQgPSBOT1xuICAgIF9pc0RyYXdWaXNpYmxlUm93c1NjaGVkdWxlZCA9IE5PXG4gICAgX3Nob3VsZEFuaW1hdGVOZXh0TGF5b3V0OiBib29sZWFuXG4gICAgXG4gICAgYW5pbWF0aW9uRHVyYXRpb24gPSAwLjI1XG4gICAgXG4gICAgXG4gICAgY29uc3RydWN0b3IoZWxlbWVudElEKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlcihlbGVtZW50SUQpXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9jbGFzcyA9IFVJVGFibGVWaWV3XG4gICAgICAgIHRoaXMuc3VwZXJjbGFzcyA9IFVJTmF0aXZlU2Nyb2xsVmlld1xuICAgICAgICBcbiAgICAgICAgdGhpcy5zY3JvbGxzWCA9IE5PXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBpbml0VmlldyhlbGVtZW50SUQsIHZpZXdIVE1MRWxlbWVudCkge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIuaW5pdFZpZXcoZWxlbWVudElELCB2aWV3SFRNTEVsZW1lbnQpXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9mdWxsSGVpZ2h0VmlldyA9IG5ldyBVSVZpZXcoKVxuICAgICAgICB0aGlzLl9mdWxsSGVpZ2h0Vmlldy5oaWRkZW4gPSBZRVNcbiAgICAgICAgdGhpcy5fZnVsbEhlaWdodFZpZXcudXNlckludGVyYWN0aW9uRW5hYmxlZCA9IE5PXG4gICAgICAgIHRoaXMuYWRkU3Vidmlldyh0aGlzLl9mdWxsSGVpZ2h0VmlldylcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIGxvYWREYXRhKCkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5fcGVyc2lzdGVkRGF0YSA9IFtdXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9jYWxjdWxhdGVQb3NpdGlvbnNVbnRpbEluZGV4KHRoaXMubnVtYmVyT2ZSb3dzKCkgLSAxKVxuICAgICAgICB0aGlzLl9uZWVkc0RyYXdpbmdPZlZpc2libGVSb3dzQmVmb3JlTGF5b3V0ID0gWUVTXG4gICAgICAgIFxuICAgICAgICB0aGlzLnNldE5lZWRzTGF5b3V0KClcbiAgICAgICAgXG4gICAgICAgIC8vIHRoaXMuZm9yRWFjaFZpZXdJblN1YnRyZWUoZnVuY3Rpb24odmlldykge1xuICAgICAgICBcbiAgICAgICAgLy8gICAgIHZpZXcuc2V0TmVlZHNMYXlvdXQoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIH0pXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICByZWxvYWREYXRhKCkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5fcmVtb3ZlVmlzaWJsZVJvd3MoKVxuICAgICAgICB0aGlzLl9yZW1vdmVBbGxSZXVzYWJsZVJvd3MoKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fcm93UG9zaXRpb25zID0gW11cbiAgICAgICAgdGhpcy5faGlnaGVzdFZhbGlkUm93UG9zaXRpb25JbmRleCA9IDBcbiAgICAgICAgXG4gICAgICAgIHRoaXMubG9hZERhdGEoKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgaGlnaGxpZ2h0Q2hhbmdlcyhwcmV2aW91c0RhdGE6IGFueVtdLCBuZXdEYXRhOiBhbnlbXSkge1xuICAgICAgICBcbiAgICAgICAgcHJldmlvdXNEYXRhID0gcHJldmlvdXNEYXRhLm1hcChmdW5jdGlvbiAoZGF0YVBvaW50LCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGFQb2ludClcbiAgICAgICAgICAgIFxuICAgICAgICB9KVxuICAgICAgICBcbiAgICAgICAgbmV3RGF0YSA9IG5ld0RhdGEubWFwKGZ1bmN0aW9uIChkYXRhUG9pbnQsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YVBvaW50KVxuICAgICAgICAgICAgXG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgY29uc3QgbmV3SW5kZXhlczogbnVtYmVyW10gPSBbXVxuICAgICAgICBcbiAgICAgICAgbmV3RGF0YS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghcHJldmlvdXNEYXRhLmNvbnRhaW5zKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIG5ld0luZGV4ZXMucHVzaChpbmRleClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9KVxuICAgICAgICBcbiAgICAgICAgbmV3SW5kZXhlcy5mb3JFYWNoKGZ1bmN0aW9uICh0aGlzOiBVSVRhYmxlVmlldywgaW5kZXgpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHRoaXMuaXNSb3dXaXRoSW5kZXhWaXNpYmxlKGluZGV4KSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0Um93QXNOZXcodGhpcy52aWV3Rm9yUm93V2l0aEluZGV4KGluZGV4KSlcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBoaWdobGlnaHRSb3dBc05ldyhyb3c6IFVJVmlldykge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBpbnZhbGlkYXRlU2l6ZU9mUm93V2l0aEluZGV4KGluZGV4OiBudW1iZXIsIGFuaW1hdGVDaGFuZ2UgPSBOTykge1xuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuX3Jvd1Bvc2l0aW9uc1tpbmRleF0pIHtcbiAgICAgICAgICAgIHRoaXMuX3Jvd1Bvc2l0aW9uc1tpbmRleF0uaXNWYWxpZCA9IE5PXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2hpZ2hlc3RWYWxpZFJvd1Bvc2l0aW9uSW5kZXggPSBNYXRoLm1pbih0aGlzLl9oaWdoZXN0VmFsaWRSb3dQb3NpdGlvbkluZGV4LCBpbmRleCAtIDEpXG4gICAgICAgIFxuICAgICAgICAvLyBpZiAoaW5kZXggPT0gMCkge1xuICAgICAgICBcbiAgICAgICAgLy8gICAgIHRoaXMuX2hpZ2hlc3RWYWxpZFJvd1Bvc2l0aW9uSW5kZXggPSAwO1xuICAgICAgICBcbiAgICAgICAgLy8gICAgIHRoaXMuX3Jvd1Bvc2l0aW9ucyA9IFtdO1xuICAgICAgICBcbiAgICAgICAgLy8gfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fbmVlZHNEcmF3aW5nT2ZWaXNpYmxlUm93c0JlZm9yZUxheW91dCA9IFlFU1xuICAgICAgICBcbiAgICAgICAgdGhpcy5fc2hvdWxkQW5pbWF0ZU5leHRMYXlvdXQgPSBhbmltYXRlQ2hhbmdlXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBfY2FsY3VsYXRlQWxsUG9zaXRpb25zKCkge1xuICAgICAgICB0aGlzLl9jYWxjdWxhdGVQb3NpdGlvbnNVbnRpbEluZGV4KHRoaXMubnVtYmVyT2ZSb3dzKCkgLSAxKVxuICAgIH1cbiAgICBcbiAgICBfY2FsY3VsYXRlUG9zaXRpb25zVW50aWxJbmRleChtYXhJbmRleDogbnVtYmVyKSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgdmFsaWRQb3NpdGlvbk9iamVjdCA9IHRoaXMuX3Jvd1Bvc2l0aW9uc1t0aGlzLl9oaWdoZXN0VmFsaWRSb3dQb3NpdGlvbkluZGV4XVxuICAgICAgICBpZiAoIUlTKHZhbGlkUG9zaXRpb25PYmplY3QpKSB7XG4gICAgICAgICAgICB2YWxpZFBvc2l0aW9uT2JqZWN0ID0ge1xuICAgICAgICAgICAgICAgIGJvdHRvbVk6IDAsXG4gICAgICAgICAgICAgICAgdG9wWTogMCxcbiAgICAgICAgICAgICAgICBpc1ZhbGlkOiBZRVNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIHByZXZpb3VzQm90dG9tWSA9IHZhbGlkUG9zaXRpb25PYmplY3QuYm90dG9tWVxuICAgICAgICBcbiAgICAgICAgaWYgKCF0aGlzLl9yb3dQb3NpdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX2hpZ2hlc3RWYWxpZFJvd1Bvc2l0aW9uSW5kZXggPSAtMVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZvciAodmFyIGkgPSB0aGlzLl9oaWdoZXN0VmFsaWRSb3dQb3NpdGlvbkluZGV4ICsgMTsgaSA8PSBtYXhJbmRleDsgaSsrKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBoZWlnaHQ6IG51bWJlclxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCByb3dQb3NpdGlvbk9iamVjdCA9IHRoaXMuX3Jvd1Bvc2l0aW9uc1tpXVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoSVMoKHJvd1Bvc2l0aW9uT2JqZWN0IHx8IG5pbCkuaXNWYWxpZCkpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSByb3dQb3NpdGlvbk9iamVjdC5ib3R0b21ZIC0gcm93UG9zaXRpb25PYmplY3QudG9wWVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5oZWlnaHRGb3JSb3dXaXRoSW5kZXgoaSlcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgcG9zaXRpb25PYmplY3Q6IFVJVGFibGVWaWV3UmV1c2FibGVWaWV3UG9zaXRpb25PYmplY3QgPSB7XG4gICAgICAgICAgICAgICAgYm90dG9tWTogcHJldmlvdXNCb3R0b21ZICsgaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHRvcFk6IHByZXZpb3VzQm90dG9tWSxcbiAgICAgICAgICAgICAgICBpc1ZhbGlkOiBZRVNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGkgPCB0aGlzLl9yb3dQb3NpdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcm93UG9zaXRpb25zW2ldID0gcG9zaXRpb25PYmplY3RcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Jvd1Bvc2l0aW9ucy5wdXNoKHBvc2l0aW9uT2JqZWN0KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5faGlnaGVzdFZhbGlkUm93UG9zaXRpb25JbmRleCA9IGlcbiAgICAgICAgICAgIHByZXZpb3VzQm90dG9tWSA9IHByZXZpb3VzQm90dG9tWSArIGhlaWdodFxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIGluZGV4ZXNGb3JWaXNpYmxlUm93cyhwYWRkaW5nUmF0aW8gPSAwLjUpOiBudW1iZXJbXSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBmaXJzdFZpc2libGVZID0gdGhpcy5jb250ZW50T2Zmc2V0LnkgLSB0aGlzLmJvdW5kcy5oZWlnaHQgKiBwYWRkaW5nUmF0aW9cbiAgICAgICAgY29uc3QgbGFzdFZpc2libGVZID0gZmlyc3RWaXNpYmxlWSArIHRoaXMuYm91bmRzLmhlaWdodCAqICgxICsgcGFkZGluZ1JhdGlvKVxuICAgICAgICBcbiAgICAgICAgY29uc3QgbnVtYmVyT2ZSb3dzID0gdGhpcy5udW1iZXJPZlJvd3MoKVxuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuYWxsUm93c0hhdmVFcXVhbEhlaWdodCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCByb3dIZWlnaHQgPSB0aGlzLmhlaWdodEZvclJvd1dpdGhJbmRleCgwKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgZmlyc3RJbmRleCA9IGZpcnN0VmlzaWJsZVkgLyByb3dIZWlnaHRcbiAgICAgICAgICAgIHZhciBsYXN0SW5kZXggPSBsYXN0VmlzaWJsZVkgLyByb3dIZWlnaHRcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZmlyc3RJbmRleCA9IE1hdGgudHJ1bmMoZmlyc3RJbmRleClcbiAgICAgICAgICAgIGxhc3RJbmRleCA9IE1hdGgudHJ1bmMobGFzdEluZGV4KSArIDFcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZmlyc3RJbmRleCA9IE1hdGgubWF4KGZpcnN0SW5kZXgsIDApXG4gICAgICAgICAgICBsYXN0SW5kZXggPSBNYXRoLm1pbihsYXN0SW5kZXgsIG51bWJlck9mUm93cyAtIDEpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IGZpcnN0SW5kZXg7IGkgPCBsYXN0SW5kZXggKyAxOyBpKyspIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgYWNjdW11bGF0ZWRIZWlnaHQgPSAwXG4gICAgICAgIHZhciByZXN1bHQgPSBbXVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fY2FsY3VsYXRlQWxsUG9zaXRpb25zKClcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJvd1Bvc2l0aW9ucyA9IHRoaXMuX3Jvd1Bvc2l0aW9uc1xuICAgICAgICBcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1iZXJPZlJvd3M7IGkrKykge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBoZWlnaHQgPSByb3dQb3NpdGlvbnNbaV0uYm90dG9tWSAtIHJvd1Bvc2l0aW9uc1tpXS50b3BZICAvLyB0aGlzLmhlaWdodEZvclJvd1dpdGhJbmRleChpKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBhY2N1bXVsYXRlZEhlaWdodCA9IGFjY3VtdWxhdGVkSGVpZ2h0ICsgaGVpZ2h0XG4gICAgICAgICAgICBpZiAoYWNjdW11bGF0ZWRIZWlnaHQgPj0gZmlyc3RWaXNpYmxlWSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWNjdW11bGF0ZWRIZWlnaHQgPj0gbGFzdFZpc2libGVZKSB7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBfcmVtb3ZlVmlzaWJsZVJvd3MoKSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCB2aXNpYmxlUm93cyA9IFtdXG4gICAgICAgIHRoaXMuX3Zpc2libGVSb3dzLmZvckVhY2goZnVuY3Rpb24gKHRoaXM6IFVJVGFibGVWaWV3LCByb3c6IFVJVmlldywgaW5kZXg6IG51bWJlciwgYXJyYXk6IFVJVmlld1tdKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX3BlcnNpc3RlZERhdGFbcm93Ll9VSVRhYmxlVmlld1Jvd0luZGV4XSA9IHRoaXMucGVyc2lzdGVuY2VEYXRhSXRlbUZvclJvd1dpdGhJbmRleChcbiAgICAgICAgICAgICAgICByb3cuX1VJVGFibGVWaWV3Um93SW5kZXgsXG4gICAgICAgICAgICAgICAgcm93XG4gICAgICAgICAgICApXG4gICAgICAgICAgICByb3cucmVtb3ZlRnJvbVN1cGVydmlldygpXG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVkUmV1c2FibGVWaWV3c1tyb3cuX1VJVGFibGVWaWV3UmV1c2FiaWxpdHlJZGVudGlmaWVyXS5wdXNoKHJvdylcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgIH0sIHRoaXMpXG4gICAgICAgIHRoaXMuX3Zpc2libGVSb3dzID0gdmlzaWJsZVJvd3NcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIF9yZW1vdmVBbGxSZXVzYWJsZVJvd3MoKSB7XG4gICAgICAgIHRoaXMuX3JldXNhYmxlVmlld3MuZm9yRWFjaChmdW5jdGlvbiAodGhpczogVUlUYWJsZVZpZXcsIHJvd3M6IFVJVmlld1tdKSB7XG4gICAgICAgICAgICByb3dzLmZvckVhY2goZnVuY3Rpb24gKHRoaXM6IFVJVGFibGVWaWV3LCByb3c6IFVJVmlldywgaW5kZXg6IG51bWJlciwgYXJyYXk6IFVJVmlld1tdKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5fcGVyc2lzdGVkRGF0YVtyb3cuX1VJVGFibGVWaWV3Um93SW5kZXhdID0gdGhpcy5wZXJzaXN0ZW5jZURhdGFJdGVtRm9yUm93V2l0aEluZGV4KFxuICAgICAgICAgICAgICAgICAgICByb3cuX1VJVGFibGVWaWV3Um93SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIHJvd1xuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICByb3cucmVtb3ZlRnJvbVN1cGVydmlldygpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5fbWFya1JldXNhYmxlVmlld0FzVW51c2VkKHJvdylcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBfbWFya1JldXNhYmxlVmlld0FzVW51c2VkKHJvdzogVUlWaWV3KSB7XG4gICAgICAgIGlmICghdGhpcy5fcmVtb3ZlZFJldXNhYmxlVmlld3Nbcm93Ll9VSVRhYmxlVmlld1JldXNhYmlsaXR5SWRlbnRpZmllcl0uY29udGFpbnMocm93KSkge1xuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlZFJldXNhYmxlVmlld3Nbcm93Ll9VSVRhYmxlVmlld1JldXNhYmlsaXR5SWRlbnRpZmllcl0ucHVzaChyb3cpXG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgX2RyYXdWaXNpYmxlUm93cygpIHtcbiAgICAgICAgXG4gICAgICAgIGlmICghdGhpcy5pc01lbWJlck9mVmlld1RyZWUpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCB2aXNpYmxlSW5kZXhlcyA9IHRoaXMuaW5kZXhlc0ZvclZpc2libGVSb3dzKClcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG1pbkluZGV4ID0gdmlzaWJsZUluZGV4ZXNbMF1cbiAgICAgICAgY29uc3QgbWF4SW5kZXggPSB2aXNpYmxlSW5kZXhlc1t2aXNpYmxlSW5kZXhlcy5sZW5ndGggLSAxXVxuICAgICAgICBcbiAgICAgICAgY29uc3QgcmVtb3ZlZFZpZXdzID0gW11cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHZpc2libGVSb3dzID0gW11cbiAgICAgICAgdGhpcy5fdmlzaWJsZVJvd3MuZm9yRWFjaChmdW5jdGlvbiAodGhpczogVUlUYWJsZVZpZXcsIHJvdzogVUlWaWV3LCBpbmRleDogbnVtYmVyLCBhcnJheTogVUlWaWV3W10pIHtcbiAgICAgICAgICAgIGlmIChyb3cuX1VJVGFibGVWaWV3Um93SW5kZXggPCBtaW5JbmRleCB8fCByb3cuX1VJVGFibGVWaWV3Um93SW5kZXggPiBtYXhJbmRleCkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vcm93LnJlbW92ZUZyb21TdXBlcnZpZXcoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLl9wZXJzaXN0ZWREYXRhW3Jvdy5fVUlUYWJsZVZpZXdSb3dJbmRleF0gPSB0aGlzLnBlcnNpc3RlbmNlRGF0YUl0ZW1Gb3JSb3dXaXRoSW5kZXgoXG4gICAgICAgICAgICAgICAgICAgIHJvdy5fVUlUYWJsZVZpZXdSb3dJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgcm93XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZWRSZXVzYWJsZVZpZXdzW3Jvdy5fVUlUYWJsZVZpZXdSZXVzYWJpbGl0eUlkZW50aWZpZXJdLnB1c2gocm93KVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJlbW92ZWRWaWV3cy5wdXNoKHJvdylcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZpc2libGVSb3dzLnB1c2gocm93KVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0aGlzKVxuICAgICAgICB0aGlzLl92aXNpYmxlUm93cyA9IHZpc2libGVSb3dzXG4gICAgICAgIFxuICAgICAgICB2aXNpYmxlSW5kZXhlcy5mb3JFYWNoKGZ1bmN0aW9uICh0aGlzOiBVSVRhYmxlVmlldywgcm93SW5kZXg6IG51bWJlciwgaW5kZXg6IG51bWJlciwgYXJyYXk6IG51bWJlcikge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICh0aGlzLmlzUm93V2l0aEluZGV4VmlzaWJsZShyb3dJbmRleCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHZpZXc6IFVJVmlldyA9IHRoaXMudmlld0ZvclJvd1dpdGhJbmRleChyb3dJbmRleClcbiAgICAgICAgICAgIC8vdmlldy5fVUlUYWJsZVZpZXdSb3dJbmRleCA9IHJvd0luZGV4O1xuICAgICAgICAgICAgdGhpcy5fZmlyc3RMYXlvdXRWaXNpYmxlUm93cy5wdXNoKHZpZXcpXG4gICAgICAgICAgICB0aGlzLl92aXNpYmxlUm93cy5wdXNoKHZpZXcpXG4gICAgICAgICAgICB0aGlzLmFkZFN1YnZpZXcodmlldylcbiAgICAgICAgICAgIFxuICAgICAgICB9IGFzIGFueSwgdGhpcylcbiAgICAgICAgXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVtb3ZlZFZpZXdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciB2aWV3OiBVSVZpZXcgPSByZW1vdmVkVmlld3NbaV1cbiAgICAgICAgICAgIGlmICh0aGlzLl92aXNpYmxlUm93cy5pbmRleE9mKHZpZXcpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy90aGlzLl9wZXJzaXN0ZWREYXRhW3ZpZXcuX1VJVGFibGVWaWV3Um93SW5kZXhdID0gdGhpcy5wZXJzaXN0ZW5jZURhdGFJdGVtRm9yUm93V2l0aEluZGV4KHZpZXcuX1VJVGFibGVWaWV3Um93SW5kZXgsIHZpZXcpO1xuICAgICAgICAgICAgICAgIHZpZXcucmVtb3ZlRnJvbVN1cGVydmlldygpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy90aGlzLl9yZW1vdmVkUmV1c2FibGVWaWV3c1t2aWV3Ll9VSVRhYmxlVmlld1JldXNhYmlsaXR5SWRlbnRpZmllcl0ucHVzaCh2aWV3KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvL3RoaXMuc2V0TmVlZHNMYXlvdXQoKTtcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHZpc2libGVSb3dXaXRoSW5kZXgocm93SW5kZXg6IG51bWJlcik6IFVJVmlldyB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fdmlzaWJsZVJvd3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHJvdyA9IHRoaXMuX3Zpc2libGVSb3dzW2ldXG4gICAgICAgICAgICBpZiAocm93Ll9VSVRhYmxlVmlld1Jvd0luZGV4ID09IHJvd0luZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJvd1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuaWxcbiAgICB9XG4gICAgXG4gICAgXG4gICAgaXNSb3dXaXRoSW5kZXhWaXNpYmxlKHJvd0luZGV4OiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIElTKHRoaXMudmlzaWJsZVJvd1dpdGhJbmRleChyb3dJbmRleCkpXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIHJldXNhYmxlVmlld0ZvcklkZW50aWZpZXIoaWRlbnRpZmllcjogc3RyaW5nLCByb3dJbmRleDogbnVtYmVyKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAoIXRoaXMuX3JlbW92ZWRSZXVzYWJsZVZpZXdzW2lkZW50aWZpZXJdKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVkUmV1c2FibGVWaWV3c1tpZGVudGlmaWVyXSA9IFtdXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLl9yZW1vdmVkUmV1c2FibGVWaWV3c1tpZGVudGlmaWVyXSAmJiB0aGlzLl9yZW1vdmVkUmV1c2FibGVWaWV3c1tpZGVudGlmaWVyXS5sZW5ndGgpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgdmlldyA9IHRoaXMuX3JlbW92ZWRSZXVzYWJsZVZpZXdzW2lkZW50aWZpZXJdLnBvcCgpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZpZXcuX1VJVGFibGVWaWV3Um93SW5kZXggPSByb3dJbmRleFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHZpZXcsIHRoaXMuX3BlcnNpc3RlZERhdGFbcm93SW5kZXhdIHx8IHRoaXMuZGVmYXVsdFJvd1BlcnNpc3RlbmNlRGF0YUl0ZW0oKSlcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHZpZXdcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoIXRoaXMuX3JldXNhYmxlVmlld3NbaWRlbnRpZmllcl0pIHtcbiAgICAgICAgICAgIHRoaXMuX3JldXNhYmxlVmlld3NbaWRlbnRpZmllcl0gPSBbXVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBuZXdWaWV3ID0gdGhpcy5uZXdSZXVzYWJsZVZpZXdGb3JJZGVudGlmaWVyKGlkZW50aWZpZXIsIHRoaXMuX3Jvd0lESW5kZXgpXG4gICAgICAgIHRoaXMuX3Jvd0lESW5kZXggPSB0aGlzLl9yb3dJREluZGV4ICsgMVxuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuX3Jvd0lESW5kZXggPiA0MCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBhc2QgPSAxXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbmV3Vmlldy5fVUlUYWJsZVZpZXdSZXVzYWJpbGl0eUlkZW50aWZpZXIgPSBpZGVudGlmaWVyXG4gICAgICAgIFxuICAgICAgICBuZXdWaWV3Ll9VSVRhYmxlVmlld1Jvd0luZGV4ID0gcm93SW5kZXhcbiAgICAgICAgXG4gICAgICAgIE9iamVjdC5hc3NpZ24obmV3VmlldywgdGhpcy5fcGVyc2lzdGVkRGF0YVtyb3dJbmRleF0gfHwgdGhpcy5kZWZhdWx0Um93UGVyc2lzdGVuY2VEYXRhSXRlbSgpKVxuICAgICAgICB0aGlzLl9yZXVzYWJsZVZpZXdzW2lkZW50aWZpZXJdLnB1c2gobmV3VmlldylcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBuZXdWaWV3XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICAvLyBGdW5jdGlvbnMgdGhhdCBzaG91bGQgYmUgb3ZlcnJpZGRlbiB0byBkcmF3IHRoZSBjb3JyZWN0IGNvbnRlbnQgU1RBUlRcbiAgICBuZXdSZXVzYWJsZVZpZXdGb3JJZGVudGlmaWVyKGlkZW50aWZpZXI6IHN0cmluZywgcm93SURJbmRleDogbnVtYmVyKTogVUlWaWV3IHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgVUlCdXR0b24odGhpcy5lbGVtZW50SUQgKyBcIlJvd1wiICsgcm93SURJbmRleClcbiAgICAgICAgXG4gICAgICAgIHZpZXcuc3RvcHNQb2ludGVyRXZlbnRQcm9wYWdhdGlvbiA9IE5PXG4gICAgICAgIHZpZXcucGF1c2VzUG9pbnRlckV2ZW50cyA9IE5PXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdmlld1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgaGVpZ2h0Rm9yUm93V2l0aEluZGV4KGluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gNTBcbiAgICB9XG4gICAgXG4gICAgbnVtYmVyT2ZSb3dzKCkge1xuICAgICAgICByZXR1cm4gMTAwMDBcbiAgICB9XG4gICAgXG4gICAgZGVmYXVsdFJvd1BlcnNpc3RlbmNlRGF0YUl0ZW0oKSB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHBlcnNpc3RlbmNlRGF0YUl0ZW1Gb3JSb3dXaXRoSW5kZXgocm93SW5kZXg6IG51bWJlciwgcm93OiBVSVZpZXcpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgdmlld0ZvclJvd1dpdGhJbmRleChyb3dJbmRleDogbnVtYmVyKTogVUlWaWV3IHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJvdyA9IHRoaXMucmV1c2FibGVWaWV3Rm9ySWRlbnRpZmllcihcIlJvd1wiLCByb3dJbmRleCk7XG4gICAgICAgIChyb3cgYXMgVUlCdXR0b24pLnRpdGxlTGFiZWwudGV4dCA9IFwiUm93IFwiICsgcm93SW5kZXhcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByb3dcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIC8vIEZ1bmN0aW9ucyB0aGF0IHNob3VsZCBiZSBvdmVycmlkZGVuIHRvIGRyYXcgdGhlIGNvcnJlY3QgY29udGVudCBFTkRcbiAgICBcbiAgICBcbiAgICAvLyBGdW5jdGlvbnMgdGhhdCB0cmlnZ2VyIHJlZHJhd2luZyBvZiB0aGUgY29udGVudFxuICAgIGRpZFNjcm9sbFRvUG9zaXRpb24ob2Zmc2V0UG9zaXRpb246IFVJUG9pbnQpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyLmRpZFNjcm9sbFRvUG9zaXRpb24ob2Zmc2V0UG9zaXRpb24pXG4gICAgICAgIFxuICAgICAgICB0aGlzLmZvckVhY2hWaWV3SW5TdWJ0cmVlKGZ1bmN0aW9uICh2aWV3OiBVSVZpZXcpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmlldy5faXNQb2ludGVyVmFsaWQgPSBOT1xuICAgICAgICAgICAgXG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgICAgICBpZiAoIXRoaXMuX2lzRHJhd1Zpc2libGVSb3dzU2NoZWR1bGVkKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX2lzRHJhd1Zpc2libGVSb3dzU2NoZWR1bGVkID0gWUVTXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFVJVmlldy5ydW5GdW5jdGlvbkJlZm9yZU5leHRGcmFtZShmdW5jdGlvbiAodGhpczogVUlUYWJsZVZpZXcpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWxjdWxhdGVBbGxQb3NpdGlvbnMoKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuX2RyYXdWaXNpYmxlUm93cygpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5zZXROZWVkc0xheW91dCgpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5faXNEcmF3VmlzaWJsZVJvd3NTY2hlZHVsZWQgPSBOT1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHdhc0FkZGVkVG9WaWV3VHJlZSgpIHtcbiAgICAgICAgdGhpcy5sb2FkRGF0YSgpXG4gICAgfVxuICAgIFxuICAgIHNldEZyYW1lKHJlY3RhbmdsZTogVUlSZWN0YW5nbGUsIHpJbmRleD86IG51bWJlciwgcGVyZm9ybVVuY2hlY2tlZExheW91dD86IGJvb2xlYW4pIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGZyYW1lID0gdGhpcy5mcmFtZVxuICAgICAgICBzdXBlci5zZXRGcmFtZShyZWN0YW5nbGUsIHpJbmRleCwgcGVyZm9ybVVuY2hlY2tlZExheW91dClcbiAgICAgICAgaWYgKGZyYW1lLmlzRXF1YWxUbyhyZWN0YW5nbGUpICYmICFwZXJmb3JtVW5jaGVja2VkTGF5b3V0KSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fbmVlZHNEcmF3aW5nT2ZWaXNpYmxlUm93c0JlZm9yZUxheW91dCA9IFlFU1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgZGlkUmVjZWl2ZUJyb2FkY2FzdEV2ZW50KGV2ZW50OiBVSVZpZXdCcm9hZGNhc3RFdmVudCkge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIuZGlkUmVjZWl2ZUJyb2FkY2FzdEV2ZW50KGV2ZW50KVxuICAgICAgICBcbiAgICAgICAgaWYgKGV2ZW50Lm5hbWUgPT0gVUlWaWV3LmJyb2FkY2FzdEV2ZW50TmFtZS5MYW5ndWFnZUNoYW5nZWQgJiYgdGhpcy5yZWxvYWRzT25MYW5ndWFnZUNoYW5nZSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnJlbG9hZERhdGEoKVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBwcml2YXRlIF9sYXlvdXRBbGxSb3dzKHBvc2l0aW9ucyA9IHRoaXMuX3Jvd1Bvc2l0aW9ucykge1xuICAgICAgICBcbiAgICAgICAgY29uc3QgYm91bmRzID0gdGhpcy5ib3VuZHNcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3Zpc2libGVSb3dzLmZvckVhY2goZnVuY3Rpb24gKHRoaXM6IFVJVGFibGVWaWV3LCByb3c6IFVJVmlldywgaW5kZXg6IG51bWJlciwgYXJyYXk6IFVJVmlld1tdKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGZyYW1lID0gYm91bmRzLmNvcHkoKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbk9iamVjdCA9IHBvc2l0aW9uc1tyb3cuX1VJVGFibGVWaWV3Um93SW5kZXhdXG4gICAgICAgICAgICBmcmFtZS5taW4ueSA9IHBvc2l0aW9uT2JqZWN0LnRvcFlcbiAgICAgICAgICAgIGZyYW1lLm1heC55ID0gcG9zaXRpb25PYmplY3QuYm90dG9tWVxuICAgICAgICAgICAgcm93LmZyYW1lID0gZnJhbWVcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcm93LnN0eWxlLndpZHRoID0gXCJcIiArIChib3VuZHMud2lkdGggLSB0aGlzLnNpZGVQYWRkaW5nICogMikuaW50ZWdlclZhbHVlICsgXCJweFwiXG4gICAgICAgICAgICByb3cuc3R5bGUubGVmdCA9IFwiXCIgKyB0aGlzLnNpZGVQYWRkaW5nLmludGVnZXJWYWx1ZSArIFwicHhcIlxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfSwgdGhpcylcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2Z1bGxIZWlnaHRWaWV3LmZyYW1lID0gYm91bmRzLnJlY3RhbmdsZVdpdGhIZWlnaHQoKHBvc2l0aW9ucy5sYXN0RWxlbWVudCB8fFxuICAgICAgICAgICAgbmlsKS5ib3R0b21ZKS5yZWN0YW5nbGVXaXRoV2lkdGgoYm91bmRzLndpZHRoICogMC41KVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fZmlyc3RMYXlvdXRWaXNpYmxlUm93cyA9IFtdXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgcHJpdmF0ZSBfYW5pbWF0ZUxheW91dEFsbFJvd3MoKSB7XG4gICAgICAgIFxuICAgICAgICBVSVZpZXcuYW5pbWF0ZVZpZXdPclZpZXdzV2l0aER1cmF0aW9uRGVsYXlBbmRGdW5jdGlvbihcbiAgICAgICAgICAgIHRoaXMuX3Zpc2libGVSb3dzLFxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25EdXJhdGlvbixcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBmdW5jdGlvbiAodGhpczogVUlUYWJsZVZpZXcpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXlvdXRBbGxSb3dzKClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSxcbiAgICAgICAgICAgIGZ1bmN0aW9uICh0aGlzOiBVSVRhYmxlVmlldykge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIHRoaXMuX2NhbGN1bGF0ZUFsbFBvc2l0aW9ucygpXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5fbGF5b3V0QWxsUm93cygpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgbGF5b3V0U3Vidmlld3MoKSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBwcmV2aW91c1Bvc2l0aW9uczogVUlUYWJsZVZpZXdSZXVzYWJsZVZpZXdQb3NpdGlvbk9iamVjdFtdID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLl9yb3dQb3NpdGlvbnMpKVxuICAgICAgICBcbiAgICAgICAgY29uc3QgcHJldmlvdXNWaXNpYmxlUm93c0xlbmd0aCA9IHRoaXMuX3Zpc2libGVSb3dzLmxlbmd0aFxuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuX25lZWRzRHJhd2luZ09mVmlzaWJsZVJvd3NCZWZvcmVMYXlvdXQpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy90aGlzLl9jYWxjdWxhdGVBbGxQb3NpdGlvbnMoKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl9kcmF3VmlzaWJsZVJvd3MoKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl9uZWVkc0RyYXdpbmdPZlZpc2libGVSb3dzQmVmb3JlTGF5b3V0ID0gTk9cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHN1cGVyLmxheW91dFN1YnZpZXdzKClcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpZiAoIXRoaXMubnVtYmVyT2ZSb3dzKCkgfHwgIXRoaXMuaXNNZW1iZXJPZlZpZXdUcmVlKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5fc2hvdWxkQW5pbWF0ZU5leHRMYXlvdXQpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIE5lZWQgdG8gZG8gbGF5b3V0IHdpdGggdGhlIHByZXZpb3VzIHBvc2l0aW9uc1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl9sYXlvdXRBbGxSb3dzKHByZXZpb3VzUG9zaXRpb25zKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChwcmV2aW91c1Zpc2libGVSb3dzTGVuZ3RoIDwgdGhpcy5fdmlzaWJsZVJvd3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgVUlWaWV3LnJ1bkZ1bmN0aW9uQmVmb3JlTmV4dEZyYW1lKGZ1bmN0aW9uICh0aGlzOiBVSVRhYmxlVmlldykge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYW5pbWF0ZUxheW91dEFsbFJvd3MoKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLl9hbmltYXRlTGF5b3V0QWxsUm93cygpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5fc2hvdWxkQW5pbWF0ZU5leHRMYXlvdXQgPSBOT1xuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGlmICh0aGlzLl9uZWVkc0RyYXdpbmdPZlZpc2libGVSb3dzQmVmb3JlTGF5b3V0KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vICAgICB0aGlzLl9kcmF3VmlzaWJsZVJvd3MoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gICAgIHRoaXMuX25lZWRzRHJhd2luZ09mVmlzaWJsZVJvd3NCZWZvcmVMYXlvdXQgPSBOTztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl9jYWxjdWxhdGVBbGxQb3NpdGlvbnMoKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl9sYXlvdXRBbGxSb3dzKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBpbnRyaW5zaWNDb250ZW50SGVpZ2h0KGNvbnN0cmFpbmluZ1dpZHRoID0gMCkge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB2YXIgcmVzdWx0ID0gMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLl9yb3dQb3NpdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX3Jvd1Bvc2l0aW9uc1t0aGlzLl9yb3dQb3NpdGlvbnMubGVuZ3RoIC0gMV0uYm90dG9tWVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxufVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiIsIi8vLzxyZWZlcmVuY2UgcGF0aD1cIlVJVmlldy50c1wiLz5cblxuXG5cblxuXG5cblxuXG5cbmNsYXNzIFVJSW1hZ2VWaWV3IGV4dGVuZHMgVUlWaWV3IHtcbiAgICBcbiAgICBcbiAgICAvL2FjdGlvbkluZGljYXRvcjogVUlBY3Rpb25JbmRpY2F0b3I7XG4gICAgX3NvdXJjZUtleTogc3RyaW5nXG4gICAgX2RlZmF1bHRTb3VyY2U6IHN0cmluZ1xuICAgIFxuICAgIF9maWxsTW9kZTogYW55XG4gICAgXG4gICAgX2hpZGRlbldoZW5FbXB0eSA9IE5PXG4gICAgXG4gICAgXG4gICAgY29uc3RydWN0b3IoZWxlbWVudElEPywgdmlld0hUTUxFbGVtZW50ID0gbnVsbCkge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIoZWxlbWVudElELCB2aWV3SFRNTEVsZW1lbnQsIFwiaW1nXCIpXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9jbGFzcyA9IFVJSW1hZ2VWaWV3XG4gICAgICAgIHRoaXMuc3VwZXJjbGFzcyA9IFVJVmlld1xuICAgICAgICBcbiAgICAgICAgLy90aGlzLmFjdGlvbkluZGljYXRvciA9IG5ldyBVSUFjdGlvbkluZGljYXRvcihlbGVtZW50SUQgKyBcIkFjdGlvbkluZGljYXRvclwiKTtcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBzdGF0aWMgZmlsbE1vZGUgPSB7XG4gICAgICAgIFxuICAgICAgICBcInN0cmV0Y2hUb0ZpbGxcIjogXCJmaWxsXCIsXG4gICAgICAgIFwiYXNwZWN0Rml0XCI6IFwiY29udGFpblwiLFxuICAgICAgICBcImFzcGVjdEZpbGxcIjogXCJjb3ZlclwiLFxuICAgICAgICBcImNlbnRlclwiOiBcIm5vbmVcIixcbiAgICAgICAgXCJhc3BlY3RGaXRJZkxhcmdlclwiOiBcInNjYWxlLWRvd25cIlxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgZ2V0IHZpZXdIVE1MRWxlbWVudCgpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBzdXBlci52aWV3SFRNTEVsZW1lbnQgYXMgSFRNTEltYWdlRWxlbWVudFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgc3RhdGljIGRhdGFVUkwodXJsLCBjYWxsYmFjaykge1xuICAgICAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuICAgICAgICB4aHIub3BlbihcImdldFwiLCB1cmwpXG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSBcImJsb2JcIlxuICAgICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc3QgZnIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgXG4gICAgICAgICAgICBmci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sodGhpcy5yZXN1bHQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZyLnJlYWRBc0RhdGFVUkwoeGhyLnJlc3BvbnNlKSAvLyBhc3luYyBjYWxsXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHhoci5zZW5kKClcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgc3RhdGljIGRhdGFVUkxXaXRoTWF4U2l6ZShVUkxTdHJpbmc6IHN0cmluZywgbWF4U2l6ZTogbnVtYmVyLCBjb21wbGV0aW9uOiAocmVzdWx0VVJMU3RyaW5nOiBzdHJpbmcpID0+IHZvaWQpIHtcbiAgICBcbiAgICAgICAgY29uc3QgaW1hZ2VWaWV3ID0gbmV3IFVJSW1hZ2VWaWV3KClcbiAgICAgICAgaW1hZ2VWaWV3LmltYWdlU291cmNlID0gVVJMU3RyaW5nXG4gICAgICAgIFxuICAgICAgICBpbWFnZVZpZXcudmlld0hUTUxFbGVtZW50Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsU2l6ZSA9IGltYWdlVmlldy5pbnRyaW5zaWNDb250ZW50U2l6ZSgpXG4gICAgXG4gICAgXG4gICAgICAgICAgICB2YXIgbXVsdGlwbGllciA9IG1heFNpemUgLyBNYXRoLm1heChvcmlnaW5hbFNpemUuaGVpZ2h0LCBvcmlnaW5hbFNpemUud2lkdGgpXG4gICAgXG4gICAgICAgICAgICBtdWx0aXBsaWVyID0gTWF0aC5taW4oMSwgbXVsdGlwbGllcilcbiAgICBcbiAgICBcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGltYWdlVmlldy5nZXREYXRhVVJMKChvcmlnaW5hbFNpemUuaGVpZ2h0ICogbXVsdGlwbGllcikuaW50ZWdlclZhbHVlLCAob3JpZ2luYWxTaXplLndpZHRoICpcbiAgICAgICAgICAgICAgICBtdWx0aXBsaWVyKS5pbnRlZ2VyVmFsdWUpXG4gICAgXG4gICAgICAgICAgICBjb21wbGV0aW9uKHJlc3VsdClcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBzdGF0aWMgZGF0YVVSTFdpdGhTaXplcyhcbiAgICAgICAgVVJMU3RyaW5nOiBzdHJpbmcsXG4gICAgICAgIGhlaWdodDogbnVtYmVyLFxuICAgICAgICB3aWR0aDogbnVtYmVyLFxuICAgICAgICBjb21wbGV0aW9uOiAocmVzdWx0VVJMU3RyaW5nOiBzdHJpbmcpID0+IHZvaWRcbiAgICApIHtcbiAgICBcbiAgICAgICAgY29uc3QgaW1hZ2VWaWV3ID0gbmV3IFVJSW1hZ2VWaWV3KClcbiAgICAgICAgaW1hZ2VWaWV3LmltYWdlU291cmNlID0gVVJMU3RyaW5nXG4gICAgICAgIFxuICAgICAgICBpbWFnZVZpZXcudmlld0hUTUxFbGVtZW50Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGltYWdlVmlldy5nZXREYXRhVVJMKGhlaWdodCwgd2lkdGgpXG4gICAgICAgICAgICBjb21wbGV0aW9uKHJlc3VsdClcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBnZXREYXRhVVJMKGhlaWdodD86IG51bWJlciwgd2lkdGg/OiBudW1iZXIpIHtcbiAgICBcbiAgICAgICAgY29uc3QgaW1nID0gdGhpcy52aWV3SFRNTEVsZW1lbnRcbiAgICBcbiAgICAgICAgLy8gQ3JlYXRlIGFuIGVtcHR5IGNhbnZhcyBlbGVtZW50XG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIilcbiAgICAgICAgY2FudmFzLndpZHRoID0gd2lkdGhcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodFxuICAgICAgICBcbiAgICAgICAgLy8gQ29weSB0aGUgaW1hZ2UgY29udGVudHMgdG8gdGhlIGNhbnZhc1xuICAgICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpXG4gICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KVxuICAgICAgICBcbiAgICAgICAgLy8gR2V0IHRoZSBkYXRhLVVSTCBmb3JtYXR0ZWQgaW1hZ2VcbiAgICAgICAgLy8gRmlyZWZveCBzdXBwb3J0cyBQTkcgYW5kIEpQRUcuIFlvdSBjb3VsZCBjaGVjayBpbWcuc3JjIHRvXG4gICAgICAgIC8vIGd1ZXNzIHRoZSBvcmlnaW5hbCBmb3JtYXQsIGJ1dCBiZSBhd2FyZSB0aGUgdXNpbmcgXCJpbWFnZS9qcGdcIlxuICAgICAgICAvLyB3aWxsIHJlLWVuY29kZSB0aGUgaW1hZ2UuXG4gICAgICAgIGNvbnN0IGRhdGFVUkwgPSBjYW52YXMudG9EYXRhVVJMKFwiaW1hZ2UvcG5nXCIpXG4gICAgXG4gICAgICAgIHJldHVybiBkYXRhVVJMXG4gICAgICAgIFxuICAgICAgICAvL3JldHVybiBkYXRhVVJMLnJlcGxhY2UoL15kYXRhOmltYWdlXFwvKHBuZ3xqcGcpO2Jhc2U2NCwvLCBcIlwiKTtcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGdldCBpbWFnZVNvdXJjZSgpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdIVE1MRWxlbWVudC5zcmNcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHNldCBpbWFnZVNvdXJjZShzb3VyY2VTdHJpbmc6IHN0cmluZykge1xuICAgICAgICBcbiAgICAgICAgaWYgKElTX05PVChzb3VyY2VTdHJpbmcpKSB7XG4gICAgICAgICAgICBzb3VyY2VTdHJpbmcgPSBcIlwiXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMudmlld0hUTUxFbGVtZW50LnNyYyA9IHNvdXJjZVN0cmluZ1xuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuaGlkZGVuV2hlbkVtcHR5KSB7XG4gICAgICAgICAgICB0aGlzLmhpZGRlbiA9IElTX05PVCh0aGlzLmltYWdlU291cmNlKVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoIXNvdXJjZVN0cmluZyB8fCAhc291cmNlU3RyaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL3RoaXMuYWN0aW9uSW5kaWNhdG9yLnN0b3AoKTtcbiAgICAgICAgICAgIHRoaXMuaGlkZGVuID0gWUVTXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuaGlkZGVuID0gTk9cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyB0aGlzLnN1cGVydmlldy5hZGRTdWJ2aWV3KHRoaXMuYWN0aW9uSW5kaWNhdG9yKTtcbiAgICAgICAgLy8gdGhpcy5hY3Rpb25JbmRpY2F0b3IuZnJhbWUgPSB0aGlzLmZyYW1lO1xuICAgICAgICAvLyB0aGlzLmFjdGlvbkluZGljYXRvci5zdGFydCgpO1xuICAgICAgICAvLyB0aGlzLmFjdGlvbkluZGljYXRvci5iYWNrZ3JvdW5kQ29sb3IgPSBVSUNvbG9yLnJlZENvbG9yXG4gICAgICAgIFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMudmlld0hUTUxFbGVtZW50Lm9ubG9hZCA9IGZ1bmN0aW9uICh0aGlzOiBVSUltYWdlVmlldywgZXZlbnQ6IEV2ZW50KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuc3VwZXJ2aWV3LnNldE5lZWRzTGF5b3V0KClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy90aGlzLmFjdGlvbkluZGljYXRvci5yZW1vdmVGcm9tU3VwZXJ2aWV3KCk7XG4gICAgICAgICAgICBcbiAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBzZXRJbWFnZVNvdXJjZShrZXk6IHN0cmluZywgZGVmYXVsdFN0cmluZzogc3RyaW5nKSB7XG4gICAgXG4gICAgICAgIGNvbnN0IGxhbmd1YWdlTmFtZSA9IFVJQ29yZS5sYW5ndWFnZVNlcnZpY2UuY3VycmVudExhbmd1YWdlS2V5XG4gICAgICAgIHRoaXMuaW1hZ2VTb3VyY2UgPSBVSUNvcmUubGFuZ3VhZ2VTZXJ2aWNlLnN0cmluZ0ZvcktleShrZXksIGxhbmd1YWdlTmFtZSwgZGVmYXVsdFN0cmluZywgbmlsKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgZGlkUmVjZWl2ZUJyb2FkY2FzdEV2ZW50KGV2ZW50OiBVSVZpZXdCcm9hZGNhc3RFdmVudCkge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIuZGlkUmVjZWl2ZUJyb2FkY2FzdEV2ZW50KGV2ZW50KVxuICAgICAgICBcbiAgICAgICAgaWYgKGV2ZW50Lm5hbWUgPT0gVUlWaWV3LmJyb2FkY2FzdEV2ZW50TmFtZS5MYW5ndWFnZUNoYW5nZWQgfHwgZXZlbnQubmFtZSA9PVxuICAgICAgICAgICAgVUlWaWV3LmJyb2FkY2FzdEV2ZW50TmFtZS5BZGRlZFRvVmlld1RyZWUpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5fc2V0SW1hZ2VTb3VyY2VGcm9tS2V5SWZQb3NzaWJsZSgpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgd2lsbE1vdmVUb1N1cGVydmlldyhzdXBlcnZpZXc6IFVJVmlldykge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIud2lsbE1vdmVUb1N1cGVydmlldyhzdXBlcnZpZXcpXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9zZXRJbWFnZVNvdXJjZUZyb21LZXlJZlBvc3NpYmxlKClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIF9zZXRJbWFnZVNvdXJjZUZyb21LZXlJZlBvc3NpYmxlKCkge1xuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuX3NvdXJjZUtleSAmJiB0aGlzLl9kZWZhdWx0U291cmNlKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuc2V0SW1hZ2VTb3VyY2UodGhpcy5fc291cmNlS2V5LCB0aGlzLl9kZWZhdWx0U291cmNlKVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIGdldCBmaWxsTW9kZSgpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy5fZmlsbE1vZGVcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHNldCBmaWxsTW9kZShmaWxsTW9kZSkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5fZmlsbE1vZGUgPSBmaWxsTW9kZTtcbiAgICAgICAgXG4gICAgICAgICh0aGlzLnN0eWxlIGFzIGFueSkub2JqZWN0Rml0ID0gZmlsbE1vZGVcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGdldCBoaWRkZW5XaGVuRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oaWRkZW5XaGVuRW1wdHlcbiAgICB9XG4gICAgXG4gICAgc2V0IGhpZGRlbldoZW5FbXB0eShoaWRkZW5XaGVuRW1wdHk6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5faGlkZGVuV2hlbkVtcHR5ID0gaGlkZGVuV2hlbkVtcHR5XG4gICAgICAgIGlmIChoaWRkZW5XaGVuRW1wdHkpIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZGVuID0gSVNfTk9UKHRoaXMuaW1hZ2VTb3VyY2UpXG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgZGlkTW92ZVRvU3VwZXJ2aWV3KHN1cGVydmlldzogVUlWaWV3KSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci5kaWRNb3ZlVG9TdXBlcnZpZXcoc3VwZXJ2aWV3KVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGxheW91dFN1YnZpZXdzKCkge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIubGF5b3V0U3Vidmlld3MoKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBpbnRyaW5zaWNDb250ZW50U2l6ZSgpIHtcbiAgICBcbiAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFVJUmVjdGFuZ2xlKDAsIDAsIHRoaXMudmlld0hUTUxFbGVtZW50Lm5hdHVyYWxIZWlnaHQsIHRoaXMudmlld0hUTUxFbGVtZW50Lm5hdHVyYWxXaWR0aClcbiAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGludHJpbnNpY0NvbnRlbnRTaXplV2l0aENvbnN0cmFpbnRzKGNvbnN0cmFpbmluZ0hlaWdodCA9IDAsIGNvbnN0cmFpbmluZ1dpZHRoID0gMCkge1xuICAgIFxuICAgICAgICBjb25zdCBoZWlnaHRSYXRpbyA9IGNvbnN0cmFpbmluZ0hlaWdodCAvIHRoaXMudmlld0hUTUxFbGVtZW50Lm5hdHVyYWxIZWlnaHRcbiAgICBcbiAgICAgICAgY29uc3Qgd2lkdGhSYXRpbyA9IGNvbnN0cmFpbmluZ1dpZHRoIC8gdGhpcy52aWV3SFRNTEVsZW1lbnQubmF0dXJhbFdpZHRoXG4gICAgXG4gICAgICAgIGNvbnN0IG11bHRpcGxpZXIgPSBNYXRoLm1heChoZWlnaHRSYXRpbywgd2lkdGhSYXRpbylcbiAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFVJUmVjdGFuZ2xlKDAsIDAsIHRoaXMudmlld0hUTUxFbGVtZW50Lm5hdHVyYWxIZWlnaHQgKlxuICAgICAgICAgICAgbXVsdGlwbGllciwgdGhpcy52aWV3SFRNTEVsZW1lbnQubmF0dXJhbFdpZHRoICogbXVsdGlwbGllcilcbiAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxufVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJVSVRleHRWaWV3LnRzXCIgLz5cblxuXG5cblxuLy8gQHRzLWlnbm9yZVxuY2xhc3MgVUlUZXh0RmllbGQgZXh0ZW5kcyBVSVRleHRWaWV3IHtcbiAgICBcbiAgICBcbiAgICBfcGxhY2Vob2xkZXJUZXh0S2V5OiBzdHJpbmdcbiAgICBfZGVmYXVsdFBsYWNlaG9sZGVyVGV4dDogc3RyaW5nXG4gICAgXG4gICAgX3ZpZXdIVE1MRWxlbWVudDogSFRNTElucHV0RWxlbWVudFxuICAgIFxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRJRD86IHN0cmluZywgdmlld0hUTUxFbGVtZW50ID0gbnVsbCwgdHlwZSA9IFVJVGV4dFZpZXcudHlwZS50ZXh0RmllbGQpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyKGVsZW1lbnRJRCwgdHlwZSwgdmlld0hUTUxFbGVtZW50KVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fY2xhc3MgPSBVSVRleHRGaWVsZFxuICAgICAgICB0aGlzLnN1cGVyY2xhc3MgPSBVSVRleHRWaWV3XG4gICAgICAgIFxuICAgICAgICB0aGlzLnZpZXdIVE1MRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dFwiKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSBVSUNvbG9yLndoaXRlQ29sb3JcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5hZGRUYXJnZXRGb3JDb250cm9sRXZlbnQoVUlWaWV3LmNvbnRyb2xFdmVudC5Qb2ludGVyVXBJbnNpZGUsIGZ1bmN0aW9uIChzZW5kZXIsIGV2ZW50KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHNlbmRlci5mb2N1cygpXG4gICAgICAgICAgICBcbiAgICAgICAgfSlcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLnZpZXdIVE1MRWxlbWVudC5vbmlucHV0ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNlbmRDb250cm9sRXZlbnRGb3JLZXkoVUlUZXh0RmllbGQuY29udHJvbEV2ZW50LlRleHRDaGFuZ2UsIGV2ZW50KVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5zdHlsZS53ZWJraXRVc2VyU2VsZWN0ID0gXCJ0ZXh0XCJcbiAgICAgICAgXG4gICAgICAgIHRoaXMubmF0aXZlU2VsZWN0aW9uRW5hYmxlZCA9IFlFU1xuICAgICAgICBcbiAgICAgICAgdGhpcy5wYXVzZXNQb2ludGVyRXZlbnRzID0gTk9cbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBzdGF0aWMgY29udHJvbEV2ZW50ID0gT2JqZWN0LmFzc2lnbih7fSwgVUlWaWV3LmNvbnRyb2xFdmVudCwge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFwiVGV4dENoYW5nZVwiOiBcIlRleHRDaGFuZ2VcIlxuICAgICAgICBcbiAgICAgICAgXG4gICAgfSlcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBnZXQgYWRkQ29udHJvbEV2ZW50VGFyZ2V0KCk6IFVJVmlld0FkZENvbnRyb2xFdmVudFRhcmdldE9iamVjdDx0eXBlb2YgVUlUZXh0RmllbGQuY29udHJvbEV2ZW50PiB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gc3VwZXIuYWRkQ29udHJvbEV2ZW50VGFyZ2V0IGFzIGFueTtcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBnZXQgdmlld0hUTUxFbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmlld0hUTUxFbGVtZW50XG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIHB1YmxpYyBzZXQgdGV4dCh0ZXh0OiBzdHJpbmcpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudmlld0hUTUxFbGVtZW50LnZhbHVlID0gdGV4dFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgcHVibGljIGdldCB0ZXh0KCk6IHN0cmluZyB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy52aWV3SFRNTEVsZW1lbnQudmFsdWVcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHB1YmxpYyBzZXQgcGxhY2Vob2xkZXJUZXh0KHRleHQ6IHN0cmluZykge1xuICAgICAgICBcbiAgICAgICAgdGhpcy52aWV3SFRNTEVsZW1lbnQucGxhY2Vob2xkZXIgPSB0ZXh0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBwdWJsaWMgZ2V0IHBsYWNlaG9sZGVyVGV4dCgpOiBzdHJpbmcge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld0hUTUxFbGVtZW50LnBsYWNlaG9sZGVyXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBzZXRQbGFjZWhvbGRlclRleHQoa2V5OiBzdHJpbmcsIGRlZmF1bHRTdHJpbmc6IHN0cmluZykge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5fcGxhY2Vob2xkZXJUZXh0S2V5ID0ga2V5XG4gICAgICAgIHRoaXMuX2RlZmF1bHRQbGFjZWhvbGRlclRleHQgPSBkZWZhdWx0U3RyaW5nXG4gICAgICAgIFxuICAgICAgICBjb25zdCBsYW5ndWFnZU5hbWUgPSBVSUNvcmUubGFuZ3VhZ2VTZXJ2aWNlLmN1cnJlbnRMYW5ndWFnZUtleVxuICAgICAgICB0aGlzLnBsYWNlaG9sZGVyVGV4dCA9IFVJQ29yZS5sYW5ndWFnZVNlcnZpY2Uuc3RyaW5nRm9yS2V5KGtleSwgbGFuZ3VhZ2VOYW1lLCBkZWZhdWx0U3RyaW5nLCBuaWwpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBkaWRSZWNlaXZlQnJvYWRjYXN0RXZlbnQoZXZlbnQ6IFVJVmlld0Jyb2FkY2FzdEV2ZW50KSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci5kaWRSZWNlaXZlQnJvYWRjYXN0RXZlbnQoZXZlbnQpXG4gICAgICAgIFxuICAgICAgICBpZiAoZXZlbnQubmFtZSA9PSBVSVZpZXcuYnJvYWRjYXN0RXZlbnROYW1lLkxhbmd1YWdlQ2hhbmdlZCB8fCBldmVudC5uYW1lID09XG4gICAgICAgICAgICBVSVZpZXcuYnJvYWRjYXN0RXZlbnROYW1lLkFkZGVkVG9WaWV3VHJlZSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl9zZXRQbGFjZWhvbGRlckZyb21LZXlJZlBvc3NpYmxlKClcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICB3aWxsTW92ZVRvU3VwZXJ2aWV3KHN1cGVydmlldzogVUlWaWV3KSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci53aWxsTW92ZVRvU3VwZXJ2aWV3KHN1cGVydmlldylcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3NldFBsYWNlaG9sZGVyRnJvbUtleUlmUG9zc2libGUoKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgX3NldFBsYWNlaG9sZGVyRnJvbUtleUlmUG9zc2libGUoKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5fcGxhY2Vob2xkZXJUZXh0S2V5ICYmIHRoaXMuX2RlZmF1bHRQbGFjZWhvbGRlclRleHQpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zZXRQbGFjZWhvbGRlclRleHQodGhpcy5fcGxhY2Vob2xkZXJUZXh0S2V5LCB0aGlzLl9kZWZhdWx0UGxhY2Vob2xkZXJUZXh0KVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHB1YmxpYyBnZXQgaXNTZWN1cmUoKTogYm9vbGVhbiB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCByZXN1bHQgPSAodGhpcy52aWV3SFRNTEVsZW1lbnQudHlwZSA9PSBcInBhc3N3b3JkXCIpXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBwdWJsaWMgc2V0IGlzU2VjdXJlKHNlY3VyZTogYm9vbGVhbikge1xuICAgICAgICBcbiAgICAgICAgdmFyIHR5cGUgPSBcInRleHRcIlxuICAgICAgICBcbiAgICAgICAgaWYgKHNlY3VyZSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0eXBlID0gXCJwYXNzd29yZFwiXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy52aWV3SFRNTEVsZW1lbnQudHlwZSA9IHR5cGVcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxufVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuIiwiLy8vPHJlZmVyZW5jZSBwYXRoPVwiLi4vVUlDb3JlL1VJQnV0dG9uLnRzXCIvPlxuXG5cblxuXG5cbmNsYXNzIFNlYXJjaGFibGVEcm9wZG93blJvdyBleHRlbmRzIFVJQnV0dG9uIHtcbiAgICBcbiAgICBfY2hlY2tib3g6IENCQ2hlY2tib3hcbiAgICBcbiAgICBcbiAgICBcbiAgICB0eXBlID0gU2VhcmNoYWJsZURyb3Bkb3duUm93LnR5cGUuc2VsZWN0YWJsZUl0ZW1cbiAgICBfU2VhcmNoYWJsZURyb3Bkb3duUm93V2FzSG92ZXJlZEZ1bmN0aW9uOiBhbnlcbiAgICBcbiAgICBcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50SUQ6IHN0cmluZykge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIoZWxlbWVudElEKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fY2xhc3MgPSBTZWFyY2hhYmxlRHJvcGRvd25Sb3dcbiAgICAgICAgdGhpcy5zdXBlcmNsYXNzID0gVUlCdXR0b25cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGluaXRWaWV3KGVsZW1lbnRJRDogc3RyaW5nLCB2aWV3SFRNTEVsZW1lbnQ6IEhUTUxFbGVtZW50LCBpbml0Vmlld0RhdGEpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyLmluaXRWaWV3KGVsZW1lbnRJRCwgdmlld0hUTUxFbGVtZW50LCBpbml0Vmlld0RhdGEpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2NoZWNrYm94ID0gbmV3IENCQ2hlY2tib3goZWxlbWVudElEICsgXCJDaGVja2JveFwiKVxuICAgICAgICB0aGlzLl9jaGVja2JveC51c2VySW50ZXJhY3Rpb25FbmFibGVkID0gTk9cbiAgICAgICAgXG4gICAgICAgIHRoaXMuYWRkU3Vidmlldyh0aGlzLl9jaGVja2JveClcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLnN0eWxlLm91dGxpbmUgPSBcIm5vbmVcIlxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIHNldCB0aXRsZVRleHQodGl0bGVUZXh0OiBzdHJpbmcpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudGl0bGVMYWJlbC50ZXh0ID0gdGl0bGVUZXh0XG4gICAgICAgIHRoaXMuX2NoZWNrYm94LnRpdGxlTGFiZWwudGV4dCA9IHRpdGxlVGV4dFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgZ2V0IHRpdGxlVGV4dCgpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzLnRpdGxlTGFiZWwudGV4dFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgc2V0IHNlbGVjdGVkKHNlbGVjdGVkOiBib29sZWFuKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci5zZWxlY3RlZCA9IHNlbGVjdGVkXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9jaGVja2JveC5zZWxlY3RlZCA9IHNlbGVjdGVkXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGdldCBzZWxlY3RlZCgpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBzdXBlci5zZWxlY3RlZFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgc2V0IGZvY3VzZWQoZm9jdXNlZDogYm9vbGVhbikge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5fZm9jdXNlZCA9IGZvY3VzZWRcbiAgICAgICAgXG4gICAgICAgIHRoaXMudXBkYXRlQ29udGVudEZvckN1cnJlbnRTdGF0ZSgpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBnZXQgZm9jdXNlZCgpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzLl9mb2N1c2VkXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBzdGF0aWMgdHlwZSA9IHtcbiAgICAgICAgXG4gICAgICAgIFwic2VjdGlvblRpdGxlXCI6IFwiU2VjdGlvblRpdGxlXCIsXG4gICAgICAgIFwic2VsZWN0ZWRJdGVtXCI6IFwiU2VsZWN0ZWRJdGVtXCIsXG4gICAgICAgIFwic2VsZWN0YWJsZUl0ZW1cIjogXCJTZWxlY3RhYmxlSXRlbVwiLFxuICAgICAgICBcImN1c3RvbUl0ZW1cIjogXCJDdXN0b21JdGVtXCJcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIHVwZGF0ZUNvbnRlbnRGb3JOb3JtYWxTdGF0ZSgpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy50eXBlID09IFNlYXJjaGFibGVEcm9wZG93blJvdy50eXBlLnNlY3Rpb25UaXRsZSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSBVSUNvbG9yLnRyYW5zcGFyZW50Q29sb3JcbiAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC50ZXh0Q29sb3IgPSBDQkNvbG9yLnByaW1hcnlDb250ZW50Q29sb3IuY29sb3JXaXRoQWxwaGEoMC41KVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnN0eWxlLmJvcmRlclRvcCA9IFwiMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4zKVwiXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC5zdHlsZS5tYXJnaW5MZWZ0ID0gXCJcIlxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnRleHRTdWZmaXggPSBcIlwiXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICh0aGlzLl9jaGVja2JveCkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrYm94LmhpZGRlbiA9IFlFU1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnRpdGxlTGFiZWwuaGlkZGVuID0gTk9cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMudHlwZSA9PSBTZWFyY2hhYmxlRHJvcGRvd25Sb3cudHlwZS5zZWxlY3RlZEl0ZW0pIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSBVSUNvbG9yLnRyYW5zcGFyZW50Q29sb3JcbiAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC50ZXh0Q29sb3IgPSBDQkNvbG9yLnByaW1hcnlUaW50Q29sb3JcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zdHlsZS5ib3JkZXJUb3AgPSBcIlwiXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vdGhpcy50aXRsZUxhYmVsLnN0eWxlLm1hcmdpbkxlZnQgPSBcIjIwcHhcIlxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnRleHRTdWZmaXggPSBcIlwiXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICh0aGlzLl9jaGVja2JveCkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrYm94LmhpZGRlbiA9IE5PXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tib3gudGl0bGVMYWJlbC50ZXh0Q29sb3IgPSBDQkNvbG9yLnByaW1hcnlDb250ZW50Q29sb3JcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy50aXRsZUxhYmVsLmhpZGRlbiA9IFlFU1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnR5cGUgPT0gU2VhcmNoYWJsZURyb3Bkb3duUm93LnR5cGUuY3VzdG9tSXRlbSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRDb2xvciA9IFVJQ29sb3IudHJhbnNwYXJlbnRDb2xvclxuICAgICAgICAgICAgdGhpcy50aXRsZUxhYmVsLnRleHRDb2xvciA9IENCQ29sb3IucHJpbWFyeVRpbnRDb2xvclxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnN0eWxlLmJvcmRlclRvcCA9IFwiMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4zKVwiXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC5zdHlsZS5tYXJnaW5MZWZ0ID0gXCJcIlxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnRleHRTdWZmaXggPSBMYW5ndWFnZVNlcnZpY2Uuc3RyaW5nRm9yS2V5KFxuICAgICAgICAgICAgICAgIFwic2VhcmNoYWJsZURyb3Bkb3duQ3VzdG9tSXRlbVwiLFxuICAgICAgICAgICAgICAgIExhbmd1YWdlU2VydmljZS5jdXJyZW50TGFuZ3VhZ2VLZXksXG4gICAgICAgICAgICAgICAgXCItQ3VzdG9tIGl0ZW1cIlxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodGhpcy5fY2hlY2tib3gpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja2JveC5oaWRkZW4gPSBZRVNcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy50aXRsZUxhYmVsLmhpZGRlbiA9IE5PXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSBVSUNvbG9yLnRyYW5zcGFyZW50Q29sb3JcbiAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC50ZXh0Q29sb3IgPSBDQkNvbG9yLnByaW1hcnlUaW50Q29sb3JcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zdHlsZS5ib3JkZXJUb3AgPSBcIlwiXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC5zdHlsZS5tYXJnaW5MZWZ0ID0gXCIyMHB4XCJcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy50ZXh0U3VmZml4ID0gXCJcIlxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodGhpcy5fY2hlY2tib3gpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja2JveC5oaWRkZW4gPSBZRVNcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy50aXRsZUxhYmVsLmhpZGRlbiA9IE5PXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLnVzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBZRVNcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGdldCB0ZXh0U3VmZml4KCkge1xuICAgICAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy50aXRsZUxhYmVsLnRleHRTdWZmaXhcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHNldCB0ZXh0U3VmZml4KHRleHRTdWZmaXg6IHN0cmluZykge1xuICAgICAgICBcbiAgICAgICAgdGhpcy50aXRsZUxhYmVsLnRleHRTdWZmaXggPSB0ZXh0U3VmZml4XG4gICAgICAgIFxuICAgICAgICB0aGlzLl9jaGVja2JveC50aXRsZUxhYmVsLnRleHRTdWZmaXggPSB0ZXh0U3VmZml4XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICB1cGRhdGVDb250ZW50Rm9ySG92ZXJlZFN0YXRlKCkge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gQ0JDb2xvci5wcmltYXJ5Q29udGVudENvbG9yLmNvbG9yV2l0aEFscGhhKDAuMDUpXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgdXBkYXRlQ29udGVudEZvckhpZ2hsaWdodGVkU3RhdGUoKSB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSBDQkNvbG9yLnByaW1hcnlDb250ZW50Q29sb3IuY29sb3JXaXRoQWxwaGEoMC4wOClcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICB1cGRhdGVDb250ZW50Rm9yRm9jdXNlZFN0YXRlKCkge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gQ0JDb2xvci5wcmltYXJ5Q29udGVudENvbG9yLmNvbG9yV2l0aEFscGhhKDAuMDgpXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgdXBkYXRlQ29udGVudEZvclNlbGVjdGVkU3RhdGUoKSB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy51cGRhdGVDb250ZW50Rm9yTm9ybWFsU3RhdGUoKVxuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PSBTZWFyY2hhYmxlRHJvcGRvd25Sb3cudHlwZS5zZWxlY3RhYmxlSXRlbSB8fCB0aGlzLnR5cGUgPT1cbiAgICAgICAgICAgIFNlYXJjaGFibGVEcm9wZG93blJvdy50eXBlLmN1c3RvbUl0ZW0pIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5fY2hlY2tib3guaGlkZGVuID0gTk9cbiAgICAgICAgICAgIC8vdGhpcy5fY2hlY2tib3gudGl0bGVMYWJlbC5oaWRkZW4gPSBZRVM7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrYm94LnRpdGxlTGFiZWwudGV4dENvbG9yID0gQ0JDb2xvci5wcmltYXJ5VGludENvbG9yXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX3RpdGxlTGFiZWwuaGlkZGVuID0gWUVTXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICB3YXNSZW1vdmVkRnJvbVZpZXdUcmVlKCkge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIud2FzUmVtb3ZlZEZyb21WaWV3VHJlZSgpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmhpZ2hsaWdodGVkID0gTk9cbiAgICAgICAgdGhpcy5ob3ZlcmVkID0gTk9cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgbGF5b3V0U3Vidmlld3MoKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci5sYXlvdXRTdWJ2aWV3cygpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuX2NoZWNrYm94KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl9jaGVja2JveC5zdHlsZS50b3AgPSBcIjI1JVwiXG4gICAgICAgICAgICB0aGlzLl9jaGVja2JveC5zdHlsZS5oZWlnaHQgPSBcIjMwcHhcIlxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrYm94LnN0eWxlLmxlZnQgPSBcIlwiICsgdGhpcy5jb250ZW50UGFkZGluZyArIFwicHhcIlxuICAgICAgICAgICAgdGhpcy5fY2hlY2tib3guc3R5bGUucmlnaHQgPSBcIlwiICsgdGhpcy5jb250ZW50UGFkZGluZyArIFwicHhcIlxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxufVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vVUlDb3JlL1VJQnV0dG9uLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9VSUNvcmUvVUlLZXlWYWx1ZVN0cmluZ0ZpbHRlci50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vVUlDb3JlL1VJVGFibGVWaWV3LnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9VSUNvcmUvVUlJbWFnZVZpZXcudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL1VJQ29yZS9VSVRleHRWaWV3LnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9VSUNvcmUvVUlUZXh0RmllbGQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL1VJQ29yZS9VSURpYWxvZ1ZpZXcudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vU2VhcmNoVGV4dEZpZWxkLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL0NCQ2hlY2tib3gudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vQ0JDb2xvci50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9TZWFyY2hhYmxlRHJvcGRvd25Sb3cudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL1Jvb3RWaWV3Q29udHJvbGxlci50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9MYW5ndWFnZVNlcnZpY2UudHNcIiAvPlxuXG5cblxuXG5cbmludGVyZmFjZSBDQkxvY2FsaXplZFRleHRPYmplY3Qge1xuICAgIFxuICAgIFtrZXk6IHN0cmluZ106IHN0cmluZ1xuICAgIFxufVxuXG5cbmludGVyZmFjZSBDQkRyb3Bkb3duRGF0YTxUPiB7XG4gICAgXG4gICAgX2lkOiBzdHJpbmc7XG4gICAgbmFtZT86IENCTG9jYWxpemVkVGV4dE9iamVjdDtcbiAgICBkcm9wZG93bkNvZGU6IHN0cmluZztcbiAgICBkYXRhOiBDQkRyb3Bkb3duRGF0YUl0ZW08VD5bXTtcbiAgICBcbn1cblxuXG5pbnRlcmZhY2UgQ0JEcm9wZG93bkRhdGFJdGVtPFQ+IHtcbiAgICBcbiAgICBfaWQ6IHN0cmluZztcbiAgICB0aXRsZTogQ0JMb2NhbGl6ZWRUZXh0T2JqZWN0O1xuICAgIHJvd3NEYXRhPzogQ0JEcm9wZG93bkRhdGFJdGVtPFQ+W11cbiAgICBpc0FEcm9wZG93bkRhdGFTZWN0aW9uOiBib29sZWFuO1xuICAgIGlzQURyb3Bkb3duRGF0YVJvdzogYm9vbGVhbjtcbiAgICBcbiAgICBhdHRhY2hlZE9iamVjdDogVFxuICAgIFxuICAgIGl0ZW1Db2RlOiBzdHJpbmc7XG4gICAgZHJvcGRvd25Db2RlOiBzdHJpbmc7XG4gICAgXG59XG5cblxuaW50ZXJmYWNlIENCU3ViamVjdERyb3Bkb3duSXRlbUF0dGFjaGVkT2JqZWN0IHtcbiAgICBcbiAgICBpc0FQcm9kdWN0PzogYm9vbGVhbjtcbiAgICBpc0FTZXJ2aWNlPzogYm9vbGVhbjtcbiAgICBcbn1cblxuXG5cblxuY2xhc3MgU2VhcmNoYWJsZURyb3Bkb3duPFQ+IGV4dGVuZHMgVUlCdXR0b24ge1xuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIF9rZXlWYWx1ZVN0cmluZ0ZpbHRlcjogVUlLZXlWYWx1ZVN0cmluZ0ZpbHRlclxuICAgIF9jb250YWluZXJWaWV3OiBVSVZpZXdcbiAgICBfc2VhcmNoVGV4dEZpZWxkOiBTZWFyY2hUZXh0RmllbGRcbiAgICBfZGlhbG9nVmlldzogVUlEaWFsb2dWaWV3XG4gICAgX3RhYmxlVmlldzogVUlUYWJsZVZpZXdcbiAgICBfcmlnaHRJbWFnZVZpZXc6IFVJSW1hZ2VWaWV3XG4gICAgXG4gICAgaGlnaGxpZ2h0TGFiZWw6IFVJVGV4dFZpZXdcbiAgICBcbiAgICBfZGF0YTogQ0JEcm9wZG93bkRhdGFJdGVtPFQ+W10gPSBbXVxuICAgIF9maWx0ZXJlZERhdGE6IENCRHJvcGRvd25EYXRhSXRlbTxUPltdID0gW11cbiAgICBcbiAgICBfZXhjbHVkZWREYXRhOiBzdHJpbmdbXSA9IFtdXG4gICAgXG4gICAgXG4gICAgdGludENvbG9yOiBVSUNvbG9yID0gQ0JDb2xvci5wcmltYXJ5VGludENvbG9yXG4gICAgXG4gICAgXG4gICAgb3ZlcmZsb3dMYWJlbDogVUlUZXh0Vmlld1xuICAgIHNlbGVjdGVkSW5kaWNlczogbnVtYmVyW10gPSBbXVxuICAgIF9zZWxlY3RlZERhdGE6IENCRHJvcGRvd25EYXRhSXRlbTxUPltdID0gW11cbiAgICBfZHJhd2luZ0RhdGE6IENCRHJvcGRvd25EYXRhSXRlbTxUPltdID0gW11cbiAgICBcbiAgICBfaXNEcmF3aW5nRGF0YVZhbGlkID0gTk9cbiAgICBfcGxhY2Vob2xkZXJUZXh0OiBzdHJpbmdcbiAgICBfZXhwYW5kZWRDb250YWluZXJWaWV3SGVpZ2h0OiBudW1iZXJcbiAgICBcbiAgICBpc1NpbmdsZVNlbGVjdGlvbiA9IE5PXG4gICAgc2hvd3NTZWxlY3RlZFNlY3Rpb25Jbk11bHRpcGxlU2VsZWN0aW9uTW9kZSA9IE5PXG4gICAgXG4gICAgYWxsb3dzQ3VzdG9tSXRlbSA9IE5PXG4gICAgX2N1c3RvbUl0ZW06IENCRHJvcGRvd25EYXRhSXRlbTxhbnk+XG4gICAgX2ZvY3VzZWRSb3dJbmRleDogbnVtYmVyXG4gICAgXG4gICAga2VlcEZvY3VzZWRSb3dWaXNpYmxlID0gWUVTXG4gICAgX3BsYWNlaG9sZGVyTG9jYWxpemVkVGV4dE9iamVjdDogVUlMb2NhbGl6ZWRUZXh0T2JqZWN0XG4gICAgXG4gICAgXG4gICAgY29uc3RydWN0b3IoZWxlbWVudElEOiBzdHJpbmcpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyKGVsZW1lbnRJRClcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5fY2xhc3MgPSBTZWFyY2hhYmxlRHJvcGRvd25cbiAgICAgICAgdGhpcy5zdXBlcmNsYXNzID0gVUlCdXR0b25cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBpbml0VmlldyhlbGVtZW50SUQsIHZpZXdIVE1MRWxlbWVudCwgaW5pdFZpZXdEYXRhKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci5pbml0VmlldyhlbGVtZW50SUQsIHZpZXdIVE1MRWxlbWVudCwgaW5pdFZpZXdEYXRhKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIC8vdGhpcy5zdHlsZS5ib3JkZXJSYWRpdXMgPSBcIjJweFwiO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3RpdGxlTGFiZWwudGV4dCA9IFwiQ3VycmVudCB2YWx1ZVwiXG4gICAgICAgIHRoaXMuX3RpdGxlTGFiZWwudGV4dEFsaWdubWVudCA9IFVJVGV4dFZpZXcudGV4dEFsaWdubWVudC5sZWZ0XG4gICAgICAgIFxuICAgICAgICB0aGlzLm92ZXJmbG93TGFiZWwgPSBuZXcgVUlUZXh0VmlldyhlbGVtZW50SUQgKyBcIk92ZXJmbG93TGFiZWxcIilcbiAgICAgICAgdGhpcy5vdmVyZmxvd0xhYmVsLnRleHRDb2xvciA9IENCQ29sb3IucHJpbWFyeUNvbnRlbnRDb2xvclxuICAgICAgICB0aGlzLm92ZXJmbG93TGFiZWwudGV4dEFsaWdubWVudCA9IFVJVGV4dFZpZXcudGV4dEFsaWdubWVudC5yaWdodFxuICAgICAgICB0aGlzLmFkZFN1YnZpZXcodGhpcy5vdmVyZmxvd0xhYmVsKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3JpZ2h0SW1hZ2VWaWV3ID0gbmV3IFVJSW1hZ2VWaWV3KHRoaXMuZWxlbWVudElEICsgXCJSaWdodEltYWdlVmlld1wiKVxuICAgICAgICB0aGlzLl9yaWdodEltYWdlVmlldy5pbWFnZVNvdXJjZSA9IFwiaW1hZ2VzL2Jhc2VsaW5lLWFycm93X2Ryb3BfZG93bi0yNHB4LnN2Z1wiXG4gICAgICAgIHRoaXMuX3JpZ2h0SW1hZ2VWaWV3LnVzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBOT1xuICAgICAgICB0aGlzLmFkZFN1YnZpZXcodGhpcy5fcmlnaHRJbWFnZVZpZXcpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5zZXROZWVkc0xheW91dCgpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5fY29udGFpbmVyVmlldyA9IG5ldyBVSVZpZXcoZWxlbWVudElEICsgXCJDb250YWluZXJWaWV3XCIpXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lclZpZXcuc3R5bGUuYm94U2hhZG93ID0gXCIwIDlweCAxM3B4IDAgcmdiYSgwLDAsMCwwLjI2KVwiXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lclZpZXcuc3R5bGUuYm9yZGVyUmFkaXVzID0gXCIycHhcIlxuICAgICAgICBcbiAgICAgICAgdGhpcy5fc2VhcmNoVGV4dEZpZWxkID0gbmV3IFNlYXJjaFRleHRGaWVsZChlbGVtZW50SUQgKyBcIlNlYXJjaFRleHRGaWVsZFwiKVxuICAgICAgICB0aGlzLl9zZWFyY2hUZXh0RmllbGQucGxhY2Vob2xkZXJUZXh0ID0gXCJTZWFyY2hcIlxuICAgICAgICB0aGlzLl9jb250YWluZXJWaWV3LmFkZFN1YnZpZXcodGhpcy5fc2VhcmNoVGV4dEZpZWxkKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fc2VhcmNoVGV4dEZpZWxkLl90ZXh0RmllbGQuYWRkVGFyZ2V0Rm9yQ29udHJvbEV2ZW50KFxuICAgICAgICAgICAgVUlUZXh0RmllbGQuY29udHJvbEV2ZW50LlRleHRDaGFuZ2UsXG4gICAgICAgICAgICBmdW5jdGlvbiAodGhpczogU2VhcmNoYWJsZURyb3Bkb3duPFQ+LCBzZW5kZXIsIGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVGaWx0ZXJlZERhdGEodGhpcy5fc2VhcmNoVGV4dEZpZWxkLnRleHQpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fc2VhcmNoVGV4dEZpZWxkLl90ZXh0RmllbGQuYWRkVGFyZ2V0Rm9yQ29udHJvbEV2ZW50KFxuICAgICAgICAgICAgVUlWaWV3LmNvbnRyb2xFdmVudC5Fc2NEb3duLFxuICAgICAgICAgICAgZnVuY3Rpb24gKHRoaXM6IFNlYXJjaGFibGVEcm9wZG93bjxUPiwgc2VuZGVyLCBldmVudCkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChJUyh0aGlzLl9zZWFyY2hUZXh0RmllbGQudGV4dCkpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlYXJjaFRleHRGaWVsZC50ZXh0ID0gXCJcIlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUZpbHRlcmVkRGF0YShcIlwiKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaWFsb2dWaWV3LmRpc21pc3MoWUVTKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fc2VhcmNoVGV4dEZpZWxkLl90ZXh0RmllbGQuYWRkVGFyZ2V0Rm9yQ29udHJvbEV2ZW50KFxuICAgICAgICAgICAgVUlWaWV3LmNvbnRyb2xFdmVudC5Eb3duQXJyb3dEb3duLFxuICAgICAgICAgICAgZnVuY3Rpb24gKHRoaXM6IFNlYXJjaGFibGVEcm9wZG93bjxUPiwgc2VuZGVyOiBVSVRleHRGaWVsZCwgZXZlbnQ6IEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZm9jdXNlZFJvd0luZGV4IDwgKHRoaXMuZHJhd2luZ0RhdGEubGVuZ3RoIC0gMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNlZFJvd0luZGV4ID0gdGhpcy5mb2N1c2VkUm93SW5kZXggKyAxXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICApXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9zZWFyY2hUZXh0RmllbGQuX3RleHRGaWVsZC5hZGRUYXJnZXRGb3JDb250cm9sRXZlbnQoXG4gICAgICAgICAgICBVSVZpZXcuY29udHJvbEV2ZW50LlVwQXJyb3dEb3duLFxuICAgICAgICAgICAgZnVuY3Rpb24gKHRoaXM6IFNlYXJjaGFibGVEcm9wZG93bjxUPiwgc2VuZGVyOiBVSVRleHRGaWVsZCwgZXZlbnQ6IEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZm9jdXNlZFJvd0luZGV4ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c2VkUm93SW5kZXggPSB0aGlzLmZvY3VzZWRSb3dJbmRleCAtIDFcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgIClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3NlYXJjaFRleHRGaWVsZC5fdGV4dEZpZWxkLmFkZFRhcmdldEZvckNvbnRyb2xFdmVudChcbiAgICAgICAgICAgIFVJVmlldy5jb250cm9sRXZlbnQuRW50ZXJEb3duLFxuICAgICAgICAgICAgZnVuY3Rpb24gKHRoaXM6IFNlYXJjaGFibGVEcm9wZG93bjxUPiwgc2VuZGVyLCBldmVudCkge1xuICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IGlzVG91Y2hEZXZpY2UgPSBcIm9udG91Y2hzdGFydFwiIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudFxuICAgIFxuICAgICAgICAgICAgICAgIGlmIChpc1RvdWNoRGV2aWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWFyY2hUZXh0RmllbGQuYmx1cigpXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFwb2ludCA9IHRoaXMuZHJhd2luZ0RhdGFbdGhpcy5mb2N1c2VkUm93SW5kZXhdXG4gICAgXG4gICAgXG4gICAgICAgICAgICAgICAgY29uc3QgYWxyZWFkeVNlbGVjdGVkID0gdGhpcy5zZWxlY3RlZERhdGFDb250YWlucyhkYXRhcG9pbnQpXG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKGFscmVhZHlTZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZERhdGEucmVtb3ZlRWxlbWVudChkYXRhcG9pbnQpXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmlzU2luZ2xlU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEluZGljZXMgPSBbdGhpcy5mb2N1c2VkUm93SW5kZXhdXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkRGF0YSA9IFtkYXRhcG9pbnRdXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyB2aWV3LnNlbGVjdGVkID0gWUVTO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25EaWRDaGFuZ2UodGhpcy5zZWxlY3RlZERhdGEpXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbnRlbnRGb3JDdXJyZW50U2VsZWN0aW9uKClcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RpYWxvZ1ZpZXcuZGlzbWlzcygpXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkRGF0YS5wdXNoKGRhdGFwb2ludClcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgIClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3RhYmxlVmlldyA9IG5ldyBVSVRhYmxlVmlldyhlbGVtZW50SUQgKyBcIlRhYmxlVmlld1wiKVxuICAgICAgICB0aGlzLl9jb250YWluZXJWaWV3LmFkZFN1YnZpZXcodGhpcy5fdGFibGVWaWV3KVxuICAgICAgICB0aGlzLl90YWJsZVZpZXcuYmFja2dyb3VuZENvbG9yID0gVUlDb2xvci53aGl0ZUNvbG9yXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9kaWFsb2dWaWV3ID0gbmV3IFVJRGlhbG9nVmlldyhlbGVtZW50SUQgKyBcIkRpYWxvZ1ZpZXdcIilcbiAgICAgICAgdGhpcy5fZGlhbG9nVmlldy52aWV3ID0gdGhpcy5fY29udGFpbmVyVmlld1xuICAgICAgICB0aGlzLl9kaWFsb2dWaWV3LmJhY2tncm91bmRDb2xvciA9IFVJQ29sb3IudHJhbnNwYXJlbnRDb2xvclxuICAgICAgICBcbiAgICAgICAgdGhpcy5hZGRUYXJnZXRGb3JDb250cm9sRXZlbnRzKFtcbiAgICAgICAgICAgIFVJVmlldy5jb250cm9sRXZlbnQuUG9pbnRlclVwSW5zaWRlLCBVSVZpZXcuY29udHJvbEV2ZW50LkVudGVyRG93blxuICAgICAgICBdLCBmdW5jdGlvbiAodGhpczogU2VhcmNoYWJsZURyb3Bkb3duPFQ+LCBzZW5kZXIsIGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fZGlhbG9nVmlldy5pc1Zpc2libGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlRHJvcGRvd24oKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuRHJvcGRvd24oKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5fZGlhbG9nVmlldy5hZGRUYXJnZXRGb3JDb250cm9sRXZlbnQoXG4gICAgICAgICAgICBVSVZpZXcuY29udHJvbEV2ZW50LlBvaW50ZXJEb3duLFxuICAgICAgICAgICAgZnVuY3Rpb24gKHNlbmRlcjogVUlEaWFsb2dWaWV3LCBldmVudDogRXZlbnQpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoc2VuZGVyLnZpZXdIVE1MRWxlbWVudCA9PSBldmVudC50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VuZGVyLmRpc21pc3MoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgIFxuICAgIFxuICAgICAgICBjb25zdCBkaWFsb2dMYXlvdXRGdW5jdGlvbiA9IHRoaXMuX2RpYWxvZ1ZpZXcubGF5b3V0U3Vidmlld3NcbiAgICBcbiAgICAgICAgdGhpcy5fZGlhbG9nVmlldy5sYXlvdXRTdWJ2aWV3cyA9IGZ1bmN0aW9uICh0aGlzOiBTZWFyY2hhYmxlRHJvcGRvd248VD4pIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9kaWFsb2dMYXlvdXRGdW5jdGlvbi5jYWxsKHRoaXMuX2RpYWxvZ1ZpZXcpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl9kaWFsb2dWaWV3LmZyYW1lID0gdGhpcy5yb290Vmlldy5ib3VuZHMgLy90aGlzLnN1cGVydmlldy5yZWN0YW5nbGVJblZpZXcodGhpcy5zdXBlcnZpZXcuYm91bmRzLCB0aGlzLnJvb3RWaWV3KTtcbiAgICBcbiAgICAgICAgICAgIGNvbnN0IHBhZGRpbmcgPSBSb290Vmlld0NvbnRyb2xsZXIucGFkZGluZ0xlbmd0aFxuICAgICAgICAgICAgY29uc3QgbGFiZWxIZWlnaHQgPSBwYWRkaW5nXG4gICAgXG4gICAgICAgICAgICBjb25zdCBzZWFyY2hUZXh0RmllbGRIZWlnaHQgPSB0aGlzLmJvdW5kcy5oZWlnaHRcbiAgICBcbiAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lclZpZXcuZnJhbWUgPSB0aGlzLnN1cGVydmlldy5yZWN0YW5nbGVJblZpZXcodGhpcy5mcmFtZSwgdGhpcy5yb290VmlldylcbiAgICAgICAgICAgICAgICAucmVjdGFuZ2xlV2l0aEhlaWdodCh0aGlzLmV4cGFuZGVkQ29udGFpbmVyVmlld0hlaWdodClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5fc2VhcmNoVGV4dEZpZWxkLmZyYW1lID0gdGhpcy5fY29udGFpbmVyVmlldy5ib3VuZHMucmVjdGFuZ2xlV2l0aEhlaWdodChzZWFyY2hUZXh0RmllbGRIZWlnaHQpLnJlY3RhbmdsZVdpdGhJbnNldHMoXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAxNixcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5fdGFibGVWaWV3LmZyYW1lID0gdGhpcy5fY29udGFpbmVyVmlldy5ib3VuZHMucmVjdGFuZ2xlV2l0aEluc2V0cygwLCAwLCAwLCBzZWFyY2hUZXh0RmllbGRIZWlnaHQpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vdGhpcy5fdGFibGVWaWV3LnN0eWxlLm1heEhlaWdodCA9IFwiXCIgKyB0aGlzLl90YWJsZVZpZXcuaW50cmluc2ljQ29udGVudEhlaWdodCgpICsgXCJweFwiO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgLy8gdmFyIGFuaW1hdGVEaWFsb2dBcHBlYXJpbmcgPSB0aGlzLl9kaWFsb2dWaWV3LmFuaW1hdGVBcHBlYXJpbmc7XG4gICAgICAgIC8vIHRoaXMuX2RpYWxvZ1ZpZXcuYW5pbWF0ZUFwcGVhcmluZyA9IGZ1bmN0aW9uICh0aGlzOiBTZWFyY2hhYmxlRHJvcGRvd24pIHtcbiAgICAgICAgLy8gICAgIGFuaW1hdGVEaWFsb2dBcHBlYXJpbmcuY2FsbCh0aGlzLl9kaWFsb2dWaWV3KTtcbiAgICAgICAgLy8gICAgIHRoaXMuc3R5bGUuekluZGV4ID0gXCIxMDFcIjtcbiAgICAgICAgLy8gICAgIGlmICh0aGlzLmhpZ2hsaWdodExhYmVsKSB7XG4gICAgICAgIC8vICAgICAgICAgdGhpcy5oaWdobGlnaHRMYWJlbC50ZXh0Q29sb3IgPSBVSUNvbG9yLndoaXRlQ29sb3I7XG4gICAgICAgIC8vICAgICAgICAgdGhpcy5oaWdobGlnaHRMYWJlbC5zdHlsZS56SW5kZXggPSBcIjEwMVwiO1xuICAgICAgICAvLyAgICAgICAgIHRoaXMuaGlnaGxpZ2h0TGFiZWwudXNlckludGVyYWN0aW9uRW5hYmxlZCA9IE5PO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gICAgIHRoaXMuX3NlYXJjaFRleHRGaWVsZC5mb2N1cygpO1xuICAgICAgICBcbiAgICAgICAgLy8gfS5iaW5kKHRoaXMpXG4gICAgICAgIFxuICAgICAgICAvLyB2YXIgYW5pbWF0ZURpYWxvZ0Rpc2FwcGVhcmluZyA9IHRoaXMuX2RpYWxvZ1ZpZXcuYW5pbWF0ZURpc2FwcGVhcmluZztcbiAgICAgICAgLy8gdGhpcy5fZGlhbG9nVmlldy5hbmltYXRlRGlzYXBwZWFyaW5nID0gZnVuY3Rpb24gKHRoaXM6IFNlYXJjaGFibGVEcm9wZG93bikge1xuICAgICAgICAvLyAgICAgYW5pbWF0ZURpYWxvZ0Rpc2FwcGVhcmluZy5jYWxsKHRoaXMuX2RpYWxvZ1ZpZXcpO1xuICAgICAgICAvLyAgICAgdGhpcy5zdHlsZS56SW5kZXggPSBcIjBcIjtcbiAgICAgICAgLy8gICAgIGlmICh0aGlzLmhpZ2hsaWdodExhYmVsKSB7XG4gICAgICAgIC8vICAgICAgICAgdGhpcy5oaWdobGlnaHRMYWJlbC50ZXh0Q29sb3IgPSBDQkNvbG9yLnByaW1hcnlDb250ZW50Q29sb3I7XG4gICAgICAgIC8vICAgICAgICAgdGhpcy5oaWdobGlnaHRMYWJlbC5zdHlsZS56SW5kZXggPSBcIjBcIjtcbiAgICAgICAgLy8gICAgICAgICB0aGlzLmhpZ2hsaWdodExhYmVsLnVzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBZRVM7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyAgICAgdGhpcy5fc2VhcmNoVGV4dEZpZWxkLmJsdXIoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIH0uYmluZCh0aGlzKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3RhYmxlVmlldy5udW1iZXJPZlJvd3MgPSBmdW5jdGlvbiAodGhpczogU2VhcmNoYWJsZURyb3Bkb3duPFQ+KSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5kcmF3aW5nRGF0YS5sZW5ndGhcbiAgICBcbiAgICAgICAgICAgIGlmIChJU19OT1QodGhpcy5pc1NpbmdsZVNlbGVjdGlvbikgJiYgdGhpcy5zaG93c1NlbGVjdGVkU2VjdGlvbkluTXVsdGlwbGVTZWxlY3Rpb25Nb2RlKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICsgdGhpcy5zZWxlY3RlZERhdGEubGVuZ3RoXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICAgICAgXG4gICAgICAgIH0uYmluZCh0aGlzKVxuICAgIFxuICAgIFxuICAgICAgICBjb25zdCBuZXdSZXVzYWJsZVZpZXdGb3JJZGVudGlmaWVyRnVuY3Rpb24gPSB0aGlzLl90YWJsZVZpZXcubmV3UmV1c2FibGVWaWV3Rm9ySWRlbnRpZmllci5iaW5kKHRoaXMuX3RhYmxlVmlldylcbiAgICBcbiAgICAgICAgdGhpcy5fdGFibGVWaWV3Lm5ld1JldXNhYmxlVmlld0ZvcklkZW50aWZpZXIgPSBmdW5jdGlvbiAoXG4gICAgICAgICAgICB0aGlzOiBTZWFyY2hhYmxlRHJvcGRvd248VD4sXG4gICAgICAgICAgICBpZGVudGlmaWVyOiBzdHJpbmcsXG4gICAgICAgICAgICByb3dJbmRleDogbnVtYmVyXG4gICAgICAgICkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2lmIChpZGVudGlmaWVyID09IFwiU2VsZWN0ZWRJdGVtUm93XCIpIHtcbiAgICBcbiAgICAgICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgU2VhcmNoYWJsZURyb3Bkb3duUm93KGVsZW1lbnRJRCArIGlkZW50aWZpZXIgKyByb3dJbmRleClcbiAgICBcbiAgICAgICAgICAgIHZpZXcuc3RvcHNQb2ludGVyRXZlbnRQcm9wYWdhdGlvbiA9IE5PXG4gICAgICAgICAgICB2aWV3LnBhdXNlc1BvaW50ZXJFdmVudHMgPSBOT1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gdmlld1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIHJldHVybiBuZXdSZXVzYWJsZVZpZXdGb3JJZGVudGlmaWVyRnVuY3Rpb24oaWRlbnRpZmllciwgcm93SW5kZXgpO1xuICAgICAgICAgICAgXG4gICAgICAgIH0uYmluZCh0aGlzKVxuICAgIFxuICAgIFxuICAgICAgICBjb25zdCB2aWV3Rm9yU2VsZWN0ZWRJdGVtUm93ID0gZnVuY3Rpb24gKHRoaXM6IFNlYXJjaGFibGVEcm9wZG93bjxUPiwgaW5kZXg6IG51bWJlcikge1xuICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLl90YWJsZVZpZXcucmV1c2FibGVWaWV3Rm9ySWRlbnRpZmllcihcIlNlbGVjdGVkSXRlbVJvd1wiLCBpbmRleCkgYXMgQ0JDaGVja2JveFxuICAgICAgICBcbiAgICAgICAgICAgIHZpZXcudGl0bGVMYWJlbC50ZXh0ID0gTGFuZ3VhZ2VTZXJ2aWNlLnN0cmluZ0ZvckN1cnJlbnRMYW5ndWFnZSh0aGlzLnNlbGVjdGVkRGF0YVtpbmRleF0udGl0bGUpXG4gICAgICAgIFxuICAgICAgICAgICAgdmlldy5zZWxlY3RlZCA9IFlFU1xuICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB2aWV3XG4gICAgICAgIFxuICAgICAgICB9LmJpbmQodGhpcylcbiAgICBcbiAgICAgICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgICAgIHRoaXMuX3RhYmxlVmlldy52aWV3Rm9yUm93V2l0aEluZGV4ID0gZnVuY3Rpb24gKHRoaXM6IFNlYXJjaGFibGVEcm9wZG93bjxUPiwgaW5kZXg6IG51bWJlcikge1xuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgICAgICAgICAgY29uc3QgdmlldyA9IHRoaXMuX3RhYmxlVmlldy5yZXVzYWJsZVZpZXdGb3JJZGVudGlmaWVyKFwiU3ViamVjdFZpZXdcIiwgaW5kZXgpIGFzIFNlYXJjaGFibGVEcm9wZG93blJvd1xuICAgIFxuICAgIFxuICAgICAgICAgICAgdmlldy5zdHlsZS5ib3JkZXJCb3R0b21Db2xvciA9IFwiXCJcbiAgICAgICAgICAgIHZpZXcuc3R5bGUuYm9yZGVyQm90dG9tU3R5bGUgPSBcIlwiXG4gICAgICAgICAgICB2aWV3LnN0eWxlLmJvcmRlckJvdHRvbVdpZHRoID0gXCJcIlxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgICAgICAgICAgY29uc3Qgcm93V2FzSG92ZXJlZCA9IGZ1bmN0aW9uICh0aGlzOiBTZWFyY2hhYmxlRHJvcGRvd248VD4sIHNlbmRlcjogU2VhcmNoYWJsZURyb3Bkb3duUm93LCBldmVudDogRXZlbnQpIHtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c2VkUm93SW5kZXggPSBpbmRleFxuICAgICAgICBcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgIFxuICAgICAgICAgICAgdmlldy5hZGRUYXJnZXRGb3JDb250cm9sRXZlbnQoVUlCdXR0b24uY29udHJvbEV2ZW50LlBvaW50ZXJIb3Zlciwgcm93V2FzSG92ZXJlZClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmlldy5yZW1vdmVUYXJnZXRGb3JDb250cm9sRXZlbnQoXG4gICAgICAgICAgICAgICAgVUlCdXR0b24uY29udHJvbEV2ZW50LlBvaW50ZXJIb3ZlcixcbiAgICAgICAgICAgICAgICB2aWV3Ll9TZWFyY2hhYmxlRHJvcGRvd25Sb3dXYXNIb3ZlcmVkRnVuY3Rpb25cbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmlldy5fU2VhcmNoYWJsZURyb3Bkb3duUm93V2FzSG92ZXJlZEZ1bmN0aW9uID0gcm93V2FzSG92ZXJlZFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2aWV3LmZvY3VzZWQgPSAodGhpcy5mb2N1c2VkUm93SW5kZXggPT0gaW5kZXgpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNTaW5nbGVTZWxlY3Rpb24gJiYgdGhpcy5zaG93c1NlbGVjdGVkU2VjdGlvbkluTXVsdGlwbGVTZWxlY3Rpb25Nb2RlKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4IDwgdGhpcy5zZWxlY3RlZERhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdmlldy50eXBlID0gU2VhcmNoYWJsZURyb3Bkb3duUm93LnR5cGUuc2VsZWN0ZWRJdGVtXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB2aWV3LnRpdGxlVGV4dCA9IExhbmd1YWdlU2VydmljZS5zdHJpbmdGb3JDdXJyZW50TGFuZ3VhZ2UodGhpcy5zZWxlY3RlZERhdGFbaW5kZXhdLnRpdGxlKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdmlldy5zZWxlY3RlZCA9IFlFU1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdmlldy51cGRhdGVDb250ZW50Rm9yQ3VycmVudFN0YXRlKClcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT0gdGhpcy5zZWxlY3RlZERhdGEubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3LnN0eWxlLmJvcmRlckJvdHRvbUNvbG9yID0gVUlDb2xvci5jb2xvcldpdGhSR0JBKDEwMCwgMTAwLCAxMDApLnN0cmluZ1ZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcuc3R5bGUuYm9yZGVyQm90dG9tU3R5bGUgPSBcInNvbGlkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlldy5zdHlsZS5ib3JkZXJCb3R0b21XaWR0aCA9IFwiMXB4XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgdmlld1dhc1RhcHBlZCA9IGZ1bmN0aW9uICh0aGlzOiBTZWFyY2hhYmxlRHJvcGRvd248VD4sIHNlbmRlciwgZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkSW5kaWNlcy5yZW1vdmVFbGVtZW50QXRJbmRleChpbmRleClcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkSXRlbSA9IHRoaXMuc2VsZWN0ZWREYXRhW2luZGV4XVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZERhdGEucmVtb3ZlRWxlbWVudChzZWxlY3RlZEl0ZW0pXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlldy5zZWxlY3RlZCA9IE5PXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uRGlkQ2hhbmdlKHRoaXMuc2VsZWN0ZWREYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3RoaXMucGVyZm9ybUZ1bmN0aW9uV2l0aERlbGF5KDAuMTUsIGZ1bmN0aW9uICh0aGlzOiBTZWFyY2hhYmxlRHJvcGRvd248VD4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVDb250ZW50Rm9yQ3VycmVudFNlbGVjdGlvbigpXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vfS5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAvLyBVbnNlbGVjdGluZyBtYWluIGJvZHkgaXRlbSBpZiBwb3NzaWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmFyIHZpc2libGVSb3dzID0gdGhpcy5fdGFibGVWaWV3Ll92aXNpYmxlUm93cyBhcyBTZWFyY2hhYmxlRHJvcGRvd25Sb3dbXVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB2YXIgdmlzaWJsZUluZGljZXMgPSB0aGlzLl90YWJsZVZpZXcuaW5kZXhlc0ZvclZpc2libGVSb3dzKClcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmlzaWJsZVJvd3MuZm9yRWFjaChmdW5jdGlvbiAodGhpczogU2VhcmNoYWJsZURyb3Bkb3duPFQ+LCB2aXNpYmxlUm93OiBTZWFyY2hhYmxlRHJvcGRvd25Sb3csIHZpc2libGVSb3dJbmRleDogbnVtYmVyLCB2aXNpYmxlUm93c0FycmF5OiBTZWFyY2hhYmxlRHJvcGRvd25Sb3dbXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgdmFyIHJvd0RhdGFJbmRleCA9IHZpc2libGVJbmRpY2VzW3Zpc2libGVSb3dJbmRleF1cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIHZpc2libGVSb3cuc2VsZWN0ZWQgPSB0aGlzLnNlbGVjdGVkRGF0YS5jb250YWlucyh0aGlzLmRyYXdpbmdEYXRhW3Jvd0RhdGFJbmRleF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIH0uYmluZCh0aGlzKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VhcmNoVGV4dEZpZWxkLmZvY3VzKClcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHZpZXcgYXMgYW55KS52aWV3V2FzVGFwcGVkRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3LnJlbW92ZVRhcmdldEZvckNvbnRyb2xFdmVudHMoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVSVZpZXcuY29udHJvbEV2ZW50LkVudGVyRG93biwgVUlWaWV3LmNvbnRyb2xFdmVudC5Qb2ludGVyVGFwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSwgKHZpZXcgYXMgYW55KS52aWV3V2FzVGFwcGVkRnVuY3Rpb24pXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmluZyBwcmV2aW91cyBldmVudCB0YXJnZXQgaWYgcG9zc2libGVcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh2aWV3IGFzIGFueSkudmlld1dhc1RhcHBlZEZ1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3LnJlbW92ZVRhcmdldEZvckNvbnRyb2xFdmVudHMoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVJVmlldy5jb250cm9sRXZlbnQuRW50ZXJEb3duLCBVSVZpZXcuY29udHJvbEV2ZW50LlBvaW50ZXJUYXBcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sICh2aWV3IGFzIGFueSkudmlld1dhc1RhcHBlZEZ1bmN0aW9uKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkaW5nIGV2ZW50IHRhcmdldFxuICAgICAgICAgICAgICAgICAgICB2aWV3LmFkZFRhcmdldEZvckNvbnRyb2xFdmVudHMoW1xuICAgICAgICAgICAgICAgICAgICAgICAgVUlWaWV3LmNvbnRyb2xFdmVudC5FbnRlckRvd24sIFVJVmlldy5jb250cm9sRXZlbnQuUG9pbnRlclRhcFxuICAgICAgICAgICAgICAgICAgICBdLCB2aWV3V2FzVGFwcGVkKTtcbiAgICAgICAgICAgICAgICAgICAgKHZpZXcgYXMgYW55KS52aWV3V2FzVGFwcGVkRnVuY3Rpb24gPSB2aWV3V2FzVGFwcGVkXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZpZXdcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaW5kZXggPSBpbmRleCAtIHRoaXMuc2VsZWN0ZWREYXRhLmxlbmd0aFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRGF0YXBvaW50XG4gICAgICAgICAgICBjb25zdCBkYXRhcG9pbnQgPSB0aGlzLmRyYXdpbmdEYXRhW2luZGV4XVxuICAgIFxuICAgICAgICAgICAgaWYgKElTX05PVChkYXRhcG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFNldHRpbmcgZGlmZmVyZW50IHN0eWxlIGZvciBzZWN0aW9uIHRpdGxlIHJvd3NcbiAgICAgICAgICAgIGlmIChkYXRhcG9pbnQuaXNBRHJvcGRvd25EYXRhU2VjdGlvbikge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZpZXcudHlwZSA9IFNlYXJjaGFibGVEcm9wZG93blJvdy50eXBlLnNlY3Rpb25UaXRsZVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZpZXcudXNlckludGVyYWN0aW9uRW5hYmxlZCA9IE5PXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2aWV3LnR5cGUgPSBTZWFyY2hhYmxlRHJvcGRvd25Sb3cudHlwZS5zZWxlY3RhYmxlSXRlbVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZpZXcudXNlckludGVyYWN0aW9uRW5hYmxlZCA9IFlFU1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZGF0YXBvaW50Ll9pZCA9PSAodGhpcy5fY3VzdG9tSXRlbSB8fCBuaWwpLl9pZCkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZpZXcudHlwZSA9IFNlYXJjaGFibGVEcm9wZG93blJvdy50eXBlLmN1c3RvbUl0ZW1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmlldy51cGRhdGVDb250ZW50Rm9yTm9ybWFsU3RhdGUoKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2aWV3LnVwZGF0ZUNvbnRlbnRGb3JDdXJyZW50U3RhdGUoKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFNldHRpbmcgcm93IHRpdGxlXG4gICAgICAgICAgICB2aWV3LnRpdGxlVGV4dCA9IExhbmd1YWdlU2VydmljZS5zdHJpbmdGb3JDdXJyZW50TGFuZ3VhZ2UoZGF0YXBvaW50LnRpdGxlKVxuICAgICAgICAgICAgdmlldy50aXRsZUxhYmVsLnRleHRBbGlnbm1lbnQgPSBVSVRleHRWaWV3LnRleHRBbGlnbm1lbnQubGVmdFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEhpZ2hsaWdodGluZyBvZiByb3dcbiAgICAgICAgICAgIC8vdmlldy5oaWdobGlnaHRlZCA9ICh0aGlzLmhpZ2hsaWdodGVkUm93SW5kZXggPT0gaW5kZXgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFNlbGVjdGluZyBvZiByb3dzXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZpZXcuc2VsZWN0ZWQgPSB0aGlzLnNlbGVjdGVkUm93SWRlbnRpZmllcnMuY29udGFpbnMoZGF0YXBvaW50Ll9pZCkgLy90aGlzLnNlbGVjdGVkSW5kaWNlcy5jb250YWlucyhpbmRleCk7IC8vdGhpcy5zZWxlY3RlZERhdGFDb250YWlucyhkYXRhcG9pbnQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgdmlld1dhc1RhcHBlZCA9IGZ1bmN0aW9uICh0aGlzOiBTZWFyY2hhYmxlRHJvcGRvd248VD4sIHNlbmRlciwgZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAodmlldy5zZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEluZGljZXMucmVtb3ZlRWxlbWVudChpbmRleClcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWREYXRhLnJlbW92ZUVsZW1lbnQoZGF0YXBvaW50KVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNTaW5nbGVTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEluZGljZXMgPSBbaW5kZXhdXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWREYXRhID0gW2RhdGFwb2ludF1cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmlldy5zZWxlY3RlZCA9IFlFUztcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25EaWRDaGFuZ2UodGhpcy5zZWxlY3RlZERhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQ29udGVudEZvckN1cnJlbnRTZWxlY3Rpb24oKVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaWFsb2dWaWV3LmRpc21pc3MoKVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkSW5kaWNlcy5wdXNoKGluZGV4KVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkRGF0YS5wdXNoKGRhdGFwb2ludClcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvL3ZpZXcuc2VsZWN0ZWQgPSAhdmlldy5zZWxlY3RlZDtcbiAgICBcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZERhdGEgPSB0aGlzLnNlbGVjdGVkRGF0YVxuICAgIFxuICAgICAgICAgICAgICAgIGlmICghdmlldy5zZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHZpZXcuc2VsZWN0ZWQgPSBZRVNcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGVyZm9ybUZ1bmN0aW9uV2l0aERlbGF5KDAuMjUsIGZ1bmN0aW9uICh0aGlzOiBTZWFyY2hhYmxlRHJvcGRvd248VD4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGlvbkRpZENoYW5nZShzZWxlY3RlZERhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQ29udGVudEZvckN1cnJlbnRTZWxlY3Rpb24oKVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zaG93c1NlbGVjdGVkU2VjdGlvbkluTXVsdGlwbGVTZWxlY3Rpb25Nb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGFibGVWaWV3LmNvbnRlbnRPZmZzZXQgPSB0aGlzLl90YWJsZVZpZXcuY29udGVudE9mZnNldC5wb2ludEJ5QWRkaW5nWSh2aWV3LmZyYW1lLmhlaWdodClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHZpZXcuX2NoZWNrYm94LnNlbGVjdGVkID0gTk9cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uRGlkQ2hhbmdlKHNlbGVjdGVkRGF0YSlcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGVyZm9ybUZ1bmN0aW9uV2l0aERlbGF5KDAuMTUsIGZ1bmN0aW9uICh0aGlzOiBTZWFyY2hhYmxlRHJvcGRvd248VD4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3LnNlbGVjdGVkID0gTk9cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVDb250ZW50Rm9yQ3VycmVudFNlbGVjdGlvbigpXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNob3dzU2VsZWN0ZWRTZWN0aW9uSW5NdWx0aXBsZVNlbGVjdGlvbk1vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90YWJsZVZpZXcuY29udGVudE9mZnNldCA9IHRoaXMuX3RhYmxlVmlldy5jb250ZW50T2Zmc2V0LnBvaW50QnlBZGRpbmdZKC12aWV3LmZyYW1lLmhlaWdodClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLl9zZWFyY2hUZXh0RmllbGQuZm9jdXMoKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFJlbW92aW5nIHByZXZpb3VzIGV2ZW50IHRhcmdldCBpZiBwb3NzaWJsZVxuICAgICAgICAgICAgaWYgKCh2aWV3IGFzIGFueSkudmlld1dhc1RhcHBlZEZ1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmlldy5yZW1vdmVUYXJnZXRGb3JDb250cm9sRXZlbnRzKFtcbiAgICAgICAgICAgICAgICAgICAgVUlWaWV3LmNvbnRyb2xFdmVudC5FbnRlckRvd24sIFVJVmlldy5jb250cm9sRXZlbnQuUG9pbnRlclVwSW5zaWRlXG4gICAgICAgICAgICAgICAgXSwgKHZpZXcgYXMgYW55KS52aWV3V2FzVGFwcGVkRnVuY3Rpb24pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFkZGluZyBldmVudCB0YXJnZXRcbiAgICAgICAgICAgIHZpZXcuYWRkVGFyZ2V0Rm9yQ29udHJvbEV2ZW50cyhbXG4gICAgICAgICAgICAgICAgVUlWaWV3LmNvbnRyb2xFdmVudC5FbnRlckRvd24sIFVJVmlldy5jb250cm9sRXZlbnQuUG9pbnRlclVwSW5zaWRlXG4gICAgICAgICAgICBdLCB2aWV3V2FzVGFwcGVkKTtcbiAgICAgICAgICAgICh2aWV3IGFzIGFueSkudmlld1dhc1RhcHBlZEZ1bmN0aW9uID0gdmlld1dhc1RhcHBlZFxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gdmlld1xuICAgICAgICAgICAgXG4gICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fa2V5VmFsdWVTdHJpbmdGaWx0ZXIgPSBuZXcgVUlLZXlWYWx1ZVN0cmluZ0ZpbHRlcigpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBvcGVuRHJvcGRvd24oKSB7XG4gICAgICAgIHRoaXMuX2RpYWxvZ1ZpZXcuc2hvd0luVmlldyh0aGlzLnJvb3RWaWV3LCBZRVMpXG4gICAgICAgIHRoaXMuX3NlYXJjaFRleHRGaWVsZC5mb2N1cygpXG4gICAgfVxuICAgIFxuICAgIGNsb3NlRHJvcGRvd24oKSB7XG4gICAgICAgIHRoaXMuX2RpYWxvZ1ZpZXcuZGlzbWlzcyhZRVMpXG4gICAgfVxuICAgIFxuICAgIGJvdW5kc0RpZENoYW5nZSgpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyLmJvdW5kc0RpZENoYW5nZSgpXG4gICAgICAgIFxuICAgICAgICB0aGlzLnNldE5lZWRzTGF5b3V0KClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGdldCBmb2N1c2VkUm93SW5kZXgoKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy5fZm9jdXNlZFJvd0luZGV4XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBzZXQgZm9jdXNlZFJvd0luZGV4KGZvY3VzZWRSb3dJbmRleDogbnVtYmVyKSB7XG4gICAgXG4gICAgICAgIGNvbnN0IHByZXZpb3VzRm9jdXNlZFJvd0luZGV4ID0gdGhpcy5mb2N1c2VkUm93SW5kZXhcbiAgICBcbiAgICAgICAgdGhpcy5fZm9jdXNlZFJvd0luZGV4ID0gZm9jdXNlZFJvd0luZGV4XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgaWYgKHByZXZpb3VzRm9jdXNlZFJvd0luZGV4ICE9IGZvY3VzZWRSb3dJbmRleCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAodGhpcy5fdGFibGVWaWV3LnZpc2libGVSb3dXaXRoSW5kZXgocHJldmlvdXNGb2N1c2VkUm93SW5kZXgpIGFzIFNlYXJjaGFibGVEcm9wZG93blJvdykuZm9jdXNlZCA9IE5PXG4gICAgXG4gICAgICAgICAgICBjb25zdCBmb2N1c2VkUm93ID0gdGhpcy5fdGFibGVWaWV3LnZpc2libGVSb3dXaXRoSW5kZXgodGhpcy5mb2N1c2VkUm93SW5kZXgpIGFzIFNlYXJjaGFibGVEcm9wZG93blJvd1xuICAgIFxuICAgICAgICAgICAgZm9jdXNlZFJvdy5mb2N1c2VkID0gWUVTXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghdGhpcy5rZWVwRm9jdXNlZFJvd1Zpc2libGUpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHZhciBjb250ZW50T2Zmc2V0ID0gdGhpcy5fdGFibGVWaWV3LmNvbnRlbnRPZmZzZXRcbiAgICBcbiAgICAgICAgICAgIGlmIChmb2N1c2VkUm93LmZyYW1lLnkgPCBjb250ZW50T2Zmc2V0LnkpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb250ZW50T2Zmc2V0LnkgPSBmb2N1c2VkUm93LmZyYW1lLnlcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGZvY3VzZWRSb3cuZnJhbWUubWF4LnkgPiAoY29udGVudE9mZnNldC55ICsgdGhpcy5fdGFibGVWaWV3LmJvdW5kcy5oZWlnaHQpKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29udGVudE9mZnNldCA9IGNvbnRlbnRPZmZzZXQucG9pbnRCeUFkZGluZ1koLShjb250ZW50T2Zmc2V0LnkgKyB0aGlzLl90YWJsZVZpZXcuYm91bmRzLmhlaWdodCAtXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzZWRSb3cuZnJhbWUubWF4LnkpKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgY29uc3QgYW5pbWF0aW9uRHVyYXRpb24gPSB0aGlzLl90YWJsZVZpZXcuYW5pbWF0aW9uRHVyYXRpb25cbiAgICBcbiAgICAgICAgICAgIHRoaXMuX3RhYmxlVmlldy5hbmltYXRpb25EdXJhdGlvbiA9IDBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5fdGFibGVWaWV3LmNvbnRlbnRPZmZzZXQgPSBjb250ZW50T2Zmc2V0XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX3RhYmxlVmlldy5hbmltYXRpb25EdXJhdGlvbiA9IGFuaW1hdGlvbkR1cmF0aW9uXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHNldCBleHBhbmRlZENvbnRhaW5lclZpZXdIZWlnaHQoZXhwYW5kZWRDb250YWluZXJWaWV3SGVpZ2h0OiBudW1iZXIpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9leHBhbmRlZENvbnRhaW5lclZpZXdIZWlnaHQgPSBleHBhbmRlZENvbnRhaW5lclZpZXdIZWlnaHRcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2RpYWxvZ1ZpZXcuc2V0TmVlZHNMYXlvdXQoKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGdldCBleHBhbmRlZENvbnRhaW5lclZpZXdIZWlnaHQoKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAoSVModGhpcy5fZXhwYW5kZWRDb250YWluZXJWaWV3SGVpZ2h0KSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZXhwYW5kZWRDb250YWluZXJWaWV3SGVpZ2h0XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBjb25zdCBwYWRkaW5nID0gUm9vdFZpZXdDb250cm9sbGVyLnBhZGRpbmdMZW5ndGhcbiAgICAgICAgY29uc3QgbGFiZWxIZWlnaHQgPSBwYWRkaW5nXG4gICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuc3VwZXJ2aWV3LmJvdW5kcy5oZWlnaHQgLSB0aGlzLmZyYW1lLm1heC55IC0gcGFkZGluZ1xuICAgIFxuICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBzZWxlY3RlZERhdGFDb250YWlucyhkYXRhcG9pbnQ6IENCRHJvcGRvd25EYXRhSXRlbTxUPikge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc2VsZWN0ZWREYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuc2VsZWN0ZWREYXRhW2ldXG4gICAgICAgICAgICBpZiAodmFsdWUuX2lkID09IGRhdGFwb2ludC5faWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWUVTXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE5PXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIHVwZGF0ZUNvbnRlbnRGb3JOb3JtYWxTdGF0ZSgpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLnN0eWxlLmJvcmRlckJvdHRvbSA9IFwiMXB4IHNvbGlkIHJnYmEoMCwwLDAsMC4xMilcIlxuICAgICAgICBcbiAgICAgICAgdGhpcy50aXRsZUxhYmVsLnRleHRDb2xvciA9IENCQ29sb3IucHJpbWFyeUNvbnRlbnRDb2xvclxuICAgICAgICB0aGlzLmJhY2tncm91bmRDb2xvciA9IFVJQ29sb3IudHJhbnNwYXJlbnRDb2xvclxuICAgICAgICBcbiAgICAgICAgdGhpcy5zdHlsZS5ib3JkZXJCb3R0b21Db2xvciA9IENCQ29sb3IucHJpbWFyeUNvbnRlbnRDb2xvci5jb2xvcldpdGhBbHBoYSgwLjEyKS5zdHJpbmdWYWx1ZVxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHVwZGF0ZUNvbnRlbnRGb3JIaWdobGlnaHRlZFN0YXRlKCkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5zdHlsZS5ib3JkZXJCb3R0b21XaWR0aCA9IFwiMnB4XCJcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc3R5bGUuYm9yZGVyQm90dG9tQ29sb3IgPSB0aGlzLnRpbnRDb2xvci5zdHJpbmdWYWx1ZVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgc3RhdGljIGNvbnRyb2xFdmVudCA9IE9iamVjdC5hc3NpZ24oe30sIFVJVmlldy5jb250cm9sRXZlbnQsIHtcbiAgICAgICAgXG4gICAgICAgIFwiU2VsZWN0aW9uRGlkQ2hhbmdlXCI6IFwiU2VsZWN0aW9uRGlkQ2hhbmdlXCJcbiAgICAgICAgXG4gICAgfSlcbiAgICBcbiAgICBcbiAgICBcbiAgICBzZWxlY3Rpb25EaWRDaGFuZ2Uoc2VsZWN0ZWRSb3dzOiBDQkRyb3Bkb3duRGF0YUl0ZW08VD5bXSkge1xuICAgICAgICBcbiAgICAgICAgLy8gVXBkYXRlIHRpdGxlIHRvIGluZGljYXRlIHRoZSBzZWxlY3Rpb25cbiAgICAgICAgdGhpcy51cGRhdGVUaXRsZVdpdGhTZWxlY3Rpb24oc2VsZWN0ZWRSb3dzKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5zZW5kQ29udHJvbEV2ZW50Rm9yS2V5KFNlYXJjaGFibGVEcm9wZG93bi5jb250cm9sRXZlbnQuU2VsZWN0aW9uRGlkQ2hhbmdlLCBuaWwpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICB1cGRhdGVDb250ZW50Rm9yQ3VycmVudFNlbGVjdGlvbigpIHtcbiAgICAgICAgXG4gICAgICAgIC8vIFVwZGF0ZSBzZWxlY3RlZCByb3dzIGluIHRoZSB0b3Agb2YgdGhlIHRhYmxlIHZpZXdcbiAgICAgICAgdGhpcy5fdGFibGVWaWV3LnJlbG9hZERhdGEoKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5zZXROZWVkc0xheW91dCgpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBnZXQgcGxhY2Vob2xkZXJUZXh0KCkge1xuICAgICAgICBcbiAgICAgICAgaWYgKElTX1VOREVGSU5FRCh0aGlzLl9wbGFjZWhvbGRlclRleHQpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5fcGxhY2Vob2xkZXJUZXh0ID0gXCJOb3Qgc2VsZWN0ZWRcIlxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BsYWNlaG9sZGVyVGV4dFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc2V0IHBsYWNlaG9sZGVyVGV4dChwbGFjZWhvbGRlclRleHQ6IHN0cmluZykge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5fcGxhY2Vob2xkZXJUZXh0ID0gcGxhY2Vob2xkZXJUZXh0XG4gICAgICAgIFxuICAgICAgICB0aGlzLnVwZGF0ZVRpdGxlV2l0aFNlbGVjdGlvbih0aGlzLnNlbGVjdGVkRGF0YSlcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHNldFBsYWNlaG9sZGVyVGV4dChrZXk6IHN0cmluZywgZGVmYXVsdFN0cmluZzogc3RyaW5nLCBwYXJhbWV0ZXJzPzogeyBbeDogc3RyaW5nXTogc3RyaW5nIH0pIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMucGxhY2Vob2xkZXJMb2NhbGl6ZWRUZXh0T2JqZWN0ID0gTGFuZ3VhZ2VTZXJ2aWNlLmxvY2FsaXplZFRleHRPYmplY3RGb3JLZXkoa2V5LCBkZWZhdWx0U3RyaW5nLCBwYXJhbWV0ZXJzKVxuICAgICAgICBcbiAgICAgICAgLy90aGlzLnRpdGxlTGFiZWwuc2V0VGV4dChrZXksIGRlZmF1bHRTdHJpbmcsIHBhcmFtZXRlcnMpO1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgZ2V0IHBsYWNlaG9sZGVyTG9jYWxpemVkVGV4dE9iamVjdCgpIHtcbiAgICAgICAgXG4gICAgICAgIGlmIChJU19VTkRFRklORUQodGhpcy5fcGxhY2Vob2xkZXJMb2NhbGl6ZWRUZXh0T2JqZWN0KSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX3BsYWNlaG9sZGVyTG9jYWxpemVkVGV4dE9iamVjdCA9IExhbmd1YWdlU2VydmljZS5sb2NhbGl6ZWRUZXh0T2JqZWN0Rm9yVGV4dChcIk5vdCBzZWxlY3RlZFwiKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BsYWNlaG9sZGVyTG9jYWxpemVkVGV4dE9iamVjdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc2V0IHBsYWNlaG9sZGVyTG9jYWxpemVkVGV4dE9iamVjdChwbGFjZWhvbGRlclRleHQ6IFVJTG9jYWxpemVkVGV4dE9iamVjdCkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5fcGxhY2Vob2xkZXJMb2NhbGl6ZWRUZXh0T2JqZWN0ID0gcGxhY2Vob2xkZXJUZXh0XG4gICAgICAgIFxuICAgICAgICB0aGlzLnVwZGF0ZVRpdGxlV2l0aFNlbGVjdGlvbih0aGlzLnNlbGVjdGVkRGF0YSlcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIHVwZGF0ZVRpdGxlV2l0aFNlbGVjdGlvbihzZWxlY3RlZFJvd3M6IENCRHJvcGRvd25EYXRhSXRlbTxUPltdKSB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy50aXRsZUxhYmVsLmxvY2FsaXplZFRleHRPYmplY3QgPSB0aGlzLnBsYWNlaG9sZGVyTG9jYWxpemVkVGV4dE9iamVjdFxuICAgICAgICBcbiAgICAgICAgaWYgKHNlbGVjdGVkUm93cyAmJiBzZWxlY3RlZFJvd3MubGVuZ3RoKSB7XG4gICAgXG4gICAgICAgICAgICBjb25zdCBtYXhXaWR0aCA9IHRoaXMudGl0bGVMYWJlbC5ib3VuZHMud2lkdGhcbiAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC5sb2NhbGl6ZWRUZXh0T2JqZWN0ID0gbmlsXG4gICAgICAgICAgICB0aGlzLnRpdGxlTGFiZWwudGV4dCA9IFwiXCJcbiAgICAgICAgICAgIHZhciBzdG9wTG9vcGluZyA9IE5PXG4gICAgXG4gICAgICAgICAgICBzZWxlY3RlZFJvd3MuZm9yRWFjaChmdW5jdGlvbiAodGhpczogU2VhcmNoYWJsZURyb3Bkb3duPFQ+LCBzZWxlY3RlZERhdGFwb2ludCwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHN0b3BMb29waW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRTdHJpbmcgPSBMYW5ndWFnZVNlcnZpY2Uuc3RyaW5nRm9yQ3VycmVudExhbmd1YWdlKHNlbGVjdGVkRGF0YXBvaW50LnRpdGxlKVxuICAgICAgICAgICAgICAgIGlmIChpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFN0cmluZyA9IFwiLCBcIiArIHNlbGVjdGVkU3RyaW5nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzVGV4dCA9IHRoaXMudGl0bGVMYWJlbC50ZXh0XG4gICAgICAgICAgICAgICAgdGhpcy50aXRsZUxhYmVsLnRleHQgPSB0aGlzLnRpdGxlTGFiZWwudGV4dCArIHNlbGVjdGVkU3RyaW5nXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5vdmVyZmxvd0xhYmVsLnRleHQgPSBcIitcIiArIChhcnJheS5sZW5ndGggLSBpbmRleCAtIDEpXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IGFycmF5Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdmVyZmxvd0xhYmVsLnRleHQgPSBcIlwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChpbmRleCAmJiAodGhpcy5ib3VuZHMud2lkdGggLVxuICAgICAgICAgICAgICAgICAgICAodGhpcy5vdmVyZmxvd0xhYmVsLmludHJpbnNpY0NvbnRlbnRXaWR0aCgpICsgdGhpcy50aXRsZUxhYmVsLmludHJpbnNpY0NvbnRlbnRXaWR0aCgpKSAtIDIwKSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGl0bGVMYWJlbC50ZXh0ID0gcHJldmlvdXNUZXh0XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3ZlcmZsb3dMYWJlbC50ZXh0ID0gXCIrXCIgKyAoYXJyYXkubGVuZ3RoIC0gaW5kZXggLSAyICogMClcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHN0b3BMb29waW5nID0gWUVTXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSwgdGhpcylcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICB1cGRhdGVGaWx0ZXJlZERhdGEoZmlsdGVyaW5nU3RyaW5nOiBzdHJpbmcpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2ZpbHRlcmVkRGF0YSA9IFtdXG4gICAgICAgIFxuICAgICAgICB0aGlzLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoXG4gICAgICAgICAgICB0aGlzOiBTZWFyY2hhYmxlRHJvcGRvd248VD4sXG4gICAgICAgICAgICBzZWN0aW9uT3JSb3c6IENCRHJvcGRvd25EYXRhSXRlbTxUPixcbiAgICAgICAgICAgIGluZGV4OiBudW1iZXIsXG4gICAgICAgICAgICBhcnJheTogQ0JEcm9wZG93bkRhdGFJdGVtPFQ+W11cbiAgICAgICAgKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChMYW5ndWFnZVNlcnZpY2Uuc3RyaW5nRm9yQ3VycmVudExhbmd1YWdlKHNlY3Rpb25PclJvdy50aXRsZSkudG9Mb3dlckNhc2UoKS5jb250YWlucyhmaWx0ZXJpbmdTdHJpbmcudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlcmVkRGF0YS5wdXNoKHNlY3Rpb25PclJvdylcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNlY3Rpb25PclJvdy5pc0FEcm9wZG93bkRhdGFTZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5fa2V5VmFsdWVTdHJpbmdGaWx0ZXIuZmlsdGVyRGF0YShcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyaW5nU3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICBzZWN0aW9uT3JSb3cucm93c0RhdGEsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V4Y2x1ZGVkRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZS5cIiArIExhbmd1YWdlU2VydmljZS5jdXJyZW50TGFuZ3VhZ2VLZXksXG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb25PclJvdyxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpczogU2VhcmNoYWJsZURyb3Bkb3duPFQ+LFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWREYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWRJbmRleGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbkZyb21UaHJlYWQ6IENCRHJvcGRvd25EYXRhSXRlbTxUPlxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbHRlcmVkRGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbHRlcmVkRGF0YS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pZDogc2VjdGlvbkZyb21UaHJlYWQuX2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogc2VjdGlvbkZyb21UaHJlYWQudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd3NEYXRhOiBmaWx0ZXJlZERhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQURyb3Bkb3duRGF0YVNlY3Rpb246IHNlY3Rpb25Gcm9tVGhyZWFkLmlzQURyb3Bkb3duRGF0YVNlY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQURyb3Bkb3duRGF0YVJvdzogc2VjdGlvbkZyb21UaHJlYWQuaXNBRHJvcGRvd25EYXRhUm93LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0YWNoZWRPYmplY3Q6IHNlY3Rpb25Gcm9tVGhyZWFkLmF0dGFjaGVkT2JqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbUNvZGU6IHNlY3Rpb25Gcm9tVGhyZWFkLml0ZW1Db2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bkNvZGU6IHNlY3Rpb25Gcm9tVGhyZWFkLmRyb3Bkb3duQ29kZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFsbG93c0N1c3RvbUl0ZW0gJiYgdGhpcy5fc2VhcmNoVGV4dEZpZWxkLnRleHQgJiYgdGhpcy5fY3VzdG9tSXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWx0ZXJlZERhdGEucmVtb3ZlRWxlbWVudCh0aGlzLl9jdXN0b21JdGVtKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWx0ZXJlZERhdGEucHVzaCh0aGlzLl9jdXN0b21JdGVtKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNEcmF3aW5nRGF0YVZhbGlkID0gTk9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90YWJsZVZpZXcucmVsb2FkRGF0YSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5hbGxvd3NDdXN0b21JdGVtICYmIHRoaXMuX3NlYXJjaFRleHRGaWVsZC50ZXh0KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyZWREYXRhLnJlbW92ZUVsZW1lbnQodGhpcy5fY3VzdG9tSXRlbSlcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5pbml0Q3VzdG9tSXRlbVdpdGhUaXRsZSh0aGlzLl9zZWFyY2hUZXh0RmllbGQudGV4dClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5maWx0ZXJlZERhdGEucHVzaCh0aGlzLl9jdXN0b21JdGVtKVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5maWx0ZXJlZERhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuZm9jdXNlZFJvd0luZGV4ID0gMFxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuZm9jdXNlZFJvd0luZGV4ID0gbnVsbFxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2lzRHJhd2luZ0RhdGFWYWxpZCA9IE5PXG4gICAgICAgIFxuICAgICAgICB0aGlzLl90YWJsZVZpZXcucmVsb2FkRGF0YSgpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBpbml0Q3VzdG9tSXRlbVdpdGhUaXRsZSh0aXRsZTogc3RyaW5nKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAoSVNfTk9UKHRpdGxlKSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl9jdXN0b21JdGVtID0gdW5kZWZpbmVkXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5fY3VzdG9tSXRlbSA9IHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBfaWQ6IFwiXCIgKyBNQUtFX0lEKCksXG4gICAgICAgICAgICAgICAgdGl0bGU6IExhbmd1YWdlU2VydmljZS5sb2NhbGl6ZWRUZXh0T2JqZWN0Rm9yVGV4dCh0aXRsZSksXG4gICAgICAgICAgICAgICAgcm93c0RhdGE6IFtdLFxuICAgICAgICAgICAgICAgIGlzQURyb3Bkb3duRGF0YVNlY3Rpb246IE5PLFxuICAgICAgICAgICAgICAgIGlzQURyb3Bkb3duRGF0YVJvdzogWUVTLFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGF0dGFjaGVkT2JqZWN0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaXRlbUNvZGU6IFwiY3VzdG9tX2l0ZW1cIixcbiAgICAgICAgICAgICAgICBkcm9wZG93bkNvZGU6IG51bGxcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBzZWxlY3RJdGVtT3JDdXN0b21JdGVtV2l0aFRpdGxlKHRpdGxlOiBzdHJpbmcpIHtcbiAgICAgICAgXG4gICAgICAgIGlmIChJU19OT1QodGl0bGUpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX2N1c3RvbUl0ZW0gPSB1bmRlZmluZWRcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBpdGVtID0gdGhpcy5kcmF3aW5nRGF0YS5maW5kKGZ1bmN0aW9uIChkYXRhSXRlbSwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiAoTGFuZ3VhZ2VTZXJ2aWNlLnN0cmluZ0ZvckN1cnJlbnRMYW5ndWFnZShkYXRhSXRlbS50aXRsZSkgPT0gdGl0bGUpXG4gICAgICAgIFxuICAgICAgICAgICAgfSlcbiAgICBcbiAgICBcbiAgICAgICAgICAgIGlmICh0aGlzLmFsbG93c0N1c3RvbUl0ZW0gJiYgSVNfTk9UKGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5fc2VhcmNoVGV4dEZpZWxkLnRleHQgPSB0aXRsZVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRmlsdGVyZWREYXRhKHRpdGxlKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGl0ZW0gPSB0aGlzLl9jdXN0b21JdGVtXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKElTX05PVCh0aGlzLmlzU2luZ2xlU2VsZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChJU19OT1QodGhpcy5zZWxlY3RlZERhdGFDb250YWlucyhpdGVtKSkpIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRJdGVtQ29kZXMgPSB0aGlzLnNlbGVjdGVkSXRlbUNvZGVzLmNvcHkoKVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEl0ZW1Db2Rlcy5wdXNoKGl0ZW0uaXRlbUNvZGUpXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkSXRlbUNvZGVzID0gc2VsZWN0ZWRJdGVtQ29kZXNcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEl0ZW1Db2RlcyA9IFtpdGVtLml0ZW1Db2RlXVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgc2V0IGRhdGEoZGF0YTogQ0JEcm9wZG93bkRhdGFJdGVtPFQ+W10pIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2RhdGEgPSBkYXRhXG4gICAgICAgIFxuICAgICAgICB0aGlzLnVwZGF0ZUZpbHRlcmVkRGF0YSh0aGlzLl9zZWFyY2hUZXh0RmllbGQudGV4dClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGdldCBkYXRhKCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGFcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHNldCBmaWx0ZXJlZERhdGEoZGF0YTogQ0JEcm9wZG93bkRhdGFJdGVtPFQ+W10pIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2ZpbHRlcmVkRGF0YSA9IGRhdGFcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2lzRHJhd2luZ0RhdGFWYWxpZCA9IE5PXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBnZXQgZmlsdGVyZWREYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmlsdGVyZWREYXRhXG4gICAgfVxuICAgIFxuICAgIGdldCBkcmF3aW5nRGF0YSgpOiBDQkRyb3Bkb3duRGF0YUl0ZW08VD5bXSB7XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5faXNEcmF3aW5nRGF0YVZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZHJhd2luZ0RhdGFcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBjb25zdCByZXN1bHQ6IENCRHJvcGRvd25EYXRhSXRlbTxUPltdID0gW11cbiAgICBcbiAgICAgICAgdGhpcy5fZmlsdGVyZWREYXRhLmZvckVhY2goZnVuY3Rpb24gKHRoaXM6IFNlYXJjaGFibGVEcm9wZG93bjxUPiwgc2VjdGlvbjogQ0JEcm9wZG93bkRhdGFJdGVtPFQ+KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBfaWQ6IHNlY3Rpb24uX2lkLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBzZWN0aW9uLnRpdGxlLFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICByb3dzRGF0YTogbnVsbCxcbiAgICAgICAgICAgICAgICBpc0FEcm9wZG93bkRhdGFTZWN0aW9uOiBzZWN0aW9uLmlzQURyb3Bkb3duRGF0YVNlY3Rpb24sXG4gICAgICAgICAgICAgICAgaXNBRHJvcGRvd25EYXRhUm93OiBOTyxcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBhdHRhY2hlZE9iamVjdDogc2VjdGlvbi5hdHRhY2hlZE9iamVjdCxcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpdGVtQ29kZTogc2VjdGlvbi5pdGVtQ29kZSxcbiAgICAgICAgICAgICAgICBkcm9wZG93bkNvZGU6IHNlY3Rpb24uZHJvcGRvd25Db2RlXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoc2VjdGlvbi5yb3dzRGF0YSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHNlY3Rpb24ucm93c0RhdGEuZm9yRWFjaChmdW5jdGlvbiAodGhpczogU2VhcmNoYWJsZURyb3Bkb3duPFQ+LCByb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocm93KVxuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5fZHJhd2luZ0RhdGEgPSByZXN1bHRcbiAgICAgICAgdGhpcy5faXNEcmF3aW5nRGF0YVZhbGlkID0gWUVTXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBnZXQgc2VsZWN0ZWREYXRhKCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkRGF0YVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc2V0IHNlbGVjdGVkRGF0YShzZWxlY3RlZERhdGE6IENCRHJvcGRvd25EYXRhSXRlbTxUPltdKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLl9zZWxlY3RlZERhdGEgPSBzZWxlY3RlZERhdGFcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGNsZWFyU2VsZWN0aW9uKCkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5zZWxlY3RlZERhdGEgPSBbXVxuICAgICAgICB0aGlzLnNlbGVjdGVkSW5kaWNlcyA9IFtdXG4gICAgICAgIFxuICAgICAgICB0aGlzLnVwZGF0ZVRpdGxlV2l0aFNlbGVjdGlvbih0aGlzLnNlbGVjdGVkRGF0YSlcbiAgICAgICAgdGhpcy51cGRhdGVDb250ZW50Rm9yQ3VycmVudFNlbGVjdGlvbigpXG4gICAgICAgIHRoaXMuc2VsZWN0aW9uRGlkQ2hhbmdlKHRoaXMuc2VsZWN0ZWREYXRhKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgZ2V0IHNlbGVjdGVkSXRlbUNvZGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZERhdGEubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbS5pdGVtQ29kZVxuICAgICAgICB9KVxuICAgIH1cbiAgICBcbiAgICBzZXQgc2VsZWN0ZWRJdGVtQ29kZXMoc2VsZWN0ZWRJdGVtQ29kZXM6IHN0cmluZ1tdKSB7XG4gICAgXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkRGF0YSA9IFtdXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkSW5kaWNlcyA9IFtdXG4gICAgXG4gICAgICAgIHRoaXMuX2RyYXdpbmdEYXRhLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRJdGVtQ29kZXMuY29udGFpbnMoaXRlbS5pdGVtQ29kZSkpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBzZWxlY3RlZERhdGEucHVzaChpdGVtKVxuICAgICAgICAgICAgICAgIHNlbGVjdGVkSW5kaWNlcy5wdXNoKGluZGV4KVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5zZWxlY3RlZERhdGEgPSBzZWxlY3RlZERhdGFcbiAgICAgICAgdGhpcy5zZWxlY3RlZEluZGljZXMgPSBzZWxlY3RlZEluZGljZXNcbiAgICAgICAgXG4gICAgICAgIHRoaXMudXBkYXRlVGl0bGVXaXRoU2VsZWN0aW9uKHRoaXMuc2VsZWN0ZWREYXRhKVxuICAgICAgICB0aGlzLnVwZGF0ZUNvbnRlbnRGb3JDdXJyZW50U2VsZWN0aW9uKClcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25EaWRDaGFuZ2UodGhpcy5zZWxlY3RlZERhdGEpXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgZ2V0IHNlbGVjdGVkUm93SWRlbnRpZmllcnMoKTogc3RyaW5nW10ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXVxuICAgICAgICB0aGlzLnNlbGVjdGVkRGF0YS5mb3JFYWNoKGZ1bmN0aW9uICh0aGlzOiBTZWFyY2hhYmxlRHJvcGRvd248VD4sIHNlbGVjdGVkRGF0YXBvaW50OiBDQkRyb3Bkb3duRGF0YUl0ZW08VD4pIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHNlbGVjdGVkRGF0YXBvaW50Ll9pZClcbiAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIHdhc0FkZGVkVG9WaWV3VHJlZSgpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyLndhc0FkZGVkVG9WaWV3VHJlZSgpXG4gICAgICAgIFxuICAgICAgICB0aGlzLnNldE5lZWRzTGF5b3V0KClcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgbGF5b3V0U3Vidmlld3MoKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci5sYXlvdXRTdWJ2aWV3cygpXG4gICAgXG4gICAgICAgIGNvbnN0IGJvdW5kcyA9IHRoaXMuYm91bmRzXG4gICAgXG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSBSb290Vmlld0NvbnRyb2xsZXIucGFkZGluZ0xlbmd0aFxuICAgICAgICBjb25zdCBsYWJlbEhlaWdodCA9IHBhZGRpbmdcbiAgICBcbiAgICAgICAgdGhpcy51cGRhdGVUaXRsZVdpdGhTZWxlY3Rpb24odGhpcy5zZWxlY3RlZERhdGEpXG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5fcmlnaHRJbWFnZVZpZXcpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gdmFyIGltYWdlSGVpZ2h0ID0gYm91bmRzLmhlaWdodCAtIHBhZGRpbmc7XG4gICAgICAgICAgICAvLyB0aGlzLl9yaWdodEltYWdlVmlldy5mcmFtZSA9IG5ldyBVSVJlY3RhbmdsZShib3VuZHMud2lkdGggLSBpbWFnZUhlaWdodCAtIHBhZGRpbmcgKiAwLjUsIHBhZGRpbmcgKiAwLjUsIGltYWdlSGVpZ2h0LCBpbWFnZUhlaWdodCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX3JpZ2h0SW1hZ2VWaWV3LmZyYW1lID0gYm91bmRzLnJlY3RhbmdsZVdpdGhJbnNldHMoMCwgcGFkZGluZyAqXG4gICAgICAgICAgICAgICAgMC41LCAwLCAwKS5yZWN0YW5nbGVXaXRoV2lkdGgoMjQsIDEpLnJlY3RhbmdsZVdpdGhIZWlnaHQoMjQsIDAuNSlcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5vdmVyZmxvd0xhYmVsKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vdGhpcy5vdmVyZmxvd0xhYmVsLmZyYW1lID0gYm91bmRzLnJlY3RhbmdsZVdpdGhJbnNldHMocGFkZGluZywgcGFkZGluZywgMCwgMCkucmVjdGFuZ2xlV2l0aEluc2V0cygwLCB0aGlzLl9yaWdodEltYWdlVmlldy5ib3VuZHMud2lkdGggfHwgMCwgMCwgMCkucmVjdGFuZ2xlV2l0aFdpZHRoKDM2LCAxKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy90aGlzLnRpdGxlTGFiZWwuc3R5bGUubWF4V2lkdGggPSBcIlwiICsgKGJvdW5kcy53aWR0aCAtIChib3VuZHMud2lkdGggLSB0aGlzLnRpdGxlTGFiZWwudmlld0hUTUxFbGVtZW50Lm9mZnNldExlZnQgLSAodGhpcy5vdmVyZmxvd0xhYmVsLmZyYW1lLnggfHwgMCkpKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLm92ZXJmbG93TGFiZWwuc3R5bGUud2lkdGggPSBcIjM2cHhcIlxuICAgICAgICAgICAgdGhpcy5vdmVyZmxvd0xhYmVsLnN0eWxlLnJpZ2h0ID0gXCIzMnB4XCJcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5vdmVyZmxvd0xhYmVsLmNlbnRlcllJbkNvbnRhaW5lcigpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy50aXRsZUxhYmVsLnN0eWxlLm1hcmdpblJpZ2h0ID0gXCI2MHB4XCJcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy90aGlzLm92ZXJmbG93TGFiZWwuY2VudGVyWUluQ29udGFpbmVyKCk7XG4gICAgICAgICAgICAvL3RoaXMudGl0bGVMYWJlbC5mcmFtZSA9IHRoaXMudGl0bGVMYWJlbC5mcmFtZS5yZWN0YW5nbGVXaXRoV2lkdGgoYm91bmRzLndpZHRoIC0gKGJvdW5kcy53aWR0aCAtIHRoaXMudGl0bGVMYWJlbC5mcmFtZS54IC0gKHRoaXMub3ZlcmZsb3dMYWJlbC5mcmFtZS54IHx8IDApKSlcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG59XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iLCIvLy88cmVmZXJlbmNlIHBhdGg9XCJVSVZpZXcudHNcIi8+XG5cblxuXG5cblxuY2xhc3MgVUlBY3Rpb25JbmRpY2F0b3IgZXh0ZW5kcyBVSVZpZXcge1xuICAgIFxuICAgIFxuICAgIGluZGljYXRvclZpZXc6IFVJVmlld1xuICAgIFxuICAgIF9zaXplOiBudW1iZXIgPSA1MFxuICAgIFxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRJRD86IHN0cmluZykge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIoZWxlbWVudElEKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fY2xhc3MgPSBVSUFjdGlvbkluZGljYXRvclxuICAgICAgICB0aGlzLnN1cGVyY2xhc3MgPSBVSVZpZXdcbiAgICAgICAgXG4gICAgICAgIHRoaXMuaW5kaWNhdG9yVmlldyA9IG5ldyBVSVZpZXcodGhpcy5lbGVtZW50SUQgKyBcIkluZGljYXRvclZpZXdcIilcbiAgICAgICAgXG4gICAgICAgIHRoaXMuYWRkU3Vidmlldyh0aGlzLmluZGljYXRvclZpZXcpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmluZGljYXRvclZpZXcudmlld0hUTUxFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJMdWtlSGFhc0xvYWRlclwiKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5oaWRkZW4gPSBZRVNcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBzZXQgc2l6ZShzaXplOiBudW1iZXIpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3NpemUgPSBzaXplXG4gICAgICAgIFxuICAgICAgICB0aGlzLnNldE5lZWRzTGF5b3V0VXBUb1Jvb3RWaWV3KClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGdldCBzaXplKCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpemVcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIHNldCBoaWRkZW4oaGlkZGVuOiBib29sZWFuKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci5oaWRkZW4gPSBoaWRkZW5cbiAgICAgICAgXG4gICAgICAgIGlmIChoaWRkZW4pIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5pbmRpY2F0b3JWaWV3LnJlbW92ZUZyb21TdXBlcnZpZXcoKVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuYWRkU3Vidmlldyh0aGlzLmluZGljYXRvclZpZXcpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc3RhcnQoKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmhpZGRlbiA9IE5PXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBzdG9wKCkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5oaWRkZW4gPSBZRVNcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIGxheW91dFN1YnZpZXdzKCkge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIubGF5b3V0U3Vidmlld3MoKVxuICAgICAgICBcbiAgICAgICAgY29uc3QgYm91bmRzID0gdGhpcy5ib3VuZHNcbiAgICAgICAgXG4gICAgICAgIC8vdGhpcy5pbmRpY2F0b3JWaWV3LmNlbnRlckluQ29udGFpbmVyKCk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmluZGljYXRvclZpZXcuc3R5bGUuaGVpZ2h0ID0gXCJcIiArIHRoaXMuX3NpemUuaW50ZWdlclZhbHVlICsgXCJweFwiXG4gICAgICAgIHRoaXMuaW5kaWNhdG9yVmlldy5zdHlsZS53aWR0aCA9IFwiXCIgKyB0aGlzLl9zaXplLmludGVnZXJWYWx1ZSArIFwicHhcIlxuICAgICAgICBcbiAgICAgICAgY29uc3QgbWluU2l6ZSA9IE1hdGgubWluKHRoaXMuYm91bmRzLmhlaWdodCwgdGhpcy5ib3VuZHMud2lkdGgpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmluZGljYXRvclZpZXcuc3R5bGUubWF4SGVpZ2h0ID0gXCJcIiArIG1pblNpemUuaW50ZWdlclZhbHVlICsgXCJweFwiXG4gICAgICAgIHRoaXMuaW5kaWNhdG9yVmlldy5zdHlsZS5tYXhXaWR0aCA9IFwiXCIgKyBtaW5TaXplLmludGVnZXJWYWx1ZSArIFwicHhcIlxuICAgICAgICBcbiAgICAgICAgY29uc3Qgc2l6ZSA9IE1hdGgubWluKHRoaXMuX3NpemUsIG1pblNpemUpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmluZGljYXRvclZpZXcuc3R5bGUubGVmdCA9IFwiXCIgKyAoKGJvdW5kcy53aWR0aCAtIHNpemUpICogMC41IC0gMTEpLmludGVnZXJWYWx1ZSArIFwicHhcIlxuICAgICAgICB0aGlzLmluZGljYXRvclZpZXcuc3R5bGUudG9wID0gXCJcIiArICgoYm91bmRzLmhlaWdodCAtIHNpemUpICogMC41IC0gMTEpLmludGVnZXJWYWx1ZSArIFwicHhcIlxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG59XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiIsIi8vLzxyZWZlcmVuY2UgcGF0aD1cIlVJVmlldy50c1wiLz5cblxuXG5cblxuXG5jbGFzcyBVSURhdGVUaW1lSW5wdXQgZXh0ZW5kcyBVSVZpZXcge1xuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRJRDogc3RyaW5nLCB0eXBlOiBzdHJpbmcgPSBVSURhdGVUaW1lSW5wdXQudHlwZS5EYXRlVGltZSkge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIoZWxlbWVudElELCBuaWwsIFwiaW5wdXRcIilcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2NsYXNzID0gVUlEYXRlVGltZUlucHV0XG4gICAgICAgIHRoaXMuc3VwZXJjbGFzcyA9IFVJVmlld1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMudmlld0hUTUxFbGVtZW50LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgdHlwZSlcbiAgICAgICAgXG4gICAgICAgIHRoaXMudmlld0hUTUxFbGVtZW50Lm9uY2hhbmdlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNlbmRDb250cm9sRXZlbnRGb3JLZXkoVUlEYXRlVGltZUlucHV0LmNvbnRyb2xFdmVudC5WYWx1ZUNoYW5nZSwgZXZlbnQpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBzdGF0aWMgY29udHJvbEV2ZW50ID0gT2JqZWN0LmFzc2lnbih7fSwgVUlWaWV3LmNvbnRyb2xFdmVudCwge1xuICAgICAgICBcbiAgICAgICAgXCJWYWx1ZUNoYW5nZVwiOiBcIlZhbHVlQ2hhbmdlXCJcbiAgICAgICAgXG4gICAgfSlcbiAgICBcbiAgICBnZXQgYWRkQ29udHJvbEV2ZW50VGFyZ2V0KCk6IFVJVmlld0FkZENvbnRyb2xFdmVudFRhcmdldE9iamVjdDx0eXBlb2YgVUlEYXRlVGltZUlucHV0LmNvbnRyb2xFdmVudD4ge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHN1cGVyLmFkZENvbnRyb2xFdmVudFRhcmdldCBhcyBhbnlcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIHN0YXRpYyB0eXBlID0ge1xuICAgICAgICBcbiAgICAgICAgXCJEYXRlXCI6IFwiZGF0ZVwiLFxuICAgICAgICBcIlRpbWVcIjogXCJ0aW1lXCIsXG4gICAgICAgIFwiRGF0ZVRpbWVcIjogXCJkYXRldGltZVwiXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgc3RhdGljIGZvcm1hdCA9IHtcbiAgICAgICAgXG4gICAgICAgIFwiRXVyb3BlYW5cIjogXCJERC1NTS1ZWVlZXCIsXG4gICAgICAgIFwiSVNPQ29tcHV0ZXJcIjogXCJZWVlZLU1NLUREXCIsXG4gICAgICAgIFwiQW1lcmljYW5cIjogXCJNTS9ERC9ZWVlZXCJcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGdldCBkYXRlKCkge1xuICAgICAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IERhdGUoKHRoaXMudmlld0hUTUxFbGVtZW50IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlKVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG59XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iLCIvLy88cmVmZXJlbmNlIHBhdGg9XCJVSU9iamVjdC50c1wiLz5cblxuXG5cblxuXG5cblxuXG5cblxuXG5pbnRlcmZhY2UgVUlLZXlWYWx1ZVN0cmluZ1NvcnRlclNvcnRpbmdJbnN0cnVjdGlvbiB7XG4gICAgXG4gICAga2V5UGF0aDogc3RyaW5nO1xuICAgIFxuICAgIGRhdGFUeXBlOiBzdHJpbmc7XG4gICAgXG4gICAgZGlyZWN0aW9uOiBzdHJpbmc7XG4gICAgXG4gICAgXG59XG5cblxuXG5cblxuY2xhc3MgVUlLZXlWYWx1ZVN0cmluZ1NvcnRlciBleHRlbmRzIFVJT2JqZWN0IHtcbiAgICBcbiAgICBcbiAgICBzdGF0aWMgX3NoYXJlZFdlYldvcmtlciA9IG5ldyBXb3JrZXIoXCJjb21waWxlZFNjcmlwdHMvVUlLZXlWYWx1ZVN0cmluZ1NvcnRlcldlYldvcmtlci5qc1wiKVxuICAgIFxuICAgIHN0YXRpYyBfaW5zdGFuY2VOdW1iZXIgPSAtMVxuICAgIFxuICAgIFxuICAgIF9pbnN0YW5jZU51bWJlcjogbnVtYmVyXG4gICAgXG4gICAgX2lzVGhyZWFkQ2xvc2VkID0gTk9cbiAgICBcbiAgICBfd2ViV29ya2VyID0gVUlLZXlWYWx1ZVN0cmluZ1NvcnRlci5fc2hhcmVkV2ViV29ya2VyXG4gICAgXG4gICAgY29uc3RydWN0b3IodXNlU2VwYXJhdGVXZWJXb3JrZXIgPSBOTykge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2NsYXNzID0gVUlLZXlWYWx1ZVN0cmluZ1NvcnRlclxuICAgICAgICB0aGlzLnN1cGVyY2xhc3MgPSBVSU9iamVjdFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGlmICh1c2VTZXBhcmF0ZVdlYldvcmtlcikge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl93ZWJXb3JrZXIgPSBuZXcgV29ya2VyKFwiY29tcGlsZWRTY3JpcHRzL1VJS2V5VmFsdWVTdHJpbmdTb3J0ZXJXZWJXb3JrZXIuanNcIilcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBVSUtleVZhbHVlU3RyaW5nU29ydGVyLl9pbnN0YW5jZU51bWJlciA9IFVJS2V5VmFsdWVTdHJpbmdTb3J0ZXIuX2luc3RhbmNlTnVtYmVyICsgMVxuICAgICAgICB0aGlzLl9pbnN0YW5jZU51bWJlciA9IFVJS2V5VmFsdWVTdHJpbmdTb3J0ZXIuX2luc3RhbmNlTnVtYmVyXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgZ2V0IGluc3RhbmNlSWRlbnRpZmllcigpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZU51bWJlclxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgc3RhdGljIGRhdGFUeXBlID0ge1xuICAgICAgICBcbiAgICAgICAgXCJzdHJpbmdcIjogXCJzdHJpbmdcIlxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgc3RhdGljIGRpcmVjdGlvbiA9IHtcbiAgICAgICAgXG4gICAgICAgIFwiZGVzY2VuZGluZ1wiOiBcImRlc2NlbmRpbmdcIixcbiAgICAgICAgXCJhc2NlbmRpbmdcIjogXCJhc2NlbmRpbmdcIlxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgc29ydERhdGE8VD4oXG4gICAgICAgIGRhdGE6IFRbXSxcbiAgICAgICAgc29ydGluZ0luc3RydWN0aW9uczogVUlLZXlWYWx1ZVN0cmluZ1NvcnRlclNvcnRpbmdJbnN0cnVjdGlvbltdLFxuICAgICAgICBpZGVudGlmaWVyOiBhbnksXG4gICAgICAgIGNvbXBsZXRpb246IChzb3J0ZWREYXRhOiBUW10sIHNvcnRlZEluZGV4ZXM6IG51bWJlcltdLCBpZGVudGlmaWVyOiBhbnkpID0+IHZvaWRcbiAgICApIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5faXNUaHJlYWRDbG9zZWQpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpXG4gICAgXG4gICAgICAgIGNvbnN0IGluc3RhbmNlSWRlbnRpZmllciA9IHRoaXMuaW5zdGFuY2VJZGVudGlmaWVyXG4gICAgXG4gICAgICAgIHRoaXMuX3dlYldvcmtlci5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAobWVzc2FnZS5kYXRhLmluc3RhbmNlSWRlbnRpZmllciA9PSBpbnN0YW5jZUlkZW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNvcnRpbmcgXCIgKyBkYXRhLmxlbmd0aCArIFwiIGl0ZW1zIHRvb2sgXCIgKyAoRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSkgKyBcIiBtcy5cIilcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb21wbGV0aW9uKG1lc3NhZ2UuZGF0YS5zb3J0ZWREYXRhLCBtZXNzYWdlLmRhdGEuc29ydGVkSW5kZXhlcywgbWVzc2FnZS5kYXRhLmlkZW50aWZpZXIpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX3dlYldvcmtlci5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXCJkYXRhXCI6IGRhdGEsXG4gICAgICAgICAgICAgICAgXCJzb3J0aW5nSW5zdHJ1Y3Rpb25zXCI6IHNvcnRpbmdJbnN0cnVjdGlvbnMsXG4gICAgICAgICAgICAgICAgXCJpZGVudGlmaWVyXCI6IGlkZW50aWZpZXIsXG4gICAgICAgICAgICAgICAgXCJpbnN0YW5jZUlkZW50aWZpZXJcIjogaW5zdGFuY2VJZGVudGlmaWVyXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgXG4gICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb21wbGV0aW9uKFtdLCBbXSwgaWRlbnRpZmllcilcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgc29ydGVkRGF0YTxUPihcbiAgICAgICAgZGF0YTogVFtdLFxuICAgICAgICBzb3J0aW5nSW5zdHJ1Y3Rpb25zOiBVSUtleVZhbHVlU3RyaW5nU29ydGVyU29ydGluZ0luc3RydWN0aW9uW10sXG4gICAgICAgIGlkZW50aWZpZXI6IGFueSA9IE1BS0VfSUQoKVxuICAgICkge1xuICAgIFxuICAgICAgICBjb25zdCByZXN1bHQ6IFByb21pc2U8e1xuICAgICAgICBcbiAgICAgICAgICAgIHNvcnRlZERhdGE6IFRbXSxcbiAgICAgICAgICAgIHNvcnRlZEluZGV4ZXM6IG51bWJlcltdLFxuICAgICAgICAgICAgaWRlbnRpZmllcjogYW55XG4gICAgICAgIFxuICAgICAgICB9PiA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnNvcnREYXRhKGRhdGEsIHNvcnRpbmdJbnN0cnVjdGlvbnMsIGlkZW50aWZpZXIsIChzb3J0ZWREYXRhLCBzb3J0ZWRJbmRleGVzLCBzb3J0ZWRJZGVudGlmaWVyKSA9PiB7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKHNvcnRlZElkZW50aWZpZXIgPT0gaWRlbnRpZmllcikge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3J0ZWREYXRhOiBzb3J0ZWREYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgc29ydGVkSW5kZXhlczogc29ydGVkSW5kZXhlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkZW50aWZpZXI6IHNvcnRlZElkZW50aWZpZXJcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgfSlcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgfSlcbiAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgY2xvc2VUaHJlYWQoKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLl9pc1RocmVhZENsb3NlZCA9IFlFU1xuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuX3dlYldvcmtlciAhPSBVSUtleVZhbHVlU3RyaW5nU29ydGVyLl9zaGFyZWRXZWJXb3JrZXIpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5fd2ViV29ya2VyLnRlcm1pbmF0ZSgpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbn1cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuIiwiLy8vPHJlZmVyZW5jZSBwYXRoPVwiVUlPYmplY3QudHNcIi8+XG5cblxuXG5cblxuXG5cblxuXG5cbmNsYXNzIFVJTGF5b3V0R3JpZCBleHRlbmRzIFVJT2JqZWN0IHtcbiAgICBcbiAgICBcbiAgICBcbiAgICBfZnJhbWU6IFVJUmVjdGFuZ2xlXG4gICAgXG4gICAgX3N1YmZyYW1lczogVUlMYXlvdXRHcmlkW10gPSBbXVxuICAgIFxuICAgIFxuICAgIGNvbnN0cnVjdG9yKGZyYW1lOiBVSVJlY3RhbmdsZSkge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIoKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fY2xhc3MgPSBVSUxheW91dEdyaWRcbiAgICAgICAgdGhpcy5zdXBlcmNsYXNzID0gVUlPYmplY3RcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2ZyYW1lID0gZnJhbWVcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIHNwbGl0WEludG8obnVtYmVyT2ZGcmFtZXM6IG51bWJlcikge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5fc3ViZnJhbWVzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bWJlck9mRnJhbWVzOyBpKyspIHtcbiAgICBcbiAgICAgICAgICAgICAgICBjb25zdCBhc2QgPSAxXG4gICAgXG4gICAgXG4gICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG59XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9VSVZpZXcudHNcIiAvPlxuXG5cblxuXG5cbmNsYXNzIFVJU2Nyb2xsVmlldyBleHRlbmRzIFVJVmlldyB7XG4gICAgXG4gICAgXG4gICAgX2NvbnRlbnRPZmZzZXQ6IFVJUG9pbnQgPSBuZXcgVUlQb2ludCgwLCAwKVxuICAgIF9jb250ZW50U2NhbGU6IG51bWJlciA9IDFcbiAgICBcbiAgICBjb250YWluZXJWaWV3OiBVSVZpZXdcbiAgICBcbiAgICBfcG9pbnRlckRvd246IGJvb2xlYW5cbiAgICBcbiAgICBfc2Nyb2xsRW5hYmxlZDogYm9vbGVhbiA9IFlFU1xuICAgIFxuICAgIF9wcmV2aW91c0NsaWVudFBvaW50OiBVSVBvaW50XG4gICAgXG4gICAgX2ludHJpbnNpY0NvbnRlbnRGcmFtZTogVUlSZWN0YW5nbGVcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50SUQ6IHN0cmluZywgdmlld0hUTUxFbGVtZW50PzogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyKGVsZW1lbnRJRCwgdmlld0hUTUxFbGVtZW50KVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fY2xhc3MgPSBVSVNjcm9sbFZpZXdcbiAgICAgICAgdGhpcy5zdXBlcmNsYXNzID0gVUlWaWV3XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5jb250YWluZXJWaWV3ID0gbmV3IFVJVmlldyhlbGVtZW50SUQgKyBcIkNvbnRhaW5lclZpZXdcIilcbiAgICAgICAgXG4gICAgICAgIHN1cGVyLmFkZFN1YnZpZXcodGhpcy5jb250YWluZXJWaWV3KVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiXG4gICAgICAgIFxuICAgICAgICB0aGlzLnBhdXNlc1BvaW50ZXJFdmVudHMgPSBOTyAvL1lFUztcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLmFkZFRhcmdldEZvckNvbnRyb2xFdmVudChVSVZpZXcuY29udHJvbEV2ZW50LlBvaW50ZXJEb3duLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX3BvaW50ZXJEb3duID0gWUVTXG4gICAgICAgICAgICBcbiAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5hZGRUYXJnZXRGb3JDb250cm9sRXZlbnQoVUlWaWV3LmNvbnRyb2xFdmVudC5Qb2ludGVyVXAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5fcG9pbnRlckRvd24gPSBOT1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl9wcmV2aW91c0NsaWVudFBvaW50ID0gbnVsbFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBzY3JvbGxTdG9wcGVkKClcbiAgICAgICAgICAgIFxuICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgZnVuY3Rpb24gc2Nyb2xsU3RvcHBlZCgpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gSGFuZGxlIHBhZ2luZyBpZiBuZWVkZWRcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5hZGRUYXJnZXRGb3JDb250cm9sRXZlbnQoVUlWaWV3LmNvbnRyb2xFdmVudC5Qb2ludGVyTW92ZSwgZnVuY3Rpb24gKHNlbmRlcjogVUlTY3JvbGxWaWV3LCBldmVudDogRXZlbnQpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCEodGhpcy5fcG9pbnRlckRvd24gJiYgdGhpcy5fc2Nyb2xsRW5hYmxlZCAmJiB0aGlzLl9lbmFibGVkKSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgY29uc3QgY3VycmVudENsaWVudFBvaW50ID0gbmV3IFVJUG9pbnQobmlsLCBuaWwpXG4gICAgXG4gICAgICAgICAgICBpZiAoKHdpbmRvdyBhcyBhbnkpLk1vdXNlRXZlbnQgJiYgZXZlbnQgaW5zdGFuY2VvZiBNb3VzZUV2ZW50KSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY3VycmVudENsaWVudFBvaW50LnggPSAoZXZlbnQgYXMgTW91c2VFdmVudCkuY2xpZW50WFxuICAgICAgICAgICAgICAgIGN1cnJlbnRDbGllbnRQb2ludC55ID0gKGV2ZW50IGFzIE1vdXNlRXZlbnQpLmNsaWVudFlcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCh3aW5kb3cgYXMgYW55KS5Ub3VjaEV2ZW50ICYmIGV2ZW50IGluc3RhbmNlb2YgVG91Y2hFdmVudCkge1xuICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IHRvdWNoRXZlbnQ6IFRvdWNoRXZlbnQgPSBldmVudFxuICAgIFxuICAgICAgICAgICAgICAgIGlmICh0b3VjaEV2ZW50LnRvdWNoZXMubGVuZ3RoICE9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BvaW50ZXJEb3duID0gTk9cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJldmlvdXNDbGllbnRQb2ludCA9IG51bGxcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFN0b3BwZWQoKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjdXJyZW50Q2xpZW50UG9pbnQueCA9IHRvdWNoRXZlbnQudG91Y2hlc1swXS5jbGllbnRYXG4gICAgICAgICAgICAgICAgY3VycmVudENsaWVudFBvaW50LnkgPSB0b3VjaEV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIXRoaXMuX3ByZXZpb3VzQ2xpZW50UG9pbnQpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLl9wcmV2aW91c0NsaWVudFBvaW50ID0gY3VycmVudENsaWVudFBvaW50XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBjb25zdCBjaGFuZ2VQb2ludCA9IGN1cnJlbnRDbGllbnRQb2ludC5jb3B5KCkuc3VidHJhY3QodGhpcy5fcHJldmlvdXNDbGllbnRQb2ludClcbiAgICBcbiAgICBcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRhaW5lclZpZXcuYm91bmRzLndpZHRoIDw9IHRoaXMuYm91bmRzLndpZHRoKSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlUG9pbnQueCA9IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgwIDwgdGhpcy5jb250ZW50T2Zmc2V0LnggKyBjaGFuZ2VQb2ludC54KSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlUG9pbnQueCA9IC10aGlzLmNvbnRlbnRPZmZzZXQueFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuY29udGVudE9mZnNldC54ICsgY2hhbmdlUG9pbnQueCA8IC10aGlzLmJvdW5kcy53aWR0aCkge1xuICAgICAgICAgICAgICAgIGNoYW5nZVBvaW50LnggPSAtdGhpcy5ib3VuZHMud2lkdGggLSB0aGlzLmNvbnRlbnRPZmZzZXQueFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodGhpcy5jb250YWluZXJWaWV3LmJvdW5kcy5oZWlnaHQgPD0gdGhpcy5ib3VuZHMuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlUG9pbnQueSA9IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgwIDwgdGhpcy5jb250ZW50T2Zmc2V0LnkgKyBjaGFuZ2VQb2ludC55KSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlUG9pbnQueSA9IC10aGlzLmNvbnRlbnRPZmZzZXQueVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuY29udGVudE9mZnNldC55ICsgY2hhbmdlUG9pbnQueSA8IC10aGlzLmJvdW5kcy5oZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VQb2ludC55ID0gLXRoaXMuYm91bmRzLmhlaWdodCAtIHRoaXMuY29udGVudE9mZnNldC55XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuY29udGVudE9mZnNldCA9IHRoaXMuY29udGVudE9mZnNldC5hZGQoY2hhbmdlUG9pbnQpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX3ByZXZpb3VzQ2xpZW50UG9pbnQgPSBjdXJyZW50Q2xpZW50UG9pbnRcbiAgICAgICAgICAgIFxuICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBpbnZhbGlkYXRlSW50cmluc2ljQ29udGVudEZyYW1lKCkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5faW50cmluc2ljQ29udGVudEZyYW1lID0gbmlsXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBnZXQgY29udGVudE9mZnNldCgpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50T2Zmc2V0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBzZXQgY29udGVudE9mZnNldChvZmZzZXQ6IFVJUG9pbnQpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2NvbnRlbnRPZmZzZXQgPSBvZmZzZXRcbiAgICAgICAgdGhpcy5zZXROZWVkc0xheW91dCgpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBsYXlvdXRTdWJ2aWV3cygpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyLmxheW91dFN1YnZpZXdzKClcbiAgICAgICAgXG4gICAgICAgIC8vIHZhciBpbnRyaW5zaWNDb250ZW50RnJhbWUgPSB0aGlzLl9pbnRyaW5zaWNDb250ZW50RnJhbWU7XG4gICAgICAgIC8vIGlmICghSVMoaW50cmluc2ljQ29udGVudEZyYW1lKSkge1xuICAgICAgICAvLyAgICAgaW50cmluc2ljQ29udGVudEZyYW1lID0gdGhpcy5jb250YWluZXJWaWV3LmludHJpbnNpY0NvbnRlbnRTaXplV2l0aENvbnN0cmFpbnRzKCk7ICAgXG4gICAgICAgIC8vIH1cbiAgICAgICAgLy8gaW50cmluc2ljQ29udGVudEZyYW1lLm9mZnNldEJ5UG9pbnQodGhpcy5jb250ZW50T2Zmc2V0KTtcbiAgICAgICAgLy8gaW50cmluc2ljQ29udGVudEZyYW1lLmhlaWdodCA9IHRoaXMuY29udGFpbmVyVmlldy52aWV3SFRNTEVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuICAgICAgICAvLyBpbnRyaW5zaWNDb250ZW50RnJhbWUud2lkdGggPSB0aGlzLmNvbnRhaW5lclZpZXcudmlld0hUTUxFbGVtZW50LnNjcm9sbFdpZHRoO1xuICAgICAgICAvLyB0aGlzLmNvbnRhaW5lclZpZXcuZnJhbWUgPSBpbnRyaW5zaWNDb250ZW50RnJhbWU7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmNvbnRhaW5lclZpZXcuZnJhbWUgPSB0aGlzLmNvbnRhaW5lclZpZXcuYm91bmRzLm9mZnNldEJ5UG9pbnQodGhpcy5jb250ZW50T2Zmc2V0KVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgLy8gZ2V0IF9zdWJ2aWV3cygpIHtcbiAgICAvLyAgICAgcmV0dXJuIHN1cGVyLnN1YnZpZXdzO1xuICAgIC8vIH1cbiAgICBcbiAgICAvLyBzZXQgX3N1YnZpZXdzKHN1YnZpZXdzOiBVSVZpZXdbXSkge1xuICAgIC8vICAgICBzdXBlci5zdWJ2aWV3cyA9IHN1YnZpZXdzO1xuICAgIC8vIH1cbiAgICBcbiAgICAvLyBnZXQgc3Vidmlld3MoKSB7XG4gICAgLy8gICAgIHJldHVybiB0aGlzLmNvbnRhaW5lclZpZXcuc3Vidmlld3M7XG4gICAgLy8gfVxuICAgIFxuICAgIC8vIHNldCBzdWJ2aWV3cyhzdWJ2aWV3czogVUlWaWV3W10pIHtcbiAgICBcbiAgICAvLyAgICAgdGhpcy5jb250YWluZXJWaWV3LnN1YnZpZXdzID0gc3Vidmlld3M7XG4gICAgXG4gICAgLy8gICAgIHRoaXMuaW52YWxpZGF0ZUludHJpbnNpY0NvbnRlbnRGcmFtZSgpO1xuICAgIFxuICAgIFxuICAgIC8vIH1cbiAgICBcbiAgICBcbiAgICBoYXNTdWJ2aWV3KHZpZXc6IFVJVmlldykge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXJWaWV3Lmhhc1N1YnZpZXcodmlldylcbiAgICB9XG4gICAgXG4gICAgYWRkU3Vidmlldyh2aWV3OiBVSVZpZXcpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY29udGFpbmVyVmlldy5hZGRTdWJ2aWV3KHZpZXcpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmludmFsaWRhdGVJbnRyaW5zaWNDb250ZW50RnJhbWUoKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxufVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiIsIi8vLzxyZWZlcmVuY2UgcGF0aD1cIlVJVmlldy50c1wiLz5cblxuXG5cblxuXG5cblxuXG5cbmNsYXNzIFVJU2xpZGVTY3JvbGxlclZpZXcgZXh0ZW5kcyBVSVZpZXcge1xuICAgIFxuICAgIFxuICAgIFxuICAgIF9wcmV2aW91c0xheW91dEJvdW5kczogVUlSZWN0YW5nbGVcbiAgICBfdGFyZ2V0SW5kZXg6IG51bWJlciA9IDBcbiAgICBwYWdlSW5kaWNhdG9yc1ZpZXc6IFVJVmlld1xuICAgIF9pc0FuaW1hdGluZzogYm9vbGVhbiA9IE5PXG4gICAgX2lzQW5pbWF0aW9uT25nb2luZzogYm9vbGVhbiA9IE5PXG4gICAgX2FuaW1hdGlvblRpbWVyOiBVSVRpbWVyID0gbmlsXG4gICAgX3Njcm9sbFZpZXc6IFVJU2Nyb2xsVmlld1xuICAgIF9zbGlkZVZpZXdzOiBVSVZpZXdbXSA9IFtdXG4gICAgXG4gICAgd3JhcEFyb3VuZDogYm9vbGVhbiA9IFlFU1xuICAgIFxuICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBudW1iZXIgPSAwLjM1XG4gICAgYW5pbWF0aW9uRGVsYXk6IG51bWJlciA9IDJcbiAgICBcbiAgICBfY3VycmVudFBhZ2VJbmRleDogbnVtYmVyID0gMFxuICAgIFxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRJRDogc3RyaW5nLCB2aWV3SFRNTEVsZW1lbnQ/OiBIVE1MRWxlbWVudCkge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIoZWxlbWVudElELCB2aWV3SFRNTEVsZW1lbnQpXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9jbGFzcyA9IFVJU2Nyb2xsVmlld1xuICAgICAgICB0aGlzLnN1cGVyY2xhc3MgPSBVSVZpZXdcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9zY3JvbGxWaWV3ID0gbmV3IFVJU2Nyb2xsVmlldyhlbGVtZW50SUQgKyBcIlNjcm9sbFZpZXdcIilcbiAgICAgICAgXG4gICAgICAgIHRoaXMuYWRkU3Vidmlldyh0aGlzLl9zY3JvbGxWaWV3KVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3Njcm9sbFZpZXcuX3Njcm9sbEVuYWJsZWQgPSBOT1xuICAgICAgICBcbiAgICAgICAgdGhpcy5fc2Nyb2xsVmlldy5hZGRUYXJnZXRGb3JDb250cm9sRXZlbnQoXG4gICAgICAgICAgICBVSVZpZXcuY29udHJvbEV2ZW50LlBvaW50ZXJNb3ZlLFxuICAgICAgICAgICAgZnVuY3Rpb24gKHNlbmRlcjogVUlWaWV3LCBldmVudDogRXZlbnQpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBNb3VzZUV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvblRpbWVyLmludmFsaWRhdGUoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICApXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9zY3JvbGxWaWV3LmFkZFRhcmdldEZvckNvbnRyb2xFdmVudChVSVZpZXcuY29udHJvbEV2ZW50LlBvaW50ZXJMZWF2ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodGhpcy5faXNBbmltYXRpbmcgJiYgZXZlbnQgaW5zdGFuY2VvZiBNb3VzZUV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydEFuaW1hdGluZygpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICBcbiAgICAgICAgLy8gVG91Y2ggZXZlbnRzXG4gICAgICAgIHRoaXMuX3Njcm9sbFZpZXcuYWRkVGFyZ2V0Rm9yQ29udHJvbEV2ZW50KFVJVmlldy5jb250cm9sRXZlbnQuUG9pbnRlckRvd24sIGZ1bmN0aW9uIChzZW5kZXIsIGV2ZW50KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIFRvdWNoRXZlbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hbmltYXRpb25UaW1lci5pbnZhbGlkYXRlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9zY3JvbGxWaWV3LmFkZFRhcmdldEZvckNvbnRyb2xFdmVudHMoW1xuICAgICAgICAgICAgVUlWaWV3LmNvbnRyb2xFdmVudC5Qb2ludGVyVXAsIFVJVmlldy5jb250cm9sRXZlbnQuUG9pbnRlckNhbmNlbFxuICAgICAgICBdLCBmdW5jdGlvbiAoc2VuZGVyLCBldmVudCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBUb3VjaEV2ZW50ICYmIHRoaXMuX2lzQW5pbWF0aW5nKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydEFuaW1hdGluZygpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIC8vIFBhZ2UgaW5kaWNhdG9yXG4gICAgICAgIFxuICAgICAgICB0aGlzLnBhZ2VJbmRpY2F0b3JzVmlldyA9IG5ldyBVSVZpZXcoZWxlbWVudElEICsgXCJQYWdlSW5kaWNhdG9yc1ZpZXdcIilcbiAgICAgICAgdGhpcy5hZGRTdWJ2aWV3KHRoaXMucGFnZUluZGljYXRvcnNWaWV3KVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGJ1dHRvbkZvclBhZ2VJbmRpY2F0b3JXaXRoSW5kZXgoaW5kZXg6IG51bWJlcik6IFVJQnV0dG9uIHtcbiAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFVJQnV0dG9uKHRoaXMudmlld0hUTUxFbGVtZW50LmlkICsgXCJQYWdlSW5kaWNhdG9yQnV0dG9uXCIgKyBpbmRleClcbiAgICBcbiAgICAgICAgcmVzdWx0LmFkZFRhcmdldEZvckNvbnRyb2xFdmVudHMoW1xuICAgICAgICAgICAgVUlWaWV3LmNvbnRyb2xFdmVudC5Qb2ludGVyVXBJbnNpZGUsIFVJVmlldy5jb250cm9sRXZlbnQuRW50ZXJVcFxuICAgICAgICBdLCBmdW5jdGlvbiAoc2VuZGVyLCBldmVudCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnNjcm9sbFRvUGFnZVdpdGhJbmRleChpbmRleCwgWUVTKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodGhpcy5faXNBbmltYXRpbmcpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0QW5pbWF0aW5nKClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICBcbiAgICAgICAgcmVzdWx0LmFkZFRhcmdldEZvckNvbnRyb2xFdmVudChVSVZpZXcuY29udHJvbEV2ZW50LlBvaW50ZXJNb3ZlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvblRpbWVyLmludmFsaWRhdGUoKVxuICAgICAgICAgICAgXG4gICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICByZXN1bHQudXBkYXRlQ29udGVudEZvck5vcm1hbFN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXN1bHQuYmFja2dyb3VuZENvbG9yID0gVUlDb2xvci5ibHVlQ29sb3JcbiAgICAgICAgICAgIHJlc3VsdC50aXRsZUxhYmVsLnRleHRDb2xvciA9IFVJQ29sb3Iud2hpdGVDb2xvclxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICByZXN1bHQuZnJhbWUgPSBuZXcgVUlSZWN0YW5nbGUobmlsLCBuaWwsIDIwLCA1MClcbiAgICAgICAgXG4gICAgICAgIC8vIHJlc3VsdC5zdHlsZS5oZWlnaHQgPSBcIjIwcHhcIjtcbiAgICAgICAgLy8gcmVzdWx0LnN0eWxlLndpZHRoID0gXCI1MHB4XCI7XG4gICAgICAgIHJlc3VsdC5zdHlsZS5kaXNwbGF5ID0gXCJ0YWJsZS1jZWxsXCJcbiAgICAgICAgcmVzdWx0LnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgLy8gdmFyIHJlc3VsdENvbnRlbnQgPSBuZXcgVUlWaWV3KHJlc3VsdC52aWV3SFRNTEVsZW1lbnQuaWQgKyBcIkNvbnRlbnRcIik7XG4gICAgICAgIC8vIHJlc3VsdENvbnRlbnQuYmFja2dyb3VuZENvbG9yID0gVUlDb2xvci53aGl0ZUNvbG9yO1xuICAgICAgICAvLyByZXN1bHRDb250ZW50LmNlbnRlcllJbkNvbnRhaW5lcigpO1xuICAgICAgICAvLyByZXN1bHRDb250ZW50LnN0eWxlLmhlaWdodCA9IFwiMTBweFwiO1xuICAgICAgICAvLyByZXN1bHRDb250ZW50LnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuICAgICAgICAvLyByZXN1bHRDb250ZW50LnN0eWxlLmJvcmRlclJhZGl1cyA9IFwiNXB4XCI7XG4gICAgICAgIFxuICAgICAgICAvLyByZXN1bHQuYWRkU3VidmlldyhyZXN1bHRDb250ZW50KTtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBhZGRTbGlkZVZpZXcodmlldzogVUlWaWV3KSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnNsaWRlVmlld3MucHVzaCh2aWV3KVxuICAgICAgICBcbiAgICAgICAgdGhpcy51cGRhdGVTbGlkZVZpZXdzKClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHNldCBzbGlkZVZpZXdzKHZpZXdzOiBVSVZpZXdbXSkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5fc2xpZGVWaWV3cyA9IHZpZXdzXG4gICAgICAgIFxuICAgICAgICB0aGlzLnVwZGF0ZVNsaWRlVmlld3MoKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgZ2V0IHNsaWRlVmlld3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zbGlkZVZpZXdzXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIGdldCBjdXJyZW50UGFnZUluZGV4KCkge1xuICAgIFxuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9jdXJyZW50UGFnZUluZGV4XG4gICAgXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHNldCBjdXJyZW50UGFnZUluZGV4KGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2N1cnJlbnRQYWdlSW5kZXggPSBpbmRleFxuICAgICAgICBcbiAgICAgICAgdGhpcy5fc2xpZGVWaWV3c1tpbmRleF0ud2lsbEFwcGVhcigpXG4gICAgICAgIFxuICAgICAgICAvL3RoaXMuX3Njcm9sbFZpZXcuY29udGVudE9mZnNldC54ID0gLXRoaXMuX3NsaWRlVmlld3NbaW5kZXhdLmZyYW1lLm1pbi54OyAvLy10aGlzLmJvdW5kcy53aWR0aCAqIGluZGV4O1xuICAgICAgICAvL3RoaXMuX3Njcm9sbFZpZXcuY29udGVudE9mZnNldC54ID0gTWF0aC5yb3VuZCh0aGlzLl9zY3JvbGxWaWV3LmNvbnRlbnRPZmZzZXQueCk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLl9zY3JvbGxWaWV3LmNvbnRlbnRPZmZzZXQgPSB0aGlzLl9zY3JvbGxWaWV3LmNvbnRlbnRPZmZzZXQucG9pbnRXaXRoWCgtdGhpcy5fc2xpZGVWaWV3c1tpbmRleF0uZnJhbWUubWluLngpXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5wYWdlSW5kaWNhdG9yc1ZpZXcuc3Vidmlld3MuZm9yRWFjaChmdW5jdGlvbiAoYnV0dG9uOiBVSUJ1dHRvbiwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGJ1dHRvbi5zZWxlY3RlZCA9IE5PXG4gICAgICAgICAgICBcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgICh0aGlzLnBhZ2VJbmRpY2F0b3JzVmlldy5zdWJ2aWV3c1tpbmRleF0gYXMgVUlCdXR0b24pLnNlbGVjdGVkID0gWUVTXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIHNjcm9sbFRvUHJldmlvdXNQYWdlKGFuaW1hdGVkOiBib29sZWFuKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5zbGlkZVZpZXdzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgIFxuICAgICAgICB2YXIgdGFyZ2V0SW5kZXggPSB0aGlzLmN1cnJlbnRQYWdlSW5kZXhcbiAgICBcbiAgICAgICAgaWYgKHRoaXMud3JhcEFyb3VuZCkge1xuICAgICAgICAgICAgdGFyZ2V0SW5kZXggPSAodGhpcy5jdXJyZW50UGFnZUluZGV4IC0gMSkgJSAodGhpcy5zbGlkZVZpZXdzLmxlbmd0aClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmN1cnJlbnRQYWdlSW5kZXggLSAxIDwgdGhpcy5zbGlkZVZpZXdzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGFyZ2V0SW5kZXggPSB0aGlzLmN1cnJlbnRQYWdlSW5kZXggLSAxXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5zY3JvbGxUb1BhZ2VXaXRoSW5kZXgodGFyZ2V0SW5kZXgsIGFuaW1hdGVkKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc2Nyb2xsVG9OZXh0UGFnZShhbmltYXRlZDogYm9vbGVhbikge1xuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuc2xpZGVWaWV3cy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgdmFyIHRhcmdldEluZGV4ID0gdGhpcy5jdXJyZW50UGFnZUluZGV4XG4gICAgXG4gICAgICAgIGlmICh0aGlzLndyYXBBcm91bmQpIHtcbiAgICAgICAgICAgIHRhcmdldEluZGV4ID0gKHRoaXMuY3VycmVudFBhZ2VJbmRleCArIDEpICUgKHRoaXMuc2xpZGVWaWV3cy5sZW5ndGgpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5jdXJyZW50UGFnZUluZGV4ICsgMSA8IHRoaXMuc2xpZGVWaWV3cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRhcmdldEluZGV4ID0gdGhpcy5jdXJyZW50UGFnZUluZGV4ICsgMVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2Nyb2xsVG9QYWdlV2l0aEluZGV4KHRhcmdldEluZGV4LCBhbmltYXRlZClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIHNjcm9sbFRvUGFnZVdpdGhJbmRleCh0YXJnZXRJbmRleDogbnVtYmVyLCBhbmltYXRlZDogYm9vbGVhbiA9IFlFUykge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5fdGFyZ2V0SW5kZXggPSB0YXJnZXRJbmRleFxuICAgICAgICBcbiAgICAgICAgLy8gdGhpcy5fc2xpZGVWaWV3c1t0aGlzLmN1cnJlbnRQYWdlSW5kZXhdLl9zaG91bGRMYXlvdXQgPSBOTztcbiAgICAgICAgLy8gdGhpcy5fc2xpZGVWaWV3c1t0aGlzLl90YXJnZXRJbmRleF0uX3Nob3VsZExheW91dCA9IFlFUztcbiAgICAgICAgXG4gICAgICAgIC8vdGhpcy5fc2xpZGVWaWV3c1t0aGlzLl90YXJnZXRJbmRleF0uaGlkZGVuID0gTk87XG4gICAgICAgIFxuICAgICAgICB0aGlzLndpbGxTY3JvbGxUb1BhZ2VXaXRoSW5kZXgodGFyZ2V0SW5kZXgpXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9pc0FuaW1hdGlvbk9uZ29pbmcgPSBZRVNcbiAgICAgICAgXG4gICAgICAgIC8vdmFyIHByZXZpb3VzVmlldyA9IHRoaXMuX3NsaWRlVmlld3NbdGhpcy5jdXJyZW50UGFnZUluZGV4XTtcbiAgICAgICAgXG4gICAgICAgIGlmIChhbmltYXRlZCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgVUlWaWV3LmFuaW1hdGVWaWV3T3JWaWV3c1dpdGhEdXJhdGlvbkRlbGF5QW5kRnVuY3Rpb24oXG4gICAgICAgICAgICAgICAgdGhpcy5fc2Nyb2xsVmlldy5jb250YWluZXJWaWV3LFxuICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uRHVyYXRpb24sXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHRoaXM6IFVJU2xpZGVTY3JvbGxlclZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlSW5kZXggPSB0YXJnZXRJbmRleFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodGhpczogVUlTbGlkZVNjcm9sbGVyVmlldykge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaWRTY3JvbGxUb1BhZ2VXaXRoSW5kZXgodGFyZ2V0SW5kZXgpXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc0FuaW1hdGlvbk9uZ29pbmcgPSBOT1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy9wcmV2aW91c1ZpZXcuaGlkZGVuID0gWUVTO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFBhZ2VJbmRleCA9IHRhcmdldEluZGV4XG4gICAgICAgICAgICB0aGlzLmRpZFNjcm9sbFRvUGFnZVdpdGhJbmRleCh0YXJnZXRJbmRleClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9wcmV2aW91c1ZpZXcuaGlkZGVuID0gWUVTO1xuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIHdpbGxTY3JvbGxUb1BhZ2VXaXRoSW5kZXgoaW5kZXg6IG51bWJlcikge1xuICAgIFxuICAgICAgICBjb25zdCB0YXJnZXRWaWV3ID0gdGhpcy5zbGlkZVZpZXdzW2luZGV4XVxuICAgIFxuICAgICAgICBpZiAoSVModGFyZ2V0VmlldykgJiYgKHRhcmdldFZpZXcgYXMgYW55KS53aWxsQXBwZWFyICYmICh0YXJnZXRWaWV3IGFzIGFueSkud2lsbEFwcGVhciBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICh0YXJnZXRWaWV3IGFzIGFueSkud2lsbEFwcGVhcigpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgZGlkU2Nyb2xsVG9QYWdlV2l0aEluZGV4KGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgc3RhcnRBbmltYXRpbmcoKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLl9pc0FuaW1hdGluZyA9IFlFU1xuICAgICAgICBcbiAgICAgICAgdGhpcy5fYW5pbWF0aW9uVGltZXIuaW52YWxpZGF0ZSgpXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9hbmltYXRpb25UaW1lciA9IG5ldyBVSVRpbWVyKHRoaXMuYW5pbWF0aW9uRGVsYXkgKyB0aGlzLmFuaW1hdGlvbkR1cmF0aW9uLCBZRVMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zY3JvbGxUb05leHRQYWdlKFlFUylcbiAgICAgICAgICAgIFxuICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBzdG9wQW5pbWF0aW5nKCkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5faXNBbmltYXRpbmcgPSBOT1xuICAgICAgICB0aGlzLl9hbmltYXRpb25UaW1lci5pbnZhbGlkYXRlKClcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIHVwZGF0ZVNsaWRlVmlld3MoKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLl9zY3JvbGxWaWV3LmNvbnRhaW5lclZpZXcuc3Vidmlld3Muc2xpY2UoKS5mb3JFYWNoKGZ1bmN0aW9uIChzdWJ2aWV3LCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgc3Vidmlldy5yZW1vdmVGcm9tU3VwZXJ2aWV3KClcbiAgICAgICAgICAgIFxuICAgICAgICB9KVxuICAgICAgICBcbiAgICAgICAgdGhpcy5wYWdlSW5kaWNhdG9yc1ZpZXcuc3Vidmlld3Muc2xpY2UoKS5mb3JFYWNoKGZ1bmN0aW9uIChzdWJ2aWV3LCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgc3Vidmlldy5yZW1vdmVGcm9tU3VwZXJ2aWV3KClcbiAgICAgICAgICAgIFxuICAgICAgICB9KVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fc2xpZGVWaWV3cy5mb3JFYWNoKGZ1bmN0aW9uICh2aWV3LCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5fc2Nyb2xsVmlldy5hZGRTdWJ2aWV3KHZpZXcpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMucGFnZUluZGljYXRvcnNWaWV3LmFkZFN1YnZpZXcodGhpcy5idXR0b25Gb3JQYWdlSW5kaWNhdG9yV2l0aEluZGV4KGluZGV4KSlcbiAgICAgICAgICAgIFxuICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBkaWRSZWNlaXZlQnJvYWRjYXN0RXZlbnQoZXZlbnQ6IFVJVmlld0Jyb2FkY2FzdEV2ZW50KSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci5kaWRSZWNlaXZlQnJvYWRjYXN0RXZlbnQoZXZlbnQpXG4gICAgICAgIFxuICAgICAgICBpZiAoZXZlbnQubmFtZSA9PSBVSUNvcmUuYnJvYWRjYXN0RXZlbnROYW1lLldpbmRvd0RpZFJlc2l6ZSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlSW5kZXggPSB0aGlzLmN1cnJlbnRQYWdlSW5kZXhcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBzZXQgZnJhbWUoZnJhbWU6IFVJUmVjdGFuZ2xlKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci5mcmFtZSA9IGZyYW1lXG4gICAgICAgIFxuICAgICAgICB0aGlzLmN1cnJlbnRQYWdlSW5kZXggPSB0aGlzLmN1cnJlbnRQYWdlSW5kZXhcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGdldCBmcmFtZSgpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBzdXBlci5mcmFtZVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgbGF5b3V0U3Vidmlld3MoKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlci5sYXlvdXRTdWJ2aWV3cygpXG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5ib3VuZHMuaXNFcXVhbFRvKHRoaXMuX3ByZXZpb3VzTGF5b3V0Qm91bmRzKSkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgY29uc3QgYm91bmRzID0gdGhpcy5ib3VuZHNcbiAgICBcbiAgICAgICAgdGhpcy5fcHJldmlvdXNMYXlvdXRCb3VuZHMgPSBib3VuZHNcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3Njcm9sbFZpZXcuZnJhbWUgPSBib3VuZHNcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5fc2Nyb2xsVmlldy5jb250YWluZXJWaWV3LmZyYW1lID0gYm91bmRzLnJlY3RhbmdsZVdpdGhXaWR0aChib3VuZHMud2lkdGggKlxuICAgICAgICAgICAgdGhpcy5zbGlkZVZpZXdzLmxlbmd0aCkucGVyZm9ybUZ1bmN0aW9uV2l0aFNlbGYoZnVuY3Rpb24gKHRoaXM6IFVJU2xpZGVTY3JvbGxlclZpZXcsIHNlbGY6IFVJUmVjdGFuZ2xlKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHNlbGYub2Zmc2V0QnlQb2ludCh0aGlzLl9zY3JvbGxWaWV3LmNvbnRlbnRPZmZzZXQpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBzZWxmXG4gICAgICAgICAgICBcbiAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fc2xpZGVWaWV3cy5mb3JFYWNoKGZ1bmN0aW9uICh2aWV3LCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmlldy5mcmFtZSA9IGJvdW5kcy5yZWN0YW5nbGVXaXRoWCgodGhpcy5ib3VuZHMud2lkdGggKyAxKSAqIGluZGV4KVxuICAgICAgICAgICAgXG4gICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLmxheW91dFBhZ2VJbmRpY2F0b3JzKClcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBsYXlvdXRQYWdlSW5kaWNhdG9ycygpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMucGFnZUluZGljYXRvcnNWaWV3LmNlbnRlclhJbkNvbnRhaW5lcigpXG4gICAgICAgIHRoaXMucGFnZUluZGljYXRvcnNWaWV3LnN0eWxlLmJvdHRvbSA9IFwiMjBweFwiXG4gICAgICAgIHRoaXMucGFnZUluZGljYXRvcnNWaWV3LnN0eWxlLmhlaWdodCA9IFwiMjBweFwiXG4gICAgICAgIHRoaXMucGFnZUluZGljYXRvcnNWaWV3LnN0eWxlLmRpc3BsYXkgPSBcInRhYmxlLXJvd1wiXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICByZW1vdmVGcm9tU3VwZXJ2aWV3KCkge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHN1cGVyLnJlbW92ZUZyb21TdXBlcnZpZXcoKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5zdG9wQW5pbWF0aW5nKClcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbn1cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuIiwiLy8vPHJlZmVyZW5jZSBwYXRoPVwiVUlPYmplY3QudHNcIi8+XG5cblxuXG5cblxuXG5cblxuXG5cbmNsYXNzIFVJU3RyaW5nRmlsdGVyIGV4dGVuZHMgVUlPYmplY3Qge1xuICAgIFxuICAgIFxuICAgIHN0YXRpYyBfc2hhcmVkV2ViV29ya2VyID0gbmV3IFdvcmtlcihcImNvbXBpbGVkU2NyaXB0cy9VSVN0cmluZ0ZpbHRlcldlYldvcmtlci5qc1wiKVxuICAgIFxuICAgIHN0YXRpYyBfaW5zdGFuY2VOdW1iZXIgPSAtMVxuICAgIFxuICAgIFxuICAgIF9pbnN0YW5jZU51bWJlcjogbnVtYmVyXG4gICAgXG4gICAgX2lzVGhyZWFkQ2xvc2VkID0gTk9cbiAgICBcbiAgICBfd2ViV29ya2VyID0gVUlTdHJpbmdGaWx0ZXIuX3NoYXJlZFdlYldvcmtlclxuICAgIFxuICAgIGNvbnN0cnVjdG9yKHVzZVNlcGFyYXRlV2ViV29ya2VyID0gTk8pIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBzdXBlcigpXG4gICAgICAgIFxuICAgICAgICB0aGlzLl9jbGFzcyA9IFVJU3RyaW5nRmlsdGVyXG4gICAgICAgIHRoaXMuc3VwZXJjbGFzcyA9IFVJT2JqZWN0XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgaWYgKHVzZVNlcGFyYXRlV2ViV29ya2VyKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX3dlYldvcmtlciA9IG5ldyBXb3JrZXIoXCJjb21waWxlZFNjcmlwdHMvVUlTdHJpbmdGaWx0ZXJXZWJXb3JrZXIuanNcIilcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBVSVN0cmluZ0ZpbHRlci5faW5zdGFuY2VOdW1iZXIgPSBVSVN0cmluZ0ZpbHRlci5faW5zdGFuY2VOdW1iZXIgKyAxXG4gICAgICAgIHRoaXMuX2luc3RhbmNlTnVtYmVyID0gVUlTdHJpbmdGaWx0ZXIuX2luc3RhbmNlTnVtYmVyXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgZ2V0IGluc3RhbmNlSWRlbnRpZmllcigpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZU51bWJlclxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgZmlsdGVyRGF0YShcbiAgICAgICAgZmlsdGVyaW5nU3RyaW5nOiBzdHJpbmcsXG4gICAgICAgIGRhdGE6IHN0cmluZ1tdLFxuICAgICAgICBleGNsdWRlZERhdGE6IHN0cmluZ1tdLFxuICAgICAgICBpZGVudGlmaWVyOiBhbnksXG4gICAgICAgIGNvbXBsZXRpb246IChmaWx0ZXJlZERhdGE6IHN0cmluZ1tdLCBmaWx0ZXJlZEluZGV4ZXM6IG51bWJlcltdLCBpZGVudGlmaWVyOiBhbnkpID0+IHZvaWRcbiAgICApIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5faXNUaHJlYWRDbG9zZWQpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy92YXIgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICBcbiAgICAgICAgY29uc3QgaW5zdGFuY2VJZGVudGlmaWVyID0gdGhpcy5pbnN0YW5jZUlkZW50aWZpZXJcbiAgICBcbiAgICAgICAgdGhpcy5fd2ViV29ya2VyLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLmRhdGEuaW5zdGFuY2VJZGVudGlmaWVyID09IGluc3RhbmNlSWRlbnRpZmllcikge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJGaWx0ZXJpbmcgdG9vayBcIiArIChEYXRlLm5vdygpIC0gc3RhcnRUaW1lKSArIFwiIG1zXCIpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbXBsZXRpb24obWVzc2FnZS5kYXRhLmZpbHRlcmVkRGF0YSwgbWVzc2FnZS5kYXRhLmZpbHRlcmVkSW5kZXhlcywgbWVzc2FnZS5kYXRhLmlkZW50aWZpZXIpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fd2ViV29ya2VyLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXCJmaWx0ZXJpbmdTdHJpbmdcIjogZmlsdGVyaW5nU3RyaW5nLFxuICAgICAgICAgICAgXCJkYXRhXCI6IGRhdGEsXG4gICAgICAgICAgICBcImV4Y2x1ZGVkRGF0YVwiOiBleGNsdWRlZERhdGEsXG4gICAgICAgICAgICBcImlkZW50aWZpZXJcIjogaWRlbnRpZmllcixcbiAgICAgICAgICAgIFwiaW5zdGFuY2VJZGVudGlmaWVyXCI6IGluc3RhbmNlSWRlbnRpZmllclxuICAgICAgICAgICAgXG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgZmlsdGVyZWREYXRhKFxuICAgICAgICBmaWx0ZXJpbmdTdHJpbmc6IHN0cmluZyxcbiAgICAgICAgZGF0YTogc3RyaW5nW10sXG4gICAgICAgIGV4Y2x1ZGVkRGF0YTogc3RyaW5nW10gPSBbXSxcbiAgICAgICAgaWRlbnRpZmllcjogYW55ID0gTUFLRV9JRCgpXG4gICAgKSB7XG4gICAgXG4gICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdDogUHJvbWlzZTx7XG4gICAgICAgIFxuICAgICAgICAgICAgZmlsdGVyZWREYXRhOiBzdHJpbmdbXSxcbiAgICAgICAgICAgIGZpbHRlcmVkSW5kZXhlczogbnVtYmVyW10sXG4gICAgICAgICAgICBpZGVudGlmaWVyOiBhbnlcbiAgICAgICAgXG4gICAgICAgIH0+ID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyRGF0YShmaWx0ZXJpbmdTdHJpbmcsIGRhdGEsIGV4Y2x1ZGVkRGF0YSwgaWRlbnRpZmllcixcbiAgICAgICAgICAgICAgICAoZmlsdGVyZWREYXRhLCBmaWx0ZXJlZEluZGV4ZXMsIGZpbHRlcmVkSWRlbnRpZmllcikgPT4ge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyZWRJZGVudGlmaWVyID09IGlkZW50aWZpZXIpIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZERhdGE6IGZpbHRlcmVkRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZEluZGV4ZXM6IGZpbHRlcmVkSW5kZXhlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZGVudGlmaWVyOiBmaWx0ZXJlZElkZW50aWZpZXJcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgfSlcbiAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGNsb3NlVGhyZWFkKCkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5faXNUaHJlYWRDbG9zZWQgPSBZRVNcbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLl93ZWJXb3JrZXIgIT0gVUlTdHJpbmdGaWx0ZXIuX3NoYXJlZFdlYldvcmtlcikge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl93ZWJXb3JrZXIudGVybWluYXRlKClcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxufVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiVUlUZXh0RmllbGQudHNcIiAvPlxuXG5cblxuXG5jbGFzcyBVSVRleHRBcmVhIGV4dGVuZHMgVUlUZXh0RmllbGQge1xuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRJRCwgdmlld0hUTUxFbGVtZW50ID0gbnVsbCkge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIoZWxlbWVudElELCB2aWV3SFRNTEVsZW1lbnQsIFVJVGV4dFZpZXcudHlwZS50ZXh0QXJlYSlcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2NsYXNzID0gVUlUZXh0QXJlYVxuICAgICAgICB0aGlzLnN1cGVyY2xhc3MgPSBVSVRleHRGaWVsZFxuICAgICAgICBcbiAgICAgICAgdGhpcy52aWV3SFRNTEVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwidHlwZVwiKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5zdHlsZS5vdmVyZmxvdyA9IFwiYXV0b1wiXG4gICAgICAgIFxuICAgICAgICB0aGlzLnN0eWxlLndlYmtpdFVzZXJTZWxlY3QgPSBcInRleHRcIlxuICAgICAgICBcbiAgICAgICAgdGhpcy5wYXVzZXNQb2ludGVyRXZlbnRzID0gTk9cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGdldCBhZGRDb250cm9sRXZlbnRUYXJnZXQoKTogVUlWaWV3QWRkQ29udHJvbEV2ZW50VGFyZ2V0T2JqZWN0PHR5cGVvZiBVSVRleHRBcmVhLmNvbnRyb2xFdmVudD4ge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHN1cGVyLmFkZENvbnRyb2xFdmVudFRhcmdldCBhcyBhbnk7XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZ2V0IHZpZXdIVE1MRWxlbWVudCgpOiBIVE1MVGV4dEFyZWFFbGVtZW50IHtcbiAgICAgICAgXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIHN1cGVyLnZpZXdIVE1MRWxlbWVudFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG59XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iLCIvLy88cmVmZXJlbmNlIHBhdGg9XCJVSU9iamVjdC50c1wiLz5cblxuXG5cblxuXG5cblxuXG5cbmNsYXNzIFVJVGltZXIgZXh0ZW5kcyBVSU9iamVjdCB7XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgX2ludGVydmFsSUQ6IG51bWJlclxuICAgIFxuICAgIGlzVmFsaWQ6IGJvb2xlYW4gPSBZRVNcbiAgICBcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgaW50ZXJ2YWw6IG51bWJlciwgcHVibGljIHJlcGVhdHM6IGJvb2xlYW4sIHB1YmxpYyB0YXJnZXQ6IEZ1bmN0aW9uKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlcigpXG4gICAgICAgIFxuICAgICAgICB0aGlzLnN1cGVyY2xhc3MgPSBVSU9iamVjdFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2NoZWR1bGUoKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBzY2hlZHVsZSgpIHtcbiAgICBcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5yZXBlYXRzID09IE5PKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudGFyZ2V0KClcbiAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgXG4gICAgICAgIHRoaXMuX2ludGVydmFsSUQgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoY2FsbGJhY2ssIHRoaXMuaW50ZXJ2YWwgKiAxMDAwKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgcmVzY2hlZHVsZSgpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuaW52YWxpZGF0ZSgpXG4gICAgICAgIHRoaXMuc2NoZWR1bGUoKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgZmlyZSgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVwZWF0cyA9PSBOTykge1xuICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlKClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVzY2hlZHVsZSgpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50YXJnZXQoKVxuICAgIH1cbiAgICBcbiAgICBpbnZhbGlkYXRlKCkge1xuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsSUQpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuaXNWYWxpZCA9IE5PXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbn1cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iXX0=